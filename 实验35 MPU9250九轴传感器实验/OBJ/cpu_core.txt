; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\cpu_core.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\cpu_core.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\OBJ -I..\USER -I..\HALLIB\STM32F7xx_HAL_Driver\Inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\SDRAM -I..\HARDWARE\IIC -I..\HARDWARE\24CXX -I..\HARDWARE\MPU9250 -I..\HARDWARE\DHT11 -I..\HARDWARE\MPU -I..\USMART -I..\DMP\driver\eMPL -I..\DMP\driver\include -I..\DMP\driver\stm32L -I..\DMP\eMPL-hal -I..\DMP\mllite -I..\DMP\mpl -I..\UCOSIII -I..\UCOSIII\UCOS-BSP -I..\UCOSIII\UCOS-CONFIG -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\uC-CPU\ARM-Cortex-M4\RealView -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-CPU -I..\HARDWARE\MY_FUNCTION -I..\USER -I..\HARDWARE\CRC -I..\HARDWARE\DMA -I..\HARDWARE\HEART_BEAT -I..\HARDWARE\RECEIVE_ANALYZE -I..\HARDWARE\FEED_BACK -I..\HARDWARE\DATA -I"D:\1111111\32F4\Slam car\实验35 MPU9250九轴传感器实验\USER\RTE" -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0 -IF:\Keil_v5\ARM\CMSIS\Include -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__UVISION_VERSION=514 -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=..\obj\cpu_core.crf ..\UCOSIII\uC-CPU\cpu_core.c]
                          THUMB

                          AREA ||i.CPU_CntLeadZeros08||, CODE, READONLY, ALIGN=1

                  CPU_CntLeadZeros08 PROC
;;;1207   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_08)
;;;1208   CPU_DATA  CPU_CntLeadZeros08 (CPU_INT08U  val)
000000  b570              PUSH     {r4-r6,lr}
;;;1209   {
000002  4605              MOV      r5,r0
;;;1210   #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1211           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08)))
;;;1212       CPU_DATA  ix;
;;;1213   #endif
;;;1214       CPU_DATA  nbr_lead_zeros;
;;;1215   
;;;1216                                                                                   /* ---------- ASM-OPTIMIZED ----------- */
;;;1217   #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1218        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08))
;;;1219       nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       CPU_CntLeadZeros
00000a  4604              MOV      r4,r0
;;;1220       nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_08) * DEF_OCTET_NBR_BITS;
00000c  3c18              SUBS     r4,r4,#0x18
;;;1221   
;;;1222   
;;;1223   #else                                                                           /* ----------- C-OPTIMIZED ------------ */
;;;1224                                                                                   /* Chk bits [07:00] :                   */
;;;1225                                                                                   /* .. Nbr lead zeros =               .. */
;;;1226       ix              = (CPU_DATA)(val);                                          /* .. lookup tbl ix  = 'val' >>  0 bits */
;;;1227       nbr_lead_zeros  = (CPU_DATA)(CPU_CntLeadZerosTbl[ix]);                      /* .. plus nbr msb lead zeros =  0 bits.*/
;;;1228   #endif
;;;1229   
;;;1230   
;;;1231       return (nbr_lead_zeros);
00000e  4620              MOV      r0,r4
;;;1232   }
000010  bd70              POP      {r4-r6,pc}
;;;1233   #endif
                          ENDP


                          AREA ||i.CPU_CntLeadZeros16||, CODE, READONLY, ALIGN=1

                  CPU_CntLeadZeros16 PROC
;;;1274   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_16)
;;;1275   CPU_DATA  CPU_CntLeadZeros16 (CPU_INT16U  val)
000000  b570              PUSH     {r4-r6,lr}
;;;1276   {
000002  4605              MOV      r5,r0
;;;1277   #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1278           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16)))
;;;1279       CPU_DATA  ix;
;;;1280   #endif
;;;1281       CPU_DATA  nbr_lead_zeros;
;;;1282   
;;;1283                                                                                   /* ---------- ASM-OPTIMIZED ----------- */
;;;1284   #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1285        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16))
;;;1286       nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       CPU_CntLeadZeros
00000a  4604              MOV      r4,r0
;;;1287       nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_16) * DEF_OCTET_NBR_BITS;
00000c  3c10              SUBS     r4,r4,#0x10
;;;1288   
;;;1289   
;;;1290   #else                                                                           /* ----------- C-OPTIMIZED ------------ */
;;;1291       if (val > 0x00FFu) {                                                        /* Chk bits [15:08] :                   */
;;;1292                                                                                   /* .. Nbr lead zeros =               .. */
;;;1293           ix             = (CPU_DATA)((CPU_DATA)val >> 8u);                       /* .. lookup tbl ix  = 'val' >>  8 bits */
;;;1294           nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix]);                   /* .. plus nbr msb lead zeros =  0 bits.*/
;;;1295   
;;;1296       } else {                                                                    /* Chk bits [07:00] :                   */
;;;1297                                                                                   /* .. Nbr lead zeros =               .. */
;;;1298           ix             = (CPU_DATA)(val);                                       /* .. lookup tbl ix  = 'val' >>  0 bits */
;;;1299           nbr_lead_zeros = (CPU_DATA)((CPU_DATA)CPU_CntLeadZerosTbl[ix] +  8u);   /* .. plus nbr msb lead zeros =  8 bits.*/
;;;1300       }
;;;1301   #endif
;;;1302   
;;;1303   
;;;1304       return (nbr_lead_zeros);
00000e  4620              MOV      r0,r4
;;;1305   }
000010  bd70              POP      {r4-r6,pc}
;;;1306   #endif
                          ENDP


                          AREA ||i.CPU_CntLeadZeros32||, CODE, READONLY, ALIGN=1

                  CPU_CntLeadZeros32 PROC
;;;1347   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_32)
;;;1348   CPU_DATA  CPU_CntLeadZeros32 (CPU_INT32U  val)
000000  b570              PUSH     {r4-r6,lr}
;;;1349   {
000002  4605              MOV      r5,r0
;;;1350   #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1351           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32)))
;;;1352       CPU_DATA  ix;
;;;1353   #endif
;;;1354       CPU_DATA  nbr_lead_zeros;
;;;1355   
;;;1356                                                                                   /* ---------- ASM-OPTIMIZED ----------- */
;;;1357   #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1358        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32))
;;;1359       nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       CPU_CntLeadZeros
00000a  4604              MOV      r4,r0
;;;1360       nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_32) * DEF_OCTET_NBR_BITS;
00000c  bf00              NOP      
;;;1361   
;;;1362   
;;;1363   #else                                                                           /* ----------- C-OPTIMIZED ------------ */
;;;1364       if (val > 0x0000FFFFu) {
;;;1365           if (val > 0x00FFFFFFu) {                                                /* Chk bits [31:24] :                   */
;;;1366                                                                                   /* .. Nbr lead zeros =               .. */
;;;1367               ix             = (CPU_DATA)((CPU_DATA)(val >> 24u));                /* .. lookup tbl ix  = 'val' >> 24 bits */
;;;1368               nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix]);               /* .. plus nbr msb lead zeros =  0 bits.*/
;;;1369   
;;;1370           } else {                                                                /* Chk bits [23:16] :                   */
;;;1371                                                                                   /* .. Nbr lead zeros =               .. */
;;;1372               ix             = (CPU_DATA)((CPU_DATA)(val >> 16u));                /* .. lookup tbl ix  = 'val' >> 16 bits */
;;;1373               nbr_lead_zeros = (CPU_DATA)((CPU_DATA)CPU_CntLeadZerosTbl[ix] +  8u);/* .. plus nbr msb lead zeros =  8 bits.*/
;;;1374           }
;;;1375   
;;;1376       } else {
;;;1377           if (val > 0x000000FFu) {                                                /* Chk bits [15:08] :                   */
;;;1378                                                                                   /* .. Nbr lead zeros =               .. */
;;;1379               ix             = (CPU_DATA)((CPU_DATA)(val >>  8u));                /* .. lookup tbl ix  = 'val' >>  8 bits */
;;;1380               nbr_lead_zeros = (CPU_DATA)((CPU_DATA)CPU_CntLeadZerosTbl[ix] + 16u);/* .. plus nbr msb lead zeros = 16 bits.*/
;;;1381   
;;;1382           } else {                                                                /* Chk bits [07:00] :                   */
;;;1383                                                                                   /* .. Nbr lead zeros =               .. */
;;;1384               ix             = (CPU_DATA)((CPU_DATA)(val >>  0u));                /* .. lookup tbl ix  = 'val' >>  0 bits */
;;;1385               nbr_lead_zeros = (CPU_DATA)((CPU_DATA)CPU_CntLeadZerosTbl[ix] + 24u);/* .. plus nbr msb lead zeros = 24 bits.*/
;;;1386           }
;;;1387       }
;;;1388   #endif
;;;1389   
;;;1390   
;;;1391       return (nbr_lead_zeros);
00000e  4620              MOV      r0,r4
;;;1392   }
000010  bd70              POP      {r4-r6,pc}
;;;1393   #endif
                          ENDP


                          AREA ||i.CPU_CntLeadZeros64||, CODE, READONLY, ALIGN=2

                  CPU_CntLeadZeros64 PROC
;;;1434   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_64)
;;;1435   CPU_DATA  CPU_CntLeadZeros64 (CPU_INT64U  val)
000000  b530              PUSH     {r4,r5,lr}
;;;1436   {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;1437   #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1438           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64)))
;;;1439       CPU_DATA  ix;
;;;1440   #endif
;;;1441       CPU_DATA  nbr_lead_zeros;
;;;1442   
;;;1443                                                                                   /* ---------- ASM-OPTIMIZED ----------- */
;;;1444   #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1445        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64))
;;;1446       nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
;;;1447       nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_64) * DEF_OCTET_NBR_BITS;
;;;1448   
;;;1449   
;;;1450   #else                                                                           /* ----------- C-OPTIMIZED ------------ */
;;;1451       if (val > 0x00000000FFFFFFFFu) {
000006  2400              MOVS     r4,#0
000008  f1d235ff          RSBS     r5,r2,#0xffffffff
00000c  419c              SBCS     r4,r4,r3
00000e  d226              BCS      |L4.94|
;;;1452           if (val > 0x0000FFFFFFFFFFFFu) {
000010  f64f74ff          MOV      r4,#0xffff
000014  f1d235ff          RSBS     r5,r2,#0xffffffff
000018  419c              SBCS     r4,r4,r3
00001a  d20f              BCS      |L4.60|
;;;1453               if (val > 0x00FFFFFFFFFFFFFFu) {                                    /* Chk bits [63:56] :                   */
00001c  f06f447f          MVN      r4,#0xff000000
000020  f1d235ff          RSBS     r5,r2,#0xffffffff
000024  419c              SBCS     r4,r4,r3
000026  d203              BCS      |L4.48|
;;;1454                                                                                   /* .. Nbr lead zeros =               .. */
;;;1455                   ix             = (CPU_DATA)((CPU_INT64U)val >> 56u);            /* .. lookup tbl ix  = 'val' >> 56 bits */
000028  0e19              LSRS     r1,r3,#24
;;;1456                   nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix]);           /* .. plus nbr msb lead zeros =  0 bits.*/
00002a  4c24              LDR      r4,|L4.188|
00002c  5c60              LDRB     r0,[r4,r1]
00002e  e044              B        |L4.186|
                  |L4.48|
;;;1457   
;;;1458               } else {                                                            /* Chk bits [55:48] :                   */
;;;1459                                                                                   /* .. Nbr lead zeros =               .. */
;;;1460                   ix             = (CPU_DATA)((CPU_INT64U)val >> 48u);            /* .. lookup tbl ix  = 'val' >> 48 bits */
000030  0c19              LSRS     r1,r3,#16
;;;1461                   nbr_lead_zeros = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] +  8u);/* .. plus nbr msb lead zeros =  8 bits.*/
000032  4c22              LDR      r4,|L4.188|
000034  5c64              LDRB     r4,[r4,r1]
000036  2508              MOVS     r5,#8
000038  1960              ADDS     r0,r4,r5
00003a  e03e              B        |L4.186|
                  |L4.60|
;;;1462               }
;;;1463   
;;;1464           } else {
;;;1465               if (val > 0x000000FFFFFFFFFFu) {                                    /* Chk bits [47:40] :                   */
00003c  24ff              MOVS     r4,#0xff
00003e  f1d235ff          RSBS     r5,r2,#0xffffffff
000042  419c              SBCS     r4,r4,r3
000044  d205              BCS      |L4.82|
;;;1466                                                                                   /* .. Nbr lead zeros =               .. */
;;;1467                   ix             = (CPU_DATA)((CPU_INT64U)val >> 40u);            /* .. lookup tbl ix  = 'val' >> 40 bits */
000046  0a19              LSRS     r1,r3,#8
;;;1468                   nbr_lead_zeros = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 16u);/* .. plus nbr msb lead zeros = 16 bits.*/
000048  4c1c              LDR      r4,|L4.188|
00004a  5c64              LDRB     r4,[r4,r1]
00004c  2510              MOVS     r5,#0x10
00004e  1960              ADDS     r0,r4,r5
000050  e033              B        |L4.186|
                  |L4.82|
;;;1469   
;;;1470               } else {                                                            /* Chk bits [39:32] :                   */
;;;1471                                                                                   /* .. Nbr lead zeros =               .. */
;;;1472                   ix             = (CPU_DATA)((CPU_INT64U)val >> 32u);            /* .. lookup tbl ix  = 'val' >> 32 bits */
000052  4619              MOV      r1,r3
;;;1473                   nbr_lead_zeros = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 24u);/* .. plus nbr msb lead zeros = 24 bits.*/
000054  4c19              LDR      r4,|L4.188|
000056  5c64              LDRB     r4,[r4,r1]
000058  2518              MOVS     r5,#0x18
00005a  1960              ADDS     r0,r4,r5
00005c  e02d              B        |L4.186|
                  |L4.94|
;;;1474               }
;;;1475           }
;;;1476   
;;;1477       } else {
;;;1478           if (val > 0x000000000000FFFFu) {
00005e  f64f75ff          MOV      r5,#0xffff
000062  2400              MOVS     r4,#0
000064  1aad              SUBS     r5,r5,r2
000066  419c              SBCS     r4,r4,r3
000068  d215              BCS      |L4.150|
;;;1479               if (val > 0x0000000000FFFFFFu) {                                    /* Chk bits [31:24] :                   */
00006a  f06f457f          MVN      r5,#0xff000000
00006e  2400              MOVS     r4,#0
000070  1aad              SUBS     r5,r5,r2
000072  419c              SBCS     r4,r4,r3
000074  d207              BCS      |L4.134|
;;;1480                                                                                   /* .. Nbr lead zeros =               .. */
;;;1481                   ix             = (CPU_DATA)((CPU_INT64U)val >> 24u);              /* .. lookup tbl ix  = 'val' >> 24 bits */
000076  0e14              LSRS     r4,r2,#24
000078  ea442103          ORR      r1,r4,r3,LSL #8
;;;1482                   nbr_lead_zeros = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 32u);/* .. plus nbr msb lead zeros = 32 bits.*/
00007c  4c0f              LDR      r4,|L4.188|
00007e  5c64              LDRB     r4,[r4,r1]
000080  2520              MOVS     r5,#0x20
000082  1960              ADDS     r0,r4,r5
000084  e019              B        |L4.186|
                  |L4.134|
;;;1483   
;;;1484               } else {                                                            /* Chk bits [23:16] :                   */
;;;1485                                                                                   /* .. Nbr lead zeros =               .. */
;;;1486                   ix             = (CPU_DATA)((CPU_INT64U)val >> 16u);            /* .. lookup tbl ix  = 'val' >> 16 bits */
000086  0c14              LSRS     r4,r2,#16
000088  ea444103          ORR      r1,r4,r3,LSL #16
;;;1487                   nbr_lead_zeros = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 40u);/* .. plus nbr msb lead zeros = 40 bits.*/
00008c  4c0b              LDR      r4,|L4.188|
00008e  5c64              LDRB     r4,[r4,r1]
000090  2528              MOVS     r5,#0x28
000092  1960              ADDS     r0,r4,r5
000094  e011              B        |L4.186|
                  |L4.150|
;;;1488               }
;;;1489   
;;;1490           } else {
;;;1491               if (val > 0x00000000000000FFu) {                                    /* Chk bits [15:08] :                   */
000096  2400              MOVS     r4,#0
000098  f1d205ff          RSBS     r5,r2,#0xff
00009c  419c              SBCS     r4,r4,r3
00009e  d207              BCS      |L4.176|
;;;1492                                                                                   /* .. Nbr lead zeros =               .. */
;;;1493                   ix             = (CPU_DATA)((CPU_INT64U)val >>  8u);            /* .. lookup tbl ix  = 'val' >>  8 bits */
0000a0  0a14              LSRS     r4,r2,#8
0000a2  ea446103          ORR      r1,r4,r3,LSL #24
;;;1494                   nbr_lead_zeros = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 48u);/* .. plus nbr msb lead zeros = 48 bits.*/
0000a6  4c05              LDR      r4,|L4.188|
0000a8  5c64              LDRB     r4,[r4,r1]
0000aa  2530              MOVS     r5,#0x30
0000ac  1960              ADDS     r0,r4,r5
0000ae  e004              B        |L4.186|
                  |L4.176|
;;;1495   
;;;1496               } else {                                                            /* Chk bits [07:00] :                   */
;;;1497                                                                                   /* .. Nbr lead zeros =               .. */
;;;1498                   ix             = (CPU_DATA)(val);                               /* .. lookup tbl ix  = 'val' >>  0 bits */
0000b0  4611              MOV      r1,r2
;;;1499                   nbr_lead_zeros = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 56u);/* .. plus nbr msb lead zeros = 56 bits.*/
0000b2  4c02              LDR      r4,|L4.188|
0000b4  5c64              LDRB     r4,[r4,r1]
0000b6  2538              MOVS     r5,#0x38
0000b8  1960              ADDS     r0,r4,r5
                  |L4.186|
;;;1500               }
;;;1501           }
;;;1502       }
;;;1503   #endif
;;;1504   
;;;1505   
;;;1506       return (nbr_lead_zeros);
;;;1507   }
0000ba  bd30              POP      {r4,r5,pc}
;;;1508   #endif
                          ENDP

                  |L4.188|
                          DCD      CPU_CntLeadZerosTbl

                          AREA ||i.CPU_CntTrailZeros08||, CODE, READONLY, ALIGN=1

                  CPU_CntTrailZeros08 PROC
;;;1713   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_08)
;;;1714   CPU_DATA  CPU_CntTrailZeros08 (CPU_INT08U  val)
000000  b570              PUSH     {r4-r6,lr}
;;;1715   {
000002  4604              MOV      r4,r0
;;;1716   #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;1717           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08)))
;;;1718       CPU_INT08U  val_bit_mask;
;;;1719       CPU_DATA    nbr_lead_zeros;
;;;1720   #endif
;;;1721       CPU_DATA    nbr_trail_zeros;
;;;1722   
;;;1723   
;;;1724       if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see Note #3).            */
000004  b90c              CBNZ     r4,|L5.10|
;;;1725           return (CPU_WORD_SIZE_08 * DEF_OCTET_NBR_BITS);
000006  2008              MOVS     r0,#8
                  |L5.8|
;;;1726       }
;;;1727   
;;;1728                                                                   /* ------------------ ASM-OPTIMIZED ------------------- */
;;;1729   #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;1730        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08))
;;;1731       nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
;;;1732   
;;;1733   #else                                                           /* ------------------- C-OPTIMIZED -------------------- */
;;;1734       val_bit_mask    = val & ((CPU_INT08U)~val + 1u);            /* Zero/clr all bits EXCEPT least-sig set bit.          */
;;;1735       nbr_lead_zeros  = CPU_CntLeadZeros08(val_bit_mask);         /* Cnt  nbr lead  0s.                                   */
;;;1736                                                                   /* Calc nbr trail 0s = (nbr val bits - 1) - nbr lead 0s.*/
;;;1737       nbr_trail_zeros = ((CPU_WORD_SIZE_08 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
;;;1738   #endif
;;;1739   
;;;1740   
;;;1741       return (nbr_trail_zeros);
;;;1742   }
000008  bd70              POP      {r4-r6,pc}
                  |L5.10|
00000a  4620              MOV      r0,r4                 ;1731
00000c  f7fffffe          BL       CPU_CntTrailZeros
000010  4605              MOV      r5,r0                 ;1731
000012  4628              MOV      r0,r5                 ;1741
000014  e7f8              B        |L5.8|
;;;1743   #endif
                          ENDP


                          AREA ||i.CPU_CntTrailZeros16||, CODE, READONLY, ALIGN=1

                  CPU_CntTrailZeros16 PROC
;;;1817   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_16)
;;;1818   CPU_DATA  CPU_CntTrailZeros16 (CPU_INT16U  val)
000000  b570              PUSH     {r4-r6,lr}
;;;1819   {
000002  4604              MOV      r4,r0
;;;1820   #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;1821           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16)))
;;;1822       CPU_INT16U  val_bit_mask;
;;;1823       CPU_DATA    nbr_lead_zeros;
;;;1824   #endif
;;;1825       CPU_DATA    nbr_trail_zeros;
;;;1826   
;;;1827   
;;;1828       if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see Note #3).            */
000004  b90c              CBNZ     r4,|L6.10|
;;;1829           return (CPU_WORD_SIZE_16 * DEF_OCTET_NBR_BITS);
000006  2010              MOVS     r0,#0x10
                  |L6.8|
;;;1830       }
;;;1831   
;;;1832                                                                   /* ------------------ ASM-OPTIMIZED ------------------- */
;;;1833   #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;1834        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16))
;;;1835       nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
;;;1836   
;;;1837   #else                                                           /* ------------------- C-OPTIMIZED -------------------- */
;;;1838       val_bit_mask    = val & ((CPU_INT16U)~val + 1u);            /* Zero/clr all bits EXCEPT least-sig set bit.          */
;;;1839       nbr_lead_zeros  = CPU_CntLeadZeros16(val_bit_mask);         /* Cnt  nbr lead  0s.                                   */
;;;1840                                                                   /* Calc nbr trail 0s = (nbr val bits - 1) - nbr lead 0s.*/
;;;1841       nbr_trail_zeros = ((CPU_WORD_SIZE_16 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
;;;1842   #endif
;;;1843   
;;;1844   
;;;1845       return (nbr_trail_zeros);
;;;1846   }
000008  bd70              POP      {r4-r6,pc}
                  |L6.10|
00000a  4620              MOV      r0,r4                 ;1835
00000c  f7fffffe          BL       CPU_CntTrailZeros
000010  4605              MOV      r5,r0                 ;1835
000012  4628              MOV      r0,r5                 ;1845
000014  e7f8              B        |L6.8|
;;;1847   #endif
                          ENDP


                          AREA ||i.CPU_CntTrailZeros32||, CODE, READONLY, ALIGN=1

                  CPU_CntTrailZeros32 PROC
;;;1921   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_32)
;;;1922   CPU_DATA  CPU_CntTrailZeros32 (CPU_INT32U  val)
000000  b570              PUSH     {r4-r6,lr}
;;;1923   {
000002  4604              MOV      r4,r0
;;;1924   #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;1925           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32)))
;;;1926       CPU_INT32U  val_bit_mask;
;;;1927       CPU_DATA    nbr_lead_zeros;
;;;1928   #endif
;;;1929       CPU_DATA    nbr_trail_zeros;
;;;1930   
;;;1931   
;;;1932       if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see Note #3).            */
000004  b90c              CBNZ     r4,|L7.10|
;;;1933           return (CPU_WORD_SIZE_32 * DEF_OCTET_NBR_BITS);
000006  2020              MOVS     r0,#0x20
                  |L7.8|
;;;1934       }
;;;1935   
;;;1936                                                                   /* ------------------ ASM-OPTIMIZED ------------------- */
;;;1937   #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;1938        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32))
;;;1939       nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
;;;1940   
;;;1941   #else                                                           /* ------------------- C-OPTIMIZED -------------------- */
;;;1942       val_bit_mask    = val & ((CPU_INT32U)~val + 1u);            /* Zero/clr all bits EXCEPT least-sig set bit.          */
;;;1943       nbr_lead_zeros  = CPU_CntLeadZeros32(val_bit_mask);         /* Cnt  nbr lead  0s.                                   */
;;;1944                                                                   /* Calc nbr trail 0s = (nbr val bits - 1) - nbr lead 0s.*/
;;;1945       nbr_trail_zeros = ((CPU_WORD_SIZE_32 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
;;;1946   #endif
;;;1947   
;;;1948   
;;;1949       return (nbr_trail_zeros);
;;;1950   }
000008  bd70              POP      {r4-r6,pc}
                  |L7.10|
00000a  4620              MOV      r0,r4                 ;1939
00000c  f7fffffe          BL       CPU_CntTrailZeros
000010  4605              MOV      r5,r0                 ;1939
000012  4628              MOV      r0,r5                 ;1949
000014  e7f8              B        |L7.8|
;;;1951   #endif
                          ENDP


                          AREA ||i.CPU_CntTrailZeros64||, CODE, READONLY, ALIGN=1

                  CPU_CntTrailZeros64 PROC
;;;2025   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_64)
;;;2026   CPU_DATA  CPU_CntTrailZeros64 (CPU_INT64U  val)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;2027   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;2028   #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;2029           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64)))
;;;2030       CPU_INT64U  val_bit_mask;
;;;2031       CPU_DATA    nbr_lead_zeros;
;;;2032   #endif
;;;2033       CPU_DATA    nbr_trail_zeros;
;;;2034   
;;;2035   
;;;2036       if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see Note #3).            */
000008  2100              MOVS     r1,#0
00000a  ea840001          EOR      r0,r4,r1
00000e  4069              EORS     r1,r1,r5
000010  4308              ORRS     r0,r0,r1
000012  d102              BNE      |L8.26|
;;;2037           return (CPU_WORD_SIZE_64 * DEF_OCTET_NBR_BITS);
000014  2040              MOVS     r0,#0x40
                  |L8.22|
;;;2038       }
;;;2039   
;;;2040                                                                   /* ------------------ ASM-OPTIMIZED ------------------- */
;;;2041   #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;2042        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64))
;;;2043       nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
;;;2044   
;;;2045   #else                                                           /* ------------------- C-OPTIMIZED -------------------- */
;;;2046       val_bit_mask    = val & ((CPU_INT64U)~val + 1u);            /* Zero/clr all bits EXCEPT least-sig set bit.          */
;;;2047       nbr_lead_zeros  = CPU_CntLeadZeros64(val_bit_mask);         /* Cnt  nbr lead  0s.                                   */
;;;2048                                                                   /* Calc nbr trail 0s = (nbr val bits - 1) - nbr lead 0s.*/
;;;2049       nbr_trail_zeros = ((CPU_WORD_SIZE_64 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
;;;2050   #endif
;;;2051   
;;;2052   
;;;2053       return (nbr_trail_zeros);
;;;2054   }
000016  e8bd83f0          POP      {r4-r9,pc}
                  |L8.26|
00001a  43e2              MVNS     r2,r4                 ;2046
00001c  43e8              MVNS     r0,r5                 ;2046
00001e  1c52              ADDS     r2,r2,#1              ;2046
000020  f1400100          ADC      r1,r0,#0              ;2046
000024  ea020604          AND      r6,r2,r4              ;2046
000028  ea010705          AND      r7,r1,r5              ;2046
00002c  4630              MOV      r0,r6                 ;2047
00002e  4639              MOV      r1,r7                 ;2047
000030  f7fffffe          BL       CPU_CntLeadZeros64
000034  4680              MOV      r8,r0                 ;2047
000036  f1c8093f          RSB      r9,r8,#0x3f           ;2049
00003a  4648              MOV      r0,r9                 ;2053
00003c  e7eb              B        |L8.22|
;;;2055   #endif
                          ENDP


                          AREA ||i.CPU_Init||, CODE, READONLY, ALIGN=1

                  CPU_Init PROC
;;;205    
;;;206    void  CPU_Init (void)
000000  b510              PUSH     {r4,lr}
;;;207    {
;;;208                                                                    /* --------------------- INIT TS ---------------------- */
;;;209    #if ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
;;;210         (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
;;;211        CPU_TS_Init();                                              /* See Note #3a.                                        */
000002  f7fffffe          BL       CPU_TS_Init
;;;212    #endif
;;;213                                                                    /* -------------- INIT INT DIS TIME MEAS -------------- */
;;;214    #ifdef  CPU_CFG_INT_DIS_MEAS_EN
;;;215        CPU_IntDisMeasInit();                                       /* See Note #3b.                                        */
000006  f7fffffe          BL       CPU_IntDisMeasInit
;;;216    #endif
;;;217    
;;;218                                                                    /* ------------------ INIT CPU NAME ------------------- */
;;;219    #if (CPU_CFG_NAME_EN == DEF_ENABLED)
;;;220         CPU_NameInit();
00000a  f7fffffe          BL       CPU_NameInit
;;;221    #endif
;;;222    
;;;223    #if (CPU_CFG_CACHE_MGMT_EN == DEF_ENABLED)
;;;224         CPU_Cache_Init();
;;;225    #endif
;;;226    }
00000e  bd10              POP      {r4,pc}
;;;227    
                          ENDP


                          AREA ||i.CPU_IntDisMeasInit||, CODE, READONLY, ALIGN=2

                  CPU_IntDisMeasInit PROC
;;;2238   #ifdef  CPU_CFG_INT_DIS_MEAS_EN
;;;2239   static  void  CPU_IntDisMeasInit (void)
000000  b570              PUSH     {r4-r6,lr}
;;;2240   {
;;;2241       CPU_TS_TMR  time_meas_tot_cnts;
;;;2242       CPU_INT16U  i;
;;;2243       CPU_SR_ALLOC();
000002  2600              MOVS     r6,#0
;;;2244   
;;;2245                                                                   /* ----------- INIT INT DIS TIME MEAS CTRLS ----------- */
;;;2246       CPU_IntDisMeasCtr         = 0u;
000004  2000              MOVS     r0,#0
000006  4918              LDR      r1,|L10.104|
000008  8008              STRH     r0,[r1,#0]
;;;2247       CPU_IntDisNestCtr         = 0u;
00000a  4918              LDR      r1,|L10.108|
00000c  8008              STRH     r0,[r1,#0]
;;;2248       CPU_IntDisMeasStart_cnts  = 0u;
00000e  4918              LDR      r1,|L10.112|
000010  6008              STR      r0,[r1,#0]  ; CPU_IntDisMeasStart_cnts
;;;2249       CPU_IntDisMeasStop_cnts   = 0u;
000012  4918              LDR      r1,|L10.116|
000014  6008              STR      r0,[r1,#0]  ; CPU_IntDisMeasStop_cnts
;;;2250       CPU_IntDisMeasMaxCur_cnts = 0u;
000016  4918              LDR      r1,|L10.120|
000018  6008              STR      r0,[r1,#0]  ; CPU_IntDisMeasMaxCur_cnts
;;;2251       CPU_IntDisMeasMax_cnts    = 0u;
00001a  4918              LDR      r1,|L10.124|
00001c  6008              STR      r0,[r1,#0]  ; CPU_IntDisMeasMax_cnts
;;;2252       CPU_IntDisMeasOvrhd_cnts  = 0u;
00001e  4918              LDR      r1,|L10.128|
000020  6008              STR      r0,[r1,#0]  ; CPU_IntDisMeasOvrhd_cnts
;;;2253   
;;;2254                                                                   /* ----------- CALC INT DIS TIME MEAS OVRHD ----------- */
;;;2255       time_meas_tot_cnts = 0u;
000022  2400              MOVS     r4,#0
;;;2256       CPU_INT_DIS();                                              /* Ints MUST be dis'd for ovrhd calc (see Note #3b).    */
000024  bf00              NOP      
000026  f7fffffe          BL       CPU_SR_Save
00002a  4606              MOV      r6,r0
00002c  bf00              NOP      
;;;2257       for (i = 0u; i < CPU_CFG_INT_DIS_MEAS_OVRHD_NBR; i++) {
00002e  2500              MOVS     r5,#0
000030  e00b              B        |L10.74|
                  |L10.50|
;;;2258           CPU_IntDisMeasMaxCur_cnts = 0u;
000032  2000              MOVS     r0,#0
000034  4910              LDR      r1,|L10.120|
000036  6008              STR      r0,[r1,#0]  ; CPU_IntDisMeasMaxCur_cnts
;;;2259           CPU_IntDisMeasStart();                                  /* Perform multiple consecutive start/stop time meas's  */
000038  f7fffffe          BL       CPU_IntDisMeasStart
;;;2260           CPU_IntDisMeasStop();
00003c  f7fffffe          BL       CPU_IntDisMeasStop
;;;2261           time_meas_tot_cnts += CPU_IntDisMeasMaxCur_cnts;        /* ...       & sum time meas max's                  ... */
000040  480d              LDR      r0,|L10.120|
000042  6800              LDR      r0,[r0,#0]  ; CPU_IntDisMeasMaxCur_cnts
000044  4404              ADD      r4,r4,r0
000046  1c68              ADDS     r0,r5,#1              ;2257
000048  b285              UXTH     r5,r0                 ;2257
                  |L10.74|
00004a  2d00              CMP      r5,#0                 ;2257
00004c  d0f1              BEQ      |L10.50|
;;;2262       }
;;;2263                                                                   /* ... to calc avg time meas ovrhd (see Note #3a).      */
;;;2264       CPU_IntDisMeasOvrhd_cnts  = (time_meas_tot_cnts + (CPU_CFG_INT_DIS_MEAS_OVRHD_NBR / 2u))
00004e  480c              LDR      r0,|L10.128|
000050  6004              STR      r4,[r0,#0]  ; CPU_IntDisMeasOvrhd_cnts
;;;2265                                                       /  CPU_CFG_INT_DIS_MEAS_OVRHD_NBR;
;;;2266       CPU_IntDisMeasMaxCur_cnts =  0u;                            /* Reset max ints dis'd times.                          */
000052  2000              MOVS     r0,#0
000054  4908              LDR      r1,|L10.120|
000056  6008              STR      r0,[r1,#0]  ; CPU_IntDisMeasMaxCur_cnts
;;;2267       CPU_IntDisMeasMax_cnts    =  0u;
000058  4908              LDR      r1,|L10.124|
00005a  6008              STR      r0,[r1,#0]  ; CPU_IntDisMeasMax_cnts
;;;2268       CPU_INT_EN();
00005c  bf00              NOP      
00005e  4630              MOV      r0,r6
000060  f7fffffe          BL       CPU_SR_Restore
000064  bf00              NOP      
;;;2269   }
000066  bd70              POP      {r4-r6,pc}
;;;2270   #endif
                          ENDP

                  |L10.104|
                          DCD      CPU_IntDisMeasCtr
                  |L10.108|
                          DCD      CPU_IntDisNestCtr
                  |L10.112|
                          DCD      CPU_IntDisMeasStart_cnts
                  |L10.116|
                          DCD      CPU_IntDisMeasStop_cnts
                  |L10.120|
                          DCD      CPU_IntDisMeasMaxCur_cnts
                  |L10.124|
                          DCD      CPU_IntDisMeasMax_cnts
                  |L10.128|
                          DCD      CPU_IntDisMeasOvrhd_cnts

                          AREA ||i.CPU_IntDisMeasMaxCalc||, CODE, READONLY, ALIGN=2

                  CPU_IntDisMeasMaxCalc PROC
;;;2371   #ifdef  CPU_CFG_INT_DIS_MEAS_EN
;;;2372   static  CPU_TS_TMR  CPU_IntDisMeasMaxCalc (CPU_TS_TMR  time_tot_cnts)
000000  4601              MOV      r1,r0
;;;2373   {
;;;2374       CPU_TS_TMR  time_max_cnts;
;;;2375   
;;;2376   
;;;2377       time_max_cnts = time_tot_cnts;
000002  4608              MOV      r0,r1
;;;2378       if (time_max_cnts >  CPU_IntDisMeasOvrhd_cnts) {            /* If       max ints dis'd time >  ovrhd time, ...      */
000004  4a04              LDR      r2,|L11.24|
000006  6812              LDR      r2,[r2,#0]  ; CPU_IntDisMeasOvrhd_cnts
000008  4290              CMP      r0,r2
00000a  d903              BLS      |L11.20|
;;;2379           time_max_cnts -= CPU_IntDisMeasOvrhd_cnts;              /* ... adj  max ints dis'd time by ovrhd time; ...      */
00000c  4a02              LDR      r2,|L11.24|
00000e  6812              LDR      r2,[r2,#0]  ; CPU_IntDisMeasOvrhd_cnts
000010  1a80              SUBS     r0,r0,r2
000012  e000              B        |L11.22|
                  |L11.20|
;;;2380       } else {                                                    /* ... else max ints dis'd time <  ovrhd time, ...      */
;;;2381           time_max_cnts  = 0u;                                    /* ... clr  max ints dis'd time (see Note #2).          */
000014  2000              MOVS     r0,#0
                  |L11.22|
;;;2382       }
;;;2383   
;;;2384       return (time_max_cnts);
;;;2385   }
000016  4770              BX       lr
;;;2386   #endif
                          ENDP

                  |L11.24|
                          DCD      CPU_IntDisMeasOvrhd_cnts

                          AREA ||i.CPU_IntDisMeasMaxCurGet||, CODE, READONLY, ALIGN=2

                  CPU_IntDisMeasMaxCurGet PROC
;;;760    #ifdef  CPU_CFG_INT_DIS_MEAS_EN
;;;761    CPU_TS_TMR  CPU_IntDisMeasMaxCurGet (void)
000000  b570              PUSH     {r4-r6,lr}
;;;762    {
;;;763        CPU_TS_TMR  time_tot_cnts;
;;;764        CPU_TS_TMR  time_max_cnts;
;;;765        CPU_SR_ALLOC();
000002  2500              MOVS     r5,#0
;;;766    
;;;767    
;;;768        CPU_INT_DIS();
000004  bf00              NOP      
000006  f7fffffe          BL       CPU_SR_Save
00000a  4605              MOV      r5,r0
00000c  bf00              NOP      
;;;769        time_tot_cnts = CPU_IntDisMeasMaxCur_cnts;
00000e  4806              LDR      r0,|L12.40|
000010  6804              LDR      r4,[r0,#0]  ; CPU_IntDisMeasMaxCur_cnts
;;;770        CPU_INT_EN();
000012  bf00              NOP      
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       CPU_SR_Restore
00001a  bf00              NOP      
;;;771        time_max_cnts = CPU_IntDisMeasMaxCalc(time_tot_cnts);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       CPU_IntDisMeasMaxCalc
000022  4606              MOV      r6,r0
;;;772    
;;;773        return (time_max_cnts);
000024  4630              MOV      r0,r6
;;;774    }
000026  bd70              POP      {r4-r6,pc}
;;;775    #endif
                          ENDP

                  |L12.40|
                          DCD      CPU_IntDisMeasMaxCur_cnts

                          AREA ||i.CPU_IntDisMeasMaxCurReset||, CODE, READONLY, ALIGN=2

                  CPU_IntDisMeasMaxCurReset PROC
;;;719    #ifdef  CPU_CFG_INT_DIS_MEAS_EN
;;;720    CPU_TS_TMR  CPU_IntDisMeasMaxCurReset (void)
000000  b570              PUSH     {r4-r6,lr}
;;;721    {
;;;722        CPU_TS_TMR  time_max_cnts;
;;;723        CPU_SR_ALLOC();
000002  2500              MOVS     r5,#0
;;;724    
;;;725    
;;;726        time_max_cnts             = CPU_IntDisMeasMaxCurGet();
000004  f7fffffe          BL       CPU_IntDisMeasMaxCurGet
000008  4604              MOV      r4,r0
;;;727        CPU_INT_DIS();
00000a  bf00              NOP      
00000c  f7fffffe          BL       CPU_SR_Save
000010  4605              MOV      r5,r0
000012  bf00              NOP      
;;;728        CPU_IntDisMeasMaxCur_cnts = 0u;
000014  2000              MOVS     r0,#0
000016  4904              LDR      r1,|L13.40|
000018  6008              STR      r0,[r1,#0]  ; CPU_IntDisMeasMaxCur_cnts
;;;729        CPU_INT_EN();
00001a  bf00              NOP      
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       CPU_SR_Restore
000022  bf00              NOP      
;;;730    
;;;731        return (time_max_cnts);
000024  4620              MOV      r0,r4
;;;732    }
000026  bd70              POP      {r4-r6,pc}
;;;733    #endif
                          ENDP

                  |L13.40|
                          DCD      CPU_IntDisMeasMaxCur_cnts

                          AREA ||i.CPU_IntDisMeasMaxGet||, CODE, READONLY, ALIGN=2

                  CPU_IntDisMeasMaxGet PROC
;;;802    #ifdef  CPU_CFG_INT_DIS_MEAS_EN
;;;803    CPU_TS_TMR  CPU_IntDisMeasMaxGet (void)
000000  b570              PUSH     {r4-r6,lr}
;;;804    {
;;;805        CPU_TS_TMR  time_tot_cnts;
;;;806        CPU_TS_TMR  time_max_cnts;
;;;807        CPU_SR_ALLOC();
000002  2500              MOVS     r5,#0
;;;808    
;;;809    
;;;810        CPU_INT_DIS();
000004  bf00              NOP      
000006  f7fffffe          BL       CPU_SR_Save
00000a  4605              MOV      r5,r0
00000c  bf00              NOP      
;;;811        time_tot_cnts = CPU_IntDisMeasMax_cnts;
00000e  4806              LDR      r0,|L14.40|
000010  6804              LDR      r4,[r0,#0]  ; CPU_IntDisMeasMax_cnts
;;;812        CPU_INT_EN();
000012  bf00              NOP      
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       CPU_SR_Restore
00001a  bf00              NOP      
;;;813        time_max_cnts = CPU_IntDisMeasMaxCalc(time_tot_cnts);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       CPU_IntDisMeasMaxCalc
000022  4606              MOV      r6,r0
;;;814    
;;;815        return (time_max_cnts);
000024  4630              MOV      r0,r6
;;;816    }
000026  bd70              POP      {r4-r6,pc}
;;;817    #endif
                          ENDP

                  |L14.40|
                          DCD      CPU_IntDisMeasMax_cnts

                          AREA ||i.CPU_IntDisMeasStart||, CODE, READONLY, ALIGN=2

                  CPU_IntDisMeasStart PROC
;;;839    #ifdef  CPU_CFG_INT_DIS_MEAS_EN
;;;840    void  CPU_IntDisMeasStart (void)
000000  b510              PUSH     {r4,lr}
;;;841    {
;;;842        CPU_IntDisMeasCtr++;
000002  4809              LDR      r0,|L15.40|
000004  8800              LDRH     r0,[r0,#0]  ; CPU_IntDisMeasCtr
000006  1c40              ADDS     r0,r0,#1
000008  4907              LDR      r1,|L15.40|
00000a  8008              STRH     r0,[r1,#0]
;;;843        if (CPU_IntDisNestCtr == 0u) {                                  /* If ints NOT yet dis'd, ...                       */
00000c  4807              LDR      r0,|L15.44|
00000e  8800              LDRH     r0,[r0,#0]  ; CPU_IntDisNestCtr
000010  b918              CBNZ     r0,|L15.26|
;;;844            CPU_IntDisMeasStart_cnts = CPU_TS_TmrRd();                  /* ... get ints dis'd start time.                   */
000012  f7fffffe          BL       CPU_TS_TmrRd
000016  4906              LDR      r1,|L15.48|
000018  6008              STR      r0,[r1,#0]  ; CPU_IntDisMeasStart_cnts
                  |L15.26|
;;;845        }
;;;846        CPU_IntDisNestCtr++;
00001a  4804              LDR      r0,|L15.44|
00001c  8800              LDRH     r0,[r0,#0]  ; CPU_IntDisNestCtr
00001e  1c40              ADDS     r0,r0,#1
000020  4902              LDR      r1,|L15.44|
000022  8008              STRH     r0,[r1,#0]
;;;847    }
000024  bd10              POP      {r4,pc}
;;;848    #endif
                          ENDP

000026  0000              DCW      0x0000
                  |L15.40|
                          DCD      CPU_IntDisMeasCtr
                  |L15.44|
                          DCD      CPU_IntDisNestCtr
                  |L15.48|
                          DCD      CPU_IntDisMeasStart_cnts

                          AREA ||i.CPU_IntDisMeasStop||, CODE, READONLY, ALIGN=2

                  CPU_IntDisMeasStop PROC
;;;1023   #ifdef  CPU_CFG_INT_DIS_MEAS_EN
;;;1024   void  CPU_IntDisMeasStop (void)
000000  b510              PUSH     {r4,lr}
;;;1025   {
;;;1026       CPU_TS_TMR  time_ints_disd_cnts;
;;;1027   
;;;1028   
;;;1029       CPU_IntDisNestCtr--;
000002  480f              LDR      r0,|L16.64|
000004  8800              LDRH     r0,[r0,#0]  ; CPU_IntDisNestCtr
000006  1e40              SUBS     r0,r0,#1
000008  490d              LDR      r1,|L16.64|
00000a  8008              STRH     r0,[r1,#0]
;;;1030       if (CPU_IntDisNestCtr == 0u) {                                  /* If ints NO longer dis'd,        ...              */
00000c  4608              MOV      r0,r1
00000e  8800              LDRH     r0,[r0,#0]  ; CPU_IntDisNestCtr
000010  b9a0              CBNZ     r0,|L16.60|
;;;1031           CPU_IntDisMeasStop_cnts = CPU_TS_TmrRd();                   /* ... get  ints dis'd stop time & ...              */
000012  f7fffffe          BL       CPU_TS_TmrRd
000016  490b              LDR      r1,|L16.68|
000018  6008              STR      r0,[r1,#0]  ; CPU_IntDisMeasStop_cnts
;;;1032                                                                       /* ... calc ints dis'd tot  time (see Note #1b2A).  */
;;;1033           time_ints_disd_cnts     = CPU_IntDisMeasStop_cnts -
00001a  4608              MOV      r0,r1
00001c  6800              LDR      r0,[r0,#0]  ; CPU_IntDisMeasStop_cnts
00001e  490a              LDR      r1,|L16.72|
000020  6809              LDR      r1,[r1,#0]  ; CPU_IntDisMeasStart_cnts
000022  1a44              SUBS     r4,r0,r1
;;;1034                                     CPU_IntDisMeasStart_cnts;
;;;1035                                                                       /* Calc max ints dis'd times.                       */
;;;1036           if (CPU_IntDisMeasMaxCur_cnts < time_ints_disd_cnts) {
000024  4809              LDR      r0,|L16.76|
000026  6800              LDR      r0,[r0,#0]  ; CPU_IntDisMeasMaxCur_cnts
000028  42a0              CMP      r0,r4
00002a  d201              BCS      |L16.48|
;;;1037               CPU_IntDisMeasMaxCur_cnts = time_ints_disd_cnts;
00002c  4807              LDR      r0,|L16.76|
00002e  6004              STR      r4,[r0,#0]  ; CPU_IntDisMeasMaxCur_cnts
                  |L16.48|
;;;1038           }
;;;1039           if (CPU_IntDisMeasMax_cnts    < time_ints_disd_cnts) {
000030  4807              LDR      r0,|L16.80|
000032  6800              LDR      r0,[r0,#0]  ; CPU_IntDisMeasMax_cnts
000034  42a0              CMP      r0,r4
000036  d201              BCS      |L16.60|
;;;1040               CPU_IntDisMeasMax_cnts    = time_ints_disd_cnts;
000038  4805              LDR      r0,|L16.80|
00003a  6004              STR      r4,[r0,#0]  ; CPU_IntDisMeasMax_cnts
                  |L16.60|
;;;1041           }
;;;1042       }
;;;1043   }
00003c  bd10              POP      {r4,pc}
;;;1044   #endif
                          ENDP

00003e  0000              DCW      0x0000
                  |L16.64|
                          DCD      CPU_IntDisNestCtr
                  |L16.68|
                          DCD      CPU_IntDisMeasStop_cnts
                  |L16.72|
                          DCD      CPU_IntDisMeasStart_cnts
                  |L16.76|
                          DCD      CPU_IntDisMeasMaxCur_cnts
                  |L16.80|
                          DCD      CPU_IntDisMeasMax_cnts

                          AREA ||i.CPU_NameClr||, CODE, READONLY, ALIGN=2

                  CPU_NameClr PROC
;;;277    #if (CPU_CFG_NAME_EN == DEF_ENABLED)
;;;278    void  CPU_NameClr (void)
000000  b510              PUSH     {r4,lr}
;;;279    {
;;;280        CPU_SR_ALLOC();
000002  2400              MOVS     r4,#0
;;;281    
;;;282    
;;;283        CPU_CRITICAL_ENTER();
000004  bf00              NOP      
000006  bf00              NOP      
000008  f7fffffe          BL       CPU_SR_Save
00000c  4604              MOV      r4,r0
00000e  bf00              NOP      
000010  f7fffffe          BL       CPU_IntDisMeasStart
000014  bf00              NOP      
;;;284        Mem_Clr((void     *)&CPU_Name[0],
000016  2110              MOVS     r1,#0x10
000018  4806              LDR      r0,|L17.52|
00001a  f7fffffe          BL       Mem_Clr
;;;285                (CPU_SIZE_T) CPU_CFG_NAME_SIZE);
;;;286        CPU_CRITICAL_EXIT();
00001e  bf00              NOP      
000020  f7fffffe          BL       CPU_IntDisMeasStop
000024  bf00              NOP      
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       CPU_SR_Restore
00002c  bf00              NOP      
00002e  bf00              NOP      
;;;287    }
000030  bd10              POP      {r4,pc}
;;;288    #endif
                          ENDP

000032  0000              DCW      0x0000
                  |L17.52|
                          DCD      CPU_Name

                          AREA ||i.CPU_NameGet||, CODE, READONLY, ALIGN=2

                  CPU_NameGet PROC
;;;321    #if (CPU_CFG_NAME_EN == DEF_ENABLED)
;;;322    void  CPU_NameGet (CPU_CHAR  *p_name,
000000  b570              PUSH     {r4-r6,lr}
;;;323                       CPU_ERR   *p_err)
;;;324    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;325        CPU_SR_ALLOC();
000006  2600              MOVS     r6,#0
;;;326    
;;;327    
;;;328        if (p_err == (CPU_ERR *)0) {
000008  b914              CBNZ     r4,|L18.16|
;;;329            CPU_SW_EXCEPTION(;);
00000a  bf00              NOP      
00000c  f7fffffe          BL       CPU_SW_Exception
                  |L18.16|
;;;330        }
;;;331    
;;;332        if (p_name == (CPU_CHAR *)0) {
000010  b915              CBNZ     r5,|L18.24|
;;;333           *p_err = CPU_ERR_NULL_PTR;
000012  200a              MOVS     r0,#0xa
000014  8020              STRH     r0,[r4,#0]
                  |L18.22|
;;;334            return;
;;;335        }
;;;336    
;;;337        CPU_CRITICAL_ENTER();
;;;338       (void)Str_Copy_N(p_name,
;;;339                       &CPU_Name[0],
;;;340                        CPU_CFG_NAME_SIZE);
;;;341        CPU_CRITICAL_EXIT();
;;;342    
;;;343       *p_err = CPU_ERR_NONE;
;;;344    }
000016  bd70              POP      {r4-r6,pc}
                  |L18.24|
000018  bf00              NOP                            ;337
00001a  bf00              NOP                            ;337
00001c  f7fffffe          BL       CPU_SR_Save
000020  4606              MOV      r6,r0                 ;337
000022  bf00              NOP                            ;337
000024  f7fffffe          BL       CPU_IntDisMeasStart
000028  bf00              NOP                            ;337
00002a  2210              MOVS     r2,#0x10              ;338
00002c  4908              LDR      r1,|L18.80|
00002e  4628              MOV      r0,r5                 ;338
000030  f7fffffe          BL       Str_Copy_N
000034  bf00              NOP                            ;341
000036  f7fffffe          BL       CPU_IntDisMeasStop
00003a  bf00              NOP                            ;341
00003c  4630              MOV      r0,r6                 ;341
00003e  f7fffffe          BL       CPU_SR_Restore
000042  bf00              NOP                            ;341
000044  bf00              NOP                            ;341
000046  2000              MOVS     r0,#0                 ;343
000048  8020              STRH     r0,[r4,#0]            ;343
00004a  bf00              NOP      
00004c  e7e3              B        |L18.22|
;;;345    #endif
                          ENDP

00004e  0000              DCW      0x0000
                  |L18.80|
                          DCD      CPU_Name

                          AREA ||i.CPU_NameInit||, CODE, READONLY, ALIGN=1

                  CPU_NameInit PROC
;;;2123   #if (CPU_CFG_NAME_EN == DEF_ENABLED)
;;;2124   static  void  CPU_NameInit (void)
000000  b510              PUSH     {r4,lr}
;;;2125   {
;;;2126       CPU_NameClr();
000002  f7fffffe          BL       CPU_NameClr
;;;2127   }
000006  bd10              POP      {r4,pc}
;;;2128   #endif
                          ENDP


                          AREA ||i.CPU_NameSet||, CODE, READONLY, ALIGN=2

                  CPU_NameSet PROC
;;;374    #if (CPU_CFG_NAME_EN == DEF_ENABLED)
;;;375    void  CPU_NameSet (const  CPU_CHAR  *p_name,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;376                              CPU_ERR   *p_err)
;;;377    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;378        CPU_SIZE_T  len;
;;;379        CPU_SR_ALLOC();
000008  2700              MOVS     r7,#0
;;;380    
;;;381    
;;;382        if (p_err == (CPU_ERR *)0) {
00000a  b914              CBNZ     r4,|L20.18|
;;;383            CPU_SW_EXCEPTION(;);
00000c  bf00              NOP      
00000e  f7fffffe          BL       CPU_SW_Exception
                  |L20.18|
;;;384        }
;;;385    
;;;386        if (p_name == (const CPU_CHAR *)0) {
000012  b91d              CBNZ     r5,|L20.28|
;;;387           *p_err = CPU_ERR_NULL_PTR;
000014  200a              MOVS     r0,#0xa
000016  8020              STRH     r0,[r4,#0]
                  |L20.24|
;;;388            return;
;;;389        }
;;;390    
;;;391        len = Str_Len_N(p_name,
;;;392                        CPU_CFG_NAME_SIZE);
;;;393        if (len < CPU_CFG_NAME_SIZE) {                              /* If       cfg name len < max name size, ...           */
;;;394            CPU_CRITICAL_ENTER();
;;;395           (void)Str_Copy_N(&CPU_Name[0],                           /* ... copy cfg name to CPU host name.                  */
;;;396                             p_name,
;;;397                             CPU_CFG_NAME_SIZE);
;;;398            CPU_CRITICAL_EXIT();
;;;399           *p_err = CPU_ERR_NONE;
;;;400    
;;;401        } else {
;;;402           *p_err = CPU_ERR_NAME_SIZE;
;;;403        }
;;;404    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L20.28|
00001c  2110              MOVS     r1,#0x10              ;391
00001e  4628              MOV      r0,r5                 ;391
000020  f7fffffe          BL       Str_Len_N
000024  4606              MOV      r6,r0                 ;391
000026  2e10              CMP      r6,#0x10              ;393
000028  d219              BCS      |L20.94|
00002a  bf00              NOP                            ;394
00002c  bf00              NOP                            ;394
00002e  f7fffffe          BL       CPU_SR_Save
000032  4607              MOV      r7,r0                 ;394
000034  bf00              NOP                            ;394
000036  f7fffffe          BL       CPU_IntDisMeasStart
00003a  bf00              NOP                            ;394
00003c  2210              MOVS     r2,#0x10              ;395
00003e  4629              MOV      r1,r5                 ;395
000040  4809              LDR      r0,|L20.104|
000042  f7fffffe          BL       Str_Copy_N
000046  bf00              NOP                            ;398
000048  f7fffffe          BL       CPU_IntDisMeasStop
00004c  bf00              NOP                            ;398
00004e  4638              MOV      r0,r7                 ;398
000050  f7fffffe          BL       CPU_SR_Restore
000054  bf00              NOP                            ;398
000056  bf00              NOP                            ;398
000058  2000              MOVS     r0,#0                 ;399
00005a  8020              STRH     r0,[r4,#0]            ;399
00005c  e002              B        |L20.100|
                  |L20.94|
00005e  f44f707a          MOV      r0,#0x3e8             ;402
000062  8020              STRH     r0,[r4,#0]            ;402
                  |L20.100|
000064  bf00              NOP      
000066  e7d7              B        |L20.24|
;;;405    #endif
                          ENDP

                  |L20.104|
                          DCD      CPU_Name

                          AREA ||i.CPU_PopCnt32||, CODE, READONLY, ALIGN=1

                  CPU_PopCnt32 PROC
;;;2074   
;;;2075   CPU_INT08U  CPU_PopCnt32 (CPU_INT32U  value)
000000  b510              PUSH     {r4,lr}
;;;2076   {
000002  4602              MOV      r2,r0
;;;2077       CPU_INT32U  even_cnt;
;;;2078       CPU_INT32U  odd_cnt;
;;;2079       CPU_INT32U  result;
;;;2080   
;;;2081   
;;;2082       odd_cnt  = (value >> 1u) & CRC_UTIL_POPCNT_MASK01010101_32; /* 2-bits pieces.                                       */
000004  f04f3055          MOV      r0,#0x55555555
000008  ea000352          AND      r3,r0,r2,LSR #1
;;;2083       result   =  value - odd_cnt;                                /* Same result as result=odd_cnt+(value & 0x55555555).  */
00000c  1ad1              SUBS     r1,r2,r3
;;;2084   
;;;2085       even_cnt =  result & CRC_UTIL_POPCNT_MASK00110011_32;       /* 4-bits pieces.                                       */
00000e  f0013433          AND      r4,r1,#0x33333333
;;;2086       odd_cnt  = (result >> 2u) & CRC_UTIL_POPCNT_MASK00110011_32;
000012  f04f3033          MOV      r0,#0x33333333
000016  ea000391          AND      r3,r0,r1,LSR #2
;;;2087       result   =  even_cnt + odd_cnt;
00001a  18e1              ADDS     r1,r4,r3
;;;2088   
;;;2089       even_cnt =  result & CRC_UTIL_POPCNT_MASK00001111_32;       /* 8-bits pieces.                                       */
00001c  f001340f          AND      r4,r1,#0xf0f0f0f
;;;2090       odd_cnt  = (result >> 4u) & CRC_UTIL_POPCNT_MASK00001111_32;
000020  f04f300f          MOV      r0,#0xf0f0f0f
000024  ea001311          AND      r3,r0,r1,LSR #4
;;;2091       result   =  even_cnt + odd_cnt;
000028  18e1              ADDS     r1,r4,r3
;;;2092   
;;;2093       result = (result * CRC_UTIL_POPCNT_POWERSOF256_32) >> 24u;
00002a  eb014001          ADD      r0,r1,r1,LSL #16
00002e  eb002000          ADD      r0,r0,r0,LSL #8
000032  0e01              LSRS     r1,r0,#24
;;;2094   
;;;2095       return (result);
000034  4608              MOV      r0,r1
;;;2096   }
000036  bd10              POP      {r4,pc}
;;;2097   
                          ENDP


                          AREA ||i.CPU_SW_Exception||, CODE, READONLY, ALIGN=1

                  CPU_SW_Exception PROC
;;;248    
;;;249    void  CPU_SW_Exception (void)
000000  bf00              NOP      
                  |L22.2|
;;;250    {
;;;251        while (DEF_ON) {
000002  e7fe              B        |L22.2|
;;;252            ;
;;;253        }
;;;254    }
;;;255    
                          ENDP


                          AREA ||i.CPU_TS_Get32||, CODE, READONLY, ALIGN=1

                  CPU_TS_Get32 PROC
;;;460    #if (CPU_CFG_TS_32_EN == DEF_ENABLED)
;;;461    CPU_TS32  CPU_TS_Get32 (void)
000000  b510              PUSH     {r4,lr}
;;;462    {
;;;463        CPU_TS32    ts;
;;;464    #if (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32)
;;;465        CPU_TS_TMR  tmr_cur;
;;;466        CPU_TS_TMR  tmr_delta;
;;;467        CPU_SR_ALLOC();
;;;468    #endif
;;;469    
;;;470    
;;;471    #if (CPU_CFG_TS_TMR_SIZE >= CPU_WORD_SIZE_32)
;;;472        ts = (CPU_TS32)CPU_TS_TmrRd();                                  /* Get cur ts tmr val (in 32-bit ts cnts).          */
000002  f7fffffe          BL       CPU_TS_TmrRd
000006  4604              MOV      r4,r0
;;;473    
;;;474    #else
;;;475        CPU_INT_DIS();
;;;476        tmr_cur            = (CPU_TS_TMR) CPU_TS_TmrRd();               /* Get cur ts tmr val (in ts tmr cnts).             */
;;;477        tmr_delta          = (CPU_TS_TMR)(tmr_cur - CPU_TS_32_TmrPrev); /* Calc      delta ts tmr cnts.                     */
;;;478        CPU_TS_32_Accum   += (CPU_TS32  ) tmr_delta;                    /* Inc ts by delta ts tmr cnts (see Note #2).       */
;;;479        CPU_TS_32_TmrPrev  = (CPU_TS_TMR) tmr_cur;                      /* Save cur ts tmr cnts for next update.            */
;;;480        ts                 = (CPU_TS32  ) CPU_TS_32_Accum;
;;;481        CPU_INT_EN();
;;;482    #endif
;;;483    
;;;484        return (ts);
000008  4620              MOV      r0,r4
;;;485    }
00000a  bd10              POP      {r4,pc}
;;;486    #endif
                          ENDP


                          AREA ||i.CPU_TS_Init||, CODE, READONLY, ALIGN=2

                  CPU_TS_Init PROC
;;;2159        (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
;;;2160   static  void  CPU_TS_Init (void)
000000  b510              PUSH     {r4,lr}
;;;2161   {
;;;2162   #if (((CPU_CFG_TS_32_EN    == DEF_ENABLED     )  && \
;;;2163         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32)) || \
;;;2164        ((CPU_CFG_TS_64_EN    == DEF_ENABLED     )  && \
;;;2165         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64)))
;;;2166       CPU_TS_TMR  ts_tmr_cnts;
;;;2167   #endif
;;;2168   
;;;2169   
;;;2170                                                                   /* ----------------- INIT CPU TS TMR ------------------ */
;;;2171   #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
;;;2172       CPU_TS_TmrFreq_Hz   = 0u;                                   /* Init/clr     ts tmr freq (see Note #1a).             */
000002  2000              MOVS     r0,#0
000004  4902              LDR      r1,|L24.16|
000006  6008              STR      r0,[r1,#0]  ; CPU_TS_TmrFreq_Hz
;;;2173       CPU_TS_TmrInit();                                           /* Init & start ts tmr      (see Note #1b).             */
000008  f7fffffe          BL       CPU_TS_TmrInit
;;;2174   #endif
;;;2175   
;;;2176   
;;;2177                                                                   /* ------------------- INIT CPU TS -------------------- */
;;;2178   #if (((CPU_CFG_TS_32_EN    == DEF_ENABLED     )  && \
;;;2179         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32)) || \
;;;2180        ((CPU_CFG_TS_64_EN    == DEF_ENABLED     )  && \
;;;2181         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64)))
;;;2182       ts_tmr_cnts = CPU_TS_TmrRd();                               /* Get init ts tmr val (in ts tmr cnts).                */
;;;2183   #endif
;;;2184   
;;;2185   #if  ((CPU_CFG_TS_32_EN    == DEF_ENABLED)  && \
;;;2186         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32))
;;;2187       CPU_TS_32_Accum   = 0u;                                     /* Init 32-bit accum'd ts.                              */
;;;2188       CPU_TS_32_TmrPrev = ts_tmr_cnts;                            /* Init 32-bit ts prev tmr val.                         */
;;;2189   #endif
;;;2190   
;;;2191   #if  ((CPU_CFG_TS_64_EN    == DEF_ENABLED)  && \
;;;2192         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64))
;;;2193       CPU_TS_64_Accum   = 0u;                                     /* Init 64-bit accum'd ts.                              */
;;;2194       CPU_TS_64_TmrPrev = ts_tmr_cnts;                            /* Init 64-bit ts prev tmr val.                         */
;;;2195   #endif
;;;2196   }
00000c  bd10              POP      {r4,pc}
;;;2197   #endif
                          ENDP

00000e  0000              DCW      0x0000
                  |L24.16|
                          DCD      CPU_TS_TmrFreq_Hz

                          AREA ||i.CPU_TS_TmrFreqGet||, CODE, READONLY, ALIGN=2

                  CPU_TS_TmrFreqGet PROC
;;;637    #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
;;;638    CPU_TS_TMR_FREQ  CPU_TS_TmrFreqGet (CPU_ERR  *p_err)
000000  b500              PUSH     {lr}
;;;639    {
000002  4601              MOV      r1,r0
;;;640        CPU_TS_TMR_FREQ  freq_hz;
;;;641    
;;;642    
;;;643        if (p_err == (CPU_ERR *)0) {
000004  b911              CBNZ     r1,|L25.12|
;;;644            CPU_SW_EXCEPTION(;);
000006  bf00              NOP      
000008  f7fffffe          BL       CPU_SW_Exception
                  |L25.12|
;;;645        }
;;;646    
;;;647        freq_hz =  CPU_TS_TmrFreq_Hz;
00000c  4a04              LDR      r2,|L25.32|
00000e  6810              LDR      r0,[r2,#0]  ; CPU_TS_TmrFreq_Hz
;;;648       *p_err   = (freq_hz != 0u) ? CPU_ERR_NONE : CPU_ERR_TS_FREQ_INVALID;
000010  b108              CBZ      r0,|L25.22|
000012  2200              MOVS     r2,#0
000014  e001              B        |L25.26|
                  |L25.22|
000016  f44f62fa          MOV      r2,#0x7d0
                  |L25.26|
00001a  800a              STRH     r2,[r1,#0]
;;;649    
;;;650        return (freq_hz);
;;;651    }
00001c  bd00              POP      {pc}
;;;652    #endif
                          ENDP

00001e  0000              DCW      0x0000
                  |L25.32|
                          DCD      CPU_TS_TmrFreq_Hz

                          AREA ||i.CPU_TS_TmrFreqSet||, CODE, READONLY, ALIGN=2

                  CPU_TS_TmrFreqSet PROC
;;;688    #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
;;;689    void  CPU_TS_TmrFreqSet (CPU_TS_TMR_FREQ  freq_hz)
000000  4901              LDR      r1,|L26.8|
;;;690    {
;;;691        CPU_TS_TmrFreq_Hz = freq_hz;
000002  6008              STR      r0,[r1,#0]  ; CPU_TS_TmrFreq_Hz
;;;692    }
000004  4770              BX       lr
;;;693    #endif
                          ENDP

000006  0000              DCW      0x0000
                  |L26.8|
                          DCD      CPU_TS_TmrFreq_Hz

                          AREA ||i.CPU_TS_Update||, CODE, READONLY, ALIGN=1

                  CPU_TS_Update PROC
;;;595    #if (CPU_CFG_TS_EN == DEF_ENABLED)
;;;596    void  CPU_TS_Update (void)
000000  4770              BX       lr
;;;597    {
;;;598    #if ((CPU_CFG_TS_32_EN    == DEF_ENABLED)  && \
;;;599         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32))
;;;600       (void)CPU_TS_Get32();
;;;601    #endif
;;;602    
;;;603    #if ((CPU_CFG_TS_64_EN    == DEF_ENABLED)  && \
;;;604         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64))
;;;605       (void)CPU_TS_Get64();
;;;606    #endif
;;;607    }
;;;608    #endif
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  CPU_Name
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  CPU_CntLeadZerosTbl
000000  08070606          DCB      0x08,0x07,0x06,0x06
000004  05050505          DCB      0x05,0x05,0x05,0x05
000008  04040404          DCB      0x04,0x04,0x04,0x04
00000c  04040404          DCB      0x04,0x04,0x04,0x04
000010  03030303          DCB      0x03,0x03,0x03,0x03
000014  03030303          DCB      0x03,0x03,0x03,0x03
000018  03030303          DCB      0x03,0x03,0x03,0x03
00001c  03030303          DCB      0x03,0x03,0x03,0x03
000020  02020202          DCB      0x02,0x02,0x02,0x02
000024  02020202          DCB      0x02,0x02,0x02,0x02
000028  02020202          DCB      0x02,0x02,0x02,0x02
00002c  02020202          DCB      0x02,0x02,0x02,0x02
000030  02020202          DCB      0x02,0x02,0x02,0x02
000034  02020202          DCB      0x02,0x02,0x02,0x02
000038  02020202          DCB      0x02,0x02,0x02,0x02
00003c  02020202          DCB      0x02,0x02,0x02,0x02
000040  01010101          DCB      0x01,0x01,0x01,0x01
000044  01010101          DCB      0x01,0x01,0x01,0x01
000048  01010101          DCB      0x01,0x01,0x01,0x01
00004c  01010101          DCB      0x01,0x01,0x01,0x01
000050  01010101          DCB      0x01,0x01,0x01,0x01
000054  01010101          DCB      0x01,0x01,0x01,0x01
000058  01010101          DCB      0x01,0x01,0x01,0x01
00005c  01010101          DCB      0x01,0x01,0x01,0x01
000060  01010101          DCB      0x01,0x01,0x01,0x01
000064  01010101          DCB      0x01,0x01,0x01,0x01
000068  01010101          DCB      0x01,0x01,0x01,0x01
00006c  01010101          DCB      0x01,0x01,0x01,0x01
000070  01010101          DCB      0x01,0x01,0x01,0x01
000074  01010101          DCB      0x01,0x01,0x01,0x01
000078  01010101          DCB      0x01,0x01,0x01,0x01
00007c  01010101          DCB      0x01,0x01,0x01,0x01
000080  00000000          DCB      0x00,0x00,0x00,0x00
000084  00000000          DCB      0x00,0x00,0x00,0x00
000088  00000000          DCB      0x00,0x00,0x00,0x00
00008c  00000000          DCB      0x00,0x00,0x00,0x00
000090  00000000          DCB      0x00,0x00,0x00,0x00
000094  00000000          DCB      0x00,0x00,0x00,0x00
000098  00000000          DCB      0x00,0x00,0x00,0x00
00009c  00000000          DCB      0x00,0x00,0x00,0x00
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
0000a4  00000000          DCB      0x00,0x00,0x00,0x00
0000a8  00000000          DCB      0x00,0x00,0x00,0x00
0000ac  00000000          DCB      0x00,0x00,0x00,0x00
0000b0  00000000          DCB      0x00,0x00,0x00,0x00
0000b4  00000000          DCB      0x00,0x00,0x00,0x00
0000b8  00000000          DCB      0x00,0x00,0x00,0x00
0000bc  00000000          DCB      0x00,0x00,0x00,0x00
0000c0  00000000          DCB      0x00,0x00,0x00,0x00
0000c4  00000000          DCB      0x00,0x00,0x00,0x00
0000c8  00000000          DCB      0x00,0x00,0x00,0x00
0000cc  00000000          DCB      0x00,0x00,0x00,0x00
0000d0  00000000          DCB      0x00,0x00,0x00,0x00
0000d4  00000000          DCB      0x00,0x00,0x00,0x00
0000d8  00000000          DCB      0x00,0x00,0x00,0x00
0000dc  00000000          DCB      0x00,0x00,0x00,0x00
0000e0  00000000          DCB      0x00,0x00,0x00,0x00
0000e4  00000000          DCB      0x00,0x00,0x00,0x00
0000e8  00000000          DCB      0x00,0x00,0x00,0x00
0000ec  00000000          DCB      0x00,0x00,0x00,0x00
0000f0  00000000          DCB      0x00,0x00,0x00,0x00
0000f4  00000000          DCB      0x00,0x00,0x00,0x00
0000f8  00000000          DCB      0x00,0x00,0x00,0x00
0000fc  00000000          DCB      0x00,0x00,0x00,0x00
                  CPU_EndiannessTest
                          DCD      0x12345678

                          AREA ||.data||, DATA, ALIGN=2

                  CPU_TS_TmrFreq_Hz
                          DCD      0x00000000
                  CPU_IntDisMeasCtr
000004  0000              DCB      0x00,0x00
                  CPU_IntDisNestCtr
000006  0000              DCB      0x00,0x00
                  CPU_IntDisMeasStart_cnts
                          DCD      0x00000000
                  CPU_IntDisMeasStop_cnts
                          DCD      0x00000000
                  CPU_IntDisMeasOvrhd_cnts
                          DCD      0x00000000
                  CPU_IntDisMeasMaxCur_cnts
                          DCD      0x00000000
                  CPU_IntDisMeasMax_cnts
                          DCD      0x00000000
