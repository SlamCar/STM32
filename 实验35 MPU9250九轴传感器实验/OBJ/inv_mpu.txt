; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\inv_mpu.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\inv_mpu.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\OBJ -I..\USER -I..\HALLIB\STM32F7xx_HAL_Driver\Inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\SDRAM -I..\HARDWARE\IIC -I..\HARDWARE\24CXX -I..\HARDWARE\MPU9250 -I..\HARDWARE\DHT11 -I..\HARDWARE\MPU -I..\USMART -I..\DMP\driver\eMPL -I..\DMP\driver\include -I..\DMP\driver\stm32L -I..\DMP\eMPL-hal -I..\DMP\mllite -I..\DMP\mpl -I..\UCOSIII -I..\UCOSIII\UCOS-BSP -I..\UCOSIII\UCOS-CONFIG -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\uC-CPU\ARM-Cortex-M4\RealView -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-CPU -I..\HARDWARE\MY_FUNCTION -I..\USER -I..\HARDWARE\CRC -I..\HARDWARE\DMA -I..\HARDWARE\HEART_BEAT -I..\HARDWARE\RECEIVE_ANALYZE -I..\HARDWARE\FEED_BACK -I..\HARDWARE\DATA -I"D:\1111111\32F4\Slam car\实验35 MPU9250九轴传感器实验\USER\RTE" -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0 -IF:\Keil_v5\ARM\CMSIS\Include -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__UVISION_VERSION=514 -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=..\obj\inv_mpu.crf ..\DMP\driver\eMPL\inv_mpu.c]
                          THUMB

                          AREA ||i.accel_6500_self_test||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                          REQUIRE _printf_sizespec
                  accel_6500_self_test PROC
;;;2245   };
;;;2246   static int accel_6500_self_test(long *bias_regular, long *bias_st, int debug)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;2247   {
000004  ed2d8b0a          VPUSH    {d8-d12}
000008  b08f              SUB      sp,sp,#0x3c
00000a  4606              MOV      r6,r0
00000c  460f              MOV      r7,r1
00000e  4615              MOV      r5,r2
;;;2248       int i, result = 0, otp_value_zero = 0;
000010  f04f0800          MOV      r8,#0
000014  46c1              MOV      r9,r8
;;;2249       float accel_st_al_min, accel_st_al_max;
;;;2250       float st_shift_cust[3], st_shift_ratio[3], ct_shift_prod[3], accel_offset_max;
;;;2251       unsigned char regs[3];
;;;2252       if (i2c_read(st.hw->addr, REG_6500_XA_ST_DATA, 3, regs)) {
000016  49ec              LDR      r1,|L1.968|
000018  6849              LDR      r1,[r1,#4]  ; st
00001a  7808              LDRB     r0,[r1,#0]
00001c  ab05              ADD      r3,sp,#0x14
00001e  2203              MOVS     r2,#3
000020  210d              MOVS     r1,#0xd
000022  f7fffffe          BL       MPU_Read_Len
000026  b148              CBZ      r0,|L1.60|
;;;2253       	if(debug)
000028  b115              CBZ      r5,|L1.48|
;;;2254       		log_i("Reading OTP Register Error.\n");
00002a  a0e8              ADR      r0,|L1.972|
00002c  f7fffffe          BL       __2printf
                  |L1.48|
;;;2255       	return 0x07;
000030  2007              MOVS     r0,#7
                  |L1.50|
;;;2256       }
;;;2257       if(debug)
;;;2258       	log_i("Accel OTP:%d, %d, %d\n", regs[0], regs[1], regs[2]);
;;;2259   	for (i = 0; i < 3; i++) {
;;;2260   		if (regs[i] != 0) {
;;;2261   			ct_shift_prod[i] = mpu_6500_st_tb[regs[i] - 1];
;;;2262   			ct_shift_prod[i] *= 65536.f;
;;;2263   			ct_shift_prod[i] /= test.accel_sens;
;;;2264   		}
;;;2265   		else {
;;;2266   			ct_shift_prod[i] = 0;
;;;2267   			otp_value_zero = 1;
;;;2268   		}
;;;2269   	}
;;;2270   	if(otp_value_zero == 0) {
;;;2271   		if(debug)
;;;2272   			log_i("ACCEL:CRITERIA A\n");
;;;2273   		for (i = 0; i < 3; i++) {
;;;2274   			st_shift_cust[i] = bias_st[i] - bias_regular[i];
;;;2275   			if(debug) {
;;;2276   				log_i("Bias_Shift=%7.4f, Bias_Reg=%7.4f, Bias_HWST=%7.4f\r\n",
;;;2277   						st_shift_cust[i]/1.f, bias_regular[i]/1.f,
;;;2278   						bias_st[i]/1.f);
;;;2279   				log_i("OTP value: %7.4f\r\n", ct_shift_prod[i]/1.f);
;;;2280   			}
;;;2281   
;;;2282   			st_shift_ratio[i] = st_shift_cust[i] / ct_shift_prod[i] - 1.f;
;;;2283   
;;;2284   			if(debug)
;;;2285   				log_i("ratio=%7.4f, threshold=%7.4f\r\n", st_shift_ratio[i]/1.f,
;;;2286   							test.max_accel_var/1.f);
;;;2287   
;;;2288   			if (fabs(st_shift_ratio[i]) > test.max_accel_var) {
;;;2289   				if(debug)
;;;2290   					log_i("ACCEL Fail Axis = %d\n", i);
;;;2291   				result |= 1 << i;	//Error condition
;;;2292   			}
;;;2293   		}
;;;2294   	}
;;;2295   	else {
;;;2296   		/* Self Test Pass/Fail Criteria B */
;;;2297   		accel_st_al_min = test.min_g * 65536.f;
;;;2298   		accel_st_al_max = test.max_g * 65536.f;
;;;2299   
;;;2300   		if(debug) {
;;;2301   			log_i("ACCEL:CRITERIA B\r\n");
;;;2302   			log_i("Min MG: %7.4f\r\n", accel_st_al_min/1.f);
;;;2303   			log_i("Max MG: %7.4f\r\n", accel_st_al_max/1.f);
;;;2304   		}
;;;2305   
;;;2306   		for (i = 0; i < 3; i++) {
;;;2307   			st_shift_cust[i] = bias_st[i] - bias_regular[i];
;;;2308   
;;;2309   			if(debug)
;;;2310   				log_i("Bias_shift=%7.4f, st=%7.4f, reg=%7.4f\n", st_shift_cust[i]/1.f, bias_st[i]/1.f, bias_regular[i]/1.f);
;;;2311   			if(st_shift_cust[i] < accel_st_al_min || st_shift_cust[i] > accel_st_al_max) {
;;;2312   				if(debug)
;;;2313   					log_i("Accel FAIL axis:%d <= 225mg or >= 675mg\n", i);
;;;2314   				result |= 1 << i;	//Error condition
;;;2315   			}
;;;2316   		}
;;;2317   	}
;;;2318   
;;;2319   	if(result == 0) {
;;;2320   	/* Self Test Pass/Fail Criteria C */
;;;2321   		accel_offset_max = test.max_g_offset * 65536.f;
;;;2322   		if(debug)
;;;2323   			log_i("Accel:CRITERIA C: bias less than %7.4f\n", accel_offset_max/1.f);
;;;2324   		for (i = 0; i < 3; i++) {
;;;2325   			if(fabs(bias_regular[i]) > accel_offset_max) {
;;;2326   				if(debug)
;;;2327   					log_i("FAILED: Accel axis:%d = %ld > 500mg\n", i, bias_regular[i]);
;;;2328   				result |= 1 << i;	//Error condition
;;;2329   			}
;;;2330   		}
;;;2331   	}
;;;2332   
;;;2333       return result;
;;;2334   }
000032  b00f              ADD      sp,sp,#0x3c
000034  ecbd8b0a          VPOP     {d8-d12}
000038  e8bd83f0          POP      {r4-r9,pc}
                  |L1.60|
00003c  b145              CBZ      r5,|L1.80|
00003e  f89d3016          LDRB     r3,[sp,#0x16]         ;2258
000042  f89d2015          LDRB     r2,[sp,#0x15]         ;2258
000046  f89d1014          LDRB     r1,[sp,#0x14]         ;2258
00004a  a0e8              ADR      r0,|L1.1004|
00004c  f7fffffe          BL       __2printf
                  |L1.80|
000050  2400              MOVS     r4,#0                 ;2259
000052  e03b              B        |L1.204|
                  |L1.84|
000054  a805              ADD      r0,sp,#0x14           ;2260
000056  5d00              LDRB     r0,[r0,r4]            ;2260
000058  b370              CBZ      r0,|L1.184|
00005a  a805              ADD      r0,sp,#0x14           ;2261
00005c  5d00              LDRB     r0,[r0,r4]            ;2261
00005e  1e40              SUBS     r0,r0,#1              ;2261
000060  49e8              LDR      r1,|L1.1028|
000062  f8310010          LDRH     r0,[r1,r0,LSL #1]     ;2261
000066  ee000a10          VMOV     s0,r0                 ;2261
00006a  eeb80a40          VCVT.F32.U32 s0,s0                 ;2261
00006e  a806              ADD      r0,sp,#0x18           ;2261
000070  eb000084          ADD      r0,r0,r4,LSL #2       ;2261
000074  ed800a00          VSTR     s0,[r0,#0]            ;2261
000078  a806              ADD      r0,sp,#0x18           ;2262
00007a  eb000084          ADD      r0,r0,r4,LSL #2       ;2262
00007e  ed900a00          VLDR     s0,[r0,#0]            ;2262
000082  eddf0ae1          VLDR     s1,|L1.1032|
000086  ee200a20          VMUL.F32 s0,s0,s1              ;2262
00008a  a806              ADD      r0,sp,#0x18           ;2262
00008c  eb000084          ADD      r0,r0,r4,LSL #2       ;2262
000090  ed800a00          VSTR     s0,[r0,#0]            ;2262
000094  a806              ADD      r0,sp,#0x18           ;2263
000096  eb000084          ADD      r0,r0,r4,LSL #2       ;2263
00009a  edd00a00          VLDR     s1,[r0,#0]            ;2263
00009e  48db              LDR      r0,|L1.1036|
0000a0  ed900a01          VLDR     s0,[r0,#4]            ;2263
0000a4  eeb80a40          VCVT.F32.U32 s0,s0                 ;2263
0000a8  ee801a80          VDIV.F32 s2,s1,s0              ;2263
0000ac  a806              ADD      r0,sp,#0x18           ;2263
0000ae  eb000084          ADD      r0,r0,r4,LSL #2       ;2263
0000b2  ed801a00          VSTR     s2,[r0,#0]            ;2263
0000b6  e008              B        |L1.202|
                  |L1.184|
0000b8  ed9f0ad5          VLDR     s0,|L1.1040|
0000bc  a806              ADD      r0,sp,#0x18           ;2266
0000be  eb000084          ADD      r0,r0,r4,LSL #2       ;2266
0000c2  ed800a00          VSTR     s0,[r0,#0]            ;2266
0000c6  f04f0901          MOV      r9,#1                 ;2267
                  |L1.202|
0000ca  1c64              ADDS     r4,r4,#1              ;2259
                  |L1.204|
0000cc  2c03              CMP      r4,#3                 ;2259
0000ce  dbc1              BLT      |L1.84|
0000d0  f1b90f00          CMP      r9,#0                 ;2270
0000d4  d17e              BNE      |L1.468|
0000d6  b115              CBZ      r5,|L1.222|
0000d8  a0ce              ADR      r0,|L1.1044|
0000da  f7fffffe          BL       __2printf
                  |L1.222|
0000de  2400              MOVS     r4,#0                 ;2273
0000e0  e0a7              B        |L1.562|
                  |L1.226|
0000e2  f8570024          LDR      r0,[r7,r4,LSL #2]     ;2274
0000e6  f8561024          LDR      r1,[r6,r4,LSL #2]     ;2274
0000ea  1a40              SUBS     r0,r0,r1              ;2274
0000ec  ee000a10          VMOV     s0,r0                 ;2274
0000f0  eeb80ac0          VCVT.F32.S32 s0,s0                 ;2274
0000f4  a80c              ADD      r0,sp,#0x30           ;2274
0000f6  eb000084          ADD      r0,r0,r4,LSL #2       ;2274
0000fa  ed800a00          VSTR     s0,[r0,#0]            ;2274
0000fe  2d00              CMP      r5,#0                 ;2275
000100  d043              BEQ      |L1.394|
000102  f8570024          LDR      r0,[r7,r4,LSL #2]     ;2276
000106  ee000a10          VMOV     s0,r0                 ;2276
00010a  eeb80ac0          VCVT.F32.S32 s0,s0                 ;2276
00010e  eef70a00          VMOV.F32 s1,#1.00000000        ;2276
000112  ee801a20          VDIV.F32 s2,s0,s1              ;2276
000116  eeb70ac1          VCVT.F64.F32 d0,s2                 ;2276
00011a  eeb0ab40          VMOV.F64 d10,d0                ;2276
00011e  f8560024          LDR      r0,[r6,r4,LSL #2]     ;2276
000122  ee000a10          VMOV     s0,r0                 ;2276
000126  eeb80ac0          VCVT.F32.S32 s0,s0                 ;2276
00012a  eef70a00          VMOV.F32 s1,#1.00000000        ;2276
00012e  ee801a20          VDIV.F32 s2,s0,s1              ;2276
000132  eeb70ac1          VCVT.F64.F32 d0,s2                 ;2276
000136  eeb0bb40          VMOV.F64 d11,d0                ;2276
00013a  a80c              ADD      r0,sp,#0x30           ;2276
00013c  eb000084          ADD      r0,r0,r4,LSL #2       ;2276
000140  ed900a00          VLDR     s0,[r0,#0]            ;2276
000144  eef70a00          VMOV.F32 s1,#1.00000000        ;2276
000148  ee801a20          VDIV.F32 s2,s0,s1              ;2276
00014c  eeb70ac1          VCVT.F64.F32 d0,s2                 ;2276
000150  eeb0cb40          VMOV.F64 d12,d0                ;2276
000154  ed8dab02          VSTR     d10,[sp,#8]           ;2276
000158  ed8dbb00          VSTR     d11,[sp,#0]           ;2276
00015c  ec532b1c          VMOV     r2,r3,d12             ;2276
000160  a0b1              ADR      r0,|L1.1064|
000162  f7fffffe          BL       __2printf
000166  a806              ADD      r0,sp,#0x18           ;2279
000168  eb000084          ADD      r0,r0,r4,LSL #2       ;2279
00016c  ed900a00          VLDR     s0,[r0,#0]            ;2279
000170  eef70a00          VMOV.F32 s1,#1.00000000        ;2279
000174  ee801a20          VDIV.F32 s2,s0,s1              ;2279
000178  eeb70ac1          VCVT.F64.F32 d0,s2                 ;2279
00017c  eeb0ab40          VMOV.F64 d10,d0                ;2279
000180  ec532b1a          VMOV     r2,r3,d10             ;2279
000184  a0b5              ADR      r0,|L1.1116|
000186  f7fffffe          BL       __2printf
                  |L1.394|
00018a  a80c              ADD      r0,sp,#0x30           ;2282
00018c  eb000084          ADD      r0,r0,r4,LSL #2       ;2282
000190  edd00a00          VLDR     s1,[r0,#0]            ;2282
000194  a806              ADD      r0,sp,#0x18           ;2282
000196  eb000084          ADD      r0,r0,r4,LSL #2       ;2282
00019a  ed901a00          VLDR     s2,[r0,#0]            ;2282
00019e  ee800a81          VDIV.F32 s0,s1,s2              ;2282
0001a2  eef70a00          VMOV.F32 s1,#1.00000000        ;2282
0001a6  ee300a60          VSUB.F32 s0,s0,s1              ;2282
0001aa  a809              ADD      r0,sp,#0x24           ;2282
0001ac  eb000084          ADD      r0,r0,r4,LSL #2       ;2282
0001b0  ed800a00          VSTR     s0,[r0,#0]            ;2282
0001b4  b305              CBZ      r5,|L1.504|
0001b6  4895              LDR      r0,|L1.1036|
0001b8  ed900a09          VLDR     s0,[r0,#0x24]         ;2285
0001bc  eef70a00          VMOV.F32 s1,#1.00000000        ;2285
0001c0  ee801a20          VDIV.F32 s2,s0,s1              ;2285
0001c4  eeb70ac1          VCVT.F64.F32 d0,s2                 ;2285
0001c8  eeb0ab40          VMOV.F64 d10,d0                ;2285
0001cc  a809              ADD      r0,sp,#0x24           ;2285
0001ce  eb000084          ADD      r0,r0,r4,LSL #2       ;2285
0001d2  e000              B        |L1.470|
                  |L1.468|
0001d4  e031              B        |L1.570|
                  |L1.470|
0001d6  ed900a00          VLDR     s0,[r0,#0]            ;2285
0001da  eef70a00          VMOV.F32 s1,#1.00000000        ;2285
0001de  ee801a20          VDIV.F32 s2,s0,s1              ;2285
0001e2  eeb70ac1          VCVT.F64.F32 d0,s2                 ;2285
0001e6  eeb0bb40          VMOV.F64 d11,d0                ;2285
0001ea  ed8dab00          VSTR     d10,[sp,#0]           ;2285
0001ee  ec532b1b          VMOV     r2,r3,d11             ;2285
0001f2  a09f              ADR      r0,|L1.1136|
0001f4  f7fffffe          BL       __2printf
                  |L1.504|
0001f8  a809              ADD      r0,sp,#0x24           ;2288
0001fa  eb000084          ADD      r0,r0,r4,LSL #2       ;2288
0001fe  ed900a00          VLDR     s0,[r0,#0]            ;2288
000202  eeb70ac0          VCVT.F64.F32 d0,s0                 ;2288
000206  eeb00bc0          VABS.F64 d0,d0                 ;2288
00020a  4880              LDR      r0,|L1.1036|
00020c  ed901a09          VLDR     s2,[r0,#0x24]         ;2288
000210  eeb71ac1          VCVT.F64.F32 d1,s2                 ;2288
000214  eeb40bc1          VCMPE.F64 d0,d1                 ;2288
000218  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;2288
00021c  dd08              BLE      |L1.560|
00021e  b11d              CBZ      r5,|L1.552|
000220  4621              MOV      r1,r4                 ;2290
000222  a09b              ADR      r0,|L1.1168|
000224  f7fffffe          BL       __2printf
                  |L1.552|
000228  2001              MOVS     r0,#1                 ;2291
00022a  40a0              LSLS     r0,r0,r4              ;2291
00022c  ea400808          ORR      r8,r0,r8              ;2291
                  |L1.560|
000230  1c64              ADDS     r4,r4,#1              ;2273
                  |L1.562|
000232  2c03              CMP      r4,#3                 ;2273
000234  f6ffaf55          BLT      |L1.226|
000238  e08d              B        |L1.854|
                  |L1.570|
00023a  4874              LDR      r0,|L1.1036|
00023c  ed900a07          VLDR     s0,[r0,#0x1c]         ;2297
000240  eddf0a71          VLDR     s1,|L1.1032|
000244  ee208a20          VMUL.F32 s16,s0,s1             ;2297
000248  ed900a08          VLDR     s0,[r0,#0x20]         ;2298
00024c  eddf0a6e          VLDR     s1,|L1.1032|
000250  ee608a20          VMUL.F32 s17,s0,s1             ;2298
000254  b1e5              CBZ      r5,|L1.656|
000256  a094              ADR      r0,|L1.1192|
000258  f7fffffe          BL       __2printf
00025c  eeb70a00          VMOV.F32 s0,#1.00000000        ;2302
000260  eec80a00          VDIV.F32 s1,s16,s0             ;2302
000264  eeb70ae0          VCVT.F64.F32 d0,s1                 ;2302
000268  eeb0ab40          VMOV.F64 d10,d0                ;2302
00026c  ec532b1a          VMOV     r2,r3,d10             ;2302
000270  a092              ADR      r0,|L1.1212|
000272  f7fffffe          BL       __2printf
000276  eeb70a00          VMOV.F32 s0,#1.00000000        ;2303
00027a  eec80a80          VDIV.F32 s1,s17,s0             ;2303
00027e  eeb70ae0          VCVT.F64.F32 d0,s1                 ;2303
000282  eeb0ab40          VMOV.F64 d10,d0                ;2303
000286  ec532b1a          VMOV     r2,r3,d10             ;2303
00028a  a090              ADR      r0,|L1.1228|
00028c  f7fffffe          BL       __2printf
                  |L1.656|
000290  2400              MOVS     r4,#0                 ;2306
000292  e05e              B        |L1.850|
                  |L1.660|
000294  f8570024          LDR      r0,[r7,r4,LSL #2]     ;2307
000298  f8561024          LDR      r1,[r6,r4,LSL #2]     ;2307
00029c  1a40              SUBS     r0,r0,r1              ;2307
00029e  ee000a10          VMOV     s0,r0                 ;2307
0002a2  eeb80ac0          VCVT.F32.S32 s0,s0                 ;2307
0002a6  a80c              ADD      r0,sp,#0x30           ;2307
0002a8  eb000084          ADD      r0,r0,r4,LSL #2       ;2307
0002ac  ed800a00          VSTR     s0,[r0,#0]            ;2307
0002b0  b38d              CBZ      r5,|L1.790|
0002b2  f8560024          LDR      r0,[r6,r4,LSL #2]     ;2310
0002b6  ee000a10          VMOV     s0,r0                 ;2310
0002ba  eeb80ac0          VCVT.F32.S32 s0,s0                 ;2310
0002be  eef70a00          VMOV.F32 s1,#1.00000000        ;2310
0002c2  ee801a20          VDIV.F32 s2,s0,s1              ;2310
0002c6  eeb70ac1          VCVT.F64.F32 d0,s2                 ;2310
0002ca  eeb0ab40          VMOV.F64 d10,d0                ;2310
0002ce  f8570024          LDR      r0,[r7,r4,LSL #2]     ;2310
0002d2  ee000a10          VMOV     s0,r0                 ;2310
0002d6  eeb80ac0          VCVT.F32.S32 s0,s0                 ;2310
0002da  eef70a00          VMOV.F32 s1,#1.00000000        ;2310
0002de  ee801a20          VDIV.F32 s2,s0,s1              ;2310
0002e2  eeb70ac1          VCVT.F64.F32 d0,s2                 ;2310
0002e6  eeb0bb40          VMOV.F64 d11,d0                ;2310
0002ea  a80c              ADD      r0,sp,#0x30           ;2310
0002ec  eb000084          ADD      r0,r0,r4,LSL #2       ;2310
0002f0  ed900a00          VLDR     s0,[r0,#0]            ;2310
0002f4  eef70a00          VMOV.F32 s1,#1.00000000        ;2310
0002f8  ee801a20          VDIV.F32 s2,s0,s1              ;2310
0002fc  eeb70ac1          VCVT.F64.F32 d0,s2                 ;2310
000300  eeb0cb40          VMOV.F64 d12,d0                ;2310
000304  ed8dab02          VSTR     d10,[sp,#8]           ;2310
000308  ed8dbb00          VSTR     d11,[sp,#0]           ;2310
00030c  ec532b1c          VMOV     r2,r3,d12             ;2310
000310  a072              ADR      r0,|L1.1244|
000312  f7fffffe          BL       __2printf
                  |L1.790|
000316  a80c              ADD      r0,sp,#0x30           ;2311
000318  eb000084          ADD      r0,r0,r4,LSL #2       ;2311
00031c  ed900a00          VLDR     s0,[r0,#0]            ;2311
000320  eeb40ac8          VCMPE.F32 s0,s16                ;2311
000324  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;2311
000328  d309              BCC      |L1.830|
00032a  a80c              ADD      r0,sp,#0x30           ;2311
00032c  eb000084          ADD      r0,r0,r4,LSL #2       ;2311
000330  ed900a00          VLDR     s0,[r0,#0]            ;2311
000334  eeb40ae8          VCMPE.F32 s0,s17                ;2311
000338  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;2311
00033c  dd08              BLE      |L1.848|
                  |L1.830|
00033e  b11d              CBZ      r5,|L1.840|
000340  4621              MOV      r1,r4                 ;2313
000342  a070              ADR      r0,|L1.1284|
000344  f7fffffe          BL       __2printf
                  |L1.840|
000348  2001              MOVS     r0,#1                 ;2314
00034a  40a0              LSLS     r0,r0,r4              ;2314
00034c  ea400808          ORR      r8,r0,r8              ;2314
                  |L1.848|
000350  1c64              ADDS     r4,r4,#1              ;2306
                  |L1.850|
000352  2c03              CMP      r4,#3                 ;2306
000354  db9e              BLT      |L1.660|
                  |L1.854|
000356  f1b80f00          CMP      r8,#0                 ;2319
00035a  d133              BNE      |L1.964|
00035c  482b              LDR      r0,|L1.1036|
00035e  ed900a0a          VLDR     s0,[r0,#0x28]         ;2321
000362  eddf0a29          VLDR     s1,|L1.1032|
000366  ee209a20          VMUL.F32 s18,s0,s1             ;2321
00036a  b165              CBZ      r5,|L1.902|
00036c  eeb70a00          VMOV.F32 s0,#1.00000000        ;2323
000370  eec90a00          VDIV.F32 s1,s18,s0             ;2323
000374  eeb70ae0          VCVT.F64.F32 d0,s1                 ;2323
000378  eeb0ab40          VMOV.F64 d10,d0                ;2323
00037c  ec532b1a          VMOV     r2,r3,d10             ;2323
000380  a06b              ADR      r0,|L1.1328|
000382  f7fffffe          BL       __2printf
                  |L1.902|
000386  2400              MOVS     r4,#0                 ;2324
000388  e01a              B        |L1.960|
                  |L1.906|
00038a  f8560024          LDR      r0,[r6,r4,LSL #2]     ;2325
00038e  ee000a10          VMOV     s0,r0                 ;2325
000392  eeb80bc0          VCVT.F64.S32 d0,s0                 ;2325
000396  eeb00bc0          VABS.F64 d0,d0                 ;2325
00039a  eeb71ac9          VCVT.F64.F32 d1,s18                ;2325
00039e  eeb40bc1          VCMPE.F64 d0,d1                 ;2325
0003a2  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;2325
0003a6  dd0a              BLE      |L1.958|
0003a8  b12d              CBZ      r5,|L1.950|
0003aa  f8562024          LDR      r2,[r6,r4,LSL #2]     ;2327
0003ae  4621              MOV      r1,r4                 ;2327
0003b0  a069              ADR      r0,|L1.1368|
0003b2  f7fffffe          BL       __2printf
                  |L1.950|
0003b6  2001              MOVS     r0,#1                 ;2328
0003b8  40a0              LSLS     r0,r0,r4              ;2328
0003ba  ea400808          ORR      r8,r0,r8              ;2328
                  |L1.958|
0003be  1c64              ADDS     r4,r4,#1              ;2324
                  |L1.960|
0003c0  2c03              CMP      r4,#3                 ;2324
0003c2  dbe2              BLT      |L1.906|
                  |L1.964|
0003c4  4640              MOV      r0,r8                 ;2333
0003c6  e634              B        |L1.50|
;;;2335   
                          ENDP

                  |L1.968|
                          DCD      ||st||
                  |L1.972|
0003cc  52656164          DCB      "Reading OTP Register Error.\n",0
0003d0  696e6720
0003d4  4f545020
0003d8  52656769
0003dc  73746572
0003e0  20457272
0003e4  6f722e0a
0003e8  00      
0003e9  00                DCB      0
0003ea  00                DCB      0
0003eb  00                DCB      0
                  |L1.1004|
0003ec  41636365          DCB      "Accel OTP:%d, %d, %d\n",0
0003f0  6c204f54
0003f4  503a2564
0003f8  2c202564
0003fc  2c202564
000400  0a00    
000402  00                DCB      0
000403  00                DCB      0
                  |L1.1028|
                          DCD      mpu_6500_st_tb
                  |L1.1032|
000408  47800000          DCFS     0x47800000 ; 65536
                  |L1.1036|
                          DCD      test
                  |L1.1040|
000410  00000000          DCFS     0x00000000 ; 0
                  |L1.1044|
000414  41434345          DCB      "ACCEL:CRITERIA A\n",0
000418  4c3a4352
00041c  49544552
000420  49412041
000424  0a00    
000426  00                DCB      0
000427  00                DCB      0
                  |L1.1064|
000428  42696173          DCB      "Bias_Shift=%7.4f, Bias_Reg=%7.4f, Bias_HWST=%7.4f\r\n",0
00042c  5f536869
000430  66743d25
000434  372e3466
000438  2c204269
00043c  61735f52
000440  65673d25
000444  372e3466
000448  2c204269
00044c  61735f48
000450  5753543d
000454  25372e34
000458  660d0a00
                  |L1.1116|
00045c  4f545020          DCB      "OTP value: %7.4f\r\n",0
000460  76616c75
000464  653a2025
000468  372e3466
00046c  0d0a00  
00046f  00                DCB      0
                  |L1.1136|
000470  72617469          DCB      "ratio=%7.4f, threshold=%7.4f\r\n",0
000474  6f3d2537
000478  2e34662c
00047c  20746872
000480  6573686f
000484  6c643d25
000488  372e3466
00048c  0d0a00  
00048f  00                DCB      0
                  |L1.1168|
000490  41434345          DCB      "ACCEL Fail Axis = %d\n",0
000494  4c204661
000498  696c2041
00049c  78697320
0004a0  3d202564
0004a4  0a00    
0004a6  00                DCB      0
0004a7  00                DCB      0
                  |L1.1192|
0004a8  41434345          DCB      "ACCEL:CRITERIA B\r\n",0
0004ac  4c3a4352
0004b0  49544552
0004b4  49412042
0004b8  0d0a00  
0004bb  00                DCB      0
                  |L1.1212|
0004bc  4d696e20          DCB      "Min MG: %7.4f\r\n",0
0004c0  4d473a20
0004c4  25372e34
0004c8  660d0a00
                  |L1.1228|
0004cc  4d617820          DCB      "Max MG: %7.4f\r\n",0
0004d0  4d473a20
0004d4  25372e34
0004d8  660d0a00
                  |L1.1244|
0004dc  42696173          DCB      "Bias_shift=%7.4f, st=%7.4f, reg=%7.4f\n",0
0004e0  5f736869
0004e4  66743d25
0004e8  372e3466
0004ec  2c207374
0004f0  3d25372e
0004f4  34662c20
0004f8  7265673d
0004fc  25372e34
000500  660a00  
000503  00                DCB      0
                  |L1.1284|
000504  41636365          DCB      "Accel FAIL axis:%d <= 225mg or >= 675mg\n",0
000508  6c204641
00050c  494c2061
000510  7869733a
000514  2564203c
000518  3d203232
00051c  356d6720
000520  6f72203e
000524  3d203637
000528  356d670a
00052c  00      
00052d  00                DCB      0
00052e  00                DCB      0
00052f  00                DCB      0
                  |L1.1328|
000530  41636365          DCB      "Accel:CRITERIA C: bias less than %7.4f\n",0
000534  6c3a4352
000538  49544552
00053c  49412043
000540  3a206269
000544  6173206c
000548  65737320
00054c  7468616e
000550  2025372e
000554  34660a00
                  |L1.1368|
000558  4641494c          DCB      "FAILED: Accel axis:%d = %ld > 500mg\n",0
00055c  45443a20
000560  41636365
000564  6c206178
000568  69733a25
00056c  64203d20
000570  256c6420
000574  3e203530
000578  306d670a
00057c  00      
00057d  00                DCB      0
00057e  00                DCB      0
00057f  00                DCB      0

                          AREA ||i.compass_self_test||, CODE, READONLY, ALIGN=2

                  compass_self_test PROC
;;;2024   #ifdef AK89xx_SECONDARY
;;;2025   static int compass_self_test(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;2026   {
;;;2027       unsigned char tmp[6];
;;;2028       unsigned char tries = 10;
000002  260a              MOVS     r6,#0xa
;;;2029       int result = 0x07;
000004  2507              MOVS     r5,#7
;;;2030       short data;
;;;2031   
;;;2032       mpu_set_bypass(1);
000006  2001              MOVS     r0,#1
000008  f7fffffe          BL       mpu_set_bypass
;;;2033   
;;;2034       tmp[0] = AKM_POWER_DOWN;
00000c  2010              MOVS     r0,#0x10
00000e  f88d0000          STRB     r0,[sp,#0]
;;;2035       if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp))
000012  494d              LDR      r1,|L2.328|
000014  f891002a          LDRB     r0,[r1,#0x2a]
000018  466b              MOV      r3,sp
00001a  2201              MOVS     r2,#1
00001c  210a              MOVS     r1,#0xa
00001e  f7fffffe          BL       MPU_Write_Len
000022  b108              CBZ      r0,|L2.40|
;;;2036           return 0x07;
000024  2007              MOVS     r0,#7
                  |L2.38|
;;;2037       tmp[0] = AKM_BIT_SELF_TEST;
;;;2038       if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_ASTC, 1, tmp))
;;;2039           goto AKM_restore;
;;;2040       tmp[0] = AKM_MODE_SELF_TEST;
;;;2041       if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp))
;;;2042           goto AKM_restore;
;;;2043   
;;;2044       do {
;;;2045           delay_ms(10);
;;;2046           if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ST1, 1, tmp))
;;;2047               goto AKM_restore;
;;;2048           if (tmp[0] & AKM_DATA_READY)
;;;2049               break;
;;;2050       } while (tries--);
;;;2051       if (!(tmp[0] & AKM_DATA_READY))
;;;2052           goto AKM_restore;
;;;2053   
;;;2054       if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_HXL, 6, tmp))
;;;2055           goto AKM_restore;
;;;2056   
;;;2057       result = 0;
;;;2058   #if defined MPU9150
;;;2059       data = (short)(tmp[1] << 8) | tmp[0];
;;;2060       if ((data > 100) || (data < -100))
;;;2061           result |= 0x01;
;;;2062       data = (short)(tmp[3] << 8) | tmp[2];
;;;2063       if ((data > 100) || (data < -100))
;;;2064           result |= 0x02;
;;;2065       data = (short)(tmp[5] << 8) | tmp[4];
;;;2066       if ((data > -300) || (data < -1000))
;;;2067           result |= 0x04;
;;;2068   #elif defined MPU9250
;;;2069       data = (short)(tmp[1] << 8) | tmp[0];
;;;2070       if ((data > 200) || (data < -200))  
;;;2071           result |= 0x01;
;;;2072       data = (short)(tmp[3] << 8) | tmp[2];
;;;2073       if ((data > 200) || (data < -200))  
;;;2074           result |= 0x02;
;;;2075       data = (short)(tmp[5] << 8) | tmp[4];
;;;2076       if ((data > -800) || (data < -3200))  
;;;2077           result |= 0x04;
;;;2078   #endif
;;;2079   AKM_restore:
;;;2080       tmp[0] = 0 | SUPPORTS_AK89xx_HIGH_SENS;
;;;2081       i2c_write(st.chip_cfg.compass_addr, AKM_REG_ASTC, 1, tmp);
;;;2082       tmp[0] = SUPPORTS_AK89xx_HIGH_SENS;
;;;2083       i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp);
;;;2084       mpu_set_bypass(0);
;;;2085       return result;
;;;2086   }
000026  bd7c              POP      {r2-r6,pc}
                  |L2.40|
000028  2040              MOVS     r0,#0x40              ;2037
00002a  f88d0000          STRB     r0,[sp,#0]            ;2037
00002e  4946              LDR      r1,|L2.328|
000030  f891002a          LDRB     r0,[r1,#0x2a]         ;2038
000034  466b              MOV      r3,sp                 ;2038
000036  2201              MOVS     r2,#1                 ;2038
000038  210c              MOVS     r1,#0xc               ;2038
00003a  f7fffffe          BL       MPU_Write_Len
00003e  b100              CBZ      r0,|L2.66|
000040  e066              B        |L2.272|
                  |L2.66|
000042  2018              MOVS     r0,#0x18              ;2040
000044  f88d0000          STRB     r0,[sp,#0]            ;2040
000048  493f              LDR      r1,|L2.328|
00004a  f891002a          LDRB     r0,[r1,#0x2a]         ;2041
00004e  466b              MOV      r3,sp                 ;2041
000050  2201              MOVS     r2,#1                 ;2041
000052  210a              MOVS     r1,#0xa               ;2041
000054  f7fffffe          BL       MPU_Write_Len
000058  b100              CBZ      r0,|L2.92|
00005a  e059              B        |L2.272|
                  |L2.92|
00005c  bf00              NOP                            ;2044
                  |L2.94|
00005e  200a              MOVS     r0,#0xa               ;2045
000060  f7fffffe          BL       delay_ms
000064  4938              LDR      r1,|L2.328|
000066  f891002a          LDRB     r0,[r1,#0x2a]         ;2046
00006a  466b              MOV      r3,sp                 ;2046
00006c  2201              MOVS     r2,#1                 ;2046
00006e  2102              MOVS     r1,#2                 ;2046
000070  f7fffffe          BL       MPU_Read_Len
000074  b100              CBZ      r0,|L2.120|
000076  e04b              B        |L2.272|
                  |L2.120|
000078  f89d0000          LDRB     r0,[sp,#0]            ;2048
00007c  f0000001          AND      r0,r0,#1              ;2048
000080  b100              CBZ      r0,|L2.132|
000082  e004              B        |L2.142|
                  |L2.132|
000084  0030              MOVS     r0,r6                 ;2050
000086  f1a60101          SUB      r1,r6,#1              ;2050
00008a  b2ce              UXTB     r6,r1                 ;2050
00008c  d1e7              BNE      |L2.94|
                  |L2.142|
00008e  bf00              NOP                            ;2049
000090  f89d0000          LDRB     r0,[sp,#0]            ;2051
000094  f0000001          AND      r0,r0,#1              ;2051
000098  b900              CBNZ     r0,|L2.156|
00009a  e039              B        |L2.272|
                  |L2.156|
00009c  492a              LDR      r1,|L2.328|
00009e  f891002a          LDRB     r0,[r1,#0x2a]         ;2054
0000a2  466b              MOV      r3,sp                 ;2054
0000a4  2206              MOVS     r2,#6                 ;2054
0000a6  2103              MOVS     r1,#3                 ;2054
0000a8  f7fffffe          BL       MPU_Read_Len
0000ac  b100              CBZ      r0,|L2.176|
0000ae  e02f              B        |L2.272|
                  |L2.176|
0000b0  2500              MOVS     r5,#0                 ;2057
0000b2  f89d0001          LDRB     r0,[sp,#1]            ;2069
0000b6  0200              LSLS     r0,r0,#8              ;2069
0000b8  b200              SXTH     r0,r0                 ;2069
0000ba  f89d1000          LDRB     r1,[sp,#0]            ;2069
0000be  ea400401          ORR      r4,r0,r1              ;2069
0000c2  2cc8              CMP      r4,#0xc8              ;2070
0000c4  dc02              BGT      |L2.204|
0000c6  f1140fc8          CMN      r4,#0xc8              ;2070
0000ca  da01              BGE      |L2.208|
                  |L2.204|
0000cc  f0450501          ORR      r5,r5,#1              ;2071
                  |L2.208|
0000d0  f89d0003          LDRB     r0,[sp,#3]            ;2072
0000d4  0200              LSLS     r0,r0,#8              ;2072
0000d6  b200              SXTH     r0,r0                 ;2072
0000d8  f89d1002          LDRB     r1,[sp,#2]            ;2072
0000dc  ea400401          ORR      r4,r0,r1              ;2072
0000e0  2cc8              CMP      r4,#0xc8              ;2073
0000e2  dc02              BGT      |L2.234|
0000e4  f1140fc8          CMN      r4,#0xc8              ;2073
0000e8  da01              BGE      |L2.238|
                  |L2.234|
0000ea  f0450502          ORR      r5,r5,#2              ;2074
                  |L2.238|
0000ee  f89d0005          LDRB     r0,[sp,#5]            ;2075
0000f2  0200              LSLS     r0,r0,#8              ;2075
0000f4  b200              SXTH     r0,r0                 ;2075
0000f6  f89d1004          LDRB     r1,[sp,#4]            ;2075
0000fa  ea400401          ORR      r4,r0,r1              ;2075
0000fe  f5147f48          CMN      r4,#0x320             ;2076
000102  dc02              BGT      |L2.266|
000104  f5146f48          CMN      r4,#0xc80             ;2076
000108  da01              BGE      |L2.270|
                  |L2.266|
00010a  f0450504          ORR      r5,r5,#4              ;2077
                  |L2.270|
00010e  bf00              NOP                            ;2079
                  |L2.272|
000110  2010              MOVS     r0,#0x10              ;2080
000112  f88d0000          STRB     r0,[sp,#0]            ;2080
000116  490c              LDR      r1,|L2.328|
000118  f891002a          LDRB     r0,[r1,#0x2a]         ;2081
00011c  466b              MOV      r3,sp                 ;2081
00011e  2201              MOVS     r2,#1                 ;2081
000120  210c              MOVS     r1,#0xc               ;2081
000122  f7fffffe          BL       MPU_Write_Len
000126  2010              MOVS     r0,#0x10              ;2082
000128  f88d0000          STRB     r0,[sp,#0]            ;2082
00012c  4906              LDR      r1,|L2.328|
00012e  f891002a          LDRB     r0,[r1,#0x2a]         ;2083
000132  466b              MOV      r3,sp                 ;2083
000134  2201              MOVS     r2,#1                 ;2083
000136  210a              MOVS     r1,#0xa               ;2083
000138  f7fffffe          BL       MPU_Write_Len
00013c  2000              MOVS     r0,#0                 ;2084
00013e  f7fffffe          BL       mpu_set_bypass
000142  4628              MOV      r0,r5                 ;2085
000144  e76f              B        |L2.38|
;;;2087   #endif
                          ENDP

000146  0000              DCW      0x0000
                  |L2.328|
                          DCD      ||st||

                          AREA ||i.get_st_6500_biases||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  get_st_6500_biases PROC
;;;2428   
;;;2429   static int get_st_6500_biases(long *gyro, long *accel, unsigned char hw_test, int debug)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;2430   {
000004  ed2d8b06          VPUSH    {d8-d10}
000008  f5ad7d07          SUB      sp,sp,#0x21c
00000c  4605              MOV      r5,r0
00000e  460c              MOV      r4,r1
000010  4690              MOV      r8,r2
000012  4699              MOV      r9,r3
;;;2431   	OS_ERR err;
;;;2432       unsigned char data[HWST_MAX_PACKET_LENGTH];
;;;2433       unsigned char packet_count, ii;
;;;2434       unsigned short fifo_count;
;;;2435       int s = 0, read_size = 0, ind;
000014  2600              MOVS     r6,#0
000016  2000              MOVS     r0,#0
000018  9004              STR      r0,[sp,#0x10]
;;;2436   
;;;2437       data[0] = 0x01;
00001a  2001              MOVS     r0,#1
00001c  f88d0018          STRB     r0,[sp,#0x18]
;;;2438       data[1] = 0;
000020  2000              MOVS     r0,#0
000022  f88d0019          STRB     r0,[sp,#0x19]
;;;2439       if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
000026  4afe              LDR      r2,|L3.1056|
000028  6812              LDR      r2,[r2,#0]  ; st
00002a  7d51              LDRB     r1,[r2,#0x15]
00002c  4afc              LDR      r2,|L3.1056|
00002e  6852              LDR      r2,[r2,#4]  ; st
000030  7810              LDRB     r0,[r2,#0]
000032  ab06              ADD      r3,sp,#0x18
000034  2202              MOVS     r2,#2
000036  f7fffffe          BL       MPU_Write_Len
00003a  b130              CBZ      r0,|L3.74|
;;;2440           return -1;
00003c  1e70              SUBS     r0,r6,#1
                  |L3.62|
;;;2441       delay_ms(200);
;;;2442       data[0] = 0;
;;;2443       if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
;;;2444           return -1;
;;;2445       if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
;;;2446           return -1;
;;;2447       if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
;;;2448           return -1;
;;;2449       if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
;;;2450           return -1;
;;;2451       if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
;;;2452           return -1;
;;;2453       data[0] = BIT_FIFO_RST | BIT_DMP_RST;
;;;2454       if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
;;;2455           return -1;
;;;2456       delay_ms(15);
;;;2457       data[0] = st.test->reg_lpf;
;;;2458       if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
;;;2459           return -1;
;;;2460       data[0] = st.test->reg_rate_div;
;;;2461       if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
;;;2462           return -1;
;;;2463       if (hw_test)
;;;2464           data[0] = st.test->reg_gyro_fsr | 0xE0;
;;;2465       else
;;;2466           data[0] = st.test->reg_gyro_fsr;
;;;2467       if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
;;;2468           return -1;
;;;2469   
;;;2470       if (hw_test)
;;;2471           data[0] = st.test->reg_accel_fsr | 0xE0;
;;;2472       else
;;;2473           data[0] = test.reg_accel_fsr;
;;;2474       if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
;;;2475           return -1;
;;;2476   
;;;2477       delay_ms(test.wait_ms);  //wait 200ms for sensors to stabilize
;;;2478   
;;;2479       /* Enable FIFO */
;;;2480       data[0] = BIT_FIFO_EN;
;;;2481       if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
;;;2482           return -1;
;;;2483       data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
;;;2484       if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
;;;2485           return -1;
;;;2486   
;;;2487       //initialize the bias return values
;;;2488       gyro[0] = gyro[1] = gyro[2] = 0;
;;;2489       accel[0] = accel[1] = accel[2] = 0;
;;;2490   
;;;2491       if(debug)
;;;2492       	log_i("Starting Bias Loop Reads\n");
;;;2493   
;;;2494       //start reading samples
;;;2495       while (s < test.packet_thresh) {
;;;2496       	delay_ms(test.sample_wait_ms); //wait 10ms to fill FIFO
;;;2497   		if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
;;;2498   			return -1;
;;;2499   		fifo_count = (data[0] << 8) | data[1];
;;;2500   		packet_count = fifo_count / MAX_PACKET_LENGTH;
;;;2501   		if ((test.packet_thresh - s) < packet_count)
;;;2502   		            packet_count = test.packet_thresh - s;
;;;2503   		read_size = packet_count * MAX_PACKET_LENGTH;
;;;2504   
;;;2505   		//burst read from FIFO
;;;2506   		if (i2c_read(st.hw->addr, st.reg->fifo_r_w, read_size, data))
;;;2507   						return -1;
;;;2508   		ind = 0;
;;;2509   		for (ii = 0; ii < packet_count; ii++) {
;;;2510   			short accel_cur[3], gyro_cur[3];
;;;2511   			accel_cur[0] = ((short)data[ind + 0] << 8) | data[ind + 1];
;;;2512   			accel_cur[1] = ((short)data[ind + 2] << 8) | data[ind + 3];
;;;2513   			accel_cur[2] = ((short)data[ind + 4] << 8) | data[ind + 5];
;;;2514   			accel[0] += (long)accel_cur[0];
;;;2515   			accel[1] += (long)accel_cur[1];
;;;2516   			accel[2] += (long)accel_cur[2];
;;;2517   			gyro_cur[0] = (((short)data[ind + 6] << 8) | data[ind + 7]);
;;;2518   			gyro_cur[1] = (((short)data[ind + 8] << 8) | data[ind + 9]);
;;;2519   			gyro_cur[2] = (((short)data[ind + 10] << 8) | data[ind + 11]);
;;;2520   			gyro[0] += (long)gyro_cur[0];
;;;2521   			gyro[1] += (long)gyro_cur[1];
;;;2522   			gyro[2] += (long)gyro_cur[2];
;;;2523   			ind += MAX_PACKET_LENGTH;
;;;2524   		}
;;;2525   		s += packet_count;
;;;2526       }
;;;2527   
;;;2528       if(debug)
;;;2529       	log_i("Samples: %d\n", s);
;;;2530   
;;;2531       //stop FIFO
;;;2532       data[0] = 0;
;;;2533       if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
;;;2534           return -1;
;;;2535   
;;;2536       gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / s);
;;;2537       gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / s);
;;;2538       gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / s);
;;;2539       accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens / s);
;;;2540       accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens / s);
;;;2541       accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens / s);
;;;2542       /* remove gravity from bias calculation */
;;;2543       if (accel[2] > 0L)
;;;2544           accel[2] -= 65536L;
;;;2545       else
;;;2546           accel[2] += 65536L;
;;;2547   
;;;2548   
;;;2549       if(debug) {
;;;2550       	log_i("Accel offset data HWST bit=%d: %7.4f %7.4f %7.4f\r\n", hw_test, accel[0]/65536.f, accel[1]/65536.f, accel[2]/65536.f);
;;;2551       	log_i("Gyro offset data HWST bit=%d: %7.4f %7.4f %7.4f\r\n", hw_test, gyro[0]/65536.f, gyro[1]/65536.f, gyro[2]/65536.f);
;;;2552       }
;;;2553   
;;;2554       return 0;
;;;2555   }
00003e  f50d7d07          ADD      sp,sp,#0x21c
000042  ecbd8b06          VPOP     {d8-d10}
000046  e8bd8ff0          POP      {r4-r11,pc}
                  |L3.74|
00004a  20c8              MOVS     r0,#0xc8              ;2441
00004c  f7fffffe          BL       delay_ms
000050  2000              MOVS     r0,#0                 ;2442
000052  f88d0018          STRB     r0,[sp,#0x18]         ;2442
000056  4af2              LDR      r2,|L3.1056|
000058  6812              LDR      r2,[r2,#0]            ;2443  ; st
00005a  7c51              LDRB     r1,[r2,#0x11]         ;2443
00005c  4af0              LDR      r2,|L3.1056|
00005e  6852              LDR      r2,[r2,#4]            ;2443  ; st
000060  7810              LDRB     r0,[r2,#0]            ;2443
000062  ab06              ADD      r3,sp,#0x18           ;2443
000064  2201              MOVS     r2,#1                 ;2443
000066  f7fffffe          BL       MPU_Write_Len
00006a  b110              CBZ      r0,|L3.114|
00006c  f04f30ff          MOV      r0,#0xffffffff        ;2444
000070  e7e5              B        |L3.62|
                  |L3.114|
000072  4aeb              LDR      r2,|L3.1056|
000074  6812              LDR      r2,[r2,#0]            ;2445  ; st
000076  7951              LDRB     r1,[r2,#5]            ;2445
000078  4ae9              LDR      r2,|L3.1056|
00007a  6852              LDR      r2,[r2,#4]            ;2445  ; st
00007c  7810              LDRB     r0,[r2,#0]            ;2445
00007e  ab06              ADD      r3,sp,#0x18           ;2445
000080  2201              MOVS     r2,#1                 ;2445
000082  f7fffffe          BL       MPU_Write_Len
000086  b110              CBZ      r0,|L3.142|
000088  f04f30ff          MOV      r0,#0xffffffff        ;2446
00008c  e7d7              B        |L3.62|
                  |L3.142|
00008e  4ae4              LDR      r2,|L3.1056|
000090  6812              LDR      r2,[r2,#0]            ;2447  ; st
000092  7d51              LDRB     r1,[r2,#0x15]         ;2447
000094  4ae2              LDR      r2,|L3.1056|
000096  6852              LDR      r2,[r2,#4]            ;2447  ; st
000098  7810              LDRB     r0,[r2,#0]            ;2447
00009a  ab06              ADD      r3,sp,#0x18           ;2447
00009c  2201              MOVS     r2,#1                 ;2447
00009e  f7fffffe          BL       MPU_Write_Len
0000a2  b110              CBZ      r0,|L3.170|
0000a4  f04f30ff          MOV      r0,#0xffffffff        ;2448
0000a8  e7c9              B        |L3.62|
                  |L3.170|
0000aa  4add              LDR      r2,|L3.1056|
0000ac  6812              LDR      r2,[r2,#0]            ;2449  ; st
0000ae  7e91              LDRB     r1,[r2,#0x1a]         ;2449
0000b0  4adb              LDR      r2,|L3.1056|
0000b2  6852              LDR      r2,[r2,#4]            ;2449  ; st
0000b4  7810              LDRB     r0,[r2,#0]            ;2449
0000b6  ab06              ADD      r3,sp,#0x18           ;2449
0000b8  2201              MOVS     r2,#1                 ;2449
0000ba  f7fffffe          BL       MPU_Write_Len
0000be  b110              CBZ      r0,|L3.198|
0000c0  f04f30ff          MOV      r0,#0xffffffff        ;2450
0000c4  e7bb              B        |L3.62|
                  |L3.198|
0000c6  4ad6              LDR      r2,|L3.1056|
0000c8  6812              LDR      r2,[r2,#0]            ;2451  ; st
0000ca  7911              LDRB     r1,[r2,#4]            ;2451
0000cc  4ad4              LDR      r2,|L3.1056|
0000ce  6852              LDR      r2,[r2,#4]            ;2451  ; st
0000d0  7810              LDRB     r0,[r2,#0]            ;2451
0000d2  ab06              ADD      r3,sp,#0x18           ;2451
0000d4  2201              MOVS     r2,#1                 ;2451
0000d6  f7fffffe          BL       MPU_Write_Len
0000da  b110              CBZ      r0,|L3.226|
0000dc  f04f30ff          MOV      r0,#0xffffffff        ;2452
0000e0  e7ad              B        |L3.62|
                  |L3.226|
0000e2  200c              MOVS     r0,#0xc               ;2453
0000e4  f88d0018          STRB     r0,[sp,#0x18]         ;2453
0000e8  4acd              LDR      r2,|L3.1056|
0000ea  6812              LDR      r2,[r2,#0]            ;2454  ; st
0000ec  7911              LDRB     r1,[r2,#4]            ;2454
0000ee  4acc              LDR      r2,|L3.1056|
0000f0  6852              LDR      r2,[r2,#4]            ;2454  ; st
0000f2  7810              LDRB     r0,[r2,#0]            ;2454
0000f4  ab06              ADD      r3,sp,#0x18           ;2454
0000f6  2201              MOVS     r2,#1                 ;2454
0000f8  f7fffffe          BL       MPU_Write_Len
0000fc  b110              CBZ      r0,|L3.260|
0000fe  f04f30ff          MOV      r0,#0xffffffff        ;2455
000102  e79c              B        |L3.62|
                  |L3.260|
000104  200f              MOVS     r0,#0xf               ;2456
000106  f7fffffe          BL       delay_ms
00010a  48c5              LDR      r0,|L3.1056|
00010c  6b40              LDR      r0,[r0,#0x34]         ;2457  ; st
00010e  7a40              LDRB     r0,[r0,#9]            ;2457
000110  f88d0018          STRB     r0,[sp,#0x18]         ;2457
000114  4ac2              LDR      r2,|L3.1056|
000116  6812              LDR      r2,[r2,#0]            ;2458  ; st
000118  7891              LDRB     r1,[r2,#2]            ;2458
00011a  4ac1              LDR      r2,|L3.1056|
00011c  6852              LDR      r2,[r2,#4]            ;2458  ; st
00011e  7810              LDRB     r0,[r2,#0]            ;2458
000120  ab06              ADD      r3,sp,#0x18           ;2458
000122  2201              MOVS     r2,#1                 ;2458
000124  f7fffffe          BL       MPU_Write_Len
000128  b110              CBZ      r0,|L3.304|
00012a  f04f30ff          MOV      r0,#0xffffffff        ;2459
00012e  e786              B        |L3.62|
                  |L3.304|
000130  48bb              LDR      r0,|L3.1056|
000132  6b40              LDR      r0,[r0,#0x34]         ;2460  ; st
000134  7a00              LDRB     r0,[r0,#8]            ;2460
000136  f88d0018          STRB     r0,[sp,#0x18]         ;2460
00013a  4ab9              LDR      r2,|L3.1056|
00013c  6812              LDR      r2,[r2,#0]            ;2461  ; st
00013e  7851              LDRB     r1,[r2,#1]            ;2461
000140  4ab7              LDR      r2,|L3.1056|
000142  6852              LDR      r2,[r2,#4]            ;2461  ; st
000144  7810              LDRB     r0,[r2,#0]            ;2461
000146  ab06              ADD      r3,sp,#0x18           ;2461
000148  2201              MOVS     r2,#1                 ;2461
00014a  f7fffffe          BL       MPU_Write_Len
00014e  b110              CBZ      r0,|L3.342|
000150  f04f30ff          MOV      r0,#0xffffffff        ;2462
000154  e773              B        |L3.62|
                  |L3.342|
000156  f1b80f00          CMP      r8,#0                 ;2463
00015a  d007              BEQ      |L3.364|
00015c  48b0              LDR      r0,|L3.1056|
00015e  6b40              LDR      r0,[r0,#0x34]         ;2464  ; st
000160  7a80              LDRB     r0,[r0,#0xa]          ;2464
000162  f04000e0          ORR      r0,r0,#0xe0           ;2464
000166  f88d0018          STRB     r0,[sp,#0x18]         ;2464
00016a  e004              B        |L3.374|
                  |L3.364|
00016c  48ac              LDR      r0,|L3.1056|
00016e  6b40              LDR      r0,[r0,#0x34]         ;2466  ; st
000170  7a80              LDRB     r0,[r0,#0xa]          ;2466
000172  f88d0018          STRB     r0,[sp,#0x18]         ;2466
                  |L3.374|
000176  4aaa              LDR      r2,|L3.1056|
000178  6812              LDR      r2,[r2,#0]            ;2467  ; st
00017a  7991              LDRB     r1,[r2,#6]            ;2467
00017c  4aa8              LDR      r2,|L3.1056|
00017e  6852              LDR      r2,[r2,#4]            ;2467  ; st
000180  7810              LDRB     r0,[r2,#0]            ;2467
000182  ab06              ADD      r3,sp,#0x18           ;2467
000184  2201              MOVS     r2,#1                 ;2467
000186  f7fffffe          BL       MPU_Write_Len
00018a  b110              CBZ      r0,|L3.402|
00018c  f04f30ff          MOV      r0,#0xffffffff        ;2468
000190  e755              B        |L3.62|
                  |L3.402|
000192  f1b80f00          CMP      r8,#0                 ;2470
000196  d007              BEQ      |L3.424|
000198  48a1              LDR      r0,|L3.1056|
00019a  6b40              LDR      r0,[r0,#0x34]         ;2471  ; st
00019c  7ac0              LDRB     r0,[r0,#0xb]          ;2471
00019e  f04000e0          ORR      r0,r0,#0xe0           ;2471
0001a2  f88d0018          STRB     r0,[sp,#0x18]         ;2471
0001a6  e003              B        |L3.432|
                  |L3.424|
0001a8  489e              LDR      r0,|L3.1060|
0001aa  7ac0              LDRB     r0,[r0,#0xb]          ;2473  ; test
0001ac  f88d0018          STRB     r0,[sp,#0x18]         ;2473
                  |L3.432|
0001b0  4a9b              LDR      r2,|L3.1056|
0001b2  6812              LDR      r2,[r2,#0]            ;2474  ; st
0001b4  79d1              LDRB     r1,[r2,#7]            ;2474
0001b6  4a9a              LDR      r2,|L3.1056|
0001b8  6852              LDR      r2,[r2,#4]            ;2474  ; st
0001ba  7810              LDRB     r0,[r2,#0]            ;2474
0001bc  ab06              ADD      r3,sp,#0x18           ;2474
0001be  2201              MOVS     r2,#1                 ;2474
0001c0  f7fffffe          BL       MPU_Write_Len
0001c4  b110              CBZ      r0,|L3.460|
0001c6  f04f30ff          MOV      r0,#0xffffffff        ;2475
0001ca  e738              B        |L3.62|
                  |L3.460|
0001cc  4995              LDR      r1,|L3.1060|
0001ce  8988              LDRH     r0,[r1,#0xc]          ;2477  ; test
0001d0  f7fffffe          BL       delay_ms
0001d4  2040              MOVS     r0,#0x40              ;2480
0001d6  f88d0018          STRB     r0,[sp,#0x18]         ;2480
0001da  4a91              LDR      r2,|L3.1056|
0001dc  6812              LDR      r2,[r2,#0]            ;2481  ; st
0001de  7911              LDRB     r1,[r2,#4]            ;2481
0001e0  4a8f              LDR      r2,|L3.1056|
0001e2  6852              LDR      r2,[r2,#4]            ;2481  ; st
0001e4  7810              LDRB     r0,[r2,#0]            ;2481
0001e6  ab06              ADD      r3,sp,#0x18           ;2481
0001e8  2201              MOVS     r2,#1                 ;2481
0001ea  f7fffffe          BL       MPU_Write_Len
0001ee  b110              CBZ      r0,|L3.502|
0001f0  f04f30ff          MOV      r0,#0xffffffff        ;2482
0001f4  e723              B        |L3.62|
                  |L3.502|
0001f6  2078              MOVS     r0,#0x78              ;2483
0001f8  f88d0018          STRB     r0,[sp,#0x18]         ;2483
0001fc  4a88              LDR      r2,|L3.1056|
0001fe  6812              LDR      r2,[r2,#0]            ;2484  ; st
000200  7951              LDRB     r1,[r2,#5]            ;2484
000202  4a87              LDR      r2,|L3.1056|
000204  6852              LDR      r2,[r2,#4]            ;2484  ; st
000206  7810              LDRB     r0,[r2,#0]            ;2484
000208  ab06              ADD      r3,sp,#0x18           ;2484
00020a  2201              MOVS     r2,#1                 ;2484
00020c  f7fffffe          BL       MPU_Write_Len
000210  b110              CBZ      r0,|L3.536|
000212  f04f30ff          MOV      r0,#0xffffffff        ;2485
000216  e712              B        |L3.62|
                  |L3.536|
000218  2000              MOVS     r0,#0                 ;2488
00021a  60a8              STR      r0,[r5,#8]            ;2488
00021c  6068              STR      r0,[r5,#4]            ;2488
00021e  6028              STR      r0,[r5,#0]            ;2488
000220  60a0              STR      r0,[r4,#8]            ;2489
000222  6060              STR      r0,[r4,#4]            ;2489
000224  6020              STR      r0,[r4,#0]            ;2489
000226  f1b90f00          CMP      r9,#0                 ;2491
00022a  d002              BEQ      |L3.562|
00022c  a07e              ADR      r0,|L3.1064|
00022e  f7fffffe          BL       __2printf
                  |L3.562|
000232  e0a2              B        |L3.890|
                  |L3.564|
000234  497b              LDR      r1,|L3.1060|
000236  8d88              LDRH     r0,[r1,#0x2c]         ;2496  ; test
000238  f7fffffe          BL       delay_ms
00023c  4a78              LDR      r2,|L3.1056|
00023e  6812              LDR      r2,[r2,#0]            ;2497  ; st
000240  7b11              LDRB     r1,[r2,#0xc]          ;2497
000242  4a77              LDR      r2,|L3.1056|
000244  6852              LDR      r2,[r2,#4]            ;2497  ; st
000246  7810              LDRB     r0,[r2,#0]            ;2497
000248  ab06              ADD      r3,sp,#0x18           ;2497
00024a  2202              MOVS     r2,#2                 ;2497
00024c  f7fffffe          BL       MPU_Read_Len
000250  b110              CBZ      r0,|L3.600|
000252  f04f30ff          MOV      r0,#0xffffffff        ;2498
000256  e6f2              B        |L3.62|
                  |L3.600|
000258  f89d0019          LDRB     r0,[sp,#0x19]         ;2499
00025c  f89d1018          LDRB     r1,[sp,#0x18]         ;2499
000260  ea402001          ORR      r0,r0,r1,LSL #8       ;2499
000264  9005              STR      r0,[sp,#0x14]         ;2499
000266  210c              MOVS     r1,#0xc               ;2500
000268  9805              LDR      r0,[sp,#0x14]         ;2500
00026a  fb90f0f1          SDIV     r0,r0,r1              ;2500
00026e  f0000aff          AND      r10,r0,#0xff          ;2500
000272  486c              LDR      r0,|L3.1060|
000274  7b80              LDRB     r0,[r0,#0xe]          ;2501  ; test
000276  1b80              SUBS     r0,r0,r6              ;2501
000278  4550              CMP      r0,r10                ;2501
00027a  da04              BGE      |L3.646|
00027c  4869              LDR      r0,|L3.1060|
00027e  7b80              LDRB     r0,[r0,#0xe]          ;2502  ; test
000280  1b80              SUBS     r0,r0,r6              ;2502
000282  f0000aff          AND      r10,r0,#0xff          ;2502
                  |L3.646|
000286  eb0a004a          ADD      r0,r10,r10,LSL #1     ;2503
00028a  0083              LSLS     r3,r0,#2              ;2503
00028c  9304              STR      r3,[sp,#0x10]         ;2503
00028e  9b04              LDR      r3,[sp,#0x10]         ;2506
000290  b2da              UXTB     r2,r3                 ;2506
000292  4b63              LDR      r3,|L3.1056|
000294  681b              LDR      r3,[r3,#0]            ;2506  ; st
000296  7b59              LDRB     r1,[r3,#0xd]          ;2506
000298  4b61              LDR      r3,|L3.1056|
00029a  685b              LDR      r3,[r3,#4]            ;2506  ; st
00029c  7818              LDRB     r0,[r3,#0]            ;2506
00029e  ab06              ADD      r3,sp,#0x18           ;2506
0002a0  f7fffffe          BL       MPU_Read_Len
0002a4  b110              CBZ      r0,|L3.684|
0002a6  f04f30ff          MOV      r0,#0xffffffff        ;2507
0002aa  e6c8              B        |L3.62|
                  |L3.684|
0002ac  2700              MOVS     r7,#0                 ;2508
0002ae  46bb              MOV      r11,r7                ;2509
0002b0  e060              B        |L3.884|
                  |L3.690|
0002b2  a906              ADD      r1,sp,#0x18           ;2511
0002b4  1c78              ADDS     r0,r7,#1              ;2511
0002b6  5c08              LDRB     r0,[r1,r0]            ;2511
0002b8  5dc9              LDRB     r1,[r1,r7]            ;2511
0002ba  ea402001          ORR      r0,r0,r1,LSL #8       ;2511
0002be  b200              SXTH     r0,r0                 ;2511
0002c0  f8ad0008          STRH     r0,[sp,#8]            ;2511
0002c4  a906              ADD      r1,sp,#0x18           ;2512
0002c6  1cf8              ADDS     r0,r7,#3              ;2512
0002c8  5c09              LDRB     r1,[r1,r0]            ;2512
0002ca  aa06              ADD      r2,sp,#0x18           ;2512
0002cc  1cb8              ADDS     r0,r7,#2              ;2512
0002ce  5c10              LDRB     r0,[r2,r0]            ;2512
0002d0  ea412000          ORR      r0,r1,r0,LSL #8       ;2512
0002d4  b200              SXTH     r0,r0                 ;2512
0002d6  f8ad000a          STRH     r0,[sp,#0xa]          ;2512
0002da  a906              ADD      r1,sp,#0x18           ;2513
0002dc  1d78              ADDS     r0,r7,#5              ;2513
0002de  5c09              LDRB     r1,[r1,r0]            ;2513
0002e0  1d38              ADDS     r0,r7,#4              ;2513
0002e2  5c10              LDRB     r0,[r2,r0]            ;2513
0002e4  ea412000          ORR      r0,r1,r0,LSL #8       ;2513
0002e8  b200              SXTH     r0,r0                 ;2513
0002ea  f8ad000c          STRH     r0,[sp,#0xc]          ;2513
0002ee  f9bd1008          LDRSH    r1,[sp,#8]            ;2514
0002f2  6820              LDR      r0,[r4,#0]            ;2514
0002f4  4408              ADD      r0,r0,r1              ;2514
0002f6  6020              STR      r0,[r4,#0]            ;2514
0002f8  f9bd100a          LDRSH    r1,[sp,#0xa]          ;2515
0002fc  6860              LDR      r0,[r4,#4]            ;2515
0002fe  4408              ADD      r0,r0,r1              ;2515
000300  6060              STR      r0,[r4,#4]            ;2515
000302  f9bd100c          LDRSH    r1,[sp,#0xc]          ;2516
000306  68a0              LDR      r0,[r4,#8]            ;2516
000308  4408              ADD      r0,r0,r1              ;2516
00030a  60a0              STR      r0,[r4,#8]            ;2516
00030c  a906              ADD      r1,sp,#0x18           ;2517
00030e  1df8              ADDS     r0,r7,#7              ;2517
000310  5c09              LDRB     r1,[r1,r0]            ;2517
000312  1db8              ADDS     r0,r7,#6              ;2517
000314  5c10              LDRB     r0,[r2,r0]            ;2517
000316  ea412000          ORR      r0,r1,r0,LSL #8       ;2517
00031a  b200              SXTH     r0,r0                 ;2517
00031c  f8ad0000          STRH     r0,[sp,#0]            ;2517
000320  a906              ADD      r1,sp,#0x18           ;2518
000322  f1070009          ADD      r0,r7,#9              ;2518
000326  5c09              LDRB     r1,[r1,r0]            ;2518
000328  1e40              SUBS     r0,r0,#1              ;2518
00032a  5c10              LDRB     r0,[r2,r0]            ;2518
00032c  ea412000          ORR      r0,r1,r0,LSL #8       ;2518
000330  b200              SXTH     r0,r0                 ;2518
000332  f8ad0002          STRH     r0,[sp,#2]            ;2518
000336  a906              ADD      r1,sp,#0x18           ;2519
000338  f107000b          ADD      r0,r7,#0xb            ;2519
00033c  5c09              LDRB     r1,[r1,r0]            ;2519
00033e  1e40              SUBS     r0,r0,#1              ;2519
000340  5c10              LDRB     r0,[r2,r0]            ;2519
000342  ea412000          ORR      r0,r1,r0,LSL #8       ;2519
000346  b200              SXTH     r0,r0                 ;2519
000348  f8ad0004          STRH     r0,[sp,#4]            ;2519
00034c  f9bd1000          LDRSH    r1,[sp,#0]            ;2520
000350  6828              LDR      r0,[r5,#0]            ;2520
000352  4408              ADD      r0,r0,r1              ;2520
000354  6028              STR      r0,[r5,#0]            ;2520
000356  f9bd1002          LDRSH    r1,[sp,#2]            ;2521
00035a  6868              LDR      r0,[r5,#4]            ;2521
00035c  4408              ADD      r0,r0,r1              ;2521
00035e  6068              STR      r0,[r5,#4]            ;2521
000360  f9bd1004          LDRSH    r1,[sp,#4]            ;2522
000364  68a8              LDR      r0,[r5,#8]            ;2522
000366  4408              ADD      r0,r0,r1              ;2522
000368  60a8              STR      r0,[r5,#8]            ;2522
00036a  370c              ADDS     r7,r7,#0xc            ;2523
00036c  f10b0001          ADD      r0,r11,#1             ;2509
000370  f0000bff          AND      r11,r0,#0xff          ;2509
                  |L3.884|
000374  45d3              CMP      r11,r10               ;2509
000376  db9c              BLT      |L3.690|
000378  4456              ADD      r6,r6,r10             ;2525
                  |L3.890|
00037a  482a              LDR      r0,|L3.1060|
00037c  7b80              LDRB     r0,[r0,#0xe]          ;2495  ; test
00037e  42b0              CMP      r0,r6                 ;2495
000380  f73faf58          BGT      |L3.564|
000384  f1b90f00          CMP      r9,#0                 ;2528
000388  d003              BEQ      |L3.914|
00038a  4631              MOV      r1,r6                 ;2529
00038c  a02d              ADR      r0,|L3.1092|
00038e  f7fffffe          BL       __2printf
                  |L3.914|
000392  2000              MOVS     r0,#0                 ;2532
000394  f88d0018          STRB     r0,[sp,#0x18]         ;2532
000398  4a21              LDR      r2,|L3.1056|
00039a  6812              LDR      r2,[r2,#0]            ;2533  ; st
00039c  7951              LDRB     r1,[r2,#5]            ;2533
00039e  4a20              LDR      r2,|L3.1056|
0003a0  6852              LDR      r2,[r2,#4]            ;2533  ; st
0003a2  7810              LDRB     r0,[r2,#0]            ;2533
0003a4  ab06              ADD      r3,sp,#0x18           ;2533
0003a6  2201              MOVS     r2,#1                 ;2533
0003a8  f7fffffe          BL       MPU_Write_Len
0003ac  b110              CBZ      r0,|L3.948|
0003ae  f04f30ff          MOV      r0,#0xffffffff        ;2534
0003b2  e644              B        |L3.62|
                  |L3.948|
0003b4  481b              LDR      r0,|L3.1060|
0003b6  f8d0c000          LDR      r12,[r0,#0]           ;2536  ; test
0003ba  6829              LDR      r1,[r5,#0]            ;2536
0003bc  17c8              ASRS     r0,r1,#31             ;2536
0003be  0400              LSLS     r0,r0,#16             ;2536
0003c0  ea404211          ORR      r2,r0,r1,LSR #16      ;2536
0003c4  0409              LSLS     r1,r1,#16             ;2536
0003c6  e9cd1200          STRD     r1,r2,[sp,#0]         ;2536
0003ca  4662              MOV      r2,r12                ;2536
0003cc  2300              MOVS     r3,#0                 ;2536
0003ce  4608              MOV      r0,r1                 ;2536
0003d0  9901              LDR      r1,[sp,#4]            ;2536
0003d2  f7fffffe          BL       __aeabi_ldivmod
0003d6  4632              MOV      r2,r6                 ;2536
0003d8  17f3              ASRS     r3,r6,#31             ;2536
0003da  e9cd0102          STRD     r0,r1,[sp,#8]         ;2536
0003de  f7fffffe          BL       __aeabi_ldivmod
0003e2  6028              STR      r0,[r5,#0]            ;2536
0003e4  480f              LDR      r0,|L3.1060|
0003e6  f8d0c000          LDR      r12,[r0,#0]           ;2537  ; test
0003ea  6868              LDR      r0,[r5,#4]            ;2537
0003ec  17c1              ASRS     r1,r0,#31             ;2537
0003ee  0409              LSLS     r1,r1,#16             ;2537
0003f0  ea414110          ORR      r1,r1,r0,LSR #16      ;2537
0003f4  0402              LSLS     r2,r0,#16             ;2537
0003f6  e9cd2100          STRD     r2,r1,[sp,#0]         ;2537
0003fa  4662              MOV      r2,r12                ;2537
0003fc  2300              MOVS     r3,#0                 ;2537
0003fe  9800              LDR      r0,[sp,#0]            ;2537
000400  f7fffffe          BL       __aeabi_ldivmod
000404  4632              MOV      r2,r6                 ;2537
000406  17f3              ASRS     r3,r6,#31             ;2537
000408  e9cd0102          STRD     r0,r1,[sp,#8]         ;2537
00040c  f7fffffe          BL       __aeabi_ldivmod
000410  6068              STR      r0,[r5,#4]            ;2537
000412  4804              LDR      r0,|L3.1060|
000414  f8d0c000          LDR      r12,[r0,#0]           ;2538  ; test
000418  68a8              LDR      r0,[r5,#8]            ;2538
00041a  17c1              ASRS     r1,r0,#31             ;2538
00041c  0409              LSLS     r1,r1,#16             ;2538
00041e  e019              B        |L3.1108|
                  |L3.1056|
                          DCD      ||st||
                  |L3.1060|
                          DCD      test
                  |L3.1064|
000428  53746172          DCB      "Starting Bias Loop Reads\n",0
00042c  74696e67
000430  20426961
000434  73204c6f
000438  6f702052
00043c  65616473
000440  0a00    
000442  00                DCB      0
000443  00                DCB      0
                  |L3.1092|
000444  53616d70          DCB      "Samples: %d\n",0
000448  6c65733a
00044c  2025640a
000450  00      
000451  00                DCB      0
000452  00                DCB      0
000453  00                DCB      0
                  |L3.1108|
000454  ea414210          ORR      r2,r1,r0,LSR #16      ;2538
000458  0400              LSLS     r0,r0,#16             ;2538
00045a  e9cd0200          STRD     r0,r2,[sp,#0]         ;2538
00045e  4662              MOV      r2,r12                ;2538
000460  2300              MOVS     r3,#0                 ;2538
000462  9901              LDR      r1,[sp,#4]            ;2538
000464  f7fffffe          BL       __aeabi_ldivmod
000468  4632              MOV      r2,r6                 ;2538
00046a  17f3              ASRS     r3,r6,#31             ;2538
00046c  e9cd0102          STRD     r0,r1,[sp,#8]         ;2538
000470  f7fffffe          BL       __aeabi_ldivmod
000474  60a8              STR      r0,[r5,#8]            ;2538
000476  4859              LDR      r0,|L3.1500|
000478  f8d0c004          LDR      r12,[r0,#4]           ;2539  ; test
00047c  6820              LDR      r0,[r4,#0]            ;2539
00047e  17c1              ASRS     r1,r0,#31             ;2539
000480  0409              LSLS     r1,r1,#16             ;2539
000482  ea414210          ORR      r2,r1,r0,LSR #16      ;2539
000486  0400              LSLS     r0,r0,#16             ;2539
000488  e9cd0200          STRD     r0,r2,[sp,#0]         ;2539
00048c  4662              MOV      r2,r12                ;2539
00048e  2300              MOVS     r3,#0                 ;2539
000490  9901              LDR      r1,[sp,#4]            ;2539
000492  f7fffffe          BL       __aeabi_ldivmod
000496  4632              MOV      r2,r6                 ;2539
000498  17f3              ASRS     r3,r6,#31             ;2539
00049a  e9cd0102          STRD     r0,r1,[sp,#8]         ;2539
00049e  f7fffffe          BL       __aeabi_ldivmod
0004a2  6020              STR      r0,[r4,#0]            ;2539
0004a4  484d              LDR      r0,|L3.1500|
0004a6  f8d0c004          LDR      r12,[r0,#4]           ;2540  ; test
0004aa  6860              LDR      r0,[r4,#4]            ;2540
0004ac  17c1              ASRS     r1,r0,#31             ;2540
0004ae  0409              LSLS     r1,r1,#16             ;2540
0004b0  ea414110          ORR      r1,r1,r0,LSR #16      ;2540
0004b4  0402              LSLS     r2,r0,#16             ;2540
0004b6  e9cd2100          STRD     r2,r1,[sp,#0]         ;2540
0004ba  4662              MOV      r2,r12                ;2540
0004bc  2300              MOVS     r3,#0                 ;2540
0004be  9800              LDR      r0,[sp,#0]            ;2540
0004c0  f7fffffe          BL       __aeabi_ldivmod
0004c4  4632              MOV      r2,r6                 ;2540
0004c6  17f3              ASRS     r3,r6,#31             ;2540
0004c8  e9cd0102          STRD     r0,r1,[sp,#8]         ;2540
0004cc  f7fffffe          BL       __aeabi_ldivmod
0004d0  6060              STR      r0,[r4,#4]            ;2540
0004d2  4842              LDR      r0,|L3.1500|
0004d4  f8d0c004          LDR      r12,[r0,#4]           ;2541  ; test
0004d8  68a0              LDR      r0,[r4,#8]            ;2541
0004da  17c1              ASRS     r1,r0,#31             ;2541
0004dc  0409              LSLS     r1,r1,#16             ;2541
0004de  ea414110          ORR      r1,r1,r0,LSR #16      ;2541
0004e2  0402              LSLS     r2,r0,#16             ;2541
0004e4  e9cd2100          STRD     r2,r1,[sp,#0]         ;2541
0004e8  4662              MOV      r2,r12                ;2541
0004ea  2300              MOVS     r3,#0                 ;2541
0004ec  9800              LDR      r0,[sp,#0]            ;2541
0004ee  f7fffffe          BL       __aeabi_ldivmod
0004f2  4632              MOV      r2,r6                 ;2541
0004f4  17f3              ASRS     r3,r6,#31             ;2541
0004f6  e9cd0102          STRD     r0,r1,[sp,#8]         ;2541
0004fa  f7fffffe          BL       __aeabi_ldivmod
0004fe  60a0              STR      r0,[r4,#8]            ;2541
000500  68a0              LDR      r0,[r4,#8]            ;2543
000502  2800              CMP      r0,#0                 ;2543
000504  dd04              BLE      |L3.1296|
000506  68a0              LDR      r0,[r4,#8]            ;2544
000508  f5a03080          SUB      r0,r0,#0x10000        ;2544
00050c  60a0              STR      r0,[r4,#8]            ;2544
00050e  e003              B        |L3.1304|
                  |L3.1296|
000510  68a0              LDR      r0,[r4,#8]            ;2546
000512  f5003080          ADD      r0,r0,#0x10000        ;2546
000516  60a0              STR      r0,[r4,#8]            ;2546
                  |L3.1304|
000518  f1b90f00          CMP      r9,#0                 ;2549
00051c  d05b              BEQ      |L3.1494|
00051e  ed940a02          VLDR     s0,[r4,#8]            ;2550
000522  eeb80ac0          VCVT.F32.S32 s0,s0                 ;2550
000526  eddf0a2e          VLDR     s1,|L3.1504|
00052a  ee801a20          VDIV.F32 s2,s0,s1              ;2550
00052e  eeb70ac1          VCVT.F64.F32 d0,s2                 ;2550
000532  eeb08b40          VMOV.F64 d8,d0                 ;2550
000536  ed940a01          VLDR     s0,[r4,#4]            ;2550
00053a  eeb80ac0          VCVT.F32.S32 s0,s0                 ;2550
00053e  eddf0a28          VLDR     s1,|L3.1504|
000542  ee801a20          VDIV.F32 s2,s0,s1              ;2550
000546  eeb70ac1          VCVT.F64.F32 d0,s2                 ;2550
00054a  eeb09b40          VMOV.F64 d9,d0                 ;2550
00054e  ed940a00          VLDR     s0,[r4,#0]            ;2550
000552  eeb80ac0          VCVT.F32.S32 s0,s0                 ;2550
000556  eddf0a22          VLDR     s1,|L3.1504|
00055a  ee801a20          VDIV.F32 s2,s0,s1              ;2550
00055e  eeb70ac1          VCVT.F64.F32 d0,s2                 ;2550
000562  eeb0ab40          VMOV.F64 d10,d0                ;2550
000566  ed8d8b02          VSTR     d8,[sp,#8]            ;2550
00056a  ed8d9b00          VSTR     d9,[sp,#0]            ;2550
00056e  ec532b1a          VMOV     r2,r3,d10             ;2550
000572  4641              MOV      r1,r8                 ;2550
000574  a01b              ADR      r0,|L3.1508|
000576  f7fffffe          BL       __2printf
00057a  ed950a02          VLDR     s0,[r5,#8]            ;2551
00057e  eeb80ac0          VCVT.F32.S32 s0,s0                 ;2551
000582  eddf0a17          VLDR     s1,|L3.1504|
000586  ee801a20          VDIV.F32 s2,s0,s1              ;2551
00058a  eeb70ac1          VCVT.F64.F32 d0,s2                 ;2551
00058e  eeb08b40          VMOV.F64 d8,d0                 ;2551
000592  ed950a01          VLDR     s0,[r5,#4]            ;2551
000596  eeb80ac0          VCVT.F32.S32 s0,s0                 ;2551
00059a  eddf0a11          VLDR     s1,|L3.1504|
00059e  ee801a20          VDIV.F32 s2,s0,s1              ;2551
0005a2  eeb70ac1          VCVT.F64.F32 d0,s2                 ;2551
0005a6  eeb09b40          VMOV.F64 d9,d0                 ;2551
0005aa  ed950a00          VLDR     s0,[r5,#0]            ;2551
0005ae  eeb80ac0          VCVT.F32.S32 s0,s0                 ;2551
0005b2  eddf0a0b          VLDR     s1,|L3.1504|
0005b6  ee801a20          VDIV.F32 s2,s0,s1              ;2551
0005ba  eeb70ac1          VCVT.F64.F32 d0,s2                 ;2551
0005be  eeb0ab40          VMOV.F64 d10,d0                ;2551
0005c2  ed8d8b02          VSTR     d8,[sp,#8]            ;2551
0005c6  ed8d9b00          VSTR     d9,[sp,#0]            ;2551
0005ca  ec532b1a          VMOV     r2,r3,d10             ;2551
0005ce  4641              MOV      r1,r8                 ;2551
0005d0  a011              ADR      r0,|L3.1560|
0005d2  f7fffffe          BL       __2printf
                  |L3.1494|
0005d6  2000              MOVS     r0,#0                 ;2554
0005d8  e531              B        |L3.62|
;;;2556   /**
                          ENDP

0005da  0000              DCW      0x0000
                  |L3.1500|
                          DCD      test
                  |L3.1504|
0005e0  47800000          DCFS     0x47800000 ; 65536
                  |L3.1508|
0005e4  41636365          DCB      "Accel offset data HWST bit=%d: %7.4f %7.4f %7.4f\r\n",0
0005e8  6c206f66
0005ec  66736574
0005f0  20646174
0005f4  61204857
0005f8  53542062
0005fc  69743d25
000600  643a2025
000604  372e3466
000608  2025372e
00060c  34662025
000610  372e3466
000614  0d0a00  
000617  00                DCB      0
                  |L3.1560|
000618  4779726f          DCB      "Gyro offset data HWST bit=%d: %7.4f %7.4f %7.4f\r\n",0
00061c  206f6666
000620  73657420
000624  64617461
000628  20485753
00062c  54206269
000630  743d2564
000634  3a202537
000638  2e346620
00063c  25372e34
000640  66202537
000644  2e34660d
000648  0a00    
00064a  00                DCB      0
00064b  00                DCB      0

                          AREA ||i.get_st_biases||, CODE, READONLY, ALIGN=2

                  get_st_biases PROC
;;;2088   
;;;2089   static int get_st_biases(long *gyro, long *accel, unsigned char hw_test)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;2090   {
000004  b087              SUB      sp,sp,#0x1c
000006  4605              MOV      r5,r0
000008  460c              MOV      r4,r1
00000a  4691              MOV      r9,r2
;;;2091       unsigned char data[MAX_PACKET_LENGTH];
;;;2092       unsigned char packet_count, ii;
;;;2093       unsigned short fifo_count;
;;;2094   
;;;2095       data[0] = 0x01;
00000c  2001              MOVS     r0,#1
00000e  f88d0010          STRB     r0,[sp,#0x10]
;;;2096       data[1] = 0;
000012  2000              MOVS     r0,#0
000014  f88d0011          STRB     r0,[sp,#0x11]
;;;2097       if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
000018  4afe              LDR      r2,|L4.1044|
00001a  6812              LDR      r2,[r2,#0]  ; st
00001c  7d51              LDRB     r1,[r2,#0x15]
00001e  4afd              LDR      r2,|L4.1044|
000020  6852              LDR      r2,[r2,#4]  ; st
000022  7810              LDRB     r0,[r2,#0]
000024  ab04              ADD      r3,sp,#0x10
000026  2202              MOVS     r2,#2
000028  f7fffffe          BL       MPU_Write_Len
00002c  b120              CBZ      r0,|L4.56|
;;;2098           return -1;
00002e  f04f30ff          MOV      r0,#0xffffffff
                  |L4.50|
;;;2099       delay_ms(200);
;;;2100       data[0] = 0;
;;;2101       if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
;;;2102           return -1;
;;;2103       if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
;;;2104           return -1;
;;;2105       if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
;;;2106           return -1;
;;;2107       if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
;;;2108           return -1;
;;;2109       if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
;;;2110           return -1;
;;;2111       data[0] = BIT_FIFO_RST | BIT_DMP_RST;
;;;2112       if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
;;;2113           return -1;
;;;2114       delay_ms(15);
;;;2115       data[0] = st.test->reg_lpf;
;;;2116       if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
;;;2117           return -1;
;;;2118       data[0] = st.test->reg_rate_div;
;;;2119       if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
;;;2120           return -1;
;;;2121       if (hw_test)
;;;2122           data[0] = st.test->reg_gyro_fsr | 0xE0;
;;;2123       else
;;;2124           data[0] = st.test->reg_gyro_fsr;
;;;2125       if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
;;;2126           return -1;
;;;2127   
;;;2128       if (hw_test)
;;;2129           data[0] = st.test->reg_accel_fsr | 0xE0;
;;;2130       else
;;;2131           data[0] = test.reg_accel_fsr;
;;;2132       if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
;;;2133           return -1;
;;;2134       if (hw_test)
;;;2135           delay_ms(200);
;;;2136   
;;;2137       /* Fill FIFO for test.wait_ms milliseconds. */
;;;2138       data[0] = BIT_FIFO_EN;
;;;2139       if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
;;;2140           return -1;
;;;2141   
;;;2142       data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
;;;2143       if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
;;;2144           return -1;
;;;2145       delay_ms(test.wait_ms);
;;;2146       data[0] = 0;
;;;2147       if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
;;;2148           return -1;
;;;2149   
;;;2150       if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
;;;2151           return -1;
;;;2152   
;;;2153       fifo_count = (data[0] << 8) | data[1];
;;;2154       packet_count = fifo_count / MAX_PACKET_LENGTH;
;;;2155       gyro[0] = gyro[1] = gyro[2] = 0;
;;;2156       accel[0] = accel[1] = accel[2] = 0;
;;;2157   
;;;2158       for (ii = 0; ii < packet_count; ii++) {
;;;2159           short accel_cur[3], gyro_cur[3];
;;;2160           if (i2c_read(st.hw->addr, st.reg->fifo_r_w, MAX_PACKET_LENGTH, data))
;;;2161               return -1;
;;;2162           accel_cur[0] = ((short)data[0] << 8) | data[1];
;;;2163           accel_cur[1] = ((short)data[2] << 8) | data[3];
;;;2164           accel_cur[2] = ((short)data[4] << 8) | data[5];
;;;2165           accel[0] += (long)accel_cur[0];
;;;2166           accel[1] += (long)accel_cur[1];
;;;2167           accel[2] += (long)accel_cur[2];
;;;2168           gyro_cur[0] = (((short)data[6] << 8) | data[7]);
;;;2169           gyro_cur[1] = (((short)data[8] << 8) | data[9]);
;;;2170           gyro_cur[2] = (((short)data[10] << 8) | data[11]);
;;;2171           gyro[0] += (long)gyro_cur[0];
;;;2172           gyro[1] += (long)gyro_cur[1];
;;;2173           gyro[2] += (long)gyro_cur[2];
;;;2174       }
;;;2175   #ifdef EMPL_NO_64BIT
;;;2176       gyro[0] = (long)(((float)gyro[0]*65536.f) / test.gyro_sens / packet_count);
;;;2177       gyro[1] = (long)(((float)gyro[1]*65536.f) / test.gyro_sens / packet_count);
;;;2178       gyro[2] = (long)(((float)gyro[2]*65536.f) / test.gyro_sens / packet_count);
;;;2179       if (has_accel) {
;;;2180           accel[0] = (long)(((float)accel[0]*65536.f) / test.accel_sens /
;;;2181               packet_count);
;;;2182           accel[1] = (long)(((float)accel[1]*65536.f) / test.accel_sens /
;;;2183               packet_count);
;;;2184           accel[2] = (long)(((float)accel[2]*65536.f) / test.accel_sens /
;;;2185               packet_count);
;;;2186           /* Don't remove gravity! */
;;;2187           accel[2] -= 65536L;
;;;2188       }
;;;2189   #else
;;;2190       gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / packet_count);
;;;2191       gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / packet_count);
;;;2192       gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / packet_count);
;;;2193       accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens /
;;;2194           packet_count);
;;;2195       accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens /
;;;2196           packet_count);
;;;2197       accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens /
;;;2198           packet_count);
;;;2199       /* Don't remove gravity! */
;;;2200       if (accel[2] > 0L)
;;;2201           accel[2] -= 65536L;
;;;2202       else
;;;2203           accel[2] += 65536L;
;;;2204   #endif
;;;2205   
;;;2206       return 0;
;;;2207   }
000032  b007              ADD      sp,sp,#0x1c
000034  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.56|
000038  20c8              MOVS     r0,#0xc8              ;2099
00003a  f7fffffe          BL       delay_ms
00003e  2000              MOVS     r0,#0                 ;2100
000040  f88d0010          STRB     r0,[sp,#0x10]         ;2100
000044  4af3              LDR      r2,|L4.1044|
000046  6812              LDR      r2,[r2,#0]            ;2101  ; st
000048  7c51              LDRB     r1,[r2,#0x11]         ;2101
00004a  4af2              LDR      r2,|L4.1044|
00004c  6852              LDR      r2,[r2,#4]            ;2101  ; st
00004e  7810              LDRB     r0,[r2,#0]            ;2101
000050  ab04              ADD      r3,sp,#0x10           ;2101
000052  2201              MOVS     r2,#1                 ;2101
000054  f7fffffe          BL       MPU_Write_Len
000058  b110              CBZ      r0,|L4.96|
00005a  f04f30ff          MOV      r0,#0xffffffff        ;2102
00005e  e7e8              B        |L4.50|
                  |L4.96|
000060  4aec              LDR      r2,|L4.1044|
000062  6812              LDR      r2,[r2,#0]            ;2103  ; st
000064  7951              LDRB     r1,[r2,#5]            ;2103
000066  4aeb              LDR      r2,|L4.1044|
000068  6852              LDR      r2,[r2,#4]            ;2103  ; st
00006a  7810              LDRB     r0,[r2,#0]            ;2103
00006c  ab04              ADD      r3,sp,#0x10           ;2103
00006e  2201              MOVS     r2,#1                 ;2103
000070  f7fffffe          BL       MPU_Write_Len
000074  b110              CBZ      r0,|L4.124|
000076  f04f30ff          MOV      r0,#0xffffffff        ;2104
00007a  e7da              B        |L4.50|
                  |L4.124|
00007c  4ae5              LDR      r2,|L4.1044|
00007e  6812              LDR      r2,[r2,#0]            ;2105  ; st
000080  7d51              LDRB     r1,[r2,#0x15]         ;2105
000082  4ae4              LDR      r2,|L4.1044|
000084  6852              LDR      r2,[r2,#4]            ;2105  ; st
000086  7810              LDRB     r0,[r2,#0]            ;2105
000088  ab04              ADD      r3,sp,#0x10           ;2105
00008a  2201              MOVS     r2,#1                 ;2105
00008c  f7fffffe          BL       MPU_Write_Len
000090  b110              CBZ      r0,|L4.152|
000092  f04f30ff          MOV      r0,#0xffffffff        ;2106
000096  e7cc              B        |L4.50|
                  |L4.152|
000098  4ade              LDR      r2,|L4.1044|
00009a  6812              LDR      r2,[r2,#0]            ;2107  ; st
00009c  7e91              LDRB     r1,[r2,#0x1a]         ;2107
00009e  4add              LDR      r2,|L4.1044|
0000a0  6852              LDR      r2,[r2,#4]            ;2107  ; st
0000a2  7810              LDRB     r0,[r2,#0]            ;2107
0000a4  ab04              ADD      r3,sp,#0x10           ;2107
0000a6  2201              MOVS     r2,#1                 ;2107
0000a8  f7fffffe          BL       MPU_Write_Len
0000ac  b110              CBZ      r0,|L4.180|
0000ae  f04f30ff          MOV      r0,#0xffffffff        ;2108
0000b2  e7be              B        |L4.50|
                  |L4.180|
0000b4  4ad7              LDR      r2,|L4.1044|
0000b6  6812              LDR      r2,[r2,#0]            ;2109  ; st
0000b8  7911              LDRB     r1,[r2,#4]            ;2109
0000ba  4ad6              LDR      r2,|L4.1044|
0000bc  6852              LDR      r2,[r2,#4]            ;2109  ; st
0000be  7810              LDRB     r0,[r2,#0]            ;2109
0000c0  ab04              ADD      r3,sp,#0x10           ;2109
0000c2  2201              MOVS     r2,#1                 ;2109
0000c4  f7fffffe          BL       MPU_Write_Len
0000c8  b110              CBZ      r0,|L4.208|
0000ca  f04f30ff          MOV      r0,#0xffffffff        ;2110
0000ce  e7b0              B        |L4.50|
                  |L4.208|
0000d0  200c              MOVS     r0,#0xc               ;2111
0000d2  f88d0010          STRB     r0,[sp,#0x10]         ;2111
0000d6  4acf              LDR      r2,|L4.1044|
0000d8  6812              LDR      r2,[r2,#0]            ;2112  ; st
0000da  7911              LDRB     r1,[r2,#4]            ;2112
0000dc  4acd              LDR      r2,|L4.1044|
0000de  6852              LDR      r2,[r2,#4]            ;2112  ; st
0000e0  7810              LDRB     r0,[r2,#0]            ;2112
0000e2  ab04              ADD      r3,sp,#0x10           ;2112
0000e4  2201              MOVS     r2,#1                 ;2112
0000e6  f7fffffe          BL       MPU_Write_Len
0000ea  b110              CBZ      r0,|L4.242|
0000ec  f04f30ff          MOV      r0,#0xffffffff        ;2113
0000f0  e79f              B        |L4.50|
                  |L4.242|
0000f2  200f              MOVS     r0,#0xf               ;2114
0000f4  f7fffffe          BL       delay_ms
0000f8  48c6              LDR      r0,|L4.1044|
0000fa  6b40              LDR      r0,[r0,#0x34]         ;2115  ; st
0000fc  7a40              LDRB     r0,[r0,#9]            ;2115
0000fe  f88d0010          STRB     r0,[sp,#0x10]         ;2115
000102  4ac4              LDR      r2,|L4.1044|
000104  6812              LDR      r2,[r2,#0]            ;2116  ; st
000106  7891              LDRB     r1,[r2,#2]            ;2116
000108  4ac2              LDR      r2,|L4.1044|
00010a  6852              LDR      r2,[r2,#4]            ;2116  ; st
00010c  7810              LDRB     r0,[r2,#0]            ;2116
00010e  ab04              ADD      r3,sp,#0x10           ;2116
000110  2201              MOVS     r2,#1                 ;2116
000112  f7fffffe          BL       MPU_Write_Len
000116  b110              CBZ      r0,|L4.286|
000118  f04f30ff          MOV      r0,#0xffffffff        ;2117
00011c  e789              B        |L4.50|
                  |L4.286|
00011e  48bd              LDR      r0,|L4.1044|
000120  6b40              LDR      r0,[r0,#0x34]         ;2118  ; st
000122  7a00              LDRB     r0,[r0,#8]            ;2118
000124  f88d0010          STRB     r0,[sp,#0x10]         ;2118
000128  4aba              LDR      r2,|L4.1044|
00012a  6812              LDR      r2,[r2,#0]            ;2119  ; st
00012c  7851              LDRB     r1,[r2,#1]            ;2119
00012e  4ab9              LDR      r2,|L4.1044|
000130  6852              LDR      r2,[r2,#4]            ;2119  ; st
000132  7810              LDRB     r0,[r2,#0]            ;2119
000134  ab04              ADD      r3,sp,#0x10           ;2119
000136  2201              MOVS     r2,#1                 ;2119
000138  f7fffffe          BL       MPU_Write_Len
00013c  b110              CBZ      r0,|L4.324|
00013e  f04f30ff          MOV      r0,#0xffffffff        ;2120
000142  e776              B        |L4.50|
                  |L4.324|
000144  f1b90f00          CMP      r9,#0                 ;2121
000148  d007              BEQ      |L4.346|
00014a  48b2              LDR      r0,|L4.1044|
00014c  6b40              LDR      r0,[r0,#0x34]         ;2122  ; st
00014e  7a80              LDRB     r0,[r0,#0xa]          ;2122
000150  f04000e0          ORR      r0,r0,#0xe0           ;2122
000154  f88d0010          STRB     r0,[sp,#0x10]         ;2122
000158  e004              B        |L4.356|
                  |L4.346|
00015a  48ae              LDR      r0,|L4.1044|
00015c  6b40              LDR      r0,[r0,#0x34]         ;2124  ; st
00015e  7a80              LDRB     r0,[r0,#0xa]          ;2124
000160  f88d0010          STRB     r0,[sp,#0x10]         ;2124
                  |L4.356|
000164  4aab              LDR      r2,|L4.1044|
000166  6812              LDR      r2,[r2,#0]            ;2125  ; st
000168  7991              LDRB     r1,[r2,#6]            ;2125
00016a  4aaa              LDR      r2,|L4.1044|
00016c  6852              LDR      r2,[r2,#4]            ;2125  ; st
00016e  7810              LDRB     r0,[r2,#0]            ;2125
000170  ab04              ADD      r3,sp,#0x10           ;2125
000172  2201              MOVS     r2,#1                 ;2125
000174  f7fffffe          BL       MPU_Write_Len
000178  b110              CBZ      r0,|L4.384|
00017a  f04f30ff          MOV      r0,#0xffffffff        ;2126
00017e  e758              B        |L4.50|
                  |L4.384|
000180  f1b90f00          CMP      r9,#0                 ;2128
000184  d007              BEQ      |L4.406|
000186  48a3              LDR      r0,|L4.1044|
000188  6b40              LDR      r0,[r0,#0x34]         ;2129  ; st
00018a  7ac0              LDRB     r0,[r0,#0xb]          ;2129
00018c  f04000e0          ORR      r0,r0,#0xe0           ;2129
000190  f88d0010          STRB     r0,[sp,#0x10]         ;2129
000194  e003              B        |L4.414|
                  |L4.406|
000196  48a0              LDR      r0,|L4.1048|
000198  7ac0              LDRB     r0,[r0,#0xb]          ;2131  ; test
00019a  f88d0010          STRB     r0,[sp,#0x10]         ;2131
                  |L4.414|
00019e  4a9d              LDR      r2,|L4.1044|
0001a0  6812              LDR      r2,[r2,#0]            ;2132  ; st
0001a2  79d1              LDRB     r1,[r2,#7]            ;2132
0001a4  4a9b              LDR      r2,|L4.1044|
0001a6  6852              LDR      r2,[r2,#4]            ;2132  ; st
0001a8  7810              LDRB     r0,[r2,#0]            ;2132
0001aa  ab04              ADD      r3,sp,#0x10           ;2132
0001ac  2201              MOVS     r2,#1                 ;2132
0001ae  f7fffffe          BL       MPU_Write_Len
0001b2  b110              CBZ      r0,|L4.442|
0001b4  f04f30ff          MOV      r0,#0xffffffff        ;2133
0001b8  e73b              B        |L4.50|
                  |L4.442|
0001ba  f1b90f00          CMP      r9,#0                 ;2134
0001be  d002              BEQ      |L4.454|
0001c0  20c8              MOVS     r0,#0xc8              ;2135
0001c2  f7fffffe          BL       delay_ms
                  |L4.454|
0001c6  2040              MOVS     r0,#0x40              ;2138
0001c8  f88d0010          STRB     r0,[sp,#0x10]         ;2138
0001cc  4a91              LDR      r2,|L4.1044|
0001ce  6812              LDR      r2,[r2,#0]            ;2139  ; st
0001d0  7911              LDRB     r1,[r2,#4]            ;2139
0001d2  4a90              LDR      r2,|L4.1044|
0001d4  6852              LDR      r2,[r2,#4]            ;2139  ; st
0001d6  7810              LDRB     r0,[r2,#0]            ;2139
0001d8  ab04              ADD      r3,sp,#0x10           ;2139
0001da  2201              MOVS     r2,#1                 ;2139
0001dc  f7fffffe          BL       MPU_Write_Len
0001e0  b110              CBZ      r0,|L4.488|
0001e2  f04f30ff          MOV      r0,#0xffffffff        ;2140
0001e6  e724              B        |L4.50|
                  |L4.488|
0001e8  2078              MOVS     r0,#0x78              ;2142
0001ea  f88d0010          STRB     r0,[sp,#0x10]         ;2142
0001ee  4a89              LDR      r2,|L4.1044|
0001f0  6812              LDR      r2,[r2,#0]            ;2143  ; st
0001f2  7951              LDRB     r1,[r2,#5]            ;2143
0001f4  4a87              LDR      r2,|L4.1044|
0001f6  6852              LDR      r2,[r2,#4]            ;2143  ; st
0001f8  7810              LDRB     r0,[r2,#0]            ;2143
0001fa  ab04              ADD      r3,sp,#0x10           ;2143
0001fc  2201              MOVS     r2,#1                 ;2143
0001fe  f7fffffe          BL       MPU_Write_Len
000202  b110              CBZ      r0,|L4.522|
000204  f04f30ff          MOV      r0,#0xffffffff        ;2144
000208  e713              B        |L4.50|
                  |L4.522|
00020a  4983              LDR      r1,|L4.1048|
00020c  8988              LDRH     r0,[r1,#0xc]          ;2145  ; test
00020e  f7fffffe          BL       delay_ms
000212  2000              MOVS     r0,#0                 ;2146
000214  f88d0010          STRB     r0,[sp,#0x10]         ;2146
000218  4a7e              LDR      r2,|L4.1044|
00021a  6812              LDR      r2,[r2,#0]            ;2147  ; st
00021c  7951              LDRB     r1,[r2,#5]            ;2147
00021e  4a7d              LDR      r2,|L4.1044|
000220  6852              LDR      r2,[r2,#4]            ;2147  ; st
000222  7810              LDRB     r0,[r2,#0]            ;2147
000224  ab04              ADD      r3,sp,#0x10           ;2147
000226  2201              MOVS     r2,#1                 ;2147
000228  f7fffffe          BL       MPU_Write_Len
00022c  b110              CBZ      r0,|L4.564|
00022e  f04f30ff          MOV      r0,#0xffffffff        ;2148
000232  e6fe              B        |L4.50|
                  |L4.564|
000234  4a77              LDR      r2,|L4.1044|
000236  6812              LDR      r2,[r2,#0]            ;2150  ; st
000238  7b11              LDRB     r1,[r2,#0xc]          ;2150
00023a  4a76              LDR      r2,|L4.1044|
00023c  6852              LDR      r2,[r2,#4]            ;2150  ; st
00023e  7810              LDRB     r0,[r2,#0]            ;2150
000240  ab04              ADD      r3,sp,#0x10           ;2150
000242  2202              MOVS     r2,#2                 ;2150
000244  f7fffffe          BL       MPU_Read_Len
000248  b110              CBZ      r0,|L4.592|
00024a  f04f30ff          MOV      r0,#0xffffffff        ;2151
00024e  e6f0              B        |L4.50|
                  |L4.592|
000250  f89d0011          LDRB     r0,[sp,#0x11]         ;2153
000254  f89d1010          LDRB     r1,[sp,#0x10]         ;2153
000258  ea402b01          ORR      r11,r0,r1,LSL #8      ;2153
00025c  200c              MOVS     r0,#0xc               ;2154
00025e  fb9bf0f0          SDIV     r0,r11,r0             ;2154
000262  b2c6              UXTB     r6,r0                 ;2154
000264  2000              MOVS     r0,#0                 ;2155
000266  60a8              STR      r0,[r5,#8]            ;2155
000268  6068              STR      r0,[r5,#4]            ;2155
00026a  6028              STR      r0,[r5,#0]            ;2155
00026c  60a0              STR      r0,[r4,#8]            ;2156
00026e  6060              STR      r0,[r4,#4]            ;2156
000270  6020              STR      r0,[r4,#0]            ;2156
000272  4682              MOV      r10,r0                ;2158
000274  e065              B        |L4.834|
                  |L4.630|
000276  4a67              LDR      r2,|L4.1044|
000278  6812              LDR      r2,[r2,#0]            ;2160  ; st
00027a  7b51              LDRB     r1,[r2,#0xd]          ;2160
00027c  4a65              LDR      r2,|L4.1044|
00027e  6852              LDR      r2,[r2,#4]            ;2160  ; st
000280  7810              LDRB     r0,[r2,#0]            ;2160
000282  ab04              ADD      r3,sp,#0x10           ;2160
000284  220c              MOVS     r2,#0xc               ;2160
000286  f7fffffe          BL       MPU_Read_Len
00028a  b110              CBZ      r0,|L4.658|
00028c  f04f30ff          MOV      r0,#0xffffffff        ;2161
000290  e6cf              B        |L4.50|
                  |L4.658|
000292  f89d0011          LDRB     r0,[sp,#0x11]         ;2162
000296  f89d1010          LDRB     r1,[sp,#0x10]         ;2162
00029a  ea402001          ORR      r0,r0,r1,LSL #8       ;2162
00029e  b200              SXTH     r0,r0                 ;2162
0002a0  f8ad0008          STRH     r0,[sp,#8]            ;2162
0002a4  f89d0013          LDRB     r0,[sp,#0x13]         ;2163
0002a8  f89d1012          LDRB     r1,[sp,#0x12]         ;2163
0002ac  ea402001          ORR      r0,r0,r1,LSL #8       ;2163
0002b0  b200              SXTH     r0,r0                 ;2163
0002b2  f8ad000a          STRH     r0,[sp,#0xa]          ;2163
0002b6  f89d0015          LDRB     r0,[sp,#0x15]         ;2164
0002ba  f89d1014          LDRB     r1,[sp,#0x14]         ;2164
0002be  ea402001          ORR      r0,r0,r1,LSL #8       ;2164
0002c2  b200              SXTH     r0,r0                 ;2164
0002c4  f8ad000c          STRH     r0,[sp,#0xc]          ;2164
0002c8  f9bd1008          LDRSH    r1,[sp,#8]            ;2165
0002cc  6820              LDR      r0,[r4,#0]            ;2165
0002ce  4408              ADD      r0,r0,r1              ;2165
0002d0  6020              STR      r0,[r4,#0]            ;2165
0002d2  f9bd100a          LDRSH    r1,[sp,#0xa]          ;2166
0002d6  6860              LDR      r0,[r4,#4]            ;2166
0002d8  4408              ADD      r0,r0,r1              ;2166
0002da  6060              STR      r0,[r4,#4]            ;2166
0002dc  f9bd100c          LDRSH    r1,[sp,#0xc]          ;2167
0002e0  68a0              LDR      r0,[r4,#8]            ;2167
0002e2  4408              ADD      r0,r0,r1              ;2167
0002e4  60a0              STR      r0,[r4,#8]            ;2167
0002e6  f89d0017          LDRB     r0,[sp,#0x17]         ;2168
0002ea  f89d1016          LDRB     r1,[sp,#0x16]         ;2168
0002ee  ea402001          ORR      r0,r0,r1,LSL #8       ;2168
0002f2  b200              SXTH     r0,r0                 ;2168
0002f4  f8ad0000          STRH     r0,[sp,#0]            ;2168
0002f8  f89d0019          LDRB     r0,[sp,#0x19]         ;2169
0002fc  f89d1018          LDRB     r1,[sp,#0x18]         ;2169
000300  ea402001          ORR      r0,r0,r1,LSL #8       ;2169
000304  b200              SXTH     r0,r0                 ;2169
000306  f8ad0002          STRH     r0,[sp,#2]            ;2169
00030a  f89d001b          LDRB     r0,[sp,#0x1b]         ;2170
00030e  f89d101a          LDRB     r1,[sp,#0x1a]         ;2170
000312  ea402001          ORR      r0,r0,r1,LSL #8       ;2170
000316  b200              SXTH     r0,r0                 ;2170
000318  f8ad0004          STRH     r0,[sp,#4]            ;2170
00031c  f9bd1000          LDRSH    r1,[sp,#0]            ;2171
000320  6828              LDR      r0,[r5,#0]            ;2171
000322  4408              ADD      r0,r0,r1              ;2171
000324  6028              STR      r0,[r5,#0]            ;2171
000326  f9bd1002          LDRSH    r1,[sp,#2]            ;2172
00032a  6868              LDR      r0,[r5,#4]            ;2172
00032c  4408              ADD      r0,r0,r1              ;2172
00032e  6068              STR      r0,[r5,#4]            ;2172
000330  f9bd1004          LDRSH    r1,[sp,#4]            ;2173
000334  68a8              LDR      r0,[r5,#8]            ;2173
000336  4408              ADD      r0,r0,r1              ;2173
000338  60a8              STR      r0,[r5,#8]            ;2173
00033a  f10a0001          ADD      r0,r10,#1             ;2158
00033e  f0000aff          AND      r10,r0,#0xff          ;2158
                  |L4.834|
000342  45b2              CMP      r10,r6                ;2158
000344  db97              BLT      |L4.630|
000346  4834              LDR      r0,|L4.1048|
000348  f8d0c000          LDR      r12,[r0,#0]           ;2190  ; test
00034c  6828              LDR      r0,[r5,#0]            ;2190
00034e  17c1              ASRS     r1,r0,#31             ;2190
000350  0409              LSLS     r1,r1,#16             ;2190
000352  ea414110          ORR      r1,r1,r0,LSR #16      ;2190
000356  0407              LSLS     r7,r0,#16             ;2190
000358  4662              MOV      r2,r12                ;2190
00035a  2300              MOVS     r3,#0                 ;2190
00035c  4638              MOV      r0,r7                 ;2190
00035e  f7fffffe          BL       __aeabi_ldivmod
000362  4632              MOV      r2,r6                 ;2190
000364  2300              MOVS     r3,#0                 ;2190
000366  e9cd0102          STRD     r0,r1,[sp,#8]         ;2190
00036a  f7fffffe          BL       __aeabi_ldivmod
00036e  6028              STR      r0,[r5,#0]            ;2190
000370  4829              LDR      r0,|L4.1048|
000372  f8d0c000          LDR      r12,[r0,#0]           ;2191  ; test
000376  6868              LDR      r0,[r5,#4]            ;2191
000378  17c1              ASRS     r1,r0,#31             ;2191
00037a  0409              LSLS     r1,r1,#16             ;2191
00037c  ea414110          ORR      r1,r1,r0,LSR #16      ;2191
000380  0407              LSLS     r7,r0,#16             ;2191
000382  4662              MOV      r2,r12                ;2191
000384  2300              MOVS     r3,#0                 ;2191
000386  4638              MOV      r0,r7                 ;2191
000388  f7fffffe          BL       __aeabi_ldivmod
00038c  4632              MOV      r2,r6                 ;2191
00038e  2300              MOVS     r3,#0                 ;2191
000390  e9cd0102          STRD     r0,r1,[sp,#8]         ;2191
000394  f7fffffe          BL       __aeabi_ldivmod
000398  6068              STR      r0,[r5,#4]            ;2191
00039a  481f              LDR      r0,|L4.1048|
00039c  f8d0c000          LDR      r12,[r0,#0]           ;2192  ; test
0003a0  68a8              LDR      r0,[r5,#8]            ;2192
0003a2  17c1              ASRS     r1,r0,#31             ;2192
0003a4  0409              LSLS     r1,r1,#16             ;2192
0003a6  ea414110          ORR      r1,r1,r0,LSR #16      ;2192
0003aa  0407              LSLS     r7,r0,#16             ;2192
0003ac  4662              MOV      r2,r12                ;2192
0003ae  2300              MOVS     r3,#0                 ;2192
0003b0  4638              MOV      r0,r7                 ;2192
0003b2  f7fffffe          BL       __aeabi_ldivmod
0003b6  4632              MOV      r2,r6                 ;2192
0003b8  2300              MOVS     r3,#0                 ;2192
0003ba  e9cd0102          STRD     r0,r1,[sp,#8]         ;2192
0003be  f7fffffe          BL       __aeabi_ldivmod
0003c2  60a8              STR      r0,[r5,#8]            ;2192
0003c4  4814              LDR      r0,|L4.1048|
0003c6  f8d0c004          LDR      r12,[r0,#4]           ;2193  ; test
0003ca  6821              LDR      r1,[r4,#0]            ;2193
0003cc  17c8              ASRS     r0,r1,#31             ;2193
0003ce  0400              LSLS     r0,r0,#16             ;2193
0003d0  ea404811          ORR      r8,r0,r1,LSR #16      ;2193
0003d4  040f              LSLS     r7,r1,#16             ;2193
0003d6  4662              MOV      r2,r12                ;2193
0003d8  2300              MOVS     r3,#0                 ;2193
0003da  4638              MOV      r0,r7                 ;2193
0003dc  4641              MOV      r1,r8                 ;2193
0003de  f7fffffe          BL       __aeabi_ldivmod
0003e2  4632              MOV      r2,r6                 ;2193
0003e4  2300              MOVS     r3,#0                 ;2193
0003e6  e9cd0102          STRD     r0,r1,[sp,#8]         ;2193
0003ea  f7fffffe          BL       __aeabi_ldivmod
0003ee  6020              STR      r0,[r4,#0]            ;2193
0003f0  4809              LDR      r0,|L4.1048|
0003f2  f8d0c004          LDR      r12,[r0,#4]           ;2195  ; test
0003f6  6860              LDR      r0,[r4,#4]            ;2195
0003f8  17c1              ASRS     r1,r0,#31             ;2195
0003fa  0409              LSLS     r1,r1,#16             ;2195
0003fc  ea414110          ORR      r1,r1,r0,LSR #16      ;2195
000400  0407              LSLS     r7,r0,#16             ;2195
000402  4662              MOV      r2,r12                ;2195
000404  2300              MOVS     r3,#0                 ;2195
000406  4638              MOV      r0,r7                 ;2195
000408  f7fffffe          BL       __aeabi_ldivmod
00040c  4632              MOV      r2,r6                 ;2195
00040e  2300              MOVS     r3,#0                 ;2195
000410  e004              B        |L4.1052|
000412  0000              DCW      0x0000
                  |L4.1044|
                          DCD      ||st||
                  |L4.1048|
                          DCD      test
                  |L4.1052|
00041c  e9cd0102          STRD     r0,r1,[sp,#8]         ;2195
000420  f7fffffe          BL       __aeabi_ldivmod
000424  6060              STR      r0,[r4,#4]            ;2195
000426  4811              LDR      r0,|L4.1132|
000428  f8d0c004          LDR      r12,[r0,#4]           ;2197  ; test
00042c  68a0              LDR      r0,[r4,#8]            ;2197
00042e  17c1              ASRS     r1,r0,#31             ;2197
000430  0409              LSLS     r1,r1,#16             ;2197
000432  ea414110          ORR      r1,r1,r0,LSR #16      ;2197
000436  0407              LSLS     r7,r0,#16             ;2197
000438  4662              MOV      r2,r12                ;2197
00043a  2300              MOVS     r3,#0                 ;2197
00043c  4638              MOV      r0,r7                 ;2197
00043e  f7fffffe          BL       __aeabi_ldivmod
000442  4632              MOV      r2,r6                 ;2197
000444  2300              MOVS     r3,#0                 ;2197
000446  e9cd0102          STRD     r0,r1,[sp,#8]         ;2197
00044a  f7fffffe          BL       __aeabi_ldivmod
00044e  60a0              STR      r0,[r4,#8]            ;2197
000450  68a0              LDR      r0,[r4,#8]            ;2200
000452  2800              CMP      r0,#0                 ;2200
000454  dd04              BLE      |L4.1120|
000456  68a0              LDR      r0,[r4,#8]            ;2201
000458  f5a03080          SUB      r0,r0,#0x10000        ;2201
00045c  60a0              STR      r0,[r4,#8]            ;2201
00045e  e003              B        |L4.1128|
                  |L4.1120|
000460  68a0              LDR      r0,[r4,#8]            ;2203
000462  f5003080          ADD      r0,r0,#0x10000        ;2203
000466  60a0              STR      r0,[r4,#8]            ;2203
                  |L4.1128|
000468  2000              MOVS     r0,#0                 ;2206
00046a  e5e2              B        |L4.50|
;;;2208   
                          ENDP

                  |L4.1132|
                          DCD      test

                          AREA ||i.gyro_6500_self_test||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                          REQUIRE _printf_sizespec
                  gyro_6500_self_test PROC
;;;2335   
;;;2336   static int gyro_6500_self_test(long *bias_regular, long *bias_st, int debug)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;2337   {
000004  ed2d8b08          VPUSH    {d8-d11}
000008  b08f              SUB      sp,sp,#0x3c
00000a  4606              MOV      r6,r0
00000c  460f              MOV      r7,r1
00000e  4615              MOV      r5,r2
;;;2338       int i, result = 0, otp_value_zero = 0;
000010  f04f0800          MOV      r8,#0
000014  46c1              MOV      r9,r8
;;;2339       float gyro_st_al_max;
;;;2340       float st_shift_cust[3], st_shift_ratio[3], ct_shift_prod[3], gyro_offset_max;
;;;2341       unsigned char regs[3];
;;;2342   
;;;2343       if (i2c_read(st.hw->addr, REG_6500_XG_ST_DATA, 3, regs)) {
000016  49dd              LDR      r1,|L5.908|
000018  6849              LDR      r1,[r1,#4]  ; st
00001a  7808              LDRB     r0,[r1,#0]
00001c  ab05              ADD      r3,sp,#0x14
00001e  2203              MOVS     r2,#3
000020  2100              MOVS     r1,#0
000022  f7fffffe          BL       MPU_Read_Len
000026  b148              CBZ      r0,|L5.60|
;;;2344       	if(debug)
000028  b115              CBZ      r5,|L5.48|
;;;2345       		log_i("Reading OTP Register Error.\n");
00002a  a0d9              ADR      r0,|L5.912|
00002c  f7fffffe          BL       __2printf
                  |L5.48|
;;;2346           return 0x07;
000030  2007              MOVS     r0,#7
                  |L5.50|
;;;2347       }
;;;2348   
;;;2349       if(debug)
;;;2350       	log_i("Gyro OTP:%d, %d, %d\r\n", regs[0], regs[1], regs[2]);
;;;2351   
;;;2352   	for (i = 0; i < 3; i++) {
;;;2353   		if (regs[i] != 0) {
;;;2354   			ct_shift_prod[i] = mpu_6500_st_tb[regs[i] - 1];
;;;2355   			ct_shift_prod[i] *= 65536.f;
;;;2356   			ct_shift_prod[i] /= test.gyro_sens;
;;;2357   		}
;;;2358   		else {
;;;2359   			ct_shift_prod[i] = 0;
;;;2360   			otp_value_zero = 1;
;;;2361   		}
;;;2362   	}
;;;2363   
;;;2364   	if(otp_value_zero == 0) {
;;;2365   		if(debug)
;;;2366   			log_i("GYRO:CRITERIA A\n");
;;;2367   		/* Self Test Pass/Fail Criteria A */
;;;2368   		for (i = 0; i < 3; i++) {
;;;2369   			st_shift_cust[i] = bias_st[i] - bias_regular[i];
;;;2370   
;;;2371   			if(debug) {
;;;2372   				log_i("Bias_Shift=%7.4f, Bias_Reg=%7.4f, Bias_HWST=%7.4f\r\n",
;;;2373   						st_shift_cust[i]/1.f, bias_regular[i]/1.f,
;;;2374   						bias_st[i]/1.f);
;;;2375   				log_i("OTP value: %7.4f\r\n", ct_shift_prod[i]/1.f);
;;;2376   			}
;;;2377   
;;;2378   			st_shift_ratio[i] = st_shift_cust[i] / ct_shift_prod[i];
;;;2379   
;;;2380   			if(debug)
;;;2381   				log_i("ratio=%7.4f, threshold=%7.4f\r\n", st_shift_ratio[i]/1.f,
;;;2382   							test.max_gyro_var/1.f);
;;;2383   
;;;2384   			if (fabs(st_shift_ratio[i]) < test.max_gyro_var) {
;;;2385   				if(debug)
;;;2386   					log_i("Gyro Fail Axis = %d\n", i);
;;;2387   				result |= 1 << i;	//Error condition
;;;2388   			}
;;;2389   		}
;;;2390   	}
;;;2391   	else {
;;;2392   		/* Self Test Pass/Fail Criteria B */
;;;2393   		gyro_st_al_max = test.max_dps * 65536.f;
;;;2394   
;;;2395   		if(debug) {
;;;2396   			log_i("GYRO:CRITERIA B\r\n");
;;;2397   			log_i("Max DPS: %7.4f\r\n", gyro_st_al_max/1.f);
;;;2398   		}
;;;2399   
;;;2400   		for (i = 0; i < 3; i++) {
;;;2401   			st_shift_cust[i] = bias_st[i] - bias_regular[i];
;;;2402   
;;;2403   			if(debug)
;;;2404   				log_i("Bias_shift=%7.4f, st=%7.4f, reg=%7.4f\n", st_shift_cust[i]/1.f, bias_st[i]/1.f, bias_regular[i]/1.f);
;;;2405   			if(st_shift_cust[i] < gyro_st_al_max) {
;;;2406   				if(debug)
;;;2407   					log_i("GYRO FAIL axis:%d greater than 60dps\n", i);
;;;2408   				result |= 1 << i;	//Error condition
;;;2409   			}
;;;2410   		}
;;;2411   	}
;;;2412   
;;;2413   	if(result == 0) {
;;;2414   	/* Self Test Pass/Fail Criteria C */
;;;2415   		gyro_offset_max = test.min_dps * 65536.f;
;;;2416   		if(debug)
;;;2417   			log_i("Gyro:CRITERIA C: bias less than %7.4f\n", gyro_offset_max/1.f);
;;;2418   		for (i = 0; i < 3; i++) {
;;;2419   			if(fabs(bias_regular[i]) > gyro_offset_max) {
;;;2420   				if(debug)
;;;2421   					log_i("FAILED: Gyro axis:%d = %ld > 20dps\n", i, bias_regular[i]);
;;;2422   				result |= 1 << i;	//Error condition
;;;2423   			}
;;;2424   		}
;;;2425   	}
;;;2426       return result;
;;;2427   }
000032  b00f              ADD      sp,sp,#0x3c
000034  ecbd8b08          VPOP     {d8-d11}
000038  e8bd83f0          POP      {r4-r9,pc}
                  |L5.60|
00003c  b145              CBZ      r5,|L5.80|
00003e  f89d3016          LDRB     r3,[sp,#0x16]         ;2350
000042  f89d2015          LDRB     r2,[sp,#0x15]         ;2350
000046  f89d1014          LDRB     r1,[sp,#0x14]         ;2350
00004a  a0d9              ADR      r0,|L5.944|
00004c  f7fffffe          BL       __2printf
                  |L5.80|
000050  2400              MOVS     r4,#0                 ;2352
000052  e03b              B        |L5.204|
                  |L5.84|
000054  a805              ADD      r0,sp,#0x14           ;2353
000056  5d00              LDRB     r0,[r0,r4]            ;2353
000058  b370              CBZ      r0,|L5.184|
00005a  a805              ADD      r0,sp,#0x14           ;2354
00005c  5d00              LDRB     r0,[r0,r4]            ;2354
00005e  1e40              SUBS     r0,r0,#1              ;2354
000060  49d9              LDR      r1,|L5.968|
000062  f8310010          LDRH     r0,[r1,r0,LSL #1]     ;2354
000066  ee000a10          VMOV     s0,r0                 ;2354
00006a  eeb80a40          VCVT.F32.U32 s0,s0                 ;2354
00006e  a806              ADD      r0,sp,#0x18           ;2354
000070  eb000084          ADD      r0,r0,r4,LSL #2       ;2354
000074  ed800a00          VSTR     s0,[r0,#0]            ;2354
000078  a806              ADD      r0,sp,#0x18           ;2355
00007a  eb000084          ADD      r0,r0,r4,LSL #2       ;2355
00007e  ed900a00          VLDR     s0,[r0,#0]            ;2355
000082  eddf0ad2          VLDR     s1,|L5.972|
000086  ee200a20          VMUL.F32 s0,s0,s1              ;2355
00008a  a806              ADD      r0,sp,#0x18           ;2355
00008c  eb000084          ADD      r0,r0,r4,LSL #2       ;2355
000090  ed800a00          VSTR     s0,[r0,#0]            ;2355
000094  a806              ADD      r0,sp,#0x18           ;2356
000096  eb000084          ADD      r0,r0,r4,LSL #2       ;2356
00009a  edd00a00          VLDR     s1,[r0,#0]            ;2356
00009e  48cc              LDR      r0,|L5.976|
0000a0  ed900a00          VLDR     s0,[r0,#0]            ;2356
0000a4  eeb80a40          VCVT.F32.U32 s0,s0                 ;2356
0000a8  ee801a80          VDIV.F32 s2,s1,s0              ;2356
0000ac  a806              ADD      r0,sp,#0x18           ;2356
0000ae  eb000084          ADD      r0,r0,r4,LSL #2       ;2356
0000b2  ed801a00          VSTR     s2,[r0,#0]            ;2356
0000b6  e008              B        |L5.202|
                  |L5.184|
0000b8  ed9f0ac6          VLDR     s0,|L5.980|
0000bc  a806              ADD      r0,sp,#0x18           ;2359
0000be  eb000084          ADD      r0,r0,r4,LSL #2       ;2359
0000c2  ed800a00          VSTR     s0,[r0,#0]            ;2359
0000c6  f04f0901          MOV      r9,#1                 ;2360
                  |L5.202|
0000ca  1c64              ADDS     r4,r4,#1              ;2352
                  |L5.204|
0000cc  2c03              CMP      r4,#3                 ;2352
0000ce  dbc1              BLT      |L5.84|
0000d0  f1b90f00          CMP      r9,#0                 ;2364
0000d4  d17e              BNE      |L5.468|
0000d6  b115              CBZ      r5,|L5.222|
0000d8  a0bf              ADR      r0,|L5.984|
0000da  f7fffffe          BL       __2printf
                  |L5.222|
0000de  2400              MOVS     r4,#0                 ;2368
0000e0  e0a3              B        |L5.554|
                  |L5.226|
0000e2  f8570024          LDR      r0,[r7,r4,LSL #2]     ;2369
0000e6  f8561024          LDR      r1,[r6,r4,LSL #2]     ;2369
0000ea  1a40              SUBS     r0,r0,r1              ;2369
0000ec  ee000a10          VMOV     s0,r0                 ;2369
0000f0  eeb80ac0          VCVT.F32.S32 s0,s0                 ;2369
0000f4  a80c              ADD      r0,sp,#0x30           ;2369
0000f6  eb000084          ADD      r0,r0,r4,LSL #2       ;2369
0000fa  ed800a00          VSTR     s0,[r0,#0]            ;2369
0000fe  2d00              CMP      r5,#0                 ;2371
000100  d043              BEQ      |L5.394|
000102  f8570024          LDR      r0,[r7,r4,LSL #2]     ;2372
000106  ee000a10          VMOV     s0,r0                 ;2372
00010a  eeb80ac0          VCVT.F32.S32 s0,s0                 ;2372
00010e  eef70a00          VMOV.F32 s1,#1.00000000        ;2372
000112  ee801a20          VDIV.F32 s2,s0,s1              ;2372
000116  eeb70ac1          VCVT.F64.F32 d0,s2                 ;2372
00011a  eeb09b40          VMOV.F64 d9,d0                 ;2372
00011e  f8560024          LDR      r0,[r6,r4,LSL #2]     ;2372
000122  ee000a10          VMOV     s0,r0                 ;2372
000126  eeb80ac0          VCVT.F32.S32 s0,s0                 ;2372
00012a  eef70a00          VMOV.F32 s1,#1.00000000        ;2372
00012e  ee801a20          VDIV.F32 s2,s0,s1              ;2372
000132  eeb70ac1          VCVT.F64.F32 d0,s2                 ;2372
000136  eeb0ab40          VMOV.F64 d10,d0                ;2372
00013a  a80c              ADD      r0,sp,#0x30           ;2372
00013c  eb000084          ADD      r0,r0,r4,LSL #2       ;2372
000140  ed900a00          VLDR     s0,[r0,#0]            ;2372
000144  eef70a00          VMOV.F32 s1,#1.00000000        ;2372
000148  ee801a20          VDIV.F32 s2,s0,s1              ;2372
00014c  eeb70ac1          VCVT.F64.F32 d0,s2                 ;2372
000150  eeb0bb40          VMOV.F64 d11,d0                ;2372
000154  ed8d9b02          VSTR     d9,[sp,#8]            ;2372
000158  ed8dab00          VSTR     d10,[sp,#0]           ;2372
00015c  ec532b1b          VMOV     r2,r3,d11             ;2372
000160  a0a2              ADR      r0,|L5.1004|
000162  f7fffffe          BL       __2printf
000166  a806              ADD      r0,sp,#0x18           ;2375
000168  eb000084          ADD      r0,r0,r4,LSL #2       ;2375
00016c  ed900a00          VLDR     s0,[r0,#0]            ;2375
000170  eef70a00          VMOV.F32 s1,#1.00000000        ;2375
000174  ee801a20          VDIV.F32 s2,s0,s1              ;2375
000178  eeb70ac1          VCVT.F64.F32 d0,s2                 ;2375
00017c  eeb09b40          VMOV.F64 d9,d0                 ;2375
000180  ec532b19          VMOV     r2,r3,d9              ;2375
000184  a0a6              ADR      r0,|L5.1056|
000186  f7fffffe          BL       __2printf
                  |L5.394|
00018a  a80c              ADD      r0,sp,#0x30           ;2378
00018c  eb000084          ADD      r0,r0,r4,LSL #2       ;2378
000190  ed900a00          VLDR     s0,[r0,#0]            ;2378
000194  a806              ADD      r0,sp,#0x18           ;2378
000196  eb000084          ADD      r0,r0,r4,LSL #2       ;2378
00019a  edd00a00          VLDR     s1,[r0,#0]            ;2378
00019e  ee801a20          VDIV.F32 s2,s0,s1              ;2378
0001a2  a809              ADD      r0,sp,#0x24           ;2378
0001a4  eb000084          ADD      r0,r0,r4,LSL #2       ;2378
0001a8  ed801a00          VSTR     s2,[r0,#0]            ;2378
0001ac  b305              CBZ      r5,|L5.496|
0001ae  4888              LDR      r0,|L5.976|
0001b0  ed900a06          VLDR     s0,[r0,#0x18]         ;2381
0001b4  eef70a00          VMOV.F32 s1,#1.00000000        ;2381
0001b8  ee801a20          VDIV.F32 s2,s0,s1              ;2381
0001bc  eeb70ac1          VCVT.F64.F32 d0,s2                 ;2381
0001c0  eeb09b40          VMOV.F64 d9,d0                 ;2381
0001c4  a809              ADD      r0,sp,#0x24           ;2381
0001c6  eb000084          ADD      r0,r0,r4,LSL #2       ;2381
0001ca  ed900a00          VLDR     s0,[r0,#0]            ;2381
0001ce  eef70a00          VMOV.F32 s1,#1.00000000        ;2381
0001d2  e000              B        |L5.470|
                  |L5.468|
0001d4  e02d              B        |L5.562|
                  |L5.470|
0001d6  ee801a20          VDIV.F32 s2,s0,s1              ;2381
0001da  eeb70ac1          VCVT.F64.F32 d0,s2                 ;2381
0001de  eeb0ab40          VMOV.F64 d10,d0                ;2381
0001e2  ed8d9b00          VSTR     d9,[sp,#0]            ;2381
0001e6  ec532b1a          VMOV     r2,r3,d10             ;2381
0001ea  a092              ADR      r0,|L5.1076|
0001ec  f7fffffe          BL       __2printf
                  |L5.496|
0001f0  a809              ADD      r0,sp,#0x24           ;2384
0001f2  eb000084          ADD      r0,r0,r4,LSL #2       ;2384
0001f6  ed900a00          VLDR     s0,[r0,#0]            ;2384
0001fa  eeb70ac0          VCVT.F64.F32 d0,s0                 ;2384
0001fe  eeb00bc0          VABS.F64 d0,d0                 ;2384
000202  4873              LDR      r0,|L5.976|
000204  ed901a06          VLDR     s2,[r0,#0x18]         ;2384
000208  eeb71ac1          VCVT.F64.F32 d1,s2                 ;2384
00020c  eeb40bc1          VCMPE.F64 d0,d1                 ;2384
000210  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;2384
000214  d208              BCS      |L5.552|
000216  b11d              CBZ      r5,|L5.544|
000218  4621              MOV      r1,r4                 ;2386
00021a  a08e              ADR      r0,|L5.1108|
00021c  f7fffffe          BL       __2printf
                  |L5.544|
000220  2001              MOVS     r0,#1                 ;2387
000222  40a0              LSLS     r0,r0,r4              ;2387
000224  ea400808          ORR      r8,r0,r8              ;2387
                  |L5.552|
000228  1c64              ADDS     r4,r4,#1              ;2368
                  |L5.554|
00022a  2c03              CMP      r4,#3                 ;2368
00022c  f6ffaf59          BLT      |L5.226|
000230  e072              B        |L5.792|
                  |L5.562|
000232  4867              LDR      r0,|L5.976|
000234  ed900a05          VLDR     s0,[r0,#0x14]         ;2393
000238  eddf0a64          VLDR     s1,|L5.972|
00023c  ee208a20          VMUL.F32 s16,s0,s1             ;2393
000240  b17d              CBZ      r5,|L5.610|
000242  a08a              ADR      r0,|L5.1132|
000244  f7fffffe          BL       __2printf
000248  eeb70a00          VMOV.F32 s0,#1.00000000        ;2397
00024c  eec80a00          VDIV.F32 s1,s16,s0             ;2397
000250  eeb70ae0          VCVT.F64.F32 d0,s1                 ;2397
000254  eeb09b40          VMOV.F64 d9,d0                 ;2397
000258  ec532b19          VMOV     r2,r3,d9              ;2397
00025c  a088              ADR      r0,|L5.1152|
00025e  f7fffffe          BL       __2printf
                  |L5.610|
000262  2400              MOVS     r4,#0                 ;2400
000264  e056              B        |L5.788|
                  |L5.614|
000266  f8570024          LDR      r0,[r7,r4,LSL #2]     ;2401
00026a  f8561024          LDR      r1,[r6,r4,LSL #2]     ;2401
00026e  1a40              SUBS     r0,r0,r1              ;2401
000270  ee000a10          VMOV     s0,r0                 ;2401
000274  eeb80ac0          VCVT.F32.S32 s0,s0                 ;2401
000278  a80c              ADD      r0,sp,#0x30           ;2401
00027a  eb000084          ADD      r0,r0,r4,LSL #2       ;2401
00027e  ed800a00          VSTR     s0,[r0,#0]            ;2401
000282  b37d              CBZ      r5,|L5.740|
000284  f8560024          LDR      r0,[r6,r4,LSL #2]     ;2404
000288  ee000a10          VMOV     s0,r0                 ;2404
00028c  eeb80ac0          VCVT.F32.S32 s0,s0                 ;2404
000290  eef70a00          VMOV.F32 s1,#1.00000000        ;2404
000294  ee801a20          VDIV.F32 s2,s0,s1              ;2404
000298  eeb70ac1          VCVT.F64.F32 d0,s2                 ;2404
00029c  eeb09b40          VMOV.F64 d9,d0                 ;2404
0002a0  f8570024          LDR      r0,[r7,r4,LSL #2]     ;2404
0002a4  ee000a10          VMOV     s0,r0                 ;2404
0002a8  eeb80ac0          VCVT.F32.S32 s0,s0                 ;2404
0002ac  eef70a00          VMOV.F32 s1,#1.00000000        ;2404
0002b0  ee801a20          VDIV.F32 s2,s0,s1              ;2404
0002b4  eeb70ac1          VCVT.F64.F32 d0,s2                 ;2404
0002b8  eeb0ab40          VMOV.F64 d10,d0                ;2404
0002bc  a80c              ADD      r0,sp,#0x30           ;2404
0002be  eb000084          ADD      r0,r0,r4,LSL #2       ;2404
0002c2  ed900a00          VLDR     s0,[r0,#0]            ;2404
0002c6  eef70a00          VMOV.F32 s1,#1.00000000        ;2404
0002ca  ee801a20          VDIV.F32 s2,s0,s1              ;2404
0002ce  eeb70ac1          VCVT.F64.F32 d0,s2                 ;2404
0002d2  eeb0bb40          VMOV.F64 d11,d0                ;2404
0002d6  ed8d9b02          VSTR     d9,[sp,#8]            ;2404
0002da  ed8dab00          VSTR     d10,[sp,#0]           ;2404
0002de  ec532b1b          VMOV     r2,r3,d11             ;2404
0002e2  e000              B        |L5.742|
                  |L5.740|
0002e4  e002              B        |L5.748|
                  |L5.742|
0002e6  a06b              ADR      r0,|L5.1172|
0002e8  f7fffffe          BL       __2printf
                  |L5.748|
0002ec  a80c              ADD      r0,sp,#0x30           ;2405
0002ee  eb000084          ADD      r0,r0,r4,LSL #2       ;2405
0002f2  ed900a00          VLDR     s0,[r0,#0]            ;2405
0002f6  eeb40ac8          VCMPE.F32 s0,s16                ;2405
0002fa  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;2405
0002fe  d208              BCS      |L5.786|
000300  b11d              CBZ      r5,|L5.778|
000302  4621              MOV      r1,r4                 ;2407
000304  a06d              ADR      r0,|L5.1212|
000306  f7fffffe          BL       __2printf
                  |L5.778|
00030a  2001              MOVS     r0,#1                 ;2408
00030c  40a0              LSLS     r0,r0,r4              ;2408
00030e  ea400808          ORR      r8,r0,r8              ;2408
                  |L5.786|
000312  1c64              ADDS     r4,r4,#1              ;2400
                  |L5.788|
000314  2c03              CMP      r4,#3                 ;2400
000316  dba6              BLT      |L5.614|
                  |L5.792|
000318  f1b80f00          CMP      r8,#0                 ;2413
00031c  d133              BNE      |L5.902|
00031e  482c              LDR      r0,|L5.976|
000320  ed900a04          VLDR     s0,[r0,#0x10]         ;2415
000324  eddf0a29          VLDR     s1,|L5.972|
000328  ee608a20          VMUL.F32 s17,s0,s1             ;2415
00032c  b165              CBZ      r5,|L5.840|
00032e  eeb70a00          VMOV.F32 s0,#1.00000000        ;2417
000332  eec80a80          VDIV.F32 s1,s17,s0             ;2417
000336  eeb70ae0          VCVT.F64.F32 d0,s1                 ;2417
00033a  eeb09b40          VMOV.F64 d9,d0                 ;2417
00033e  ec532b19          VMOV     r2,r3,d9              ;2417
000342  a068              ADR      r0,|L5.1252|
000344  f7fffffe          BL       __2printf
                  |L5.840|
000348  2400              MOVS     r4,#0                 ;2418
00034a  e01a              B        |L5.898|
                  |L5.844|
00034c  f8560024          LDR      r0,[r6,r4,LSL #2]     ;2419
000350  ee000a10          VMOV     s0,r0                 ;2419
000354  eeb80bc0          VCVT.F64.S32 d0,s0                 ;2419
000358  eeb00bc0          VABS.F64 d0,d0                 ;2419
00035c  eeb71ae8          VCVT.F64.F32 d1,s17                ;2419
000360  eeb40bc1          VCMPE.F64 d0,d1                 ;2419
000364  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;2419
000368  dd0a              BLE      |L5.896|
00036a  b12d              CBZ      r5,|L5.888|
00036c  f8562024          LDR      r2,[r6,r4,LSL #2]     ;2421
000370  4621              MOV      r1,r4                 ;2421
000372  a066              ADR      r0,|L5.1292|
000374  f7fffffe          BL       __2printf
                  |L5.888|
000378  2001              MOVS     r0,#1                 ;2422
00037a  40a0              LSLS     r0,r0,r4              ;2422
00037c  ea400808          ORR      r8,r0,r8              ;2422
                  |L5.896|
000380  1c64              ADDS     r4,r4,#1              ;2418
                  |L5.898|
000382  2c03              CMP      r4,#3                 ;2418
000384  dbe2              BLT      |L5.844|
                  |L5.902|
000386  4640              MOV      r0,r8                 ;2426
000388  e653              B        |L5.50|
;;;2428   
                          ENDP

00038a  0000              DCW      0x0000
                  |L5.908|
                          DCD      ||st||
                  |L5.912|
000390  52656164          DCB      "Reading OTP Register Error.\n",0
000394  696e6720
000398  4f545020
00039c  52656769
0003a0  73746572
0003a4  20457272
0003a8  6f722e0a
0003ac  00      
0003ad  00                DCB      0
0003ae  00                DCB      0
0003af  00                DCB      0
                  |L5.944|
0003b0  4779726f          DCB      "Gyro OTP:%d, %d, %d\r\n",0
0003b4  204f5450
0003b8  3a25642c
0003bc  2025642c
0003c0  2025640d
0003c4  0a00    
0003c6  00                DCB      0
0003c7  00                DCB      0
                  |L5.968|
                          DCD      mpu_6500_st_tb
                  |L5.972|
0003cc  47800000          DCFS     0x47800000 ; 65536
                  |L5.976|
                          DCD      test
                  |L5.980|
0003d4  00000000          DCFS     0x00000000 ; 0
                  |L5.984|
0003d8  4759524f          DCB      "GYRO:CRITERIA A\n",0
0003dc  3a435249
0003e0  54455249
0003e4  4120410a
0003e8  00      
0003e9  00                DCB      0
0003ea  00                DCB      0
0003eb  00                DCB      0
                  |L5.1004|
0003ec  42696173          DCB      "Bias_Shift=%7.4f, Bias_Reg=%7.4f, Bias_HWST=%7.4f\r\n",0
0003f0  5f536869
0003f4  66743d25
0003f8  372e3466
0003fc  2c204269
000400  61735f52
000404  65673d25
000408  372e3466
00040c  2c204269
000410  61735f48
000414  5753543d
000418  25372e34
00041c  660d0a00
                  |L5.1056|
000420  4f545020          DCB      "OTP value: %7.4f\r\n",0
000424  76616c75
000428  653a2025
00042c  372e3466
000430  0d0a00  
000433  00                DCB      0
                  |L5.1076|
000434  72617469          DCB      "ratio=%7.4f, threshold=%7.4f\r\n",0
000438  6f3d2537
00043c  2e34662c
000440  20746872
000444  6573686f
000448  6c643d25
00044c  372e3466
000450  0d0a00  
000453  00                DCB      0
                  |L5.1108|
000454  4779726f          DCB      "Gyro Fail Axis = %d\n",0
000458  20466169
00045c  6c204178
000460  6973203d
000464  2025640a
000468  00      
000469  00                DCB      0
00046a  00                DCB      0
00046b  00                DCB      0
                  |L5.1132|
00046c  4759524f          DCB      "GYRO:CRITERIA B\r\n",0
000470  3a435249
000474  54455249
000478  4120420d
00047c  0a00    
00047e  00                DCB      0
00047f  00                DCB      0
                  |L5.1152|
000480  4d617820          DCB      "Max DPS: %7.4f\r\n",0
000484  4450533a
000488  2025372e
00048c  34660d0a
000490  00      
000491  00                DCB      0
000492  00                DCB      0
000493  00                DCB      0
                  |L5.1172|
000494  42696173          DCB      "Bias_shift=%7.4f, st=%7.4f, reg=%7.4f\n",0
000498  5f736869
00049c  66743d25
0004a0  372e3466
0004a4  2c207374
0004a8  3d25372e
0004ac  34662c20
0004b0  7265673d
0004b4  25372e34
0004b8  660a00  
0004bb  00                DCB      0
                  |L5.1212|
0004bc  4759524f          DCB      "GYRO FAIL axis:%d greater than 60dps\n",0
0004c0  20464149
0004c4  4c206178
0004c8  69733a25
0004cc  64206772
0004d0  65617465
0004d4  72207468
0004d8  616e2036
0004dc  30647073
0004e0  0a00    
0004e2  00                DCB      0
0004e3  00                DCB      0
                  |L5.1252|
0004e4  4779726f          DCB      "Gyro:CRITERIA C: bias less than %7.4f\n",0
0004e8  3a435249
0004ec  54455249
0004f0  4120433a
0004f4  20626961
0004f8  73206c65
0004fc  73732074
000500  68616e20
000504  25372e34
000508  660a00  
00050b  00                DCB      0
                  |L5.1292|
00050c  4641494c          DCB      "FAILED: Gyro axis:%d = %ld > 20dps\n",0
000510  45443a20
000514  4779726f
000518  20617869
00051c  733a2564
000520  203d2025
000524  6c64203e
000528  20323064
00052c  70730a00

                          AREA ||i.inv_row_2_scale||, CODE, READONLY, ALIGN=1

                  inv_row_2_scale PROC
;;;3363   //方向转换
;;;3364   unsigned short inv_row_2_scale(const signed char *row)
000000  4601              MOV      r1,r0
;;;3365   {
;;;3366       unsigned short b;
;;;3367   
;;;3368       if (row[0] > 0)
000002  f9912000          LDRSB    r2,[r1,#0]
000006  2a00              CMP      r2,#0
000008  dd01              BLE      |L6.14|
;;;3369           b = 0;
00000a  2000              MOVS     r0,#0
00000c  e01e              B        |L6.76|
                  |L6.14|
;;;3370       else if (row[0] < 0)
00000e  f9912000          LDRSB    r2,[r1,#0]
000012  2a00              CMP      r2,#0
000014  da01              BGE      |L6.26|
;;;3371           b = 4;
000016  2004              MOVS     r0,#4
000018  e018              B        |L6.76|
                  |L6.26|
;;;3372       else if (row[1] > 0)
00001a  f9912001          LDRSB    r2,[r1,#1]
00001e  2a00              CMP      r2,#0
000020  dd01              BLE      |L6.38|
;;;3373           b = 1;
000022  2001              MOVS     r0,#1
000024  e012              B        |L6.76|
                  |L6.38|
;;;3374       else if (row[1] < 0)
000026  f9912001          LDRSB    r2,[r1,#1]
00002a  2a00              CMP      r2,#0
00002c  da01              BGE      |L6.50|
;;;3375           b = 5;
00002e  2005              MOVS     r0,#5
000030  e00c              B        |L6.76|
                  |L6.50|
;;;3376       else if (row[2] > 0)
000032  f9912002          LDRSB    r2,[r1,#2]
000036  2a00              CMP      r2,#0
000038  dd01              BLE      |L6.62|
;;;3377           b = 2;
00003a  2002              MOVS     r0,#2
00003c  e006              B        |L6.76|
                  |L6.62|
;;;3378       else if (row[2] < 0)
00003e  f9912002          LDRSB    r2,[r1,#2]
000042  2a00              CMP      r2,#0
000044  da01              BGE      |L6.74|
;;;3379           b = 6;
000046  2006              MOVS     r0,#6
000048  e000              B        |L6.76|
                  |L6.74|
;;;3380       else
;;;3381           b = 7;      // error
00004a  2007              MOVS     r0,#7
                  |L6.76|
;;;3382       return b;
;;;3383   }
00004c  4770              BX       lr
;;;3384   //空函数,未用到.
                          ENDP


                          AREA ||i.mget_ms||, CODE, READONLY, ALIGN=1

                  mget_ms PROC
;;;3384   //空函数,未用到.
;;;3385   void mget_ms(unsigned long *time)
000000  4770              BX       lr
;;;3386   {
;;;3387       //*time=(unsigned long)HAL_GetTick();
;;;3388   }
;;;3389   //mpu6050,dmp初始化
                          ENDP


                          AREA ||i.mpu_configure_fifo||, CODE, READONLY, ALIGN=2

                  mpu_configure_fifo PROC
;;;1579    */
;;;1580   int mpu_configure_fifo(unsigned char sensors)
000000  b570              PUSH     {r4-r6,lr}
;;;1581   {
000002  4604              MOV      r4,r0
;;;1582       unsigned char prev;
;;;1583       int result = 0;
000004  2600              MOVS     r6,#0
;;;1584   
;;;1585       /* Compass data isn't going into the FIFO. Stop trying. */
;;;1586       sensors &= ~INV_XYZ_COMPASS;
000006  f0240401          BIC      r4,r4,#1
;;;1587   
;;;1588       if (st.chip_cfg.dmp_on)
00000a  4818              LDR      r0,|L8.108|
00000c  f8900024          LDRB     r0,[r0,#0x24]
000010  b108              CBZ      r0,|L8.22|
;;;1589           return 0;
000012  2000              MOVS     r0,#0
                  |L8.20|
;;;1590       else {
;;;1591           if (!(st.chip_cfg.sensors))
;;;1592               return -1;
;;;1593           prev = st.chip_cfg.fifo_enable;
;;;1594           st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
;;;1595           if (st.chip_cfg.fifo_enable != sensors)
;;;1596               /* You're not getting what you asked for. Some sensors are
;;;1597                * asleep.
;;;1598                */
;;;1599               result = -1;
;;;1600           else
;;;1601               result = 0;
;;;1602           if (sensors || st.chip_cfg.lp_accel_mode)
;;;1603               set_int_enable(1);
;;;1604           else
;;;1605               set_int_enable(0);
;;;1606           if (sensors) {
;;;1607               if (mpu_reset_fifo()) {
;;;1608                   st.chip_cfg.fifo_enable = prev;
;;;1609                   return -1;
;;;1610               }
;;;1611           }
;;;1612       }
;;;1613   
;;;1614       return result;
;;;1615   }
000014  bd70              POP      {r4-r6,pc}
                  |L8.22|
000016  4815              LDR      r0,|L8.108|
000018  7a80              LDRB     r0,[r0,#0xa]          ;1591
00001a  b910              CBNZ     r0,|L8.34|
00001c  f04f30ff          MOV      r0,#0xffffffff        ;1592
000020  e7f8              B        |L8.20|
                  |L8.34|
000022  4812              LDR      r0,|L8.108|
000024  7c05              LDRB     r5,[r0,#0x10]         ;1593
000026  7a80              LDRB     r0,[r0,#0xa]          ;1594
000028  4020              ANDS     r0,r0,r4              ;1594
00002a  4910              LDR      r1,|L8.108|
00002c  7408              STRB     r0,[r1,#0x10]         ;1594
00002e  4608              MOV      r0,r1                 ;1595
000030  7c00              LDRB     r0,[r0,#0x10]         ;1595
000032  42a0              CMP      r0,r4                 ;1595
000034  d002              BEQ      |L8.60|
000036  f04f36ff          MOV      r6,#0xffffffff        ;1599
00003a  e000              B        |L8.62|
                  |L8.60|
00003c  2600              MOVS     r6,#0                 ;1601
                  |L8.62|
00003e  b914              CBNZ     r4,|L8.70|
000040  480a              LDR      r0,|L8.108|
000042  7d00              LDRB     r0,[r0,#0x14]         ;1602
000044  b118              CBZ      r0,|L8.78|
                  |L8.70|
000046  2001              MOVS     r0,#1                 ;1603
000048  f7fffffe          BL       set_int_enable
00004c  e002              B        |L8.84|
                  |L8.78|
00004e  2000              MOVS     r0,#0                 ;1605
000050  f7fffffe          BL       set_int_enable
                  |L8.84|
000054  b13c              CBZ      r4,|L8.102|
000056  f7fffffe          BL       mpu_reset_fifo
00005a  b120              CBZ      r0,|L8.102|
00005c  4803              LDR      r0,|L8.108|
00005e  7405              STRB     r5,[r0,#0x10]         ;1608
000060  f04f30ff          MOV      r0,#0xffffffff        ;1609
000064  e7d6              B        |L8.20|
                  |L8.102|
000066  4630              MOV      r0,r6                 ;1614
000068  e7d4              B        |L8.20|
;;;1616   
                          ENDP

00006a  0000              DCW      0x0000
                  |L8.108|
                          DCD      ||st||

                          AREA ||i.mpu_dmp_get_data||, CODE, READONLY, ALIGN=2

                  mpu_dmp_get_data PROC
;;;3459   //    其他,失败
;;;3460   u8 mpu_dmp_get_data(float *pitch,float *roll,float *yaw)
000000  b570              PUSH     {r4-r6,lr}
;;;3461   {
000002  ed2d8b04          VPUSH    {d8-d9}
000006  b08e              SUB      sp,sp,#0x38
000008  4604              MOV      r4,r0
00000a  460d              MOV      r5,r1
00000c  4616              MOV      r6,r2
;;;3462   	float q0=1.0f,q1=0.0f,q2=0.0f,q3=0.0f;
00000e  eeb70a00          VMOV.F32 s0,#1.00000000
000012  eef09a40          VMOV.F32 s19,s0
000016  ed9f0a5d          VLDR     s0,|L9.396|
00001a  eeb08a40          VMOV.F32 s16,s0
00001e  ed9f0a5b          VLDR     s0,|L9.396|
000022  eef08a40          VMOV.F32 s17,s0
000026  ed9f0a59          VLDR     s0,|L9.396|
00002a  eeb09a40          VMOV.F32 s18,s0
;;;3463   	unsigned long sensor_timestamp;
;;;3464   	short gyro[3], accel[3], sensors;
;;;3465   	unsigned char more;
;;;3466   	long quat[4]; 
;;;3467   	if(dmp_read_fifo(gyro, accel, quat, &sensor_timestamp, &sensors,&more))return 1;	 
00002e  a807              ADD      r0,sp,#0x1c
000030  a908              ADD      r1,sp,#0x20
000032  ab0d              ADD      r3,sp,#0x34
000034  aa03              ADD      r2,sp,#0xc
000036  e9cd1000          STRD     r1,r0,[sp,#0]
00003a  a909              ADD      r1,sp,#0x24
00003c  a80b              ADD      r0,sp,#0x2c
00003e  f7fffffe          BL       dmp_read_fifo
000042  b120              CBZ      r0,|L9.78|
000044  2001              MOVS     r0,#1
                  |L9.70|
;;;3468   	/* Gyro and accel data are written to the FIFO by the DMP in chip frame and hardware units.
;;;3469   	 * This behavior is convenient because it keeps the gyro and accel outputs of dmp_read_fifo and mpu_read_fifo consistent.
;;;3470   	**/
;;;3471   	/*if (sensors & INV_XYZ_GYRO )
;;;3472   	send_packet(PACKET_TYPE_GYRO, gyro);
;;;3473   	if (sensors & INV_XYZ_ACCEL)
;;;3474   	send_packet(PACKET_TYPE_ACCEL, accel); */
;;;3475   	/* Unlike gyro and accel, quaternions are written to the FIFO in the body frame, q30.
;;;3476   	 * The orientation is set by the scalar passed to dmp_set_orientation during initialization. 
;;;3477   	**/
;;;3478   	if(sensors&INV_WXYZ_QUAT) 
;;;3479   	{
;;;3480   		q0 = quat[0] / q30;	//q30格式转换为浮点数
;;;3481   		q1 = quat[1] / q30;
;;;3482   		q2 = quat[2] / q30;
;;;3483   		q3 = quat[3] / q30; 
;;;3484   		//计算得到俯仰角/横滚角/航向角
;;;3485   		*pitch = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3;	// pitch
;;;3486   		*roll  = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3;	// roll
;;;3487   		*yaw   = atan2(2*(q1*q2 + q0*q3),q0*q0+q1*q1-q2*q2-q3*q3) * 57.3;	//yaw
;;;3488   	}else return 2;
;;;3489   	return 0;
;;;3490   }
000046  b00e              ADD      sp,sp,#0x38
000048  ecbd8b04          VPOP     {d8-d9}
00004c  bd70              POP      {r4-r6,pc}
                  |L9.78|
00004e  f8bd0020          LDRH     r0,[sp,#0x20]         ;3478
000052  f4007080          AND      r0,r0,#0x100          ;3478
000056  2800              CMP      r0,#0                 ;3478
000058  d07e              BEQ      |L9.344|
00005a  ed9d0a03          VLDR     s0,[sp,#0xc]          ;3480
00005e  eeb80ac0          VCVT.F32.S32 s0,s0                 ;3480
000062  eddf0a4b          VLDR     s1,|L9.400|
000066  ee801a20          VDIV.F32 s2,s0,s1              ;3480
00006a  eef09a41          VMOV.F32 s19,s2                ;3480
00006e  ed9d0a04          VLDR     s0,[sp,#0x10]         ;3481
000072  eeb80ac0          VCVT.F32.S32 s0,s0                 ;3481
000076  eddf0a46          VLDR     s1,|L9.400|
00007a  ee801a20          VDIV.F32 s2,s0,s1              ;3481
00007e  eeb08a41          VMOV.F32 s16,s2                ;3481
000082  ed9d0a05          VLDR     s0,[sp,#0x14]         ;3482
000086  eeb80ac0          VCVT.F32.S32 s0,s0                 ;3482
00008a  eddf0a41          VLDR     s1,|L9.400|
00008e  ee801a20          VDIV.F32 s2,s0,s1              ;3482
000092  eef08a41          VMOV.F32 s17,s2                ;3482
000096  ed9d0a06          VLDR     s0,[sp,#0x18]         ;3483
00009a  eeb80ac0          VCVT.F32.S32 s0,s0                 ;3483
00009e  eddf0a3c          VLDR     s1,|L9.400|
0000a2  ee801a20          VDIV.F32 s2,s0,s1              ;3483
0000a6  eeb09a41          VMOV.F32 s18,s2                ;3483
0000aa  eeb81a00          VMOV.F32 s2,#-2.00000000       ;3485
0000ae  ee281a01          VMUL.F32 s2,s16,s2             ;3485
0000b2  ee211a09          VMUL.F32 s2,s2,s18             ;3485
0000b6  eef01a00          VMOV.F32 s3,#2.00000000        ;3485
0000ba  ee691aa1          VMUL.F32 s3,s19,s3             ;3485
0000be  ee011aa8          VMLA.F32 s2,s3,s17             ;3485
0000c2  eeb71ac1          VCVT.F64.F32 d1,s2                 ;3485
0000c6  eeb00b41          VMOV.F64 d0,d1                 ;3485
0000ca  f7fffffe          BL       __hardfp_asin
0000ce  ed9f1b31          VLDR     d1,|L9.404|
0000d2  ee200b01          VMUL.F64 d0,d0,d1              ;3485
0000d6  eeb70bc0          VCVT.F32.F64 s0,d0                 ;3485
0000da  ed840a00          VSTR     s0,[r4,#0]            ;3485
0000de  eeb82a00          VMOV.F32 s4,#-2.00000000       ;3486
0000e2  ee282a02          VMUL.F32 s4,s16,s4             ;3486
0000e6  ee222a08          VMUL.F32 s4,s4,s16             ;3486
0000ea  eef02a00          VMOV.F32 s5,#2.00000000        ;3486
0000ee  ee682aa2          VMUL.F32 s5,s17,s5             ;3486
0000f2  ee022ae8          VMLS.F32 s4,s5,s17             ;3486
0000f6  eef72a00          VMOV.F32 s5,#1.00000000        ;3486
0000fa  ee322a22          VADD.F32 s4,s4,s5              ;3486
0000fe  eeb72ac2          VCVT.F64.F32 d2,s4                 ;3486
000102  eeb01b42          VMOV.F64 d1,d2                 ;3486
000106  eeb02a00          VMOV.F32 s4,#2.00000000        ;3486
00010a  ee282a82          VMUL.F32 s4,s17,s4             ;3486
00010e  ee222a09          VMUL.F32 s4,s4,s18             ;3486
000112  eef02a00          VMOV.F32 s5,#2.00000000        ;3486
000116  ee692aa2          VMUL.F32 s5,s19,s5             ;3486
00011a  ee022a88          VMLA.F32 s4,s5,s16             ;3486
00011e  eeb72ac2          VCVT.F64.F32 d2,s4                 ;3486
000122  eeb00b42          VMOV.F64 d0,d2                 ;3486
000126  f7fffffe          BL       __hardfp_atan2
00012a  ed9f1b1a          VLDR     d1,|L9.404|
00012e  ee200b01          VMUL.F64 d0,d0,d1              ;3486
000132  eeb70bc0          VCVT.F32.F64 s0,d0                 ;3486
000136  ed850a00          VSTR     s0,[r5,#0]            ;3486
00013a  ee292aa9          VMUL.F32 s4,s19,s19            ;3487
00013e  ee082a08          VMLA.F32 s4,s16,s16            ;3487
000142  ee082ae8          VMLS.F32 s4,s17,s17            ;3487
000146  ee092a49          VMLS.F32 s4,s18,s18            ;3487
00014a  eeb72ac2          VCVT.F64.F32 d2,s4                 ;3487
00014e  eeb01b42          VMOV.F64 d1,d2                 ;3487
000152  ee282a28          VMUL.F32 s4,s16,s17            ;3487
000156  e000              B        |L9.346|
                  |L9.344|
000158  e014              B        |L9.388|
                  |L9.346|
00015a  ee092a89          VMLA.F32 s4,s19,s18            ;3487
00015e  eef02a00          VMOV.F32 s5,#2.00000000        ;3487
000162  ee222a22          VMUL.F32 s4,s4,s5              ;3487
000166  eeb72ac2          VCVT.F64.F32 d2,s4                 ;3487
00016a  eeb00b42          VMOV.F64 d0,d2                 ;3487
00016e  f7fffffe          BL       __hardfp_atan2
000172  ed9f1b08          VLDR     d1,|L9.404|
000176  ee200b01          VMUL.F64 d0,d0,d1              ;3487
00017a  eeb70bc0          VCVT.F32.F64 s0,d0                 ;3487
00017e  ed860a00          VSTR     s0,[r6,#0]            ;3487
000182  e001              B        |L9.392|
                  |L9.388|
000184  2002              MOVS     r0,#2                 ;3488
000186  e75e              B        |L9.70|
                  |L9.392|
000188  2000              MOVS     r0,#0                 ;3489
00018a  e75c              B        |L9.70|
;;;3491   
                          ENDP

                  |L9.396|
00018c  00000000          DCFS     0x00000000 ; 0
                  |L9.400|
000190  4e800000          DCFS     0x4e800000 ; 1073741824
                  |L9.404|
000194  66666666          DCFD     0x404ca66666666666 ; 57.299999999999997
000198  404ca666

                          AREA ||i.mpu_dmp_init||, CODE, READONLY, ALIGN=2

                  mpu_dmp_init PROC
;;;3391   //    其他,失败
;;;3392   u8 mpu_dmp_init(void)
000000  b530              PUSH     {r4,r5,lr}
;;;3393   {
000002  b085              SUB      sp,sp,#0x14
;;;3394   	u8 res=0;
000004  2400              MOVS     r4,#0
;;;3395       struct int_param_s int_param;
;;;3396       unsigned char accel_fsr;
;;;3397       unsigned short gyro_rate, gyro_fsr;
;;;3398       unsigned short compass_fsr;
;;;3399       
;;;3400   	IIC_Init(); 		        //初始化IIC总线
000006  f7fffffe          BL       IIC_Init
;;;3401   	if(mpu_init(&int_param)==0)	//初始化MPU9250
00000a  a804              ADD      r0,sp,#0x10
00000c  f7fffffe          BL       mpu_init
000010  2800              CMP      r0,#0
000012  d179              BNE      |L10.264|
;;;3402   	{	 
;;;3403           res=inv_init_mpl();     //初始化MPL
000014  f7fffffe          BL       inv_init_mpl
000018  b2c4              UXTB     r4,r0
;;;3404           if(res)return 1;
00001a  b114              CBZ      r4,|L10.34|
00001c  2001              MOVS     r0,#1
                  |L10.30|
;;;3405           inv_enable_quaternion();
;;;3406           inv_enable_9x_sensor_fusion();
;;;3407           inv_enable_fast_nomot();
;;;3408           inv_enable_gyro_tc();
;;;3409           inv_enable_vector_compass_cal();
;;;3410           inv_enable_magnetic_disturbance();
;;;3411           inv_enable_eMPL_outputs();
;;;3412           res=inv_start_mpl();    //开启MPL
;;;3413           if(res)return 1;
;;;3414   		res=mpu_set_sensors(INV_XYZ_GYRO|INV_XYZ_ACCEL|INV_XYZ_COMPASS);//设置所需要的传感器
;;;3415   		if(res)return 2; 
;;;3416   		res=mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);   //设置FIFO
;;;3417   		if(res)return 3; 
;;;3418   		res=mpu_set_sample_rate(DEFAULT_MPU_HZ);	            //设置采样率
;;;3419   		if(res)return 4; 
;;;3420           res=mpu_set_compass_sample_rate(1000/COMPASS_READ_MS);  //设置磁力计采样率
;;;3421           if(res)return 5;
;;;3422           mpu_get_sample_rate(&gyro_rate);
;;;3423           mpu_get_gyro_fsr(&gyro_fsr);
;;;3424           mpu_get_accel_fsr(&accel_fsr);
;;;3425           mpu_get_compass_fsr(&compass_fsr);
;;;3426           inv_set_gyro_sample_rate(1000000L/gyro_rate);
;;;3427           inv_set_accel_sample_rate(1000000L/gyro_rate);
;;;3428           inv_set_compass_sample_rate(COMPASS_READ_MS*1000L);
;;;3429           inv_set_gyro_orientation_and_scale(
;;;3430               inv_orientation_matrix_to_scalar(gyro_orientation),(long)gyro_fsr<<15);
;;;3431           inv_set_accel_orientation_and_scale(
;;;3432               inv_orientation_matrix_to_scalar(gyro_orientation),(long)accel_fsr<<15);
;;;3433           inv_set_compass_orientation_and_scale(
;;;3434               inv_orientation_matrix_to_scalar(comp_orientation),(long)compass_fsr<<15);
;;;3435               
;;;3436               
;;;3437   		res=dmp_load_motion_driver_firmware();		             //加载dmp固件
;;;3438   		if(res)return 6; 
;;;3439   		res=dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_orientation));//设置陀螺仪方向
;;;3440   		if(res)return 7; 
;;;3441   		res=dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT|DMP_FEATURE_TAP|	            //设置dmp功能
;;;3442   		    DMP_FEATURE_ANDROID_ORIENT|DMP_FEATURE_SEND_RAW_ACCEL|DMP_FEATURE_SEND_CAL_GYRO|
;;;3443   		    DMP_FEATURE_GYRO_CAL);
;;;3444   		if(res)return 8; 
;;;3445   		res=dmp_set_fifo_rate(DEFAULT_MPU_HZ);	//设置DMP输出速率(最大不超过200Hz)
;;;3446   		if(res)return 9;   
;;;3447   		res=run_self_test();		//自检
;;;3448   		if(res)return 10;    
;;;3449   		res=mpu_set_dmp_state(1);	//使能DMP
;;;3450   		if(res)return 11;     
;;;3451   	}
;;;3452   	return 0;
;;;3453   }
00001e  b005              ADD      sp,sp,#0x14
000020  bd30              POP      {r4,r5,pc}
                  |L10.34|
000022  f7fffffe          BL       inv_enable_quaternion
000026  f7fffffe          BL       inv_enable_9x_sensor_fusion
00002a  f7fffffe          BL       inv_enable_fast_nomot
00002e  f7fffffe          BL       inv_enable_gyro_tc
000032  f7fffffe          BL       inv_enable_vector_compass_cal
000036  f7fffffe          BL       inv_enable_magnetic_disturbance
00003a  f7fffffe          BL       inv_enable_eMPL_outputs
00003e  f7fffffe          BL       inv_start_mpl
000042  b2c4              UXTB     r4,r0                 ;3412
000044  b10c              CBZ      r4,|L10.74|
000046  2001              MOVS     r0,#1                 ;3413
000048  e7e9              B        |L10.30|
                  |L10.74|
00004a  2079              MOVS     r0,#0x79              ;3414
00004c  f7fffffe          BL       mpu_set_sensors
000050  b2c4              UXTB     r4,r0                 ;3414
000052  b10c              CBZ      r4,|L10.88|
000054  2002              MOVS     r0,#2                 ;3415
000056  e7e2              B        |L10.30|
                  |L10.88|
000058  2078              MOVS     r0,#0x78              ;3416
00005a  f7fffffe          BL       mpu_configure_fifo
00005e  b2c4              UXTB     r4,r0                 ;3416
000060  b10c              CBZ      r4,|L10.102|
000062  2003              MOVS     r0,#3                 ;3417
000064  e7db              B        |L10.30|
                  |L10.102|
000066  2064              MOVS     r0,#0x64              ;3418
000068  f7fffffe          BL       mpu_set_sample_rate
00006c  b2c4              UXTB     r4,r0                 ;3418
00006e  b10c              CBZ      r4,|L10.116|
000070  2004              MOVS     r0,#4                 ;3419
000072  e7d4              B        |L10.30|
                  |L10.116|
000074  200a              MOVS     r0,#0xa               ;3420
000076  f7fffffe          BL       mpu_set_compass_sample_rate
00007a  b2c4              UXTB     r4,r0                 ;3420
00007c  b10c              CBZ      r4,|L10.130|
00007e  2005              MOVS     r0,#5                 ;3421
000080  e7cd              B        |L10.30|
                  |L10.130|
000082  a802              ADD      r0,sp,#8              ;3422
000084  f7fffffe          BL       mpu_get_sample_rate
000088  a801              ADD      r0,sp,#4              ;3423
00008a  f7fffffe          BL       mpu_get_gyro_fsr
00008e  a803              ADD      r0,sp,#0xc            ;3424
000090  f7fffffe          BL       mpu_get_accel_fsr
000094  4668              MOV      r0,sp                 ;3425
000096  f7fffffe          BL       mpu_get_compass_fsr
00009a  f8bd0008          LDRH     r0,[sp,#8]            ;3426
00009e  492f              LDR      r1,|L10.348|
0000a0  fb91f5f0          SDIV     r5,r1,r0              ;3426
0000a4  4628              MOV      r0,r5                 ;3426
0000a6  f7fffffe          BL       inv_set_gyro_sample_rate
0000aa  f8bd0008          LDRH     r0,[sp,#8]            ;3427
0000ae  492b              LDR      r1,|L10.348|
0000b0  fb91f5f0          SDIV     r5,r1,r0              ;3427
0000b4  4628              MOV      r0,r5                 ;3427
0000b6  f7fffffe          BL       inv_set_accel_sample_rate
0000ba  4829              LDR      r0,|L10.352|
0000bc  f7fffffe          BL       inv_set_compass_sample_rate
0000c0  4828              LDR      r0,|L10.356|
0000c2  f7fffffe          BL       inv_orientation_matrix_to_scalar
0000c6  4605              MOV      r5,r0                 ;3429
0000c8  f8bd0004          LDRH     r0,[sp,#4]            ;3429
0000cc  03c1              LSLS     r1,r0,#15             ;3429
0000ce  4628              MOV      r0,r5                 ;3429
0000d0  f7fffffe          BL       inv_set_gyro_orientation_and_scale
0000d4  4823              LDR      r0,|L10.356|
0000d6  f7fffffe          BL       inv_orientation_matrix_to_scalar
0000da  4605              MOV      r5,r0                 ;3431
0000dc  f89d000c          LDRB     r0,[sp,#0xc]          ;3431
0000e0  03c1              LSLS     r1,r0,#15             ;3431
0000e2  4628              MOV      r0,r5                 ;3431
0000e4  f7fffffe          BL       inv_set_accel_orientation_and_scale
0000e8  481f              LDR      r0,|L10.360|
0000ea  f7fffffe          BL       inv_orientation_matrix_to_scalar
0000ee  4605              MOV      r5,r0                 ;3433
0000f0  f8bd0000          LDRH     r0,[sp,#0]            ;3433
0000f4  03c1              LSLS     r1,r0,#15             ;3433
0000f6  4628              MOV      r0,r5                 ;3433
0000f8  f7fffffe          BL       inv_set_compass_orientation_and_scale
0000fc  f7fffffe          BL       dmp_load_motion_driver_firmware
000100  b2c4              UXTB     r4,r0                 ;3437
000102  b114              CBZ      r4,|L10.266|
000104  2006              MOVS     r0,#6                 ;3438
000106  e78a              B        |L10.30|
                  |L10.264|
000108  e025              B        |L10.342|
                  |L10.266|
00010a  4816              LDR      r0,|L10.356|
00010c  f7fffffe          BL       inv_orientation_matrix_to_scalar
000110  4605              MOV      r5,r0                 ;3439
000112  f7fffffe          BL       dmp_set_orientation
000116  b2c4              UXTB     r4,r0                 ;3439
000118  b10c              CBZ      r4,|L10.286|
00011a  2007              MOVS     r0,#7                 ;3440
00011c  e77f              B        |L10.30|
                  |L10.286|
00011e  f2401073          MOV      r0,#0x173             ;3441
000122  f7fffffe          BL       dmp_enable_feature
000126  b2c4              UXTB     r4,r0                 ;3441
000128  b10c              CBZ      r4,|L10.302|
00012a  2008              MOVS     r0,#8                 ;3444
00012c  e777              B        |L10.30|
                  |L10.302|
00012e  2064              MOVS     r0,#0x64              ;3445
000130  f7fffffe          BL       dmp_set_fifo_rate
000134  b2c4              UXTB     r4,r0                 ;3445
000136  b10c              CBZ      r4,|L10.316|
000138  2009              MOVS     r0,#9                 ;3446
00013a  e770              B        |L10.30|
                  |L10.316|
00013c  f7fffffe          BL       run_self_test
000140  4604              MOV      r4,r0                 ;3447
000142  b10c              CBZ      r4,|L10.328|
000144  200a              MOVS     r0,#0xa               ;3448
000146  e76a              B        |L10.30|
                  |L10.328|
000148  2001              MOVS     r0,#1                 ;3449
00014a  f7fffffe          BL       mpu_set_dmp_state
00014e  b2c4              UXTB     r4,r0                 ;3449
000150  b10c              CBZ      r4,|L10.342|
000152  200b              MOVS     r0,#0xb               ;3450
000154  e763              B        |L10.30|
                  |L10.342|
000156  2000              MOVS     r0,#0                 ;3452
000158  e761              B        |L10.30|
;;;3454   //得到dmp处理后的数据(注意,本函数需要比较多堆栈,局部变量有点多)
                          ENDP

00015a  0000              DCW      0x0000
                  |L10.348|
                          DCD      0x000f4240
                  |L10.352|
                          DCD      0x000186a0
                  |L10.356|
                          DCD      gyro_orientation
                  |L10.360|
                          DCD      comp_orientation

                          AREA ||i.mpu_get_accel_fsr||, CODE, READONLY, ALIGN=2

                  mpu_get_accel_fsr PROC
;;;1266    */
;;;1267   int mpu_get_accel_fsr(unsigned char *fsr)
000000  4601              MOV      r1,r0
;;;1268   {
;;;1269       switch (st.chip_cfg.accel_fsr) {
000002  4811              LDR      r0,|L11.72|
000004  7a40              LDRB     r0,[r0,#9]
000006  b130              CBZ      r0,|L11.22|
000008  2801              CMP      r0,#1
00000a  d007              BEQ      |L11.28|
00000c  2802              CMP      r0,#2
00000e  d008              BEQ      |L11.34|
000010  2803              CMP      r0,#3
000012  d10c              BNE      |L11.46|
000014  e008              B        |L11.40|
                  |L11.22|
;;;1270       case INV_FSR_2G:
;;;1271           fsr[0] = 2;
000016  2002              MOVS     r0,#2
000018  7008              STRB     r0,[r1,#0]
;;;1272           break;
00001a  e00b              B        |L11.52|
                  |L11.28|
;;;1273       case INV_FSR_4G:
;;;1274           fsr[0] = 4;
00001c  2004              MOVS     r0,#4
00001e  7008              STRB     r0,[r1,#0]
;;;1275           break;
000020  e008              B        |L11.52|
                  |L11.34|
;;;1276       case INV_FSR_8G:
;;;1277           fsr[0] = 8;
000022  2008              MOVS     r0,#8
000024  7008              STRB     r0,[r1,#0]
;;;1278           break;
000026  e005              B        |L11.52|
                  |L11.40|
;;;1279       case INV_FSR_16G:
;;;1280           fsr[0] = 16;
000028  2010              MOVS     r0,#0x10
00002a  7008              STRB     r0,[r1,#0]
;;;1281           break;
00002c  e002              B        |L11.52|
                  |L11.46|
;;;1282       default:
;;;1283           return -1;
00002e  f04f30ff          MOV      r0,#0xffffffff
                  |L11.50|
;;;1284       }
;;;1285       if (st.chip_cfg.accel_half)
;;;1286           fsr[0] <<= 1;
;;;1287       return 0;
;;;1288   }
000032  4770              BX       lr
                  |L11.52|
000034  bf00              NOP                            ;1272
000036  4804              LDR      r0,|L11.72|
000038  7cc0              LDRB     r0,[r0,#0x13]         ;1285
00003a  b118              CBZ      r0,|L11.68|
00003c  7808              LDRB     r0,[r1,#0]            ;1286
00003e  0640              LSLS     r0,r0,#25             ;1286
000040  0e00              LSRS     r0,r0,#24             ;1286
000042  7008              STRB     r0,[r1,#0]            ;1286
                  |L11.68|
000044  2000              MOVS     r0,#0                 ;1287
000046  e7f4              B        |L11.50|
;;;1289   
                          ENDP

                  |L11.72|
                          DCD      ||st||

                          AREA ||i.mpu_get_accel_reg||, CODE, READONLY, ALIGN=2

                  mpu_get_accel_reg PROC
;;;931     */
;;;932    int mpu_get_accel_reg(short *data, unsigned long *timestamp)
000000  b57c              PUSH     {r2-r6,lr}
;;;933    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;934        unsigned char tmp[6];
;;;935    
;;;936        if (!(st.chip_cfg.sensors & INV_XYZ_ACCEL))
000006  481a              LDR      r0,|L12.112|
000008  7a80              LDRB     r0,[r0,#0xa]
00000a  f0000008          AND      r0,r0,#8
00000e  b910              CBNZ     r0,|L12.22|
;;;937            return -1;
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L12.20|
;;;938    
;;;939        if (i2c_read(st.hw->addr, st.reg->raw_accel, 6, tmp))
;;;940            return -1;
;;;941        data[0] = (tmp[0] << 8) | tmp[1];
;;;942        data[1] = (tmp[2] << 8) | tmp[3];
;;;943        data[2] = (tmp[4] << 8) | tmp[5];
;;;944        if (timestamp)
;;;945            get_ms(timestamp);
;;;946        return 0;
;;;947    }
000014  bd7c              POP      {r2-r6,pc}
                  |L12.22|
000016  4a16              LDR      r2,|L12.112|
000018  6812              LDR      r2,[r2,#0]            ;939  ; st
00001a  7bd1              LDRB     r1,[r2,#0xf]          ;939
00001c  4a14              LDR      r2,|L12.112|
00001e  6852              LDR      r2,[r2,#4]            ;939  ; st
000020  7810              LDRB     r0,[r2,#0]            ;939
000022  466b              MOV      r3,sp                 ;939
000024  2206              MOVS     r2,#6                 ;939
000026  f7fffffe          BL       MPU_Read_Len
00002a  b110              CBZ      r0,|L12.50|
00002c  f04f30ff          MOV      r0,#0xffffffff        ;940
000030  e7f0              B        |L12.20|
                  |L12.50|
000032  f89d0001          LDRB     r0,[sp,#1]            ;941
000036  f89d1000          LDRB     r1,[sp,#0]            ;941
00003a  ea402001          ORR      r0,r0,r1,LSL #8       ;941
00003e  b200              SXTH     r0,r0                 ;941
000040  8020              STRH     r0,[r4,#0]            ;941
000042  f89d0003          LDRB     r0,[sp,#3]            ;942
000046  f89d1002          LDRB     r1,[sp,#2]            ;942
00004a  ea402001          ORR      r0,r0,r1,LSL #8       ;942
00004e  b200              SXTH     r0,r0                 ;942
000050  8060              STRH     r0,[r4,#2]            ;942
000052  f89d0005          LDRB     r0,[sp,#5]            ;943
000056  f89d1004          LDRB     r1,[sp,#4]            ;943
00005a  ea402001          ORR      r0,r0,r1,LSL #8       ;943
00005e  b200              SXTH     r0,r0                 ;943
000060  80a0              STRH     r0,[r4,#4]            ;943
000062  b115              CBZ      r5,|L12.106|
000064  4628              MOV      r0,r5                 ;945
000066  f7fffffe          BL       mget_ms
                  |L12.106|
00006a  2000              MOVS     r0,#0                 ;946
00006c  e7d2              B        |L12.20|
;;;948    
                          ENDP

00006e  0000              DCW      0x0000
                  |L12.112|
                          DCD      ||st||

                          AREA ||i.mpu_get_accel_sens||, CODE, READONLY, ALIGN=2

                  mpu_get_accel_sens PROC
;;;1532    */
;;;1533   int mpu_get_accel_sens(unsigned short *sens)
000000  4601              MOV      r1,r0
;;;1534   {
;;;1535       switch (st.chip_cfg.accel_fsr) {
000002  4813              LDR      r0,|L13.80|
000004  7a40              LDRB     r0,[r0,#9]
000006  b130              CBZ      r0,|L13.22|
000008  2801              CMP      r0,#1
00000a  d008              BEQ      |L13.30|
00000c  2802              CMP      r0,#2
00000e  d00a              BEQ      |L13.38|
000010  2803              CMP      r0,#3
000012  d110              BNE      |L13.54|
000014  e00b              B        |L13.46|
                  |L13.22|
;;;1536       case INV_FSR_2G:
;;;1537           sens[0] = 16384;
000016  f44f4080          MOV      r0,#0x4000
00001a  8008              STRH     r0,[r1,#0]
;;;1538           break;
00001c  e00e              B        |L13.60|
                  |L13.30|
;;;1539       case INV_FSR_4G:
;;;1540           sens[0] = 8192;
00001e  f44f5000          MOV      r0,#0x2000
000022  8008              STRH     r0,[r1,#0]
;;;1541           break;
000024  e00a              B        |L13.60|
                  |L13.38|
;;;1542       case INV_FSR_8G:
;;;1543           sens[0] = 4096;
000026  f44f5080          MOV      r0,#0x1000
00002a  8008              STRH     r0,[r1,#0]
;;;1544           break;
00002c  e006              B        |L13.60|
                  |L13.46|
;;;1545       case INV_FSR_16G:
;;;1546           sens[0] = 2048;
00002e  f44f6000          MOV      r0,#0x800
000032  8008              STRH     r0,[r1,#0]
;;;1547           break;
000034  e002              B        |L13.60|
                  |L13.54|
;;;1548       default:
;;;1549           return -1;
000036  f04f30ff          MOV      r0,#0xffffffff
                  |L13.58|
;;;1550       }
;;;1551       if (st.chip_cfg.accel_half)
;;;1552           sens[0] >>= 1;
;;;1553       return 0;
;;;1554   }
00003a  4770              BX       lr
                  |L13.60|
00003c  bf00              NOP                            ;1538
00003e  4804              LDR      r0,|L13.80|
000040  7cc0              LDRB     r0,[r0,#0x13]         ;1551
000042  b110              CBZ      r0,|L13.74|
000044  8808              LDRH     r0,[r1,#0]            ;1552
000046  1040              ASRS     r0,r0,#1              ;1552
000048  8008              STRH     r0,[r1,#0]            ;1552
                  |L13.74|
00004a  2000              MOVS     r0,#0                 ;1553
00004c  e7f5              B        |L13.58|
;;;1555   
                          ENDP

00004e  0000              DCW      0x0000
                  |L13.80|
                          DCD      ||st||

                          AREA ||i.mpu_get_compass_fsr||, CODE, READONLY, ALIGN=2

                  mpu_get_compass_fsr PROC
;;;3110    */
;;;3111   int mpu_get_compass_fsr(unsigned short *fsr)
000000  4601              MOV      r1,r0
;;;3112   {
;;;3113   #ifdef AK89xx_SECONDARY
;;;3114       fsr[0] = st.hw->compass_fsr;
000002  4803              LDR      r0,|L14.16|
000004  6840              LDR      r0,[r0,#4]  ; st
000006  8980              LDRH     r0,[r0,#0xc]
000008  8008              STRH     r0,[r1,#0]
;;;3115       return 0;
00000a  2000              MOVS     r0,#0
;;;3116   #else
;;;3117       return -1;
;;;3118   #endif
;;;3119   }
00000c  4770              BX       lr
;;;3120   
                          ENDP

00000e  0000              DCW      0x0000
                  |L14.16|
                          DCD      ||st||

                          AREA ||i.mpu_get_compass_reg||, CODE, READONLY, ALIGN=2

                  mpu_get_compass_reg PROC
;;;3057    */
;;;3058   int mpu_get_compass_reg(short *data, unsigned long *timestamp)
000000  b53e              PUSH     {r1-r5,lr}
;;;3059   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;3060   #ifdef AK89xx_SECONDARY
;;;3061       unsigned char tmp[9];
;;;3062   
;;;3063       if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
000006  4831              LDR      r0,|L15.204|
000008  7a80              LDRB     r0,[r0,#0xa]
00000a  f0000001          AND      r0,r0,#1
00000e  b910              CBNZ     r0,|L15.22|
;;;3064           return -1;
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L15.20|
;;;3065   
;;;3066   #ifdef AK89xx_BYPASS
;;;3067       if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ST1, 8, tmp))
;;;3068           return -1;
;;;3069       tmp[8] = AKM_SINGLE_MEASUREMENT;
;;;3070       if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
;;;3071           return -1;
;;;3072   #else
;;;3073       if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
;;;3074           return -1;
;;;3075   #endif
;;;3076   
;;;3077   #if defined AK8975_SECONDARY
;;;3078       /* AK8975 doesn't have the overrun error bit. */
;;;3079       if (!(tmp[0] & AKM_DATA_READY))
;;;3080           return -2;
;;;3081       if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
;;;3082           return -3;
;;;3083   #elif defined AK8963_SECONDARY
;;;3084       /* AK8963 doesn't have the data read error bit. */
;;;3085       if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
;;;3086           return -2;
;;;3087       if (tmp[7] & AKM_OVERFLOW)
;;;3088           return -3;
;;;3089   #endif
;;;3090       data[0] = (tmp[2] << 8) | tmp[1];
;;;3091       data[1] = (tmp[4] << 8) | tmp[3];
;;;3092       data[2] = (tmp[6] << 8) | tmp[5];
;;;3093   
;;;3094       data[0] = ((long)data[0] * st.chip_cfg.mag_sens_adj[0]) >> 8;
;;;3095       data[1] = ((long)data[1] * st.chip_cfg.mag_sens_adj[1]) >> 8;
;;;3096       data[2] = ((long)data[2] * st.chip_cfg.mag_sens_adj[2]) >> 8;
;;;3097   
;;;3098       if (timestamp)
;;;3099           get_ms(timestamp);
;;;3100       return 0;
;;;3101   #else
;;;3102       return -1;
;;;3103   #endif
;;;3104   }
000014  bd3e              POP      {r1-r5,pc}
                  |L15.22|
000016  4a2d              LDR      r2,|L15.204|
000018  6812              LDR      r2,[r2,#0]            ;3073  ; st
00001a  f8921028          LDRB     r1,[r2,#0x28]         ;3073
00001e  4a2b              LDR      r2,|L15.204|
000020  6852              LDR      r2,[r2,#4]            ;3073  ; st
000022  7810              LDRB     r0,[r2,#0]            ;3073
000024  466b              MOV      r3,sp                 ;3073
000026  2208              MOVS     r2,#8                 ;3073
000028  f7fffffe          BL       MPU_Read_Len
00002c  b110              CBZ      r0,|L15.52|
00002e  f04f30ff          MOV      r0,#0xffffffff        ;3074
000032  e7ef              B        |L15.20|
                  |L15.52|
000034  f89d0000          LDRB     r0,[sp,#0]            ;3085
000038  f0000001          AND      r0,r0,#1              ;3085
00003c  b120              CBZ      r0,|L15.72|
00003e  f89d0000          LDRB     r0,[sp,#0]            ;3085
000042  f0000002          AND      r0,r0,#2              ;3085
000046  b110              CBZ      r0,|L15.78|
                  |L15.72|
000048  f06f0001          MVN      r0,#1                 ;3086
00004c  e7e2              B        |L15.20|
                  |L15.78|
00004e  f89d0007          LDRB     r0,[sp,#7]            ;3087
000052  f0000080          AND      r0,r0,#0x80           ;3087
000056  b110              CBZ      r0,|L15.94|
000058  f06f0002          MVN      r0,#2                 ;3088
00005c  e7da              B        |L15.20|
                  |L15.94|
00005e  f89d0001          LDRB     r0,[sp,#1]            ;3090
000062  f89d1002          LDRB     r1,[sp,#2]            ;3090
000066  ea402001          ORR      r0,r0,r1,LSL #8       ;3090
00006a  b200              SXTH     r0,r0                 ;3090
00006c  8020              STRH     r0,[r4,#0]            ;3090
00006e  f89d0003          LDRB     r0,[sp,#3]            ;3091
000072  f89d1004          LDRB     r1,[sp,#4]            ;3091
000076  ea402001          ORR      r0,r0,r1,LSL #8       ;3091
00007a  b200              SXTH     r0,r0                 ;3091
00007c  8060              STRH     r0,[r4,#2]            ;3091
00007e  f89d0005          LDRB     r0,[sp,#5]            ;3092
000082  f89d1006          LDRB     r1,[sp,#6]            ;3092
000086  ea402001          ORR      r0,r0,r1,LSL #8       ;3092
00008a  b200              SXTH     r0,r0                 ;3092
00008c  80a0              STRH     r0,[r4,#4]            ;3092
00008e  8821              LDRH     r1,[r4,#0]            ;3094
000090  480e              LDR      r0,|L15.204|
000092  8d80              LDRH     r0,[r0,#0x2c]         ;3094
000094  fb11f000          SMULBB   r0,r1,r0              ;3094
000098  1200              ASRS     r0,r0,#8              ;3094
00009a  b200              SXTH     r0,r0                 ;3094
00009c  8020              STRH     r0,[r4,#0]            ;3094
00009e  8861              LDRH     r1,[r4,#2]            ;3095
0000a0  480a              LDR      r0,|L15.204|
0000a2  8dc0              LDRH     r0,[r0,#0x2e]         ;3095
0000a4  fb11f000          SMULBB   r0,r1,r0              ;3095
0000a8  1200              ASRS     r0,r0,#8              ;3095
0000aa  b200              SXTH     r0,r0                 ;3095
0000ac  8060              STRH     r0,[r4,#2]            ;3095
0000ae  88a1              LDRH     r1,[r4,#4]            ;3096
0000b0  4806              LDR      r0,|L15.204|
0000b2  8e00              LDRH     r0,[r0,#0x30]         ;3096
0000b4  fb11f000          SMULBB   r0,r1,r0              ;3096
0000b8  1200              ASRS     r0,r0,#8              ;3096
0000ba  b200              SXTH     r0,r0                 ;3096
0000bc  80a0              STRH     r0,[r4,#4]            ;3096
0000be  b115              CBZ      r5,|L15.198|
0000c0  4628              MOV      r0,r5                 ;3099
0000c2  f7fffffe          BL       mget_ms
                  |L15.198|
0000c6  2000              MOVS     r0,#0                 ;3100
0000c8  e7a4              B        |L15.20|
;;;3105   
                          ENDP

0000ca  0000              DCW      0x0000
                  |L15.204|
                          DCD      ||st||

                          AREA ||i.mpu_get_compass_sample_rate||, CODE, READONLY, ALIGN=2

                  mpu_get_compass_sample_rate PROC
;;;1462    */
;;;1463   int mpu_get_compass_sample_rate(unsigned short *rate)
000000  4601              MOV      r1,r0
;;;1464   {
;;;1465   #ifdef AK89xx_SECONDARY
;;;1466       rate[0] = st.chip_cfg.compass_sample_rate;
000002  4802              LDR      r0,|L16.12|
000004  8d00              LDRH     r0,[r0,#0x28]
000006  8008              STRH     r0,[r1,#0]
;;;1467       return 0;
000008  2000              MOVS     r0,#0
;;;1468   #else
;;;1469       rate[0] = 0;
;;;1470       return -1;
;;;1471   #endif
;;;1472   }
00000a  4770              BX       lr
;;;1473   
                          ENDP

                  |L16.12|
                          DCD      ||st||

                          AREA ||i.mpu_get_dmp_state||, CODE, READONLY, ALIGN=2

                  mpu_get_dmp_state PROC
;;;2941    */
;;;2942   int mpu_get_dmp_state(unsigned char *enabled)
000000  4601              MOV      r1,r0
;;;2943   {
;;;2944       enabled[0] = st.chip_cfg.dmp_on;
000002  4803              LDR      r0,|L17.16|
000004  f8900024          LDRB     r0,[r0,#0x24]
000008  7008              STRB     r0,[r1,#0]
;;;2945       return 0;
00000a  2000              MOVS     r0,#0
;;;2946   }
00000c  4770              BX       lr
;;;2947   
                          ENDP

00000e  0000              DCW      0x0000
                  |L17.16|
                          DCD      ||st||

                          AREA ||i.mpu_get_fifo_config||, CODE, READONLY, ALIGN=2

                  mpu_get_fifo_config PROC
;;;1564    */
;;;1565   int mpu_get_fifo_config(unsigned char *sensors)
000000  4601              MOV      r1,r0
;;;1566   {
;;;1567       sensors[0] = st.chip_cfg.fifo_enable;
000002  4802              LDR      r0,|L18.12|
000004  7c00              LDRB     r0,[r0,#0x10]
000006  7008              STRB     r0,[r1,#0]
;;;1568       return 0;
000008  2000              MOVS     r0,#0
;;;1569   }
00000a  4770              BX       lr
;;;1570   
                          ENDP

                  |L18.12|
                          DCD      ||st||

                          AREA ||i.mpu_get_gyro_fsr||, CODE, READONLY, ALIGN=2

                  mpu_get_gyro_fsr PROC
;;;1202    */
;;;1203   int mpu_get_gyro_fsr(unsigned short *fsr)
000000  4601              MOV      r1,r0
;;;1204   {
;;;1205       switch (st.chip_cfg.gyro_fsr) {
000002  480f              LDR      r0,|L19.64|
000004  7a00              LDRB     r0,[r0,#8]  ; st
000006  b130              CBZ      r0,|L19.22|
000008  2801              CMP      r0,#1
00000a  d007              BEQ      |L19.28|
00000c  2802              CMP      r0,#2
00000e  d009              BEQ      |L19.36|
000010  2803              CMP      r0,#3
000012  d10f              BNE      |L19.52|
000014  e00a              B        |L19.44|
                  |L19.22|
;;;1206       case INV_FSR_250DPS:
;;;1207           fsr[0] = 250;
000016  20fa              MOVS     r0,#0xfa
000018  8008              STRH     r0,[r1,#0]
;;;1208           break;
00001a  e00e              B        |L19.58|
                  |L19.28|
;;;1209       case INV_FSR_500DPS:
;;;1210           fsr[0] = 500;
00001c  f44f70fa          MOV      r0,#0x1f4
000020  8008              STRH     r0,[r1,#0]
;;;1211           break;
000022  e00a              B        |L19.58|
                  |L19.36|
;;;1212       case INV_FSR_1000DPS:
;;;1213           fsr[0] = 1000;
000024  f44f707a          MOV      r0,#0x3e8
000028  8008              STRH     r0,[r1,#0]
;;;1214           break;
00002a  e006              B        |L19.58|
                  |L19.44|
;;;1215       case INV_FSR_2000DPS:
;;;1216           fsr[0] = 2000;
00002c  f44f60fa          MOV      r0,#0x7d0
000030  8008              STRH     r0,[r1,#0]
;;;1217           break;
000032  e002              B        |L19.58|
                  |L19.52|
;;;1218       default:
;;;1219           fsr[0] = 0;
000034  2000              MOVS     r0,#0
000036  8008              STRH     r0,[r1,#0]
;;;1220           break;
000038  bf00              NOP      
                  |L19.58|
00003a  bf00              NOP                            ;1208
;;;1221       }
;;;1222       return 0;
00003c  2000              MOVS     r0,#0
;;;1223   }
00003e  4770              BX       lr
;;;1224   
                          ENDP

                  |L19.64|
                          DCD      ||st||

                          AREA ||i.mpu_get_gyro_reg||, CODE, READONLY, ALIGN=2

                  mpu_get_gyro_reg PROC
;;;908     */
;;;909    int mpu_get_gyro_reg(short *data, unsigned long *timestamp)
000000  b57c              PUSH     {r2-r6,lr}
;;;910    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;911        unsigned char tmp[6];
;;;912    
;;;913        if (!(st.chip_cfg.sensors & INV_XYZ_GYRO))
000006  481a              LDR      r0,|L20.112|
000008  7a80              LDRB     r0,[r0,#0xa]
00000a  f0000070          AND      r0,r0,#0x70
00000e  b910              CBNZ     r0,|L20.22|
;;;914            return -1;
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L20.20|
;;;915    
;;;916        if (i2c_read(st.hw->addr, st.reg->raw_gyro, 6, tmp))
;;;917            return -1;
;;;918        data[0] = (tmp[0] << 8) | tmp[1];
;;;919        data[1] = (tmp[2] << 8) | tmp[3];
;;;920        data[2] = (tmp[4] << 8) | tmp[5];
;;;921        if (timestamp)
;;;922            get_ms(timestamp);
;;;923        return 0;
;;;924    }
000014  bd7c              POP      {r2-r6,pc}
                  |L20.22|
000016  4a16              LDR      r2,|L20.112|
000018  6812              LDR      r2,[r2,#0]            ;916  ; st
00001a  7b91              LDRB     r1,[r2,#0xe]          ;916
00001c  4a14              LDR      r2,|L20.112|
00001e  6852              LDR      r2,[r2,#4]            ;916  ; st
000020  7810              LDRB     r0,[r2,#0]            ;916
000022  466b              MOV      r3,sp                 ;916
000024  2206              MOVS     r2,#6                 ;916
000026  f7fffffe          BL       MPU_Read_Len
00002a  b110              CBZ      r0,|L20.50|
00002c  f04f30ff          MOV      r0,#0xffffffff        ;917
000030  e7f0              B        |L20.20|
                  |L20.50|
000032  f89d0001          LDRB     r0,[sp,#1]            ;918
000036  f89d1000          LDRB     r1,[sp,#0]            ;918
00003a  ea402001          ORR      r0,r0,r1,LSL #8       ;918
00003e  b200              SXTH     r0,r0                 ;918
000040  8020              STRH     r0,[r4,#0]            ;918
000042  f89d0003          LDRB     r0,[sp,#3]            ;919
000046  f89d1002          LDRB     r1,[sp,#2]            ;919
00004a  ea402001          ORR      r0,r0,r1,LSL #8       ;919
00004e  b200              SXTH     r0,r0                 ;919
000050  8060              STRH     r0,[r4,#2]            ;919
000052  f89d0005          LDRB     r0,[sp,#5]            ;920
000056  f89d1004          LDRB     r1,[sp,#4]            ;920
00005a  ea402001          ORR      r0,r0,r1,LSL #8       ;920
00005e  b200              SXTH     r0,r0                 ;920
000060  80a0              STRH     r0,[r4,#4]            ;920
000062  b115              CBZ      r5,|L20.106|
000064  4628              MOV      r0,r5                 ;922
000066  f7fffffe          BL       mget_ms
                  |L20.106|
00006a  2000              MOVS     r0,#0                 ;923
00006c  e7d2              B        |L20.20|
;;;925    
                          ENDP

00006e  0000              DCW      0x0000
                  |L20.112|
                          DCD      ||st||

                          AREA ||i.mpu_get_gyro_sens||, CODE, READONLY, ALIGN=2

                  mpu_get_gyro_sens PROC
;;;1506    */
;;;1507   int mpu_get_gyro_sens(float *sens)
000000  4601              MOV      r1,r0
;;;1508   {
;;;1509       switch (st.chip_cfg.gyro_fsr) {
000002  4812              LDR      r0,|L21.76|
000004  7a00              LDRB     r0,[r0,#8]  ; st
000006  b130              CBZ      r0,|L21.22|
000008  2801              CMP      r0,#1
00000a  d009              BEQ      |L21.32|
00000c  2802              CMP      r0,#2
00000e  d00c              BEQ      |L21.42|
000010  2803              CMP      r0,#3
000012  d114              BNE      |L21.62|
000014  e00e              B        |L21.52|
                  |L21.22|
;;;1510       case INV_FSR_250DPS:
;;;1511           sens[0] = 131.f;
000016  ed9f0a0e          VLDR     s0,|L21.80|
00001a  ed810a00          VSTR     s0,[r1,#0]
;;;1512           break;
00001e  e011              B        |L21.68|
                  |L21.32|
;;;1513       case INV_FSR_500DPS:
;;;1514           sens[0] = 65.5f;
000020  ed9f0a0c          VLDR     s0,|L21.84|
000024  ed810a00          VSTR     s0,[r1,#0]
;;;1515           break;
000028  e00c              B        |L21.68|
                  |L21.42|
;;;1516       case INV_FSR_1000DPS:
;;;1517           sens[0] = 32.8f;
00002a  ed9f0a0b          VLDR     s0,|L21.88|
00002e  ed810a00          VSTR     s0,[r1,#0]
;;;1518           break;
000032  e007              B        |L21.68|
                  |L21.52|
;;;1519       case INV_FSR_2000DPS:
;;;1520           sens[0] = 16.4f;
000034  ed9f0a09          VLDR     s0,|L21.92|
000038  ed810a00          VSTR     s0,[r1,#0]
;;;1521           break;
00003c  e002              B        |L21.68|
                  |L21.62|
;;;1522       default:
;;;1523           return -1;
00003e  f04f30ff          MOV      r0,#0xffffffff
                  |L21.66|
;;;1524       }
;;;1525       return 0;
;;;1526   }
000042  4770              BX       lr
                  |L21.68|
000044  bf00              NOP                            ;1512
000046  2000              MOVS     r0,#0                 ;1525
000048  e7fb              B        |L21.66|
;;;1527   
                          ENDP

00004a  0000              DCW      0x0000
                  |L21.76|
                          DCD      ||st||
                  |L21.80|
000050  43030000          DCFS     0x43030000 ; 131
                  |L21.84|
000054  42830000          DCFS     0x42830000 ; 65.5
                  |L21.88|
000058  42033333          DCFS     0x42033333 ; 32.799999237060547
                  |L21.92|
00005c  41833333          DCFS     0x41833333 ; 16.399999618530273

                          AREA ||i.mpu_get_int_status||, CODE, READONLY, ALIGN=2

                  mpu_get_int_status PROC
;;;1717    */
;;;1718   int mpu_get_int_status(short *status)
000000  b538              PUSH     {r3-r5,lr}
;;;1719   {
000002  4604              MOV      r4,r0
;;;1720       unsigned char tmp[2];
;;;1721       if (!st.chip_cfg.sensors)
000004  480e              LDR      r0,|L22.64|
000006  7a80              LDRB     r0,[r0,#0xa]
000008  b910              CBNZ     r0,|L22.16|
;;;1722           return -1;
00000a  f04f30ff          MOV      r0,#0xffffffff
                  |L22.14|
;;;1723       if (i2c_read(st.hw->addr, st.reg->dmp_int_status, 2, tmp))
;;;1724           return -1;
;;;1725       status[0] = (tmp[0] << 8) | tmp[1];
;;;1726       return 0;
;;;1727   }
00000e  bd38              POP      {r3-r5,pc}
                  |L22.16|
000010  4a0b              LDR      r2,|L22.64|
000012  6812              LDR      r2,[r2,#0]            ;1723  ; st
000014  7c91              LDRB     r1,[r2,#0x12]         ;1723
000016  4a0a              LDR      r2,|L22.64|
000018  6852              LDR      r2,[r2,#4]            ;1723  ; st
00001a  7810              LDRB     r0,[r2,#0]            ;1723
00001c  466b              MOV      r3,sp                 ;1723
00001e  2202              MOVS     r2,#2                 ;1723
000020  f7fffffe          BL       MPU_Read_Len
000024  b110              CBZ      r0,|L22.44|
000026  f04f30ff          MOV      r0,#0xffffffff        ;1724
00002a  e7f0              B        |L22.14|
                  |L22.44|
00002c  f89d0001          LDRB     r0,[sp,#1]            ;1725
000030  f89d1000          LDRB     r1,[sp,#0]            ;1725
000034  ea402001          ORR      r0,r0,r1,LSL #8       ;1725
000038  b200              SXTH     r0,r0                 ;1725
00003a  8020              STRH     r0,[r4,#0]            ;1725
00003c  2000              MOVS     r0,#0                 ;1726
00003e  e7e6              B        |L22.14|
;;;1728   
                          ENDP

                  |L22.64|
                          DCD      ||st||

                          AREA ||i.mpu_get_lpf||, CODE, READONLY, ALIGN=2

                  mpu_get_lpf PROC
;;;1331    */
;;;1332   int mpu_get_lpf(unsigned short *lpf)
000000  4601              MOV      r1,r0
;;;1333   {
;;;1334       switch (st.chip_cfg.lpf) {
000002  4812              LDR      r0,|L23.76|
000004  7ac0              LDRB     r0,[r0,#0xb]
000006  2808              CMP      r0,#8
000008  d217              BCS      |L23.58|
00000a  e8dff000          TBB      [pc,r0]
00000e  1704              DCB      0x17,0x04
000010  070a0d10          DCB      0x07,0x0a,0x0d,0x10
000014  1318              DCB      0x13,0x18
;;;1335       case INV_FILTER_188HZ:
;;;1336           lpf[0] = 188;
000016  20bc              MOVS     r0,#0xbc
000018  8008              STRH     r0,[r1,#0]
;;;1337           break;
00001a  e013              B        |L23.68|
;;;1338       case INV_FILTER_98HZ:
;;;1339           lpf[0] = 98;
00001c  2062              MOVS     r0,#0x62
00001e  8008              STRH     r0,[r1,#0]
;;;1340           break;
000020  e010              B        |L23.68|
;;;1341       case INV_FILTER_42HZ:
;;;1342           lpf[0] = 42;
000022  202a              MOVS     r0,#0x2a
000024  8008              STRH     r0,[r1,#0]
;;;1343           break;
000026  e00d              B        |L23.68|
;;;1344       case INV_FILTER_20HZ:
;;;1345           lpf[0] = 20;
000028  2014              MOVS     r0,#0x14
00002a  8008              STRH     r0,[r1,#0]
;;;1346           break;
00002c  e00a              B        |L23.68|
;;;1347       case INV_FILTER_10HZ:
;;;1348           lpf[0] = 10;
00002e  200a              MOVS     r0,#0xa
000030  8008              STRH     r0,[r1,#0]
;;;1349           break;
000032  e007              B        |L23.68|
;;;1350       case INV_FILTER_5HZ:
;;;1351           lpf[0] = 5;
000034  2005              MOVS     r0,#5
000036  8008              STRH     r0,[r1,#0]
;;;1352           break;
000038  e004              B        |L23.68|
                  |L23.58|
;;;1353       case INV_FILTER_256HZ_NOLPF2:
00003a  bf00              NOP      
;;;1354       case INV_FILTER_2100HZ_NOLPF:
00003c  bf00              NOP      
;;;1355       default:
;;;1356           lpf[0] = 0;
00003e  2000              MOVS     r0,#0
000040  8008              STRH     r0,[r1,#0]
;;;1357           break;
000042  bf00              NOP      
                  |L23.68|
000044  bf00              NOP                            ;1337
;;;1358       }
;;;1359       return 0;
000046  2000              MOVS     r0,#0
;;;1360   }
000048  4770              BX       lr
;;;1361   
                          ENDP

00004a  0000              DCW      0x0000
                  |L23.76|
                          DCD      ||st||

                          AREA ||i.mpu_get_power_state||, CODE, READONLY, ALIGN=2

                  mpu_get_power_state PROC
;;;1621    */
;;;1622   int mpu_get_power_state(unsigned char *power_on)
000000  4601              MOV      r1,r0
;;;1623   {
;;;1624       if (st.chip_cfg.sensors)
000002  4805              LDR      r0,|L24.24|
000004  7a80              LDRB     r0,[r0,#0xa]
000006  b110              CBZ      r0,|L24.14|
;;;1625           power_on[0] = 1;
000008  2001              MOVS     r0,#1
00000a  7008              STRB     r0,[r1,#0]
00000c  e001              B        |L24.18|
                  |L24.14|
;;;1626       else
;;;1627           power_on[0] = 0;
00000e  2000              MOVS     r0,#0
000010  7008              STRB     r0,[r1,#0]
                  |L24.18|
;;;1628       return 0;
000012  2000              MOVS     r0,#0
;;;1629   }
000014  4770              BX       lr
;;;1630   
                          ENDP

000016  0000              DCW      0x0000
                  |L24.24|
                          DCD      ||st||

                          AREA ||i.mpu_get_sample_rate||, CODE, READONLY, ALIGN=2

                  mpu_get_sample_rate PROC
;;;1400    */
;;;1401   int mpu_get_sample_rate(unsigned short *rate)
000000  4601              MOV      r1,r0
;;;1402   {
;;;1403       if (st.chip_cfg.dmp_on)
000002  4806              LDR      r0,|L25.28|
000004  f8900024          LDRB     r0,[r0,#0x24]
000008  b110              CBZ      r0,|L25.16|
;;;1404           return -1;
00000a  f04f30ff          MOV      r0,#0xffffffff
                  |L25.14|
;;;1405       else
;;;1406           rate[0] = st.chip_cfg.sample_rate;
;;;1407       return 0;
;;;1408   }
00000e  4770              BX       lr
                  |L25.16|
000010  4802              LDR      r0,|L25.28|
000012  89c0              LDRH     r0,[r0,#0xe]          ;1406
000014  8008              STRH     r0,[r1,#0]            ;1406
000016  2000              MOVS     r0,#0                 ;1407
000018  e7f9              B        |L25.14|
;;;1409   
                          ENDP

00001a  0000              DCW      0x0000
                  |L25.28|
                          DCD      ||st||

                          AREA ||i.mpu_get_temperature||, CODE, READONLY, ALIGN=2

                  mpu_get_temperature PROC
;;;954     */
;;;955    int mpu_get_temperature(long *data, unsigned long *timestamp)
000000  b5f8              PUSH     {r3-r7,lr}
;;;956    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;957        unsigned char tmp[2];
;;;958        short raw;
;;;959    
;;;960        if (!(st.chip_cfg.sensors))
000006  4822              LDR      r0,|L26.144|
000008  7a80              LDRB     r0,[r0,#0xa]
00000a  b910              CBNZ     r0,|L26.18|
;;;961            return -1;
00000c  f04f30ff          MOV      r0,#0xffffffff
                  |L26.16|
;;;962    
;;;963        if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
;;;964            return -1;
;;;965        raw = (tmp[0] << 8) | tmp[1];
;;;966        if (timestamp)
;;;967            get_ms(timestamp);
;;;968    
;;;969        data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
;;;970        return 0;
;;;971    }
000010  bdf8              POP      {r3-r7,pc}
                  |L26.18|
000012  4a1f              LDR      r2,|L26.144|
000014  6812              LDR      r2,[r2,#0]            ;963  ; st
000016  7c11              LDRB     r1,[r2,#0x10]         ;963
000018  4a1d              LDR      r2,|L26.144|
00001a  6852              LDR      r2,[r2,#4]            ;963  ; st
00001c  7810              LDRB     r0,[r2,#0]            ;963
00001e  466b              MOV      r3,sp                 ;963
000020  2202              MOVS     r2,#2                 ;963
000022  f7fffffe          BL       MPU_Read_Len
000026  b110              CBZ      r0,|L26.46|
000028  f04f30ff          MOV      r0,#0xffffffff        ;964
00002c  e7f0              B        |L26.16|
                  |L26.46|
00002e  f89d0001          LDRB     r0,[sp,#1]            ;965
000032  f89d1000          LDRB     r1,[sp,#0]            ;965
000036  ea402001          ORR      r0,r0,r1,LSL #8       ;965
00003a  b205              SXTH     r5,r0                 ;965
00003c  b114              CBZ      r4,|L26.68|
00003e  4620              MOV      r0,r4                 ;967
000040  f7fffffe          BL       mget_ms
                  |L26.68|
000044  4812              LDR      r0,|L26.144|
000046  6840              LDR      r0,[r0,#4]            ;969  ; st
000048  f9b00008          LDRSH    r0,[r0,#8]            ;969
00004c  ee000a10          VMOV     s0,r0                 ;969
000050  eef80ac0          VCVT.F32.S32 s1,s0                 ;969
000054  ee005a10          VMOV     s0,r5                 ;969
000058  eeb80ac0          VCVT.F32.S32 s0,s0                 ;969
00005c  ee700a60          VSUB.F32 s1,s0,s1              ;969
000060  480b              LDR      r0,|L26.144|
000062  6840              LDR      r0,[r0,#4]            ;969  ; st
000064  88c0              LDRH     r0,[r0,#6]            ;969
000066  ee000a10          VMOV     s0,r0                 ;969
00006a  eeb80a40          VCVT.F32.U32 s0,s0                 ;969
00006e  ee801a80          VDIV.F32 s2,s1,s0              ;969
000072  ed9f0a08          VLDR     s0,|L26.148|
000076  ee310a00          VADD.F32 s0,s2,s0              ;969
00007a  eddf0a07          VLDR     s1,|L26.152|
00007e  ee200a20          VMUL.F32 s0,s0,s1              ;969
000082  eebd0ac0          VCVT.S32.F32 s0,s0                 ;969
000086  ed860a00          VSTR     s0,[r6,#0]            ;969
00008a  2000              MOVS     r0,#0                 ;970
00008c  e7c0              B        |L26.16|
;;;972    
                          ENDP

00008e  0000              DCW      0x0000
                  |L26.144|
                          DCD      ||st||
                  |L26.148|
000094  420c0000          DCFS     0x420c0000 ; 35
                  |L26.152|
000098  47800000          DCFS     0x47800000 ; 65536

                          AREA ||i.mpu_init||, CODE, READONLY, ALIGN=2

                  mpu_init PROC
;;;730     */
;;;731    int mpu_init(struct int_param_s *int_param)
000000  b51c              PUSH     {r2-r4,lr}
;;;732    {
000002  4604              MOV      r4,r0
;;;733        unsigned char data[6];
;;;734    
;;;735        /* Reset device. */
;;;736        data[0] = BIT_RESET;
000004  2080              MOVS     r0,#0x80
000006  f88d0000          STRB     r0,[sp,#0]
;;;737        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
00000a  4a47              LDR      r2,|L27.296|
00000c  6812              LDR      r2,[r2,#0]  ; st
00000e  7d51              LDRB     r1,[r2,#0x15]
000010  4a45              LDR      r2,|L27.296|
000012  6852              LDR      r2,[r2,#4]  ; st
000014  7810              LDRB     r0,[r2,#0]
000016  466b              MOV      r3,sp
000018  2201              MOVS     r2,#1
00001a  f7fffffe          BL       MPU_Write_Len
00001e  b110              CBZ      r0,|L27.38|
;;;738            return -1;
000020  f04f30ff          MOV      r0,#0xffffffff
                  |L27.36|
;;;739        delay_ms(100);
;;;740    
;;;741        /* Wake up chip. */
;;;742        data[0] = 0x00;
;;;743        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
;;;744            return -1;
;;;745    
;;;746       st.chip_cfg.accel_half = 0;
;;;747    
;;;748    #ifdef MPU6500
;;;749        /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
;;;750         * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
;;;751         */
;;;752        data[0] = BIT_FIFO_SIZE_1024 | 0x8;
;;;753        if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
;;;754            return -1;
;;;755    #endif
;;;756    
;;;757        /* Set to invalid values to ensure no I2C writes are skipped. */
;;;758        st.chip_cfg.sensors = 0xFF;
;;;759        st.chip_cfg.gyro_fsr = 0xFF;
;;;760        st.chip_cfg.accel_fsr = 0xFF;
;;;761        st.chip_cfg.lpf = 0xFF;
;;;762        st.chip_cfg.sample_rate = 0xFFFF;
;;;763        st.chip_cfg.fifo_enable = 0xFF;
;;;764        st.chip_cfg.bypass_mode = 0xFF;
;;;765    #ifdef AK89xx_SECONDARY
;;;766        st.chip_cfg.compass_sample_rate = 0xFFFF;
;;;767    #endif
;;;768        /* mpu_set_sensors always preserves this setting. */
;;;769        st.chip_cfg.clk_src = INV_CLK_PLL;
;;;770        /* Handled in next call to mpu_set_bypass. */
;;;771        st.chip_cfg.active_low_int = 1;
;;;772        st.chip_cfg.latched_int = 0;
;;;773        st.chip_cfg.int_motion_only = 0;
;;;774        st.chip_cfg.lp_accel_mode = 0;
;;;775        memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
;;;776        st.chip_cfg.dmp_on = 0;
;;;777        st.chip_cfg.dmp_loaded = 0;
;;;778        st.chip_cfg.dmp_sample_rate = 0;
;;;779    
;;;780        if (mpu_set_gyro_fsr(2000))
;;;781            return -1;
;;;782        if (mpu_set_accel_fsr(2))
;;;783            return -1;
;;;784        if (mpu_set_lpf(42))
;;;785            return -1;
;;;786        if (mpu_set_sample_rate(50))
;;;787            return -1;
;;;788        if (mpu_configure_fifo(0))
;;;789            return -1;
;;;790    
;;;791    #ifndef EMPL_TARGET_STM32F4    
;;;792        if (int_param)
;;;793            reg_int_cb(int_param);
;;;794    #endif
;;;795    
;;;796    #ifdef AK89xx_SECONDARY
;;;797        setup_compass();
;;;798        if (mpu_set_compass_sample_rate(10))
;;;799            return -1;
;;;800    #else
;;;801        /* Already disabled by setup_compass. */
;;;802        if (mpu_set_bypass(0))
;;;803            return -1;
;;;804    #endif
;;;805    
;;;806        mpu_set_sensors(0);
;;;807        return 0;
;;;808    }
000024  bd1c              POP      {r2-r4,pc}
                  |L27.38|
000026  2064              MOVS     r0,#0x64              ;739
000028  f7fffffe          BL       delay_ms
00002c  2000              MOVS     r0,#0                 ;742
00002e  f88d0000          STRB     r0,[sp,#0]            ;742
000032  4a3d              LDR      r2,|L27.296|
000034  6812              LDR      r2,[r2,#0]            ;743  ; st
000036  7d51              LDRB     r1,[r2,#0x15]         ;743
000038  4a3b              LDR      r2,|L27.296|
00003a  6852              LDR      r2,[r2,#4]            ;743  ; st
00003c  7810              LDRB     r0,[r2,#0]            ;743
00003e  466b              MOV      r3,sp                 ;743
000040  2201              MOVS     r2,#1                 ;743
000042  f7fffffe          BL       MPU_Write_Len
000046  b110              CBZ      r0,|L27.78|
000048  f04f30ff          MOV      r0,#0xffffffff        ;744
00004c  e7ea              B        |L27.36|
                  |L27.78|
00004e  2100              MOVS     r1,#0                 ;746
000050  4835              LDR      r0,|L27.296|
000052  74c1              STRB     r1,[r0,#0x13]         ;746
000054  2048              MOVS     r0,#0x48              ;752
000056  f88d0000          STRB     r0,[sp,#0]            ;752
00005a  4a33              LDR      r2,|L27.296|
00005c  6812              LDR      r2,[r2,#0]            ;753  ; st
00005e  7a11              LDRB     r1,[r2,#8]            ;753
000060  4a31              LDR      r2,|L27.296|
000062  6852              LDR      r2,[r2,#4]            ;753  ; st
000064  7810              LDRB     r0,[r2,#0]            ;753
000066  466b              MOV      r3,sp                 ;753
000068  2201              MOVS     r2,#1                 ;753
00006a  f7fffffe          BL       MPU_Write_Len
00006e  b110              CBZ      r0,|L27.118|
000070  f04f30ff          MOV      r0,#0xffffffff        ;754
000074  e7d6              B        |L27.36|
                  |L27.118|
000076  21ff              MOVS     r1,#0xff              ;758
000078  482b              LDR      r0,|L27.296|
00007a  7281              STRB     r1,[r0,#0xa]          ;758
00007c  20ff              MOVS     r0,#0xff              ;759
00007e  492a              LDR      r1,|L27.296|
000080  7208              STRB     r0,[r1,#8]            ;759
000082  21ff              MOVS     r1,#0xff              ;760
000084  4828              LDR      r0,|L27.296|
000086  7241              STRB     r1,[r0,#9]            ;760
000088  72c1              STRB     r1,[r0,#0xb]          ;761
00008a  f64f71ff          MOV      r1,#0xffff            ;762
00008e  81c1              STRH     r1,[r0,#0xe]          ;762
000090  21ff              MOVS     r1,#0xff              ;763
000092  7401              STRB     r1,[r0,#0x10]         ;763
000094  7481              STRB     r1,[r0,#0x12]         ;764
000096  f64f71ff          MOV      r1,#0xffff            ;766
00009a  8501              STRH     r1,[r0,#0x28]         ;766
00009c  2101              MOVS     r1,#1                 ;769
00009e  7301              STRB     r1,[r0,#0xc]          ;769
0000a0  f8801022          STRB     r1,[r0,#0x22]         ;771
0000a4  2100              MOVS     r1,#0                 ;772
0000a6  f8801023          STRB     r1,[r0,#0x23]         ;772
0000aa  7541              STRB     r1,[r0,#0x15]         ;773
0000ac  7501              STRB     r1,[r0,#0x14]         ;774
0000ae  3016              ADDS     r0,r0,#0x16           ;775
0000b0  6001              STR      r1,[r0,#0]            ;775
0000b2  6041              STR      r1,[r0,#4]            ;775
0000b4  6081              STR      r1,[r0,#8]            ;775
0000b6  3816              SUBS     r0,r0,#0x16           ;776
0000b8  f8801024          STRB     r1,[r0,#0x24]         ;776
0000bc  f8801025          STRB     r1,[r0,#0x25]         ;777
0000c0  84c1              STRH     r1,[r0,#0x26]         ;778
0000c2  f44f60fa          MOV      r0,#0x7d0             ;780
0000c6  f7fffffe          BL       mpu_set_gyro_fsr
0000ca  b110              CBZ      r0,|L27.210|
0000cc  f04f30ff          MOV      r0,#0xffffffff        ;781
0000d0  e7a8              B        |L27.36|
                  |L27.210|
0000d2  2002              MOVS     r0,#2                 ;782
0000d4  f7fffffe          BL       mpu_set_accel_fsr
0000d8  b110              CBZ      r0,|L27.224|
0000da  f04f30ff          MOV      r0,#0xffffffff        ;783
0000de  e7a1              B        |L27.36|
                  |L27.224|
0000e0  202a              MOVS     r0,#0x2a              ;784
0000e2  f7fffffe          BL       mpu_set_lpf
0000e6  b110              CBZ      r0,|L27.238|
0000e8  f04f30ff          MOV      r0,#0xffffffff        ;785
0000ec  e79a              B        |L27.36|
                  |L27.238|
0000ee  2032              MOVS     r0,#0x32              ;786
0000f0  f7fffffe          BL       mpu_set_sample_rate
0000f4  b110              CBZ      r0,|L27.252|
0000f6  f04f30ff          MOV      r0,#0xffffffff        ;787
0000fa  e793              B        |L27.36|
                  |L27.252|
0000fc  2000              MOVS     r0,#0                 ;788
0000fe  f7fffffe          BL       mpu_configure_fifo
000102  b110              CBZ      r0,|L27.266|
000104  f04f30ff          MOV      r0,#0xffffffff        ;789
000108  e78c              B        |L27.36|
                  |L27.266|
00010a  f7fffffe          BL       setup_compass
00010e  200a              MOVS     r0,#0xa               ;798
000110  f7fffffe          BL       mpu_set_compass_sample_rate
000114  b110              CBZ      r0,|L27.284|
000116  f04f30ff          MOV      r0,#0xffffffff        ;799
00011a  e783              B        |L27.36|
                  |L27.284|
00011c  2000              MOVS     r0,#0                 ;806
00011e  f7fffffe          BL       mpu_set_sensors
000122  2000              MOVS     r0,#0                 ;807
000124  e77e              B        |L27.36|
;;;809    
                          ENDP

000126  0000              DCW      0x0000
                  |L27.296|
                          DCD      ||st||

                          AREA ||i.mpu_load_firmware||, CODE, READONLY, ALIGN=2

                  mpu_load_firmware PROC
;;;2861    */
;;;2862   int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;2863       unsigned short start_addr, unsigned short sample_rate)
;;;2864   {
000004  b085              SUB      sp,sp,#0x14
000006  4605              MOV      r5,r0
000008  460e              MOV      r6,r1
00000a  4690              MOV      r8,r2
00000c  4699              MOV      r9,r3
;;;2865       unsigned short ii;
;;;2866       unsigned short this_write;
;;;2867       /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
;;;2868   #define LOAD_CHUNK  (16)
;;;2869       unsigned char cur[LOAD_CHUNK], tmp[2];
;;;2870   
;;;2871       if (st.chip_cfg.dmp_loaded)
00000e  4829              LDR      r0,|L28.180|
000010  f8900025          LDRB     r0,[r0,#0x25]
000014  b120              CBZ      r0,|L28.32|
;;;2872           /* DMP should only be loaded once. */
;;;2873           return -1;
000016  f04f30ff          MOV      r0,#0xffffffff
                  |L28.26|
;;;2874   
;;;2875       if (!firmware)
;;;2876           return -1;
;;;2877       for (ii = 0; ii < length; ii += this_write) {
;;;2878           this_write = min(LOAD_CHUNK, length - ii);
;;;2879           if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
;;;2880               return -1;
;;;2881           if (mpu_read_mem(ii, this_write, cur))
;;;2882               return -1;
;;;2883           if (memcmp(firmware+ii, cur, this_write))
;;;2884               return -2;
;;;2885       }
;;;2886   
;;;2887       /* Set program start address. */
;;;2888       tmp[0] = start_addr >> 8;
;;;2889       tmp[1] = start_addr & 0xFF;
;;;2890       if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
;;;2891           return -1;
;;;2892   
;;;2893       st.chip_cfg.dmp_loaded = 1;
;;;2894       st.chip_cfg.dmp_sample_rate = sample_rate;
;;;2895       return 0;
;;;2896   }
00001a  b005              ADD      sp,sp,#0x14
00001c  e8bd83f0          POP      {r4-r9,pc}
                  |L28.32|
000020  b916              CBNZ     r6,|L28.40|
000022  f04f30ff          MOV      r0,#0xffffffff        ;2876
000026  e7f8              B        |L28.26|
                  |L28.40|
000028  2400              MOVS     r4,#0                 ;2877
00002a  e023              B        |L28.116|
                  |L28.44|
00002c  1b28              SUBS     r0,r5,r4              ;2878
00002e  2810              CMP      r0,#0x10              ;2878
000030  dd01              BLE      |L28.54|
000032  2010              MOVS     r0,#0x10              ;2878
000034  e000              B        |L28.56|
                  |L28.54|
000036  1b28              SUBS     r0,r5,r4              ;2878
                  |L28.56|
000038  b287              UXTH     r7,r0                 ;2878
00003a  1932              ADDS     r2,r6,r4              ;2879
00003c  4639              MOV      r1,r7                 ;2879
00003e  4620              MOV      r0,r4                 ;2879
000040  f7fffffe          BL       mpu_write_mem
000044  b110              CBZ      r0,|L28.76|
000046  f04f30ff          MOV      r0,#0xffffffff        ;2880
00004a  e7e6              B        |L28.26|
                  |L28.76|
00004c  aa01              ADD      r2,sp,#4              ;2881
00004e  4639              MOV      r1,r7                 ;2881
000050  4620              MOV      r0,r4                 ;2881
000052  f7fffffe          BL       mpu_read_mem
000056  b110              CBZ      r0,|L28.94|
000058  f04f30ff          MOV      r0,#0xffffffff        ;2882
00005c  e7dd              B        |L28.26|
                  |L28.94|
00005e  1930              ADDS     r0,r6,r4              ;2883
000060  463a              MOV      r2,r7                 ;2883
000062  a901              ADD      r1,sp,#4              ;2883
000064  f7fffffe          BL       memcmp
000068  b110              CBZ      r0,|L28.112|
00006a  f06f0001          MVN      r0,#1                 ;2884
00006e  e7d4              B        |L28.26|
                  |L28.112|
000070  19e0              ADDS     r0,r4,r7              ;2877
000072  b284              UXTH     r4,r0                 ;2877
                  |L28.116|
000074  42ac              CMP      r4,r5                 ;2877
000076  dbd9              BLT      |L28.44|
000078  ea4f2028          ASR      r0,r8,#8              ;2888
00007c  f88d0000          STRB     r0,[sp,#0]            ;2888
000080  f00800ff          AND      r0,r8,#0xff           ;2889
000084  f88d0001          STRB     r0,[sp,#1]            ;2889
000088  4a0a              LDR      r2,|L28.180|
00008a  6812              LDR      r2,[r2,#0]            ;2890  ; st
00008c  7f51              LDRB     r1,[r2,#0x1d]         ;2890
00008e  4a09              LDR      r2,|L28.180|
000090  6852              LDR      r2,[r2,#4]            ;2890  ; st
000092  7810              LDRB     r0,[r2,#0]            ;2890
000094  466b              MOV      r3,sp                 ;2890
000096  2202              MOVS     r2,#2                 ;2890
000098  f7fffffe          BL       MPU_Write_Len
00009c  b110              CBZ      r0,|L28.164|
00009e  f04f30ff          MOV      r0,#0xffffffff        ;2891
0000a2  e7ba              B        |L28.26|
                  |L28.164|
0000a4  2101              MOVS     r1,#1                 ;2893
0000a6  4803              LDR      r0,|L28.180|
0000a8  f8801025          STRB     r1,[r0,#0x25]         ;2893
0000ac  f8a09026          STRH     r9,[r0,#0x26]         ;2894
0000b0  2000              MOVS     r0,#0                 ;2895
0000b2  e7b2              B        |L28.26|
;;;2897   
                          ENDP

                  |L28.180|
                          DCD      ||st||

                          AREA ||i.mpu_lp_accel_mode||, CODE, READONLY, ALIGN=2

                  mpu_lp_accel_mode PROC
;;;824     */
;;;825    int mpu_lp_accel_mode(unsigned short rate)
000000  b538              PUSH     {r3-r5,lr}
;;;826    {
000002  4604              MOV      r4,r0
;;;827        unsigned char tmp[2];
;;;828    
;;;829        if (rate > 40)
000004  2c28              CMP      r4,#0x28
000006  dd02              BLE      |L29.14|
;;;830            return -1;
000008  f04f30ff          MOV      r0,#0xffffffff
                  |L29.12|
;;;831    
;;;832        if (!rate) {
;;;833            mpu_set_int_latched(0);
;;;834            tmp[0] = 0;
;;;835            tmp[1] = BIT_STBY_XYZG;
;;;836            if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
;;;837                return -1;
;;;838            st.chip_cfg.lp_accel_mode = 0;
;;;839            return 0;
;;;840        }
;;;841        /* For LP accel, we automatically configure the hardware to produce latched
;;;842         * interrupts. In LP accel mode, the hardware cycles into sleep mode before
;;;843         * it gets a chance to deassert the interrupt pin; therefore, we shift this
;;;844         * responsibility over to the MCU.
;;;845         *
;;;846         * Any register read will clear the interrupt.
;;;847         */
;;;848        mpu_set_int_latched(1);
;;;849    #if defined MPU6050
;;;850        tmp[0] = BIT_LPA_CYCLE;
;;;851        if (rate == 1) {
;;;852            tmp[1] = INV_LPA_1_25HZ;
;;;853            mpu_set_lpf(5);
;;;854        } else if (rate <= 5) {
;;;855            tmp[1] = INV_LPA_5HZ;
;;;856            mpu_set_lpf(5);
;;;857        } else if (rate <= 20) {
;;;858            tmp[1] = INV_LPA_20HZ;
;;;859            mpu_set_lpf(10);
;;;860        } else {
;;;861            tmp[1] = INV_LPA_40HZ;
;;;862            mpu_set_lpf(20);
;;;863        }
;;;864        tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
;;;865        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
;;;866            return -1;
;;;867    #elif defined MPU6500
;;;868        /* Set wake frequency. */
;;;869        if (rate == 1)
;;;870            tmp[0] = INV_LPA_1_25HZ;
;;;871        else if (rate == 2)
;;;872            tmp[0] = INV_LPA_2_5HZ;
;;;873        else if (rate <= 5)
;;;874            tmp[0] = INV_LPA_5HZ;
;;;875        else if (rate <= 10)
;;;876            tmp[0] = INV_LPA_10HZ;
;;;877        else if (rate <= 20)
;;;878            tmp[0] = INV_LPA_20HZ;
;;;879        else if (rate <= 40)
;;;880            tmp[0] = INV_LPA_40HZ;
;;;881        else if (rate <= 80)
;;;882            tmp[0] = INV_LPA_80HZ;
;;;883        else if (rate <= 160)
;;;884            tmp[0] = INV_LPA_160HZ;
;;;885        else if (rate <= 320)
;;;886            tmp[0] = INV_LPA_320HZ;
;;;887        else
;;;888            tmp[0] = INV_LPA_640HZ;
;;;889        if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
;;;890            return -1;
;;;891        tmp[0] = BIT_LPA_CYCLE;
;;;892        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
;;;893            return -1;
;;;894    #endif
;;;895        st.chip_cfg.sensors = INV_XYZ_ACCEL;
;;;896        st.chip_cfg.clk_src = 0;
;;;897        st.chip_cfg.lp_accel_mode = 1;
;;;898        mpu_configure_fifo(0);
;;;899    
;;;900        return 0;
;;;901    }
00000c  bd38              POP      {r3-r5,pc}
                  |L29.14|
00000e  b9dc              CBNZ     r4,|L29.72|
000010  2000              MOVS     r0,#0                 ;833
000012  f7fffffe          BL       mpu_set_int_latched
000016  2000              MOVS     r0,#0                 ;834
000018  f88d0000          STRB     r0,[sp,#0]            ;834
00001c  2007              MOVS     r0,#7                 ;835
00001e  f88d0001          STRB     r0,[sp,#1]            ;835
000022  4a3d              LDR      r2,|L29.280|
000024  6812              LDR      r2,[r2,#0]            ;836  ; st
000026  7d51              LDRB     r1,[r2,#0x15]         ;836
000028  4a3b              LDR      r2,|L29.280|
00002a  6852              LDR      r2,[r2,#4]            ;836  ; st
00002c  7810              LDRB     r0,[r2,#0]            ;836
00002e  466b              MOV      r3,sp                 ;836
000030  2202              MOVS     r2,#2                 ;836
000032  f7fffffe          BL       MPU_Write_Len
000036  b110              CBZ      r0,|L29.62|
000038  f04f30ff          MOV      r0,#0xffffffff        ;837
00003c  e7e6              B        |L29.12|
                  |L29.62|
00003e  2100              MOVS     r1,#0                 ;838
000040  4835              LDR      r0,|L29.280|
000042  7501              STRB     r1,[r0,#0x14]         ;838
000044  2000              MOVS     r0,#0                 ;839
000046  e7e1              B        |L29.12|
                  |L29.72|
000048  2001              MOVS     r0,#1                 ;848
00004a  f7fffffe          BL       mpu_set_int_latched
00004e  2c01              CMP      r4,#1                 ;869
000050  d103              BNE      |L29.90|
000052  2002              MOVS     r0,#2                 ;870
000054  f88d0000          STRB     r0,[sp,#0]            ;870
000058  e033              B        |L29.194|
                  |L29.90|
00005a  2c02              CMP      r4,#2                 ;871
00005c  d103              BNE      |L29.102|
00005e  2003              MOVS     r0,#3                 ;872
000060  f88d0000          STRB     r0,[sp,#0]            ;872
000064  e02d              B        |L29.194|
                  |L29.102|
000066  2c05              CMP      r4,#5                 ;873
000068  dc03              BGT      |L29.114|
00006a  2004              MOVS     r0,#4                 ;874
00006c  f88d0000          STRB     r0,[sp,#0]            ;874
000070  e027              B        |L29.194|
                  |L29.114|
000072  2c0a              CMP      r4,#0xa               ;875
000074  dc03              BGT      |L29.126|
000076  2005              MOVS     r0,#5                 ;876
000078  f88d0000          STRB     r0,[sp,#0]            ;876
00007c  e021              B        |L29.194|
                  |L29.126|
00007e  2c14              CMP      r4,#0x14              ;877
000080  dc03              BGT      |L29.138|
000082  2006              MOVS     r0,#6                 ;878
000084  f88d0000          STRB     r0,[sp,#0]            ;878
000088  e01b              B        |L29.194|
                  |L29.138|
00008a  2c28              CMP      r4,#0x28              ;879
00008c  dc03              BGT      |L29.150|
00008e  2007              MOVS     r0,#7                 ;880
000090  f88d0000          STRB     r0,[sp,#0]            ;880
000094  e015              B        |L29.194|
                  |L29.150|
000096  2c50              CMP      r4,#0x50              ;881
000098  dc03              BGT      |L29.162|
00009a  2008              MOVS     r0,#8                 ;882
00009c  f88d0000          STRB     r0,[sp,#0]            ;882
0000a0  e00f              B        |L29.194|
                  |L29.162|
0000a2  2ca0              CMP      r4,#0xa0              ;883
0000a4  dc03              BGT      |L29.174|
0000a6  2009              MOVS     r0,#9                 ;884
0000a8  f88d0000          STRB     r0,[sp,#0]            ;884
0000ac  e009              B        |L29.194|
                  |L29.174|
0000ae  f5b47fa0          CMP      r4,#0x140             ;885
0000b2  dc03              BGT      |L29.188|
0000b4  200a              MOVS     r0,#0xa               ;886
0000b6  f88d0000          STRB     r0,[sp,#0]            ;886
0000ba  e002              B        |L29.194|
                  |L29.188|
0000bc  200b              MOVS     r0,#0xb               ;888
0000be  f88d0000          STRB     r0,[sp,#0]            ;888
                  |L29.194|
0000c2  4a15              LDR      r2,|L29.280|
0000c4  6812              LDR      r2,[r2,#0]            ;889  ; st
0000c6  7a51              LDRB     r1,[r2,#9]            ;889
0000c8  4a13              LDR      r2,|L29.280|
0000ca  6852              LDR      r2,[r2,#4]            ;889  ; st
0000cc  7810              LDRB     r0,[r2,#0]            ;889
0000ce  466b              MOV      r3,sp                 ;889
0000d0  2201              MOVS     r2,#1                 ;889
0000d2  f7fffffe          BL       MPU_Write_Len
0000d6  b110              CBZ      r0,|L29.222|
0000d8  f04f30ff          MOV      r0,#0xffffffff        ;890
0000dc  e796              B        |L29.12|
                  |L29.222|
0000de  2020              MOVS     r0,#0x20              ;891
0000e0  f88d0000          STRB     r0,[sp,#0]            ;891
0000e4  4a0c              LDR      r2,|L29.280|
0000e6  6812              LDR      r2,[r2,#0]            ;892  ; st
0000e8  7d51              LDRB     r1,[r2,#0x15]         ;892
0000ea  4a0b              LDR      r2,|L29.280|
0000ec  6852              LDR      r2,[r2,#4]            ;892  ; st
0000ee  7810              LDRB     r0,[r2,#0]            ;892
0000f0  466b              MOV      r3,sp                 ;892
0000f2  2201              MOVS     r2,#1                 ;892
0000f4  f7fffffe          BL       MPU_Write_Len
0000f8  b110              CBZ      r0,|L29.256|
0000fa  f04f30ff          MOV      r0,#0xffffffff        ;893
0000fe  e785              B        |L29.12|
                  |L29.256|
000100  2108              MOVS     r1,#8                 ;895
000102  4805              LDR      r0,|L29.280|
000104  7281              STRB     r1,[r0,#0xa]          ;895
000106  2100              MOVS     r1,#0                 ;896
000108  7301              STRB     r1,[r0,#0xc]          ;896
00010a  2101              MOVS     r1,#1                 ;897
00010c  7501              STRB     r1,[r0,#0x14]         ;897
00010e  2000              MOVS     r0,#0                 ;898
000110  f7fffffe          BL       mpu_configure_fifo
000114  2000              MOVS     r0,#0                 ;900
000116  e779              B        |L29.12|
;;;902    
                          ENDP

                  |L29.280|
                          DCD      ||st||

                          AREA ||i.mpu_lp_motion_interrupt||, CODE, READONLY, ALIGN=2

                  mpu_lp_motion_interrupt PROC
;;;3158    */
;;;3159   int mpu_lp_motion_interrupt(unsigned short thresh, unsigned char time,
000000  b5f8              PUSH     {r3-r7,lr}
;;;3160       unsigned short lpa_freq)
;;;3161   {
000002  4605              MOV      r5,r0
000004  460f              MOV      r7,r1
000006  4614              MOV      r4,r2
;;;3162   
;;;3163   #if defined MPU6500
;;;3164       unsigned char data[3];
;;;3165   #endif
;;;3166       if (lpa_freq) {
000008  2c00              CMP      r4,#0
00000a  d072              BEQ      |L30.242|
;;;3167   #if defined MPU6500
;;;3168       	unsigned char thresh_hw;
;;;3169   
;;;3170           /* 1LSb = 4mg. */
;;;3171           if (thresh > 1020)
00000c  f5b57f7f          CMP      r5,#0x3fc
000010  dd01              BLE      |L30.22|
;;;3172               thresh_hw = 255;
000012  26ff              MOVS     r6,#0xff
000014  e005              B        |L30.34|
                  |L30.22|
;;;3173           else if (thresh < 4)
000016  2d04              CMP      r5,#4
000018  da01              BGE      |L30.30|
;;;3174               thresh_hw = 1;
00001a  2601              MOVS     r6,#1
00001c  e001              B        |L30.34|
                  |L30.30|
;;;3175           else
;;;3176               thresh_hw = thresh >> 2;
00001e  f3c50687          UBFX     r6,r5,#2,#8
                  |L30.34|
;;;3177   #endif
;;;3178   
;;;3179           if (!time)
000022  b907              CBNZ     r7,|L30.38|
;;;3180               /* Minimum duration must be 1ms. */
;;;3181               time = 1;
000024  2701              MOVS     r7,#1
                  |L30.38|
;;;3182   
;;;3183   #if defined MPU6500
;;;3184           if (lpa_freq > 640)
000026  f5b47f20          CMP      r4,#0x280
00002a  dd02              BLE      |L30.50|
;;;3185               /* At this point, the chip has not been re-configured, so the
;;;3186                * function can safely exit.
;;;3187                */
;;;3188               return -1;
00002c  f04f30ff          MOV      r0,#0xffffffff
                  |L30.48|
;;;3189   #endif
;;;3190   
;;;3191           if (!st.chip_cfg.int_motion_only) {
;;;3192               /* Store current settings for later. */
;;;3193               if (st.chip_cfg.dmp_on) {
;;;3194                   mpu_set_dmp_state(0);
;;;3195                   st.chip_cfg.cache.dmp_on = 1;
;;;3196               } else
;;;3197                   st.chip_cfg.cache.dmp_on = 0;
;;;3198               mpu_get_gyro_fsr(&st.chip_cfg.cache.gyro_fsr);
;;;3199               mpu_get_accel_fsr(&st.chip_cfg.cache.accel_fsr);
;;;3200               mpu_get_lpf(&st.chip_cfg.cache.lpf);
;;;3201               mpu_get_sample_rate(&st.chip_cfg.cache.sample_rate);
;;;3202               st.chip_cfg.cache.sensors_on = st.chip_cfg.sensors;
;;;3203               mpu_get_fifo_config(&st.chip_cfg.cache.fifo_sensors);
;;;3204           }
;;;3205   
;;;3206   #if defined MPU6500
;;;3207           /* Disable hardware interrupts. */
;;;3208           set_int_enable(0);
;;;3209   
;;;3210           /* Enter full-power accel-only mode, no FIFO/DMP. */
;;;3211           data[0] = 0;
;;;3212           data[1] = 0;
;;;3213           data[2] = BIT_STBY_XYZG;
;;;3214           if (i2c_write(st.hw->addr, st.reg->user_ctrl, 3, data))
;;;3215               goto lp_int_restore;
;;;3216   
;;;3217           /* Set motion threshold. */
;;;3218           data[0] = thresh_hw;
;;;3219           if (i2c_write(st.hw->addr, st.reg->motion_thr, 1, data))
;;;3220               goto lp_int_restore;
;;;3221   
;;;3222           /* Set wake frequency. */
;;;3223           if (lpa_freq == 1)
;;;3224               data[0] = INV_LPA_1_25HZ;
;;;3225           else if (lpa_freq == 2)
;;;3226               data[0] = INV_LPA_2_5HZ;
;;;3227           else if (lpa_freq <= 5)
;;;3228               data[0] = INV_LPA_5HZ;
;;;3229           else if (lpa_freq <= 10)
;;;3230               data[0] = INV_LPA_10HZ;
;;;3231           else if (lpa_freq <= 20)
;;;3232               data[0] = INV_LPA_20HZ;
;;;3233           else if (lpa_freq <= 40)
;;;3234               data[0] = INV_LPA_40HZ;
;;;3235           else if (lpa_freq <= 80)
;;;3236               data[0] = INV_LPA_80HZ;
;;;3237           else if (lpa_freq <= 160)
;;;3238               data[0] = INV_LPA_160HZ;
;;;3239           else if (lpa_freq <= 320)
;;;3240               data[0] = INV_LPA_320HZ;
;;;3241           else
;;;3242               data[0] = INV_LPA_640HZ;
;;;3243           if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, data))
;;;3244               goto lp_int_restore;
;;;3245   
;;;3246           /* Enable motion interrupt (MPU6500 version). */
;;;3247           data[0] = BITS_WOM_EN;
;;;3248           if (i2c_write(st.hw->addr, st.reg->accel_intel, 1, data))
;;;3249               goto lp_int_restore;
;;;3250   
;;;3251           /* Enable cycle mode. */
;;;3252           data[0] = BIT_LPA_CYCLE;
;;;3253           if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
;;;3254               goto lp_int_restore;
;;;3255   
;;;3256           /* Enable interrupt. */
;;;3257           data[0] = BIT_MOT_INT_EN;
;;;3258           if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
;;;3259               goto lp_int_restore;
;;;3260   
;;;3261           st.chip_cfg.int_motion_only = 1;
;;;3262           return 0;
;;;3263   #endif
;;;3264       } else {
;;;3265           /* Don't "restore" the previous state if no state has been saved. */
;;;3266           unsigned int ii;
;;;3267           char *cache_ptr = (char*)&st.chip_cfg.cache;
;;;3268           for (ii = 0; ii < sizeof(st.chip_cfg.cache); ii++) {
;;;3269               if (cache_ptr[ii] != 0)
;;;3270                   goto lp_int_restore;
;;;3271           }
;;;3272           /* If we reach this point, motion interrupt mode hasn't been used yet. */
;;;3273           return -1;
;;;3274       }
;;;3275   lp_int_restore:
;;;3276       /* Set to invalid values to ensure no I2C writes are skipped. */
;;;3277       st.chip_cfg.gyro_fsr = 0xFF;
;;;3278       st.chip_cfg.accel_fsr = 0xFF;
;;;3279       st.chip_cfg.lpf = 0xFF;
;;;3280       st.chip_cfg.sample_rate = 0xFFFF;
;;;3281       st.chip_cfg.sensors = 0xFF;
;;;3282       st.chip_cfg.fifo_enable = 0xFF;
;;;3283       st.chip_cfg.clk_src = INV_CLK_PLL;
;;;3284       mpu_set_sensors(st.chip_cfg.cache.sensors_on);
;;;3285       mpu_set_gyro_fsr(st.chip_cfg.cache.gyro_fsr);
;;;3286       mpu_set_accel_fsr(st.chip_cfg.cache.accel_fsr);
;;;3287       mpu_set_lpf(st.chip_cfg.cache.lpf);
;;;3288       mpu_set_sample_rate(st.chip_cfg.cache.sample_rate);
;;;3289       mpu_configure_fifo(st.chip_cfg.cache.fifo_sensors);
;;;3290   
;;;3291       if (st.chip_cfg.cache.dmp_on)
;;;3292           mpu_set_dmp_state(1);
;;;3293   
;;;3294   #ifdef MPU6500
;;;3295       /* Disable motion interrupt (MPU6500 version). */
;;;3296       data[0] = 0;
;;;3297       if (i2c_write(st.hw->addr, st.reg->accel_intel, 1, data))
;;;3298           goto lp_int_restore;
;;;3299   #endif
;;;3300   
;;;3301       st.chip_cfg.int_motion_only = 0;
;;;3302       return 0;
;;;3303   }
000030  bdf8              POP      {r3-r7,pc}
                  |L30.50|
000032  488b              LDR      r0,|L30.608|
000034  7d40              LDRB     r0,[r0,#0x15]         ;3191
000036  bb28              CBNZ     r0,|L30.132|
000038  4889              LDR      r0,|L30.608|
00003a  f8900024          LDRB     r0,[r0,#0x24]         ;3193
00003e  b138              CBZ      r0,|L30.80|
000040  2000              MOVS     r0,#0                 ;3194
000042  f7fffffe          BL       mpu_set_dmp_state
000046  2101              MOVS     r1,#1                 ;3195
000048  4885              LDR      r0,|L30.608|
00004a  f8801020          STRB     r1,[r0,#0x20]         ;3195
00004e  e003              B        |L30.88|
                  |L30.80|
000050  2100              MOVS     r1,#0                 ;3197
000052  4883              LDR      r0,|L30.608|
000054  f8801020          STRB     r1,[r0,#0x20]         ;3197
                  |L30.88|
000058  4881              LDR      r0,|L30.608|
00005a  3016              ADDS     r0,r0,#0x16           ;3198
00005c  f7fffffe          BL       mpu_get_gyro_fsr
000060  487f              LDR      r0,|L30.608|
000062  3018              ADDS     r0,r0,#0x18           ;3199
000064  f7fffffe          BL       mpu_get_accel_fsr
000068  487d              LDR      r0,|L30.608|
00006a  301a              ADDS     r0,r0,#0x1a           ;3200
00006c  f7fffffe          BL       mpu_get_lpf
000070  487b              LDR      r0,|L30.608|
000072  301c              ADDS     r0,r0,#0x1c           ;3201
000074  f7fffffe          BL       mpu_get_sample_rate
000078  4879              LDR      r0,|L30.608|
00007a  7a81              LDRB     r1,[r0,#0xa]          ;3202
00007c  7781              STRB     r1,[r0,#0x1e]         ;3202
00007e  301f              ADDS     r0,r0,#0x1f           ;3203
000080  f7fffffe          BL       mpu_get_fifo_config
                  |L30.132|
000084  2000              MOVS     r0,#0                 ;3208
000086  f7fffffe          BL       set_int_enable
00008a  2000              MOVS     r0,#0                 ;3211
00008c  f88d0000          STRB     r0,[sp,#0]            ;3211
000090  f88d0001          STRB     r0,[sp,#1]            ;3212
000094  2007              MOVS     r0,#7                 ;3213
000096  f88d0002          STRB     r0,[sp,#2]            ;3213
00009a  4a71              LDR      r2,|L30.608|
00009c  6812              LDR      r2,[r2,#0]            ;3214  ; st
00009e  7911              LDRB     r1,[r2,#4]            ;3214
0000a0  4a6f              LDR      r2,|L30.608|
0000a2  6852              LDR      r2,[r2,#4]            ;3214  ; st
0000a4  7810              LDRB     r0,[r2,#0]            ;3214
0000a6  466b              MOV      r3,sp                 ;3214
0000a8  2203              MOVS     r2,#3                 ;3214
0000aa  f7fffffe          BL       MPU_Write_Len
0000ae  b100              CBZ      r0,|L30.178|
0000b0  e093              B        |L30.474|
                  |L30.178|
0000b2  f88d6000          STRB     r6,[sp,#0]            ;3218
0000b6  4a6a              LDR      r2,|L30.608|
0000b8  6812              LDR      r2,[r2,#0]            ;3219  ; st
0000ba  7a91              LDRB     r1,[r2,#0xa]          ;3219
0000bc  4a68              LDR      r2,|L30.608|
0000be  6852              LDR      r2,[r2,#4]            ;3219  ; st
0000c0  7810              LDRB     r0,[r2,#0]            ;3219
0000c2  466b              MOV      r3,sp                 ;3219
0000c4  2201              MOVS     r2,#1                 ;3219
0000c6  f7fffffe          BL       MPU_Write_Len
0000ca  b100              CBZ      r0,|L30.206|
0000cc  e085              B        |L30.474|
                  |L30.206|
0000ce  2c01              CMP      r4,#1                 ;3223
0000d0  d103              BNE      |L30.218|
0000d2  2002              MOVS     r0,#2                 ;3224
0000d4  f88d0000          STRB     r0,[sp,#0]            ;3224
0000d8  e034              B        |L30.324|
                  |L30.218|
0000da  2c02              CMP      r4,#2                 ;3225
0000dc  d103              BNE      |L30.230|
0000de  2003              MOVS     r0,#3                 ;3226
0000e0  f88d0000          STRB     r0,[sp,#0]            ;3226
0000e4  e02e              B        |L30.324|
                  |L30.230|
0000e6  2c05              CMP      r4,#5                 ;3227
0000e8  dc04              BGT      |L30.244|
0000ea  2004              MOVS     r0,#4                 ;3228
0000ec  f88d0000          STRB     r0,[sp,#0]            ;3228
0000f0  e028              B        |L30.324|
                  |L30.242|
0000f2  e065              B        |L30.448|
                  |L30.244|
0000f4  2c0a              CMP      r4,#0xa               ;3229
0000f6  dc03              BGT      |L30.256|
0000f8  2005              MOVS     r0,#5                 ;3230
0000fa  f88d0000          STRB     r0,[sp,#0]            ;3230
0000fe  e021              B        |L30.324|
                  |L30.256|
000100  2c14              CMP      r4,#0x14              ;3231
000102  dc03              BGT      |L30.268|
000104  2006              MOVS     r0,#6                 ;3232
000106  f88d0000          STRB     r0,[sp,#0]            ;3232
00010a  e01b              B        |L30.324|
                  |L30.268|
00010c  2c28              CMP      r4,#0x28              ;3233
00010e  dc03              BGT      |L30.280|
000110  2007              MOVS     r0,#7                 ;3234
000112  f88d0000          STRB     r0,[sp,#0]            ;3234
000116  e015              B        |L30.324|
                  |L30.280|
000118  2c50              CMP      r4,#0x50              ;3235
00011a  dc03              BGT      |L30.292|
00011c  2008              MOVS     r0,#8                 ;3236
00011e  f88d0000          STRB     r0,[sp,#0]            ;3236
000122  e00f              B        |L30.324|
                  |L30.292|
000124  2ca0              CMP      r4,#0xa0              ;3237
000126  dc03              BGT      |L30.304|
000128  2009              MOVS     r0,#9                 ;3238
00012a  f88d0000          STRB     r0,[sp,#0]            ;3238
00012e  e009              B        |L30.324|
                  |L30.304|
000130  f5b47fa0          CMP      r4,#0x140             ;3239
000134  dc03              BGT      |L30.318|
000136  200a              MOVS     r0,#0xa               ;3240
000138  f88d0000          STRB     r0,[sp,#0]            ;3240
00013c  e002              B        |L30.324|
                  |L30.318|
00013e  200b              MOVS     r0,#0xb               ;3242
000140  f88d0000          STRB     r0,[sp,#0]            ;3242
                  |L30.324|
000144  4a46              LDR      r2,|L30.608|
000146  6812              LDR      r2,[r2,#0]            ;3243  ; st
000148  7a51              LDRB     r1,[r2,#9]            ;3243
00014a  4a45              LDR      r2,|L30.608|
00014c  6852              LDR      r2,[r2,#4]            ;3243  ; st
00014e  7810              LDRB     r0,[r2,#0]            ;3243
000150  466b              MOV      r3,sp                 ;3243
000152  2201              MOVS     r2,#1                 ;3243
000154  f7fffffe          BL       MPU_Write_Len
000158  b100              CBZ      r0,|L30.348|
00015a  e03e              B        |L30.474|
                  |L30.348|
00015c  20c0              MOVS     r0,#0xc0              ;3247
00015e  f88d0000          STRB     r0,[sp,#0]            ;3247
000162  4a3f              LDR      r2,|L30.608|
000164  6812              LDR      r2,[r2,#0]            ;3248  ; st
000166  7d11              LDRB     r1,[r2,#0x14]         ;3248
000168  4a3d              LDR      r2,|L30.608|
00016a  6852              LDR      r2,[r2,#4]            ;3248  ; st
00016c  7810              LDRB     r0,[r2,#0]            ;3248
00016e  466b              MOV      r3,sp                 ;3248
000170  2201              MOVS     r2,#1                 ;3248
000172  f7fffffe          BL       MPU_Write_Len
000176  b100              CBZ      r0,|L30.378|
000178  e02f              B        |L30.474|
                  |L30.378|
00017a  2020              MOVS     r0,#0x20              ;3252
00017c  f88d0000          STRB     r0,[sp,#0]            ;3252
000180  4a37              LDR      r2,|L30.608|
000182  6812              LDR      r2,[r2,#0]            ;3253  ; st
000184  7d51              LDRB     r1,[r2,#0x15]         ;3253
000186  4a36              LDR      r2,|L30.608|
000188  6852              LDR      r2,[r2,#4]            ;3253  ; st
00018a  7810              LDRB     r0,[r2,#0]            ;3253
00018c  466b              MOV      r3,sp                 ;3253
00018e  2201              MOVS     r2,#1                 ;3253
000190  f7fffffe          BL       MPU_Write_Len
000194  b100              CBZ      r0,|L30.408|
000196  e020              B        |L30.474|
                  |L30.408|
000198  2040              MOVS     r0,#0x40              ;3257
00019a  f88d0000          STRB     r0,[sp,#0]            ;3257
00019e  4a30              LDR      r2,|L30.608|
0001a0  6812              LDR      r2,[r2,#0]            ;3258  ; st
0001a2  7c51              LDRB     r1,[r2,#0x11]         ;3258
0001a4  4a2e              LDR      r2,|L30.608|
0001a6  6852              LDR      r2,[r2,#4]            ;3258  ; st
0001a8  7810              LDRB     r0,[r2,#0]            ;3258
0001aa  466b              MOV      r3,sp                 ;3258
0001ac  2201              MOVS     r2,#1                 ;3258
0001ae  f7fffffe          BL       MPU_Write_Len
0001b2  b100              CBZ      r0,|L30.438|
0001b4  e011              B        |L30.474|
                  |L30.438|
0001b6  2101              MOVS     r1,#1                 ;3261
0001b8  4829              LDR      r0,|L30.608|
0001ba  7541              STRB     r1,[r0,#0x15]         ;3261
0001bc  2000              MOVS     r0,#0                 ;3262
0001be  e737              B        |L30.48|
                  |L30.448|
0001c0  4a27              LDR      r2,|L30.608|
0001c2  3216              ADDS     r2,r2,#0x16           ;3267
0001c4  2100              MOVS     r1,#0                 ;3268
0001c6  e003              B        |L30.464|
                  |L30.456|
0001c8  5c50              LDRB     r0,[r2,r1]            ;3269
0001ca  b100              CBZ      r0,|L30.462|
0001cc  e005              B        |L30.474|
                  |L30.462|
0001ce  1c49              ADDS     r1,r1,#1              ;3268
                  |L30.464|
0001d0  290c              CMP      r1,#0xc               ;3268
0001d2  d3f9              BCC      |L30.456|
0001d4  f04f30ff          MOV      r0,#0xffffffff        ;3273
0001d8  e72a              B        |L30.48|
                  |L30.474|
0001da  20ff              MOVS     r0,#0xff              ;3277
0001dc  4920              LDR      r1,|L30.608|
0001de  7208              STRB     r0,[r1,#8]            ;3277
0001e0  21ff              MOVS     r1,#0xff              ;3278
0001e2  481f              LDR      r0,|L30.608|
0001e4  7241              STRB     r1,[r0,#9]            ;3278
0001e6  72c1              STRB     r1,[r0,#0xb]          ;3279
0001e8  f64f71ff          MOV      r1,#0xffff            ;3280
0001ec  81c1              STRH     r1,[r0,#0xe]          ;3280
0001ee  21ff              MOVS     r1,#0xff              ;3281
0001f0  7281              STRB     r1,[r0,#0xa]          ;3281
0001f2  7401              STRB     r1,[r0,#0x10]         ;3282
0001f4  2101              MOVS     r1,#1                 ;3283
0001f6  7301              STRB     r1,[r0,#0xc]          ;3283
0001f8  4601              MOV      r1,r0                 ;3284
0001fa  7f88              LDRB     r0,[r1,#0x1e]         ;3284
0001fc  f7fffffe          BL       mpu_set_sensors
000200  4917              LDR      r1,|L30.608|
000202  8ac8              LDRH     r0,[r1,#0x16]         ;3285
000204  f7fffffe          BL       mpu_set_gyro_fsr
000208  4915              LDR      r1,|L30.608|
00020a  7e08              LDRB     r0,[r1,#0x18]         ;3286
00020c  f7fffffe          BL       mpu_set_accel_fsr
000210  4913              LDR      r1,|L30.608|
000212  8b48              LDRH     r0,[r1,#0x1a]         ;3287
000214  f7fffffe          BL       mpu_set_lpf
000218  4911              LDR      r1,|L30.608|
00021a  8b88              LDRH     r0,[r1,#0x1c]         ;3288
00021c  f7fffffe          BL       mpu_set_sample_rate
000220  490f              LDR      r1,|L30.608|
000222  7fc8              LDRB     r0,[r1,#0x1f]         ;3289
000224  f7fffffe          BL       mpu_configure_fifo
000228  480d              LDR      r0,|L30.608|
00022a  f8900020          LDRB     r0,[r0,#0x20]         ;3291
00022e  b110              CBZ      r0,|L30.566|
000230  2001              MOVS     r0,#1                 ;3292
000232  f7fffffe          BL       mpu_set_dmp_state
                  |L30.566|
000236  2000              MOVS     r0,#0                 ;3296
000238  f88d0000          STRB     r0,[sp,#0]            ;3296
00023c  4a08              LDR      r2,|L30.608|
00023e  6812              LDR      r2,[r2,#0]            ;3297  ; st
000240  7d11              LDRB     r1,[r2,#0x14]         ;3297
000242  4a07              LDR      r2,|L30.608|
000244  6852              LDR      r2,[r2,#4]            ;3297  ; st
000246  7810              LDRB     r0,[r2,#0]            ;3297
000248  466b              MOV      r3,sp                 ;3297
00024a  2201              MOVS     r2,#1                 ;3297
00024c  f7fffffe          BL       MPU_Write_Len
000250  b100              CBZ      r0,|L30.596|
000252  e7c2              B        |L30.474|
                  |L30.596|
000254  2100              MOVS     r1,#0                 ;3301
000256  4802              LDR      r0,|L30.608|
000258  7541              STRB     r1,[r0,#0x15]         ;3301
00025a  2000              MOVS     r0,#0                 ;3302
00025c  e6e8              B        |L30.48|
;;;3304   
                          ENDP

00025e  0000              DCW      0x0000
                  |L30.608|
                          DCD      ||st||

                          AREA ||i.mpu_mpl_get_data||, CODE, READONLY, ALIGN=2

                  mpu_mpl_get_data PROC
;;;3497   //    其他,失败
;;;3498   u8 mpu_mpl_get_data(float *pitch,float *roll,float *yaw)
000000  b570              PUSH     {r4-r6,lr}
;;;3499   {
000002  b0a2              SUB      sp,sp,#0x88
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;3500   	unsigned long sensor_timestamp,timestamp;
;;;3501   	short gyro[3], accel_short[3],compass_short[3],sensors;
;;;3502   	unsigned char more;
;;;3503   	long compass[3],accel[3],quat[4],temperature; 
;;;3504       long data[9];
;;;3505       int8_t accuracy;
;;;3506       
;;;3507   	if(dmp_read_fifo(gyro, accel_short, quat, &sensor_timestamp, &sensors,&more))return 1;	 
00000a  a818              ADD      r0,sp,#0x60
00000c  a919              ADD      r1,sp,#0x64
00000e  ab21              ADD      r3,sp,#0x84
000010  aa0e              ADD      r2,sp,#0x38
000012  e9cd1000          STRD     r1,r0,[sp,#0]
000016  a91c              ADD      r1,sp,#0x70
000018  a81e              ADD      r0,sp,#0x78
00001a  f7fffffe          BL       dmp_read_fifo
00001e  b110              CBZ      r0,|L31.38|
000020  2001              MOVS     r0,#1
                  |L31.34|
;;;3508   
;;;3509       if(sensors&INV_XYZ_GYRO)
;;;3510       {
;;;3511           inv_build_gyro(gyro,sensor_timestamp);          //把新数据发送给MPL
;;;3512           mpu_get_temperature(&temperature,&sensor_timestamp);
;;;3513           inv_build_temp(temperature,sensor_timestamp);   //把温度值发给MPL，只有陀螺仪需要温度值
;;;3514       }
;;;3515       
;;;3516       if(sensors&INV_XYZ_ACCEL)
;;;3517       {
;;;3518           accel[0] = (long)accel_short[0];
;;;3519           accel[1] = (long)accel_short[1];
;;;3520           accel[2] = (long)accel_short[2];
;;;3521           inv_build_accel(accel,0,sensor_timestamp);      //把加速度值发给MPL
;;;3522       }
;;;3523       
;;;3524       if (!mpu_get_compass_reg(compass_short, &sensor_timestamp)) 
;;;3525       {
;;;3526           compass[0]=(long)compass_short[0];
;;;3527           compass[1]=(long)compass_short[1];
;;;3528           compass[2]=(long)compass_short[2];
;;;3529           inv_build_compass(compass,0,sensor_timestamp); //把磁力计值发给MPL
;;;3530       }
;;;3531       inv_execute_on_data();
;;;3532       inv_get_sensor_type_euler(data,&accuracy,&timestamp);
;;;3533       
;;;3534       *roll  = (data[0]/q16);
;;;3535       *pitch = -(data[1]/q16);
;;;3536       *yaw   = -data[2] / q16;
;;;3537   	return 0;
;;;3538   }
000022  b022              ADD      sp,sp,#0x88
000024  bd70              POP      {r4-r6,pc}
                  |L31.38|
000026  f8bd0064          LDRH     r0,[sp,#0x64]         ;3509
00002a  f0000070          AND      r0,r0,#0x70           ;3509
00002e  b158              CBZ      r0,|L31.72|
000030  a81e              ADD      r0,sp,#0x78           ;3511
000032  9921              LDR      r1,[sp,#0x84]         ;3511
000034  f7fffffe          BL       inv_build_gyro
000038  a921              ADD      r1,sp,#0x84           ;3512
00003a  a80d              ADD      r0,sp,#0x34           ;3512
00003c  f7fffffe          BL       mpu_get_temperature
000040  9921              LDR      r1,[sp,#0x84]         ;3513
000042  980d              LDR      r0,[sp,#0x34]         ;3513
000044  f7fffffe          BL       inv_build_temp
                  |L31.72|
000048  f8bd0064          LDRH     r0,[sp,#0x64]         ;3516
00004c  f0000008          AND      r0,r0,#8              ;3516
000050  b168              CBZ      r0,|L31.110|
000052  f9bd0070          LDRSH    r0,[sp,#0x70]         ;3518
000056  9012              STR      r0,[sp,#0x48]         ;3518
000058  f9bd0072          LDRSH    r0,[sp,#0x72]         ;3519
00005c  9013              STR      r0,[sp,#0x4c]         ;3519
00005e  f9bd0074          LDRSH    r0,[sp,#0x74]         ;3520
000062  9014              STR      r0,[sp,#0x50]         ;3520
000064  2100              MOVS     r1,#0                 ;3521
000066  a812              ADD      r0,sp,#0x48           ;3521
000068  9a21              LDR      r2,[sp,#0x84]         ;3521
00006a  f7fffffe          BL       inv_build_accel
                  |L31.110|
00006e  a921              ADD      r1,sp,#0x84           ;3524
000070  a81a              ADD      r0,sp,#0x68           ;3524
000072  f7fffffe          BL       mpu_get_compass_reg
000076  b968              CBNZ     r0,|L31.148|
000078  f9bd0068          LDRSH    r0,[sp,#0x68]         ;3526
00007c  9015              STR      r0,[sp,#0x54]         ;3526
00007e  f9bd006a          LDRSH    r0,[sp,#0x6a]         ;3527
000082  9016              STR      r0,[sp,#0x58]         ;3527
000084  f9bd006c          LDRSH    r0,[sp,#0x6c]         ;3528
000088  9017              STR      r0,[sp,#0x5c]         ;3528
00008a  2100              MOVS     r1,#0                 ;3529
00008c  a815              ADD      r0,sp,#0x54           ;3529
00008e  9a21              LDR      r2,[sp,#0x84]         ;3529
000090  f7fffffe          BL       inv_build_compass
                  |L31.148|
000094  f7fffffe          BL       inv_execute_on_data
000098  aa20              ADD      r2,sp,#0x80           ;3532
00009a  a903              ADD      r1,sp,#0xc            ;3532
00009c  a804              ADD      r0,sp,#0x10           ;3532
00009e  f7fffffe          BL       inv_get_sensor_type_euler
0000a2  ed9d0a04          VLDR     s0,[sp,#0x10]         ;3534
0000a6  eeb80ac0          VCVT.F32.S32 s0,s0                 ;3534
0000aa  eddf0a10          VLDR     s1,|L31.236|
0000ae  ee801a20          VDIV.F32 s2,s0,s1              ;3534
0000b2  ed851a00          VSTR     s2,[r5,#0]            ;3534
0000b6  ed9d0a05          VLDR     s0,[sp,#0x14]         ;3535
0000ba  eeb80ac0          VCVT.F32.S32 s0,s0                 ;3535
0000be  eddf0a0b          VLDR     s1,|L31.236|
0000c2  ee801a20          VDIV.F32 s2,s0,s1              ;3535
0000c6  eeb10a41          VNEG.F32 s0,s2                 ;3535
0000ca  ed840a00          VSTR     s0,[r4,#0]            ;3535
0000ce  9806              LDR      r0,[sp,#0x18]         ;3536
0000d0  4240              RSBS     r0,r0,#0              ;3536
0000d2  ee000a10          VMOV     s0,r0                 ;3536
0000d6  eeb80ac0          VCVT.F32.S32 s0,s0                 ;3536
0000da  eddf0a04          VLDR     s1,|L31.236|
0000de  ee801a20          VDIV.F32 s2,s0,s1              ;3536
0000e2  ed861a00          VSTR     s2,[r6,#0]            ;3536
0000e6  2000              MOVS     r0,#0                 ;3537
0000e8  e79b              B        |L31.34|
;;;3539   
                          ENDP

0000ea  0000              DCW      0x0000
                  |L31.236|
0000ec  47800000          DCFS     0x47800000 ; 65536

                          AREA ||i.mpu_read_6050_accel_bias||, CODE, READONLY, ALIGN=2

                  mpu_read_6050_accel_bias PROC
;;;1002    */
;;;1003   int mpu_read_6050_accel_bias(long *accel_bias) {
000000  b51c              PUSH     {r2-r4,lr}
000002  4604              MOV      r4,r0
;;;1004   	unsigned char data[6];
;;;1005   	if (i2c_read(st.hw->addr, 0x06, 2, &data[0]))
000004  491d              LDR      r1,|L32.124|
000006  6849              LDR      r1,[r1,#4]  ; st
000008  7808              LDRB     r0,[r1,#0]
00000a  466b              MOV      r3,sp
00000c  2202              MOVS     r2,#2
00000e  2106              MOVS     r1,#6
000010  f7fffffe          BL       MPU_Read_Len
000014  b110              CBZ      r0,|L32.28|
;;;1006   		return -1;
000016  f04f30ff          MOV      r0,#0xffffffff
                  |L32.26|
;;;1007   	if (i2c_read(st.hw->addr, 0x08, 2, &data[2]))
;;;1008   		return -1;
;;;1009   	if (i2c_read(st.hw->addr, 0x0A, 2, &data[4]))
;;;1010   		return -1;
;;;1011   	accel_bias[0] = ((long)data[0]<<8) | data[1];
;;;1012   	accel_bias[1] = ((long)data[2]<<8) | data[3];
;;;1013   	accel_bias[2] = ((long)data[4]<<8) | data[5];
;;;1014   	return 0;
;;;1015   }
00001a  bd1c              POP      {r2-r4,pc}
                  |L32.28|
00001c  4917              LDR      r1,|L32.124|
00001e  6849              LDR      r1,[r1,#4]            ;1007  ; st
000020  7808              LDRB     r0,[r1,#0]            ;1007
000022  f10d0302          ADD      r3,sp,#2              ;1007
000026  2202              MOVS     r2,#2                 ;1007
000028  2108              MOVS     r1,#8                 ;1007
00002a  f7fffffe          BL       MPU_Read_Len
00002e  b110              CBZ      r0,|L32.54|
000030  f04f30ff          MOV      r0,#0xffffffff        ;1008
000034  e7f1              B        |L32.26|
                  |L32.54|
000036  4911              LDR      r1,|L32.124|
000038  6849              LDR      r1,[r1,#4]            ;1009  ; st
00003a  7808              LDRB     r0,[r1,#0]            ;1009
00003c  ab01              ADD      r3,sp,#4              ;1009
00003e  2202              MOVS     r2,#2                 ;1009
000040  210a              MOVS     r1,#0xa               ;1009
000042  f7fffffe          BL       MPU_Read_Len
000046  b110              CBZ      r0,|L32.78|
000048  f04f30ff          MOV      r0,#0xffffffff        ;1010
00004c  e7e5              B        |L32.26|
                  |L32.78|
00004e  f89d0001          LDRB     r0,[sp,#1]            ;1011
000052  f89d1000          LDRB     r1,[sp,#0]            ;1011
000056  ea402001          ORR      r0,r0,r1,LSL #8       ;1011
00005a  6020              STR      r0,[r4,#0]            ;1011
00005c  f89d0003          LDRB     r0,[sp,#3]            ;1012
000060  f89d1002          LDRB     r1,[sp,#2]            ;1012
000064  ea402001          ORR      r0,r0,r1,LSL #8       ;1012
000068  6060              STR      r0,[r4,#4]            ;1012
00006a  f89d0005          LDRB     r0,[sp,#5]            ;1013
00006e  f89d1004          LDRB     r1,[sp,#4]            ;1013
000072  ea402001          ORR      r0,r0,r1,LSL #8       ;1013
000076  60a0              STR      r0,[r4,#8]            ;1013
000078  2000              MOVS     r0,#0                 ;1014
00007a  e7ce              B        |L32.26|
;;;1016   
                          ENDP

                  |L32.124|
                          DCD      ||st||

                          AREA ||i.mpu_read_6500_accel_bias||, CODE, READONLY, ALIGN=2

                  mpu_read_6500_accel_bias PROC
;;;980     */
;;;981    int mpu_read_6500_accel_bias(long *accel_bias) {
000000  b51c              PUSH     {r2-r4,lr}
000002  4604              MOV      r4,r0
;;;982    	unsigned char data[6];
;;;983    	if (i2c_read(st.hw->addr, 0x77, 2, &data[0]))
000004  491d              LDR      r1,|L33.124|
000006  6849              LDR      r1,[r1,#4]  ; st
000008  7808              LDRB     r0,[r1,#0]
00000a  466b              MOV      r3,sp
00000c  2202              MOVS     r2,#2
00000e  2177              MOVS     r1,#0x77
000010  f7fffffe          BL       MPU_Read_Len
000014  b110              CBZ      r0,|L33.28|
;;;984    		return -1;
000016  f04f30ff          MOV      r0,#0xffffffff
                  |L33.26|
;;;985    	if (i2c_read(st.hw->addr, 0x7A, 2, &data[2]))
;;;986    		return -1;
;;;987    	if (i2c_read(st.hw->addr, 0x7D, 2, &data[4]))
;;;988    		return -1;
;;;989    	accel_bias[0] = ((long)data[0]<<8) | data[1];
;;;990    	accel_bias[1] = ((long)data[2]<<8) | data[3];
;;;991    	accel_bias[2] = ((long)data[4]<<8) | data[5];
;;;992    	return 0;
;;;993    }
00001a  bd1c              POP      {r2-r4,pc}
                  |L33.28|
00001c  4917              LDR      r1,|L33.124|
00001e  6849              LDR      r1,[r1,#4]            ;985  ; st
000020  7808              LDRB     r0,[r1,#0]            ;985
000022  f10d0302          ADD      r3,sp,#2              ;985
000026  2202              MOVS     r2,#2                 ;985
000028  217a              MOVS     r1,#0x7a              ;985
00002a  f7fffffe          BL       MPU_Read_Len
00002e  b110              CBZ      r0,|L33.54|
000030  f04f30ff          MOV      r0,#0xffffffff        ;986
000034  e7f1              B        |L33.26|
                  |L33.54|
000036  4911              LDR      r1,|L33.124|
000038  6849              LDR      r1,[r1,#4]            ;987  ; st
00003a  7808              LDRB     r0,[r1,#0]            ;987
00003c  ab01              ADD      r3,sp,#4              ;987
00003e  2202              MOVS     r2,#2                 ;987
000040  217d              MOVS     r1,#0x7d              ;987
000042  f7fffffe          BL       MPU_Read_Len
000046  b110              CBZ      r0,|L33.78|
000048  f04f30ff          MOV      r0,#0xffffffff        ;988
00004c  e7e5              B        |L33.26|
                  |L33.78|
00004e  f89d0001          LDRB     r0,[sp,#1]            ;989
000052  f89d1000          LDRB     r1,[sp,#0]            ;989
000056  ea402001          ORR      r0,r0,r1,LSL #8       ;989
00005a  6020              STR      r0,[r4,#0]            ;989
00005c  f89d0003          LDRB     r0,[sp,#3]            ;990
000060  f89d1002          LDRB     r1,[sp,#2]            ;990
000064  ea402001          ORR      r0,r0,r1,LSL #8       ;990
000068  6060              STR      r0,[r4,#4]            ;990
00006a  f89d0005          LDRB     r0,[sp,#5]            ;991
00006e  f89d1004          LDRB     r1,[sp,#4]            ;991
000072  ea402001          ORR      r0,r0,r1,LSL #8       ;991
000076  60a0              STR      r0,[r4,#8]            ;991
000078  2000              MOVS     r0,#0                 ;992
00007a  e7ce              B        |L33.26|
;;;994    
                          ENDP

                  |L33.124|
                          DCD      ||st||

                          AREA ||i.mpu_read_6500_gyro_bias||, CODE, READONLY, ALIGN=2

                  mpu_read_6500_gyro_bias PROC
;;;1016   
;;;1017   int mpu_read_6500_gyro_bias(long *gyro_bias) {
000000  b51c              PUSH     {r2-r4,lr}
000002  4604              MOV      r4,r0
;;;1018   	unsigned char data[6];
;;;1019   	if (i2c_read(st.hw->addr, 0x13, 2, &data[0]))
000004  491d              LDR      r1,|L34.124|
000006  6849              LDR      r1,[r1,#4]  ; st
000008  7808              LDRB     r0,[r1,#0]
00000a  466b              MOV      r3,sp
00000c  2202              MOVS     r2,#2
00000e  2113              MOVS     r1,#0x13
000010  f7fffffe          BL       MPU_Read_Len
000014  b110              CBZ      r0,|L34.28|
;;;1020   		return -1;
000016  f04f30ff          MOV      r0,#0xffffffff
                  |L34.26|
;;;1021   	if (i2c_read(st.hw->addr, 0x15, 2, &data[2]))
;;;1022   		return -1;
;;;1023   	if (i2c_read(st.hw->addr, 0x17, 2, &data[4]))
;;;1024   		return -1;
;;;1025   	gyro_bias[0] = ((long)data[0]<<8) | data[1];
;;;1026   	gyro_bias[1] = ((long)data[2]<<8) | data[3];
;;;1027   	gyro_bias[2] = ((long)data[4]<<8) | data[5];
;;;1028   	return 0;
;;;1029   }
00001a  bd1c              POP      {r2-r4,pc}
                  |L34.28|
00001c  4917              LDR      r1,|L34.124|
00001e  6849              LDR      r1,[r1,#4]            ;1021  ; st
000020  7808              LDRB     r0,[r1,#0]            ;1021
000022  f10d0302          ADD      r3,sp,#2              ;1021
000026  2202              MOVS     r2,#2                 ;1021
000028  2115              MOVS     r1,#0x15              ;1021
00002a  f7fffffe          BL       MPU_Read_Len
00002e  b110              CBZ      r0,|L34.54|
000030  f04f30ff          MOV      r0,#0xffffffff        ;1022
000034  e7f1              B        |L34.26|
                  |L34.54|
000036  4911              LDR      r1,|L34.124|
000038  6849              LDR      r1,[r1,#4]            ;1023  ; st
00003a  7808              LDRB     r0,[r1,#0]            ;1023
00003c  ab01              ADD      r3,sp,#4              ;1023
00003e  2202              MOVS     r2,#2                 ;1023
000040  2117              MOVS     r1,#0x17              ;1023
000042  f7fffffe          BL       MPU_Read_Len
000046  b110              CBZ      r0,|L34.78|
000048  f04f30ff          MOV      r0,#0xffffffff        ;1024
00004c  e7e5              B        |L34.26|
                  |L34.78|
00004e  f89d0001          LDRB     r0,[sp,#1]            ;1025
000052  f89d1000          LDRB     r1,[sp,#0]            ;1025
000056  ea402001          ORR      r0,r0,r1,LSL #8       ;1025
00005a  6020              STR      r0,[r4,#0]            ;1025
00005c  f89d0003          LDRB     r0,[sp,#3]            ;1026
000060  f89d1002          LDRB     r1,[sp,#2]            ;1026
000064  ea402001          ORR      r0,r0,r1,LSL #8       ;1026
000068  6060              STR      r0,[r4,#4]            ;1026
00006a  f89d0005          LDRB     r0,[sp,#5]            ;1027
00006e  f89d1004          LDRB     r1,[sp,#4]            ;1027
000072  ea402001          ORR      r0,r0,r1,LSL #8       ;1027
000076  60a0              STR      r0,[r4,#8]            ;1027
000078  2000              MOVS     r0,#0                 ;1028
00007a  e7ce              B        |L34.26|
;;;1030   
                          ENDP

                  |L34.124|
                          DCD      ||st||

                          AREA ||i.mpu_read_fifo||, CODE, READONLY, ALIGN=2

                  mpu_read_fifo PROC
;;;1746    */
;;;1747   int mpu_read_fifo(short *gyro, short *accel, unsigned long *timestamp,
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;1748           unsigned char *sensors, unsigned char *more)
;;;1749   {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4692              MOV      r10,r2
00000a  461d              MOV      r5,r3
00000c  f8ddb030          LDR      r11,[sp,#0x30]
;;;1750       /* Assumes maximum packet size is gyro (6) + accel (6). */
;;;1751       unsigned char data[MAX_PACKET_LENGTH];
;;;1752       unsigned char packet_size = 0;
000010  2600              MOVS     r6,#0
;;;1753       unsigned short fifo_count, index = 0;
000012  2400              MOVS     r4,#0
;;;1754   
;;;1755       if (st.chip_cfg.dmp_on)
000014  4877              LDR      r0,|L35.500|
000016  f8900024          LDRB     r0,[r0,#0x24]
00001a  b110              CBZ      r0,|L35.34|
;;;1756           return -1;
00001c  1e60              SUBS     r0,r4,#1
                  |L35.30|
;;;1757   
;;;1758       sensors[0] = 0;
;;;1759       if (!st.chip_cfg.sensors)
;;;1760           return -1;
;;;1761       if (!st.chip_cfg.fifo_enable)
;;;1762           return -1;
;;;1763   
;;;1764       if (st.chip_cfg.fifo_enable & INV_X_GYRO)
;;;1765           packet_size += 2;
;;;1766       if (st.chip_cfg.fifo_enable & INV_Y_GYRO)
;;;1767           packet_size += 2;
;;;1768       if (st.chip_cfg.fifo_enable & INV_Z_GYRO)
;;;1769           packet_size += 2;
;;;1770       if (st.chip_cfg.fifo_enable & INV_XYZ_ACCEL)
;;;1771           packet_size += 6;
;;;1772   
;;;1773       if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
;;;1774           return -1;
;;;1775       fifo_count = (data[0] << 8) | data[1];
;;;1776       if (fifo_count < packet_size)
;;;1777           return 0;
;;;1778   //    log_i("FIFO count: %hd\n", fifo_count);
;;;1779       if (fifo_count > (st.hw->max_fifo >> 1)) {
;;;1780           /* FIFO is 50% full, better check overflow bit. */
;;;1781           if (i2c_read(st.hw->addr, st.reg->int_status, 1, data))
;;;1782               return -1;
;;;1783           if (data[0] & BIT_FIFO_OVERFLOW) {
;;;1784               mpu_reset_fifo();
;;;1785               return -2;
;;;1786           }
;;;1787       }
;;;1788       get_ms((unsigned long*)timestamp);
;;;1789   
;;;1790       if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
;;;1791           return -1;
;;;1792       more[0] = fifo_count / packet_size - 1;
;;;1793       sensors[0] = 0;
;;;1794   
;;;1795       if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_XYZ_ACCEL) {
;;;1796           accel[0] = (data[index+0] << 8) | data[index+1];
;;;1797           accel[1] = (data[index+2] << 8) | data[index+3];
;;;1798           accel[2] = (data[index+4] << 8) | data[index+5];
;;;1799           sensors[0] |= INV_XYZ_ACCEL;
;;;1800           index += 6;
;;;1801       }
;;;1802       if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_X_GYRO) {
;;;1803           gyro[0] = (data[index+0] << 8) | data[index+1];
;;;1804           sensors[0] |= INV_X_GYRO;
;;;1805           index += 2;
;;;1806       }
;;;1807       if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Y_GYRO) {
;;;1808           gyro[1] = (data[index+0] << 8) | data[index+1];
;;;1809           sensors[0] |= INV_Y_GYRO;
;;;1810           index += 2;
;;;1811       }
;;;1812       if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Z_GYRO) {
;;;1813           gyro[2] = (data[index+0] << 8) | data[index+1];
;;;1814           sensors[0] |= INV_Z_GYRO;
;;;1815           index += 2;
;;;1816       }
;;;1817   
;;;1818       return 0;
;;;1819   }
00001e  e8bd8ffe          POP      {r1-r11,pc}
                  |L35.34|
000022  2000              MOVS     r0,#0                 ;1758
000024  7028              STRB     r0,[r5,#0]            ;1758
000026  4873              LDR      r0,|L35.500|
000028  7a80              LDRB     r0,[r0,#0xa]          ;1759
00002a  b910              CBNZ     r0,|L35.50|
00002c  f04f30ff          MOV      r0,#0xffffffff        ;1760
000030  e7f5              B        |L35.30|
                  |L35.50|
000032  4870              LDR      r0,|L35.500|
000034  7c00              LDRB     r0,[r0,#0x10]         ;1761
000036  b910              CBNZ     r0,|L35.62|
000038  f04f30ff          MOV      r0,#0xffffffff        ;1762
00003c  e7ef              B        |L35.30|
                  |L35.62|
00003e  486d              LDR      r0,|L35.500|
000040  7c00              LDRB     r0,[r0,#0x10]         ;1764
000042  f0000040          AND      r0,r0,#0x40           ;1764
000046  b108              CBZ      r0,|L35.76|
000048  1cb0              ADDS     r0,r6,#2              ;1765
00004a  b2c6              UXTB     r6,r0                 ;1765
                  |L35.76|
00004c  4869              LDR      r0,|L35.500|
00004e  7c00              LDRB     r0,[r0,#0x10]         ;1766
000050  f0000020          AND      r0,r0,#0x20           ;1766
000054  b108              CBZ      r0,|L35.90|
000056  1cb0              ADDS     r0,r6,#2              ;1767
000058  b2c6              UXTB     r6,r0                 ;1767
                  |L35.90|
00005a  4866              LDR      r0,|L35.500|
00005c  7c00              LDRB     r0,[r0,#0x10]         ;1768
00005e  f0000010          AND      r0,r0,#0x10           ;1768
000062  b108              CBZ      r0,|L35.104|
000064  1cb0              ADDS     r0,r6,#2              ;1769
000066  b2c6              UXTB     r6,r0                 ;1769
                  |L35.104|
000068  4862              LDR      r0,|L35.500|
00006a  7c00              LDRB     r0,[r0,#0x10]         ;1770
00006c  f0000008          AND      r0,r0,#8              ;1770
000070  b108              CBZ      r0,|L35.118|
000072  1db0              ADDS     r0,r6,#6              ;1771
000074  b2c6              UXTB     r6,r0                 ;1771
                  |L35.118|
000076  4a5f              LDR      r2,|L35.500|
000078  6812              LDR      r2,[r2,#0]            ;1773  ; st
00007a  7b11              LDRB     r1,[r2,#0xc]          ;1773
00007c  4a5d              LDR      r2,|L35.500|
00007e  6852              LDR      r2,[r2,#4]            ;1773  ; st
000080  7810              LDRB     r0,[r2,#0]            ;1773
000082  466b              MOV      r3,sp                 ;1773
000084  2202              MOVS     r2,#2                 ;1773
000086  f7fffffe          BL       MPU_Read_Len
00008a  b110              CBZ      r0,|L35.146|
00008c  f04f30ff          MOV      r0,#0xffffffff        ;1774
000090  e7c5              B        |L35.30|
                  |L35.146|
000092  f89d0001          LDRB     r0,[sp,#1]            ;1775
000096  f89d1000          LDRB     r1,[sp,#0]            ;1775
00009a  ea402901          ORR      r9,r0,r1,LSL #8       ;1775
00009e  45b1              CMP      r9,r6                 ;1776
0000a0  da01              BGE      |L35.166|
0000a2  2000              MOVS     r0,#0                 ;1777
0000a4  e7bb              B        |L35.30|
                  |L35.166|
0000a6  4853              LDR      r0,|L35.500|
0000a8  6840              LDR      r0,[r0,#4]            ;1779  ; st
0000aa  8840              LDRH     r0,[r0,#2]            ;1779
0000ac  ebb90f60          CMP      r9,r0,ASR #1          ;1779
0000b0  dd17              BLE      |L35.226|
0000b2  4a50              LDR      r2,|L35.500|
0000b4  6812              LDR      r2,[r2,#0]            ;1781  ; st
0000b6  7cd1              LDRB     r1,[r2,#0x13]         ;1781
0000b8  4a4e              LDR      r2,|L35.500|
0000ba  6852              LDR      r2,[r2,#4]            ;1781  ; st
0000bc  7810              LDRB     r0,[r2,#0]            ;1781
0000be  466b              MOV      r3,sp                 ;1781
0000c0  2201              MOVS     r2,#1                 ;1781
0000c2  f7fffffe          BL       MPU_Read_Len
0000c6  b110              CBZ      r0,|L35.206|
0000c8  f04f30ff          MOV      r0,#0xffffffff        ;1782
0000cc  e7a7              B        |L35.30|
                  |L35.206|
0000ce  f89d0000          LDRB     r0,[sp,#0]            ;1783
0000d2  f0000010          AND      r0,r0,#0x10           ;1783
0000d6  b120              CBZ      r0,|L35.226|
0000d8  f7fffffe          BL       mpu_reset_fifo
0000dc  f06f0001          MVN      r0,#1                 ;1785
0000e0  e79d              B        |L35.30|
                  |L35.226|
0000e2  4650              MOV      r0,r10                ;1788
0000e4  f7fffffe          BL       mget_ms
0000e8  4a42              LDR      r2,|L35.500|
0000ea  6812              LDR      r2,[r2,#0]            ;1790  ; st
0000ec  7b51              LDRB     r1,[r2,#0xd]          ;1790
0000ee  4a41              LDR      r2,|L35.500|
0000f0  6852              LDR      r2,[r2,#4]            ;1790  ; st
0000f2  7810              LDRB     r0,[r2,#0]            ;1790
0000f4  466b              MOV      r3,sp                 ;1790
0000f6  4632              MOV      r2,r6                 ;1790
0000f8  f7fffffe          BL       MPU_Read_Len
0000fc  b110              CBZ      r0,|L35.260|
0000fe  f04f30ff          MOV      r0,#0xffffffff        ;1791
000102  e78c              B        |L35.30|
                  |L35.260|
000104  fb99f0f6          SDIV     r0,r9,r6              ;1792
000108  1e40              SUBS     r0,r0,#1              ;1792
00010a  f88b0000          STRB     r0,[r11,#0]           ;1792
00010e  2000              MOVS     r0,#0                 ;1793
000110  7028              STRB     r0,[r5,#0]            ;1793
000112  42b4              CMP      r4,r6                 ;1795
000114  d02a              BEQ      |L35.364|
000116  4837              LDR      r0,|L35.500|
000118  7c00              LDRB     r0,[r0,#0x10]         ;1795
00011a  f0000008          AND      r0,r0,#8              ;1795
00011e  b328              CBZ      r0,|L35.364|
000120  1c60              ADDS     r0,r4,#1              ;1796
000122  f81d0000          LDRB     r0,[sp,r0]            ;1796
000126  f81d1004          LDRB     r1,[sp,r4]            ;1796
00012a  ea402001          ORR      r0,r0,r1,LSL #8       ;1796
00012e  b200              SXTH     r0,r0                 ;1796
000130  f8a80000          STRH     r0,[r8,#0]            ;1796
000134  1ce0              ADDS     r0,r4,#3              ;1797
000136  f81d1000          LDRB     r1,[sp,r0]            ;1797
00013a  1ca0              ADDS     r0,r4,#2              ;1797
00013c  f81d0000          LDRB     r0,[sp,r0]            ;1797
000140  ea412000          ORR      r0,r1,r0,LSL #8       ;1797
000144  b200              SXTH     r0,r0                 ;1797
000146  f8a80002          STRH     r0,[r8,#2]            ;1797
00014a  1d60              ADDS     r0,r4,#5              ;1798
00014c  f81d1000          LDRB     r1,[sp,r0]            ;1798
000150  1d20              ADDS     r0,r4,#4              ;1798
000152  f81d0000          LDRB     r0,[sp,r0]            ;1798
000156  ea412000          ORR      r0,r1,r0,LSL #8       ;1798
00015a  b200              SXTH     r0,r0                 ;1798
00015c  f8a80004          STRH     r0,[r8,#4]            ;1798
000160  7828              LDRB     r0,[r5,#0]            ;1799
000162  f0400008          ORR      r0,r0,#8              ;1799
000166  7028              STRB     r0,[r5,#0]            ;1799
000168  1da0              ADDS     r0,r4,#6              ;1800
00016a  b284              UXTH     r4,r0                 ;1800
                  |L35.364|
00016c  42b4              CMP      r4,r6                 ;1802
00016e  d013              BEQ      |L35.408|
000170  4820              LDR      r0,|L35.500|
000172  7c00              LDRB     r0,[r0,#0x10]         ;1802
000174  f0000040          AND      r0,r0,#0x40           ;1802
000178  b170              CBZ      r0,|L35.408|
00017a  1c60              ADDS     r0,r4,#1              ;1803
00017c  f81d0000          LDRB     r0,[sp,r0]            ;1803
000180  f81d1004          LDRB     r1,[sp,r4]            ;1803
000184  ea402001          ORR      r0,r0,r1,LSL #8       ;1803
000188  b200              SXTH     r0,r0                 ;1803
00018a  8038              STRH     r0,[r7,#0]            ;1803
00018c  7828              LDRB     r0,[r5,#0]            ;1804
00018e  f0400040          ORR      r0,r0,#0x40           ;1804
000192  7028              STRB     r0,[r5,#0]            ;1804
000194  1ca0              ADDS     r0,r4,#2              ;1805
000196  b284              UXTH     r4,r0                 ;1805
                  |L35.408|
000198  42b4              CMP      r4,r6                 ;1807
00019a  d013              BEQ      |L35.452|
00019c  4815              LDR      r0,|L35.500|
00019e  7c00              LDRB     r0,[r0,#0x10]         ;1807
0001a0  f0000020          AND      r0,r0,#0x20           ;1807
0001a4  b170              CBZ      r0,|L35.452|
0001a6  1c60              ADDS     r0,r4,#1              ;1808
0001a8  f81d0000          LDRB     r0,[sp,r0]            ;1808
0001ac  f81d1004          LDRB     r1,[sp,r4]            ;1808
0001b0  ea402001          ORR      r0,r0,r1,LSL #8       ;1808
0001b4  b200              SXTH     r0,r0                 ;1808
0001b6  8078              STRH     r0,[r7,#2]            ;1808
0001b8  7828              LDRB     r0,[r5,#0]            ;1809
0001ba  f0400020          ORR      r0,r0,#0x20           ;1809
0001be  7028              STRB     r0,[r5,#0]            ;1809
0001c0  1ca0              ADDS     r0,r4,#2              ;1810
0001c2  b284              UXTH     r4,r0                 ;1810
                  |L35.452|
0001c4  42b4              CMP      r4,r6                 ;1812
0001c6  d013              BEQ      |L35.496|
0001c8  480a              LDR      r0,|L35.500|
0001ca  7c00              LDRB     r0,[r0,#0x10]         ;1812
0001cc  f0000010          AND      r0,r0,#0x10           ;1812
0001d0  b170              CBZ      r0,|L35.496|
0001d2  1c60              ADDS     r0,r4,#1              ;1813
0001d4  f81d0000          LDRB     r0,[sp,r0]            ;1813
0001d8  f81d1004          LDRB     r1,[sp,r4]            ;1813
0001dc  ea402001          ORR      r0,r0,r1,LSL #8       ;1813
0001e0  b200              SXTH     r0,r0                 ;1813
0001e2  80b8              STRH     r0,[r7,#4]            ;1813
0001e4  7828              LDRB     r0,[r5,#0]            ;1814
0001e6  f0400010          ORR      r0,r0,#0x10           ;1814
0001ea  7028              STRB     r0,[r5,#0]            ;1814
0001ec  1ca0              ADDS     r0,r4,#2              ;1815
0001ee  b284              UXTH     r4,r0                 ;1815
                  |L35.496|
0001f0  2000              MOVS     r0,#0                 ;1818
0001f2  e714              B        |L35.30|
;;;1820   
                          ENDP

                  |L35.500|
                          DCD      ||st||

                          AREA ||i.mpu_read_fifo_stream||, CODE, READONLY, ALIGN=2

                  mpu_read_fifo_stream PROC
;;;1827    */
;;;1828   int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
000000  b5f8              PUSH     {r3-r7,lr}
;;;1829       unsigned char *more)
;;;1830   {
000002  4604              MOV      r4,r0
000004  460f              MOV      r7,r1
000006  4616              MOV      r6,r2
;;;1831       unsigned char tmp[2];
;;;1832       unsigned short fifo_count;
;;;1833       if (!st.chip_cfg.dmp_on)
000008  482c              LDR      r0,|L36.188|
00000a  f8900024          LDRB     r0,[r0,#0x24]
00000e  b910              CBNZ     r0,|L36.22|
;;;1834           return -1;
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L36.20|
;;;1835       if (!st.chip_cfg.sensors)
;;;1836           return -1;
;;;1837   
;;;1838       if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
;;;1839           return -1;
;;;1840       fifo_count = (tmp[0] << 8) | tmp[1];
;;;1841       if (fifo_count < length) {
;;;1842           more[0] = 0;
;;;1843           return -1;
;;;1844       }
;;;1845       if (fifo_count > (st.hw->max_fifo >> 1)) {
;;;1846           /* FIFO is 50% full, better check overflow bit. */
;;;1847           if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
;;;1848               return -1;
;;;1849           if (tmp[0] & BIT_FIFO_OVERFLOW) {
;;;1850               mpu_reset_fifo();
;;;1851               return -2;
;;;1852           }
;;;1853       }
;;;1854   
;;;1855       if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
;;;1856           return -1;
;;;1857       more[0] = fifo_count / length - 1;
;;;1858       return 0;
;;;1859   }
000014  bdf8              POP      {r3-r7,pc}
                  |L36.22|
000016  4829              LDR      r0,|L36.188|
000018  7a80              LDRB     r0,[r0,#0xa]          ;1835
00001a  b910              CBNZ     r0,|L36.34|
00001c  f04f30ff          MOV      r0,#0xffffffff        ;1836
000020  e7f8              B        |L36.20|
                  |L36.34|
000022  4a26              LDR      r2,|L36.188|
000024  6812              LDR      r2,[r2,#0]            ;1838  ; st
000026  7b11              LDRB     r1,[r2,#0xc]          ;1838
000028  4a24              LDR      r2,|L36.188|
00002a  6852              LDR      r2,[r2,#4]            ;1838  ; st
00002c  7810              LDRB     r0,[r2,#0]            ;1838
00002e  466b              MOV      r3,sp                 ;1838
000030  2202              MOVS     r2,#2                 ;1838
000032  f7fffffe          BL       MPU_Read_Len
000036  b110              CBZ      r0,|L36.62|
000038  f04f30ff          MOV      r0,#0xffffffff        ;1839
00003c  e7ea              B        |L36.20|
                  |L36.62|
00003e  f89d0001          LDRB     r0,[sp,#1]            ;1840
000042  f89d1000          LDRB     r1,[sp,#0]            ;1840
000046  ea402501          ORR      r5,r0,r1,LSL #8       ;1840
00004a  42a5              CMP      r5,r4                 ;1841
00004c  da03              BGE      |L36.86|
00004e  2000              MOVS     r0,#0                 ;1842
000050  7030              STRB     r0,[r6,#0]            ;1842
000052  1e40              SUBS     r0,r0,#1              ;1843
000054  e7de              B        |L36.20|
                  |L36.86|
000056  4819              LDR      r0,|L36.188|
000058  6840              LDR      r0,[r0,#4]            ;1845  ; st
00005a  8840              LDRH     r0,[r0,#2]            ;1845
00005c  ebb50f60          CMP      r5,r0,ASR #1          ;1845
000060  dd17              BLE      |L36.146|
000062  4a16              LDR      r2,|L36.188|
000064  6812              LDR      r2,[r2,#0]            ;1847  ; st
000066  7cd1              LDRB     r1,[r2,#0x13]         ;1847
000068  4a14              LDR      r2,|L36.188|
00006a  6852              LDR      r2,[r2,#4]            ;1847  ; st
00006c  7810              LDRB     r0,[r2,#0]            ;1847
00006e  466b              MOV      r3,sp                 ;1847
000070  2201              MOVS     r2,#1                 ;1847
000072  f7fffffe          BL       MPU_Read_Len
000076  b110              CBZ      r0,|L36.126|
000078  f04f30ff          MOV      r0,#0xffffffff        ;1848
00007c  e7ca              B        |L36.20|
                  |L36.126|
00007e  f89d0000          LDRB     r0,[sp,#0]            ;1849
000082  f0000010          AND      r0,r0,#0x10           ;1849
000086  b120              CBZ      r0,|L36.146|
000088  f7fffffe          BL       mpu_reset_fifo
00008c  f06f0001          MVN      r0,#1                 ;1851
000090  e7c0              B        |L36.20|
                  |L36.146|
000092  b2e2              UXTB     r2,r4                 ;1855
000094  4b09              LDR      r3,|L36.188|
000096  681b              LDR      r3,[r3,#0]            ;1855  ; st
000098  7b59              LDRB     r1,[r3,#0xd]          ;1855
00009a  4b08              LDR      r3,|L36.188|
00009c  685b              LDR      r3,[r3,#4]            ;1855  ; st
00009e  7818              LDRB     r0,[r3,#0]            ;1855
0000a0  463b              MOV      r3,r7                 ;1855
0000a2  f7fffffe          BL       MPU_Read_Len
0000a6  b110              CBZ      r0,|L36.174|
0000a8  f04f30ff          MOV      r0,#0xffffffff        ;1856
0000ac  e7b2              B        |L36.20|
                  |L36.174|
0000ae  fb95f0f4          SDIV     r0,r5,r4              ;1857
0000b2  1e40              SUBS     r0,r0,#1              ;1857
0000b4  7030              STRB     r0,[r6,#0]            ;1857
0000b6  2000              MOVS     r0,#0                 ;1858
0000b8  e7ac              B        |L36.20|
;;;1860   
                          ENDP

0000ba  0000              DCW      0x0000
                  |L36.188|
                          DCD      ||st||

                          AREA ||i.mpu_read_mem||, CODE, READONLY, ALIGN=2

                  mpu_read_mem PROC
;;;2829    */
;;;2830   int mpu_read_mem(unsigned short mem_addr, unsigned short length,
000000  b5f8              PUSH     {r3-r7,lr}
;;;2831           unsigned char *data)
;;;2832   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;2833       unsigned char tmp[2];
;;;2834   
;;;2835       if (!data)
000008  b916              CBNZ     r6,|L37.16|
;;;2836           return -1;
00000a  f04f30ff          MOV      r0,#0xffffffff
                  |L37.14|
;;;2837       if (!st.chip_cfg.sensors)
;;;2838           return -1;
;;;2839   
;;;2840       tmp[0] = (unsigned char)(mem_addr >> 8);
;;;2841       tmp[1] = (unsigned char)(mem_addr & 0xFF);
;;;2842   
;;;2843       /* Check bank boundaries. */
;;;2844       if (tmp[1] + length > st.hw->bank_size)
;;;2845           return -1;
;;;2846   
;;;2847       if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
;;;2848           return -1;
;;;2849       if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
;;;2850           return -1;
;;;2851       return 0;
;;;2852   }
00000e  bdf8              POP      {r3-r7,pc}
                  |L37.16|
000010  481a              LDR      r0,|L37.124|
000012  7a80              LDRB     r0,[r0,#0xa]          ;2837
000014  b910              CBNZ     r0,|L37.28|
000016  f04f30ff          MOV      r0,#0xffffffff        ;2838
00001a  e7f8              B        |L37.14|
                  |L37.28|
00001c  1220              ASRS     r0,r4,#8              ;2840
00001e  f88d0000          STRB     r0,[sp,#0]            ;2840
000022  b2e0              UXTB     r0,r4                 ;2841
000024  f88d0001          STRB     r0,[sp,#1]            ;2841
000028  f89d0001          LDRB     r0,[sp,#1]            ;2844
00002c  4428              ADD      r0,r0,r5              ;2844
00002e  4913              LDR      r1,|L37.124|
000030  6849              LDR      r1,[r1,#4]            ;2844  ; st
000032  8949              LDRH     r1,[r1,#0xa]          ;2844
000034  4288              CMP      r0,r1                 ;2844
000036  dd02              BLE      |L37.62|
000038  f04f30ff          MOV      r0,#0xffffffff        ;2845
00003c  e7e7              B        |L37.14|
                  |L37.62|
00003e  4a0f              LDR      r2,|L37.124|
000040  6812              LDR      r2,[r2,#0]            ;2847  ; st
000042  7ed1              LDRB     r1,[r2,#0x1b]         ;2847
000044  4a0d              LDR      r2,|L37.124|
000046  6852              LDR      r2,[r2,#4]            ;2847  ; st
000048  7810              LDRB     r0,[r2,#0]            ;2847
00004a  466b              MOV      r3,sp                 ;2847
00004c  2202              MOVS     r2,#2                 ;2847
00004e  f7fffffe          BL       MPU_Write_Len
000052  b110              CBZ      r0,|L37.90|
000054  f04f30ff          MOV      r0,#0xffffffff        ;2848
000058  e7d9              B        |L37.14|
                  |L37.90|
00005a  b2ea              UXTB     r2,r5                 ;2849
00005c  4b07              LDR      r3,|L37.124|
00005e  681b              LDR      r3,[r3,#0]            ;2849  ; st
000060  7e19              LDRB     r1,[r3,#0x18]         ;2849
000062  4b06              LDR      r3,|L37.124|
000064  685b              LDR      r3,[r3,#4]            ;2849  ; st
000066  7818              LDRB     r0,[r3,#0]            ;2849
000068  4633              MOV      r3,r6                 ;2849
00006a  f7fffffe          BL       MPU_Read_Len
00006e  b110              CBZ      r0,|L37.118|
000070  f04f30ff          MOV      r0,#0xffffffff        ;2850
000074  e7cb              B        |L37.14|
                  |L37.118|
000076  2000              MOVS     r0,#0                 ;2851
000078  e7c9              B        |L37.14|
;;;2853   
                          ENDP

00007a  0000              DCW      0x0000
                  |L37.124|
                          DCD      ||st||

                          AREA ||i.mpu_read_reg||, CODE, READONLY, ALIGN=2

                  mpu_read_reg PROC
;;;708     */
;;;709    int mpu_read_reg(unsigned char reg, unsigned char *data)
000000  b570              PUSH     {r4-r6,lr}
;;;710    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;711        if (reg == st.reg->fifo_r_w || reg == st.reg->mem_r_w)
000006  480f              LDR      r0,|L38.68|
000008  6800              LDR      r0,[r0,#0]  ; st
00000a  7b40              LDRB     r0,[r0,#0xd]
00000c  42a0              CMP      r0,r4
00000e  d004              BEQ      |L38.26|
000010  480c              LDR      r0,|L38.68|
000012  6800              LDR      r0,[r0,#0]  ; st
000014  7e00              LDRB     r0,[r0,#0x18]
000016  42a0              CMP      r0,r4
000018  d102              BNE      |L38.32|
                  |L38.26|
;;;712            return -1;
00001a  f04f30ff          MOV      r0,#0xffffffff
                  |L38.30|
;;;713        if (reg >= st.hw->num_reg)
;;;714            return -1;
;;;715        return i2c_read(st.hw->addr, reg, 1, data);
;;;716    }
00001e  bd70              POP      {r4-r6,pc}
                  |L38.32|
000020  4808              LDR      r0,|L38.68|
000022  6840              LDR      r0,[r0,#4]            ;713  ; st
000024  7900              LDRB     r0,[r0,#4]            ;713
000026  42a0              CMP      r0,r4                 ;713
000028  dc02              BGT      |L38.48|
00002a  f04f30ff          MOV      r0,#0xffffffff        ;714
00002e  e7f6              B        |L38.30|
                  |L38.48|
000030  4904              LDR      r1,|L38.68|
000032  6849              LDR      r1,[r1,#4]            ;715  ; st
000034  7808              LDRB     r0,[r1,#0]            ;715
000036  462b              MOV      r3,r5                 ;715
000038  2201              MOVS     r2,#1                 ;715
00003a  4621              MOV      r1,r4                 ;715
00003c  f7fffffe          BL       MPU_Read_Len
000040  e7ed              B        |L38.30|
;;;717    
                          ENDP

000042  0000              DCW      0x0000
                  |L38.68|
                          DCD      ||st||

                          AREA ||i.mpu_reg_dump||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  mpu_reg_dump PROC
;;;686     */
;;;687    int mpu_reg_dump(void)
000000  b538              PUSH     {r3-r5,lr}
;;;688    {
;;;689        unsigned char ii;
;;;690        unsigned char data;
;;;691    
;;;692        for (ii = 0; ii < st.hw->num_reg; ii++) {
000002  2400              MOVS     r4,#0
000004  e01f              B        |L39.70|
                  |L39.6|
;;;693            if (ii == st.reg->fifo_r_w || ii == st.reg->mem_r_w)
000006  4813              LDR      r0,|L39.84|
000008  6800              LDR      r0,[r0,#0]  ; st
00000a  7b40              LDRB     r0,[r0,#0xd]
00000c  42a0              CMP      r0,r4
00000e  d004              BEQ      |L39.26|
000010  4810              LDR      r0,|L39.84|
000012  6800              LDR      r0,[r0,#0]  ; st
000014  7e00              LDRB     r0,[r0,#0x18]
000016  42a0              CMP      r0,r4
000018  d100              BNE      |L39.28|
                  |L39.26|
;;;694                continue;
00001a  e012              B        |L39.66|
                  |L39.28|
;;;695            if (i2c_read(st.hw->addr, ii, 1, &data))
00001c  490d              LDR      r1,|L39.84|
00001e  6849              LDR      r1,[r1,#4]  ; st
000020  7808              LDRB     r0,[r1,#0]
000022  466b              MOV      r3,sp
000024  2201              MOVS     r2,#1
000026  4621              MOV      r1,r4
000028  f7fffffe          BL       MPU_Read_Len
00002c  b110              CBZ      r0,|L39.52|
;;;696                return -1;
00002e  f04f30ff          MOV      r0,#0xffffffff
                  |L39.50|
;;;697            log_i("%#5x: %#5x\r\n", ii, data);
;;;698        }
;;;699        return 0;
;;;700    }
000032  bd38              POP      {r3-r5,pc}
                  |L39.52|
000034  f89d2000          LDRB     r2,[sp,#0]            ;697
000038  4621              MOV      r1,r4                 ;697
00003a  a007              ADR      r0,|L39.88|
00003c  f7fffffe          BL       __2printf
000040  bf00              NOP                            ;694
                  |L39.66|
000042  1c60              ADDS     r0,r4,#1              ;692
000044  b2c4              UXTB     r4,r0                 ;692
                  |L39.70|
000046  4803              LDR      r0,|L39.84|
000048  6840              LDR      r0,[r0,#4]            ;692  ; st
00004a  7900              LDRB     r0,[r0,#4]            ;692
00004c  42a0              CMP      r0,r4                 ;692
00004e  dcda              BGT      |L39.6|
000050  2000              MOVS     r0,#0                 ;699
000052  e7ee              B        |L39.50|
;;;701    
                          ENDP

                  |L39.84|
                          DCD      ||st||
                  |L39.88|
000058  25233578          DCB      "%#5x: %#5x\r\n",0
00005c  3a202523
000060  35780d0a
000064  00      
000065  00                DCB      0
000066  00                DCB      0
000067  00                DCB      0

                          AREA ||i.mpu_reset_fifo||, CODE, READONLY, ALIGN=2

                  mpu_reset_fifo PROC
;;;1140    */
;;;1141   int mpu_reset_fifo(void)
000000  b508              PUSH     {r3,lr}
;;;1142   {
;;;1143       unsigned char data;
;;;1144   
;;;1145       if (!(st.chip_cfg.sensors))
000002  4870              LDR      r0,|L40.452|
000004  7a80              LDRB     r0,[r0,#0xa]
000006  b910              CBNZ     r0,|L40.14|
;;;1146           return -1;
000008  f04f30ff          MOV      r0,#0xffffffff
                  |L40.12|
;;;1147   
;;;1148       data = 0;
;;;1149       if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
;;;1150           return -1;
;;;1151       if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
;;;1152           return -1;
;;;1153       if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
;;;1154           return -1;
;;;1155   
;;;1156       if (st.chip_cfg.dmp_on) {
;;;1157           data = BIT_FIFO_RST | BIT_DMP_RST;
;;;1158           if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
;;;1159               return -1;
;;;1160           delay_ms(50);
;;;1161           data = BIT_DMP_EN | BIT_FIFO_EN;
;;;1162           if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
;;;1163               data |= BIT_AUX_IF_EN;
;;;1164           if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
;;;1165               return -1;
;;;1166           if (st.chip_cfg.int_enable)
;;;1167               data = BIT_DMP_INT_EN;
;;;1168           else
;;;1169               data = 0;
;;;1170           if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
;;;1171               return -1;
;;;1172           data = 0;
;;;1173           if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
;;;1174               return -1;
;;;1175       } else {
;;;1176           data = BIT_FIFO_RST;
;;;1177           if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
;;;1178               return -1;
;;;1179           if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
;;;1180               data = BIT_FIFO_EN;
;;;1181           else
;;;1182               data = BIT_FIFO_EN | BIT_AUX_IF_EN;
;;;1183           if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
;;;1184               return -1;
;;;1185           delay_ms(50);
;;;1186           if (st.chip_cfg.int_enable)
;;;1187               data = BIT_DATA_RDY_EN;
;;;1188           else
;;;1189               data = 0;
;;;1190           if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
;;;1191               return -1;
;;;1192           if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
;;;1193               return -1;
;;;1194       }
;;;1195       return 0;
;;;1196   }
00000c  bd08              POP      {r3,pc}
                  |L40.14|
00000e  2000              MOVS     r0,#0                 ;1148
000010  9000              STR      r0,[sp,#0]            ;1148
000012  4a6c              LDR      r2,|L40.452|
000014  6812              LDR      r2,[r2,#0]            ;1149  ; st
000016  7c51              LDRB     r1,[r2,#0x11]         ;1149
000018  4a6a              LDR      r2,|L40.452|
00001a  6852              LDR      r2,[r2,#4]            ;1149  ; st
00001c  7810              LDRB     r0,[r2,#0]            ;1149
00001e  466b              MOV      r3,sp                 ;1149
000020  2201              MOVS     r2,#1                 ;1149
000022  f7fffffe          BL       MPU_Write_Len
000026  b110              CBZ      r0,|L40.46|
000028  f04f30ff          MOV      r0,#0xffffffff        ;1150
00002c  e7ee              B        |L40.12|
                  |L40.46|
00002e  4a65              LDR      r2,|L40.452|
000030  6812              LDR      r2,[r2,#0]            ;1151  ; st
000032  7951              LDRB     r1,[r2,#5]            ;1151
000034  4a63              LDR      r2,|L40.452|
000036  6852              LDR      r2,[r2,#4]            ;1151  ; st
000038  7810              LDRB     r0,[r2,#0]            ;1151
00003a  466b              MOV      r3,sp                 ;1151
00003c  2201              MOVS     r2,#1                 ;1151
00003e  f7fffffe          BL       MPU_Write_Len
000042  b110              CBZ      r0,|L40.74|
000044  f04f30ff          MOV      r0,#0xffffffff        ;1152
000048  e7e0              B        |L40.12|
                  |L40.74|
00004a  4a5e              LDR      r2,|L40.452|
00004c  6812              LDR      r2,[r2,#0]            ;1153  ; st
00004e  7911              LDRB     r1,[r2,#4]            ;1153
000050  4a5c              LDR      r2,|L40.452|
000052  6852              LDR      r2,[r2,#4]            ;1153  ; st
000054  7810              LDRB     r0,[r2,#0]            ;1153
000056  466b              MOV      r3,sp                 ;1153
000058  2201              MOVS     r2,#1                 ;1153
00005a  f7fffffe          BL       MPU_Write_Len
00005e  b110              CBZ      r0,|L40.102|
000060  f04f30ff          MOV      r0,#0xffffffff        ;1154
000064  e7d2              B        |L40.12|
                  |L40.102|
000066  4857              LDR      r0,|L40.452|
000068  f8900024          LDRB     r0,[r0,#0x24]         ;1156
00006c  2800              CMP      r0,#0                 ;1156
00006e  d053              BEQ      |L40.280|
000070  200c              MOVS     r0,#0xc               ;1157
000072  9000              STR      r0,[sp,#0]            ;1157
000074  4a53              LDR      r2,|L40.452|
000076  6812              LDR      r2,[r2,#0]            ;1158  ; st
000078  7911              LDRB     r1,[r2,#4]            ;1158
00007a  4a52              LDR      r2,|L40.452|
00007c  6852              LDR      r2,[r2,#4]            ;1158  ; st
00007e  7810              LDRB     r0,[r2,#0]            ;1158
000080  466b              MOV      r3,sp                 ;1158
000082  2201              MOVS     r2,#1                 ;1158
000084  f7fffffe          BL       MPU_Write_Len
000088  b110              CBZ      r0,|L40.144|
00008a  f04f30ff          MOV      r0,#0xffffffff        ;1159
00008e  e7bd              B        |L40.12|
                  |L40.144|
000090  2032              MOVS     r0,#0x32              ;1160
000092  f7fffffe          BL       delay_ms
000096  20c0              MOVS     r0,#0xc0              ;1161
000098  9000              STR      r0,[sp,#0]            ;1161
00009a  484a              LDR      r0,|L40.452|
00009c  7a80              LDRB     r0,[r0,#0xa]          ;1162
00009e  f0000001          AND      r0,r0,#1              ;1162
0000a2  b120              CBZ      r0,|L40.174|
0000a4  f89d0000          LDRB     r0,[sp,#0]            ;1163
0000a8  f0400020          ORR      r0,r0,#0x20           ;1163
0000ac  9000              STR      r0,[sp,#0]            ;1163
                  |L40.174|
0000ae  4a45              LDR      r2,|L40.452|
0000b0  6812              LDR      r2,[r2,#0]            ;1164  ; st
0000b2  7911              LDRB     r1,[r2,#4]            ;1164
0000b4  4a43              LDR      r2,|L40.452|
0000b6  6852              LDR      r2,[r2,#4]            ;1164  ; st
0000b8  7810              LDRB     r0,[r2,#0]            ;1164
0000ba  466b              MOV      r3,sp                 ;1164
0000bc  2201              MOVS     r2,#1                 ;1164
0000be  f7fffffe          BL       MPU_Write_Len
0000c2  b110              CBZ      r0,|L40.202|
0000c4  f04f30ff          MOV      r0,#0xffffffff        ;1165
0000c8  e7a0              B        |L40.12|
                  |L40.202|
0000ca  483e              LDR      r0,|L40.452|
0000cc  7c40              LDRB     r0,[r0,#0x11]         ;1166
0000ce  b110              CBZ      r0,|L40.214|
0000d0  2002              MOVS     r0,#2                 ;1167
0000d2  9000              STR      r0,[sp,#0]            ;1167
0000d4  e001              B        |L40.218|
                  |L40.214|
0000d6  2000              MOVS     r0,#0                 ;1169
0000d8  9000              STR      r0,[sp,#0]            ;1169
                  |L40.218|
0000da  4a3a              LDR      r2,|L40.452|
0000dc  6812              LDR      r2,[r2,#0]            ;1170  ; st
0000de  7c51              LDRB     r1,[r2,#0x11]         ;1170
0000e0  4a38              LDR      r2,|L40.452|
0000e2  6852              LDR      r2,[r2,#4]            ;1170  ; st
0000e4  7810              LDRB     r0,[r2,#0]            ;1170
0000e6  466b              MOV      r3,sp                 ;1170
0000e8  2201              MOVS     r2,#1                 ;1170
0000ea  f7fffffe          BL       MPU_Write_Len
0000ee  b110              CBZ      r0,|L40.246|
0000f0  f04f30ff          MOV      r0,#0xffffffff        ;1171
0000f4  e78a              B        |L40.12|
                  |L40.246|
0000f6  2000              MOVS     r0,#0                 ;1172
0000f8  9000              STR      r0,[sp,#0]            ;1172
0000fa  4a32              LDR      r2,|L40.452|
0000fc  6812              LDR      r2,[r2,#0]            ;1173  ; st
0000fe  7951              LDRB     r1,[r2,#5]            ;1173
000100  4a30              LDR      r2,|L40.452|
000102  6852              LDR      r2,[r2,#4]            ;1173  ; st
000104  7810              LDRB     r0,[r2,#0]            ;1173
000106  466b              MOV      r3,sp                 ;1173
000108  2201              MOVS     r2,#1                 ;1173
00010a  f7fffffe          BL       MPU_Write_Len
00010e  2800              CMP      r0,#0                 ;1173
000110  d055              BEQ      |L40.446|
000112  f04f30ff          MOV      r0,#0xffffffff        ;1174
000116  e779              B        |L40.12|
                  |L40.280|
000118  2004              MOVS     r0,#4                 ;1176
00011a  9000              STR      r0,[sp,#0]            ;1176
00011c  4a29              LDR      r2,|L40.452|
00011e  6812              LDR      r2,[r2,#0]            ;1177  ; st
000120  7911              LDRB     r1,[r2,#4]            ;1177
000122  4a28              LDR      r2,|L40.452|
000124  6852              LDR      r2,[r2,#4]            ;1177  ; st
000126  7810              LDRB     r0,[r2,#0]            ;1177
000128  466b              MOV      r3,sp                 ;1177
00012a  2201              MOVS     r2,#1                 ;1177
00012c  f7fffffe          BL       MPU_Write_Len
000130  b110              CBZ      r0,|L40.312|
000132  f04f30ff          MOV      r0,#0xffffffff        ;1178
000136  e769              B        |L40.12|
                  |L40.312|
000138  4822              LDR      r0,|L40.452|
00013a  7c80              LDRB     r0,[r0,#0x12]         ;1179
00013c  b920              CBNZ     r0,|L40.328|
00013e  4821              LDR      r0,|L40.452|
000140  7a80              LDRB     r0,[r0,#0xa]          ;1179
000142  f0000001          AND      r0,r0,#1              ;1179
000146  b910              CBNZ     r0,|L40.334|
                  |L40.328|
000148  2040              MOVS     r0,#0x40              ;1180
00014a  9000              STR      r0,[sp,#0]            ;1180
00014c  e001              B        |L40.338|
                  |L40.334|
00014e  2060              MOVS     r0,#0x60              ;1182
000150  9000              STR      r0,[sp,#0]            ;1182
                  |L40.338|
000152  4a1c              LDR      r2,|L40.452|
000154  6812              LDR      r2,[r2,#0]            ;1183  ; st
000156  7911              LDRB     r1,[r2,#4]            ;1183
000158  4a1a              LDR      r2,|L40.452|
00015a  6852              LDR      r2,[r2,#4]            ;1183  ; st
00015c  7810              LDRB     r0,[r2,#0]            ;1183
00015e  466b              MOV      r3,sp                 ;1183
000160  2201              MOVS     r2,#1                 ;1183
000162  f7fffffe          BL       MPU_Write_Len
000166  b110              CBZ      r0,|L40.366|
000168  f04f30ff          MOV      r0,#0xffffffff        ;1184
00016c  e74e              B        |L40.12|
                  |L40.366|
00016e  2032              MOVS     r0,#0x32              ;1185
000170  f7fffffe          BL       delay_ms
000174  4813              LDR      r0,|L40.452|
000176  7c40              LDRB     r0,[r0,#0x11]         ;1186
000178  b110              CBZ      r0,|L40.384|
00017a  2001              MOVS     r0,#1                 ;1187
00017c  9000              STR      r0,[sp,#0]            ;1187
00017e  e001              B        |L40.388|
                  |L40.384|
000180  2000              MOVS     r0,#0                 ;1189
000182  9000              STR      r0,[sp,#0]            ;1189
                  |L40.388|
000184  4a0f              LDR      r2,|L40.452|
000186  6812              LDR      r2,[r2,#0]            ;1190  ; st
000188  7c51              LDRB     r1,[r2,#0x11]         ;1190
00018a  4a0e              LDR      r2,|L40.452|
00018c  6852              LDR      r2,[r2,#4]            ;1190  ; st
00018e  7810              LDRB     r0,[r2,#0]            ;1190
000190  466b              MOV      r3,sp                 ;1190
000192  2201              MOVS     r2,#1                 ;1190
000194  f7fffffe          BL       MPU_Write_Len
000198  b110              CBZ      r0,|L40.416|
00019a  f04f30ff          MOV      r0,#0xffffffff        ;1191
00019e  e735              B        |L40.12|
                  |L40.416|
0001a0  4a08              LDR      r2,|L40.452|
0001a2  6812              LDR      r2,[r2,#0]            ;1192  ; st
0001a4  7951              LDRB     r1,[r2,#5]            ;1192
0001a6  4a07              LDR      r2,|L40.452|
0001a8  6852              LDR      r2,[r2,#4]            ;1192  ; st
0001aa  7810              LDRB     r0,[r2,#0]            ;1192
0001ac  4b05              LDR      r3,|L40.452|
0001ae  3310              ADDS     r3,r3,#0x10           ;1192
0001b0  2201              MOVS     r2,#1                 ;1192
0001b2  f7fffffe          BL       MPU_Write_Len
0001b6  b110              CBZ      r0,|L40.446|
0001b8  f04f30ff          MOV      r0,#0xffffffff        ;1193
0001bc  e726              B        |L40.12|
                  |L40.446|
0001be  2000              MOVS     r0,#0                 ;1195
0001c0  e724              B        |L40.12|
;;;1197   
                          ENDP

0001c2  0000              DCW      0x0000
                  |L40.452|
                          DCD      ||st||

                          AREA ||i.mpu_run_6500_self_test||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  mpu_run_6500_self_test PROC
;;;2571    */
;;;2572   int mpu_run_6500_self_test(long *gyro, long *accel, unsigned char debug)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;2573   {
000004  b08e              SUB      sp,sp,#0x38
000006  468b              MOV      r11,r1
000008  4614              MOV      r4,r2
;;;2574       const unsigned char tries = 2;
00000a  2002              MOVS     r0,#2
00000c  900d              STR      r0,[sp,#0x34]
;;;2575       long gyro_st[3], accel_st[3];
;;;2576       unsigned char accel_result, gyro_result;
;;;2577   #ifdef AK89xx_SECONDARY
;;;2578       unsigned char compass_result;
;;;2579   #endif
;;;2580       int ii;
;;;2581   
;;;2582       int result;
;;;2583       unsigned char accel_fsr, fifo_sensors, sensors_on;
;;;2584       unsigned short gyro_fsr, sample_rate, lpf;
;;;2585       unsigned char dmp_was_on;
;;;2586   
;;;2587   
;;;2588   
;;;2589       if(debug)
00000e  b114              CBZ      r4,|L41.22|
;;;2590       	log_i("Starting MPU6500 HWST!\r\n");
000010  a05b              ADR      r0,|L41.384|
000012  f7fffffe          BL       __2printf
                  |L41.22|
;;;2591   
;;;2592       if (st.chip_cfg.dmp_on) {
000016  4861              LDR      r0,|L41.412|
000018  f8900024          LDRB     r0,[r0,#0x24]
00001c  b128              CBZ      r0,|L41.42|
;;;2593           mpu_set_dmp_state(0);
00001e  2000              MOVS     r0,#0
000020  f7fffffe          BL       mpu_set_dmp_state
;;;2594           dmp_was_on = 1;
000024  f04f0a01          MOV      r10,#1
000028  e001              B        |L41.46|
                  |L41.42|
;;;2595       } else
;;;2596           dmp_was_on = 0;
00002a  f04f0a00          MOV      r10,#0
                  |L41.46|
;;;2597   
;;;2598       /* Get initial settings. */
;;;2599       mpu_get_gyro_fsr(&gyro_fsr);
00002e  a803              ADD      r0,sp,#0xc
000030  f7fffffe          BL       mpu_get_gyro_fsr
;;;2600       mpu_get_accel_fsr(&accel_fsr);
000034  a806              ADD      r0,sp,#0x18
000036  f7fffffe          BL       mpu_get_accel_fsr
;;;2601       mpu_get_lpf(&lpf);
00003a  a801              ADD      r0,sp,#4
00003c  f7fffffe          BL       mpu_get_lpf
;;;2602       mpu_get_sample_rate(&sample_rate);
000040  a802              ADD      r0,sp,#8
000042  f7fffffe          BL       mpu_get_sample_rate
;;;2603       sensors_on = st.chip_cfg.sensors;
000046  4855              LDR      r0,|L41.412|
000048  7a80              LDRB     r0,[r0,#0xa]
00004a  9004              STR      r0,[sp,#0x10]
;;;2604       mpu_get_fifo_config(&fifo_sensors);
00004c  a805              ADD      r0,sp,#0x14
00004e  f7fffffe          BL       mpu_get_fifo_config
;;;2605   
;;;2606       if(debug)
000052  b114              CBZ      r4,|L41.90|
;;;2607       	log_i("Retrieving Biases\r\n");
000054  a052              ADR      r0,|L41.416|
000056  f7fffffe          BL       __2printf
                  |L41.90|
;;;2608   
;;;2609       for (ii = 0; ii < tries; ii++)
00005a  2500              MOVS     r5,#0
00005c  e008              B        |L41.112|
                  |L41.94|
;;;2610           if (!get_st_6500_biases(gyro, accel, 0, debug))
00005e  4623              MOV      r3,r4
000060  2200              MOVS     r2,#0
000062  4659              MOV      r1,r11
000064  980e              LDR      r0,[sp,#0x38]
000066  f7fffffe          BL       get_st_6500_biases
00006a  b900              CBNZ     r0,|L41.110|
;;;2611               break;
00006c  e002              B        |L41.116|
                  |L41.110|
00006e  1c6d              ADDS     r5,r5,#1              ;2609
                  |L41.112|
000070  2d02              CMP      r5,#2                 ;2609
000072  dbf4              BLT      |L41.94|
                  |L41.116|
000074  bf00              NOP      
;;;2612       if (ii == tries) {
000076  2d02              CMP      r5,#2
000078  d105              BNE      |L41.134|
;;;2613           /* If we reach this point, we most likely encountered an I2C error.
;;;2614            * We'll just report an error for all three sensors.
;;;2615            */
;;;2616           if(debug)
00007a  b114              CBZ      r4,|L41.130|
;;;2617           	log_i("Retrieving Biases Error - possible I2C error\n");
00007c  a04d              ADR      r0,|L41.436|
00007e  f7fffffe          BL       __2printf
                  |L41.130|
;;;2618   
;;;2619           result = 0;
000082  2600              MOVS     r6,#0
;;;2620           goto restore;
000084  e048              B        |L41.280|
                  |L41.134|
;;;2621       }
;;;2622   
;;;2623       if(debug)
000086  b114              CBZ      r4,|L41.142|
;;;2624       	log_i("Retrieving ST Biases\n");
000088  a056              ADR      r0,|L41.484|
00008a  f7fffffe          BL       __2printf
                  |L41.142|
;;;2625   
;;;2626       for (ii = 0; ii < tries; ii++)
00008e  2500              MOVS     r5,#0
000090  e008              B        |L41.164|
                  |L41.146|
;;;2627           if (!get_st_6500_biases(gyro_st, accel_st, 1, debug))
000092  4623              MOV      r3,r4
000094  2201              MOVS     r2,#1
000096  a907              ADD      r1,sp,#0x1c
000098  a80a              ADD      r0,sp,#0x28
00009a  f7fffffe          BL       get_st_6500_biases
00009e  b900              CBNZ     r0,|L41.162|
;;;2628               break;
0000a0  e002              B        |L41.168|
                  |L41.162|
0000a2  1c6d              ADDS     r5,r5,#1              ;2626
                  |L41.164|
0000a4  2d02              CMP      r5,#2                 ;2626
0000a6  dbf4              BLT      |L41.146|
                  |L41.168|
0000a8  bf00              NOP      
;;;2629       if (ii == tries) {
0000aa  2d02              CMP      r5,#2
0000ac  d105              BNE      |L41.186|
;;;2630   
;;;2631           if(debug)
0000ae  b114              CBZ      r4,|L41.182|
;;;2632           	log_i("Retrieving ST Biases Error - possible I2C error\n");
0000b0  a052              ADR      r0,|L41.508|
0000b2  f7fffffe          BL       __2printf
                  |L41.182|
;;;2633   
;;;2634           /* Again, probably an I2C error. */
;;;2635           result = 0;
0000b6  2600              MOVS     r6,#0
;;;2636           goto restore;
0000b8  e02e              B        |L41.280|
                  |L41.186|
;;;2637       }
;;;2638   
;;;2639       accel_result = accel_6500_self_test(accel, accel_st, debug);
0000ba  4622              MOV      r2,r4
0000bc  a907              ADD      r1,sp,#0x1c
0000be  4658              MOV      r0,r11
0000c0  f7fffffe          BL       accel_6500_self_test
0000c4  b2c7              UXTB     r7,r0
;;;2640       if(debug)
0000c6  b11c              CBZ      r4,|L41.208|
;;;2641       	log_i("Accel Self Test Results: %d\n", accel_result);
0000c8  4639              MOV      r1,r7
0000ca  a059              ADR      r0,|L41.560|
0000cc  f7fffffe          BL       __2printf
                  |L41.208|
;;;2642   
;;;2643       gyro_result = gyro_6500_self_test(gyro, gyro_st, debug);
0000d0  4622              MOV      r2,r4
0000d2  a90a              ADD      r1,sp,#0x28
0000d4  980e              LDR      r0,[sp,#0x38]
0000d6  f7fffffe          BL       gyro_6500_self_test
0000da  f00008ff          AND      r8,r0,#0xff
;;;2644       if(debug)
0000de  b11c              CBZ      r4,|L41.232|
;;;2645       	log_i("Gyro Self Test Results: %d\n", gyro_result);
0000e0  4641              MOV      r1,r8
0000e2  a05b              ADR      r0,|L41.592|
0000e4  f7fffffe          BL       __2printf
                  |L41.232|
;;;2646   
;;;2647       result = 0;
0000e8  2600              MOVS     r6,#0
;;;2648       if (!gyro_result)
0000ea  f1b80f00          CMP      r8,#0
0000ee  d101              BNE      |L41.244|
;;;2649           result |= 0x01;
0000f0  f0460601          ORR      r6,r6,#1
                  |L41.244|
;;;2650       if (!accel_result)
0000f4  b90f              CBNZ     r7,|L41.250|
;;;2651           result |= 0x02;
0000f6  f0460602          ORR      r6,r6,#2
                  |L41.250|
;;;2652   
;;;2653   #ifdef AK89xx_SECONDARY
;;;2654       compass_result = compass_self_test();
0000fa  f7fffffe          BL       compass_self_test
0000fe  f00009ff          AND      r9,r0,#0xff
;;;2655       if(debug)
000102  b11c              CBZ      r4,|L41.268|
;;;2656       	log_i("Compass Self Test Results: %d\n", compass_result);
000104  4649              MOV      r1,r9
000106  a059              ADR      r0,|L41.620|
000108  f7fffffe          BL       __2printf
                  |L41.268|
;;;2657       if (!compass_result)
00010c  f1b90f00          CMP      r9,#0
000110  d101              BNE      |L41.278|
;;;2658           result |= 0x04;
000112  f0460604          ORR      r6,r6,#4
                  |L41.278|
;;;2659   #else
;;;2660       result |= 0x04;
;;;2661   #endif
;;;2662   restore:
000116  bf00              NOP      
                  |L41.280|
;;;2663   	if(debug)
000118  b114              CBZ      r4,|L41.288|
;;;2664   		log_i("Exiting HWST\n");
00011a  a05c              ADR      r0,|L41.652|
00011c  f7fffffe          BL       __2printf
                  |L41.288|
;;;2665   	/* Set to invalid values to ensure no I2C writes are skipped. */
;;;2666   	st.chip_cfg.gyro_fsr = 0xFF;
000120  20ff              MOVS     r0,#0xff
000122  491e              LDR      r1,|L41.412|
000124  7208              STRB     r0,[r1,#8]
;;;2667   	st.chip_cfg.accel_fsr = 0xFF;
000126  21ff              MOVS     r1,#0xff
000128  481c              LDR      r0,|L41.412|
00012a  7241              STRB     r1,[r0,#9]
;;;2668   	st.chip_cfg.lpf = 0xFF;
00012c  72c1              STRB     r1,[r0,#0xb]
;;;2669   	st.chip_cfg.sample_rate = 0xFFFF;
00012e  f64f71ff          MOV      r1,#0xffff
000132  81c1              STRH     r1,[r0,#0xe]
;;;2670   	st.chip_cfg.sensors = 0xFF;
000134  21ff              MOVS     r1,#0xff
000136  7281              STRB     r1,[r0,#0xa]
;;;2671   	st.chip_cfg.fifo_enable = 0xFF;
000138  7401              STRB     r1,[r0,#0x10]
;;;2672   	st.chip_cfg.clk_src = INV_CLK_PLL;
00013a  2101              MOVS     r1,#1
00013c  7301              STRB     r1,[r0,#0xc]
;;;2673   	mpu_set_gyro_fsr(gyro_fsr);
00013e  f8bd000c          LDRH     r0,[sp,#0xc]
000142  f7fffffe          BL       mpu_set_gyro_fsr
;;;2674   	mpu_set_accel_fsr(accel_fsr);
000146  f89d0018          LDRB     r0,[sp,#0x18]
00014a  f7fffffe          BL       mpu_set_accel_fsr
;;;2675   	mpu_set_lpf(lpf);
00014e  f8bd0004          LDRH     r0,[sp,#4]
000152  f7fffffe          BL       mpu_set_lpf
;;;2676   	mpu_set_sample_rate(sample_rate);
000156  f8bd0008          LDRH     r0,[sp,#8]
00015a  f7fffffe          BL       mpu_set_sample_rate
;;;2677   	mpu_set_sensors(sensors_on);
00015e  9804              LDR      r0,[sp,#0x10]
000160  f7fffffe          BL       mpu_set_sensors
;;;2678   	mpu_configure_fifo(fifo_sensors);
000164  f89d0014          LDRB     r0,[sp,#0x14]
000168  f7fffffe          BL       mpu_configure_fifo
;;;2679   
;;;2680   	if (dmp_was_on)
00016c  f1ba0f00          CMP      r10,#0
000170  d002              BEQ      |L41.376|
;;;2681   		mpu_set_dmp_state(1);
000172  2001              MOVS     r0,#1
000174  f7fffffe          BL       mpu_set_dmp_state
                  |L41.376|
;;;2682   
;;;2683   	return result;
000178  4630              MOV      r0,r6
;;;2684   }
00017a  b011              ADD      sp,sp,#0x44
00017c  e8bd8ff0          POP      {r4-r11,pc}
;;;2685   #endif
                          ENDP

                  |L41.384|
000180  53746172          DCB      "Starting MPU6500 HWST!\r\n",0
000184  74696e67
000188  204d5055
00018c  36353030
000190  20485753
000194  54210d0a
000198  00      
000199  00                DCB      0
00019a  00                DCB      0
00019b  00                DCB      0
                  |L41.412|
                          DCD      ||st||
                  |L41.416|
0001a0  52657472          DCB      "Retrieving Biases\r\n",0
0001a4  69657669
0001a8  6e672042
0001ac  69617365
0001b0  730d0a00
                  |L41.436|
0001b4  52657472          DCB      "Retrieving Biases Error - possible I2C error\n",0
0001b8  69657669
0001bc  6e672042
0001c0  69617365
0001c4  73204572
0001c8  726f7220
0001cc  2d20706f
0001d0  73736962
0001d4  6c652049
0001d8  32432065
0001dc  72726f72
0001e0  0a00    
0001e2  00                DCB      0
0001e3  00                DCB      0
                  |L41.484|
0001e4  52657472          DCB      "Retrieving ST Biases\n",0
0001e8  69657669
0001ec  6e672053
0001f0  54204269
0001f4  61736573
0001f8  0a00    
0001fa  00                DCB      0
0001fb  00                DCB      0
                  |L41.508|
0001fc  52657472          DCB      "Retrieving ST Biases Error - possible I2C error\n",0
000200  69657669
000204  6e672053
000208  54204269
00020c  61736573
000210  20457272
000214  6f72202d
000218  20706f73
00021c  7369626c
000220  65204932
000224  43206572
000228  726f720a
00022c  00      
00022d  00                DCB      0
00022e  00                DCB      0
00022f  00                DCB      0
                  |L41.560|
000230  41636365          DCB      "Accel Self Test Results: %d\n",0
000234  6c205365
000238  6c662054
00023c  65737420
000240  52657375
000244  6c74733a
000248  2025640a
00024c  00      
00024d  00                DCB      0
00024e  00                DCB      0
00024f  00                DCB      0
                  |L41.592|
000250  4779726f          DCB      "Gyro Self Test Results: %d\n",0
000254  2053656c
000258  66205465
00025c  73742052
000260  6573756c
000264  74733a20
000268  25640a00
                  |L41.620|
00026c  436f6d70          DCB      "Compass Self Test Results: %d\n",0
000270  61737320
000274  53656c66
000278  20546573
00027c  74205265
000280  73756c74
000284  733a2025
000288  640a00  
00028b  00                DCB      0
                  |L41.652|
00028c  45786974          DCB      "Exiting HWST\n",0
000290  696e6720
000294  48575354
000298  0a00    
00029a  00                DCB      0
00029b  00                DCB      0

                          AREA ||i.mpu_run_self_test||, CODE, READONLY, ALIGN=2

                  mpu_run_self_test PROC
;;;2692    */
;;;2693   int mpu_run_self_test(long *gyro, long *accel)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2694   {
000004  b086              SUB      sp,sp,#0x18
000006  4607              MOV      r7,r0
000008  4688              MOV      r8,r1
;;;2695   #ifdef MPU6050
;;;2696       const unsigned char tries = 2;
;;;2697       long gyro_st[3], accel_st[3];
;;;2698       unsigned char accel_result, gyro_result;
;;;2699   #ifdef AK89xx_SECONDARY
;;;2700       unsigned char compass_result;
;;;2701   #endif
;;;2702       int ii;
;;;2703   #endif
;;;2704       int result;
;;;2705       unsigned char accel_fsr, fifo_sensors, sensors_on;
;;;2706       unsigned short gyro_fsr, sample_rate, lpf;
;;;2707       unsigned char dmp_was_on;
;;;2708   
;;;2709       if (st.chip_cfg.dmp_on) {
00000a  4827              LDR      r0,|L42.168|
00000c  f8900024          LDRB     r0,[r0,#0x24]
000010  b120              CBZ      r0,|L42.28|
;;;2710           mpu_set_dmp_state(0);
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       mpu_set_dmp_state
;;;2711           dmp_was_on = 1;
000018  2401              MOVS     r4,#1
00001a  e000              B        |L42.30|
                  |L42.28|
;;;2712       } else
;;;2713           dmp_was_on = 0;
00001c  2400              MOVS     r4,#0
                  |L42.30|
;;;2714   
;;;2715       /* Get initial settings. */
;;;2716       mpu_get_gyro_fsr(&gyro_fsr);
00001e  a803              ADD      r0,sp,#0xc
000020  f7fffffe          BL       mpu_get_gyro_fsr
;;;2717       mpu_get_accel_fsr(&accel_fsr);
000024  a805              ADD      r0,sp,#0x14
000026  f7fffffe          BL       mpu_get_accel_fsr
;;;2718       mpu_get_lpf(&lpf);
00002a  a801              ADD      r0,sp,#4
00002c  f7fffffe          BL       mpu_get_lpf
;;;2719       mpu_get_sample_rate(&sample_rate);
000030  a802              ADD      r0,sp,#8
000032  f7fffffe          BL       mpu_get_sample_rate
;;;2720       sensors_on = st.chip_cfg.sensors;
000036  481c              LDR      r0,|L42.168|
000038  7a86              LDRB     r6,[r0,#0xa]
;;;2721       mpu_get_fifo_config(&fifo_sensors);
00003a  a804              ADD      r0,sp,#0x10
00003c  f7fffffe          BL       mpu_get_fifo_config
;;;2722   
;;;2723       /* For older chips, the self-test will be different. */
;;;2724   #if defined MPU6050
;;;2725       for (ii = 0; ii < tries; ii++)
;;;2726           if (!get_st_biases(gyro, accel, 0))
;;;2727               break;
;;;2728       if (ii == tries) {
;;;2729           /* If we reach this point, we most likely encountered an I2C error.
;;;2730            * We'll just report an error for all three sensors.
;;;2731            */
;;;2732           result = 0;
;;;2733           goto restore;
;;;2734       }
;;;2735       for (ii = 0; ii < tries; ii++)
;;;2736           if (!get_st_biases(gyro_st, accel_st, 1))
;;;2737               break;
;;;2738       if (ii == tries) {
;;;2739           /* Again, probably an I2C error. */
;;;2740           result = 0;
;;;2741           goto restore;
;;;2742       }
;;;2743       accel_result = accel_self_test(accel, accel_st);
;;;2744       gyro_result = gyro_self_test(gyro, gyro_st);
;;;2745   
;;;2746       result = 0;
;;;2747       if (!gyro_result)
;;;2748           result |= 0x01;
;;;2749       if (!accel_result)
;;;2750           result |= 0x02;
;;;2751   
;;;2752   #ifdef AK89xx_SECONDARY
;;;2753       compass_result = compass_self_test();
;;;2754       if (!compass_result)
;;;2755           result |= 0x04;
;;;2756   #else
;;;2757           result |= 0x04;
;;;2758   #endif
;;;2759   restore:
;;;2760   #elif defined MPU6500
;;;2761       /* For now, this function will return a "pass" result for all three sensors
;;;2762        * for compatibility with current test applications.
;;;2763        */
;;;2764       get_st_biases(gyro, accel, 0);
000040  2200              MOVS     r2,#0
000042  4641              MOV      r1,r8
000044  4638              MOV      r0,r7
000046  f7fffffe          BL       get_st_biases
;;;2765       result = 0x7;
00004a  2507              MOVS     r5,#7
;;;2766   #endif
;;;2767       /* Set to invalid values to ensure no I2C writes are skipped. */
;;;2768       st.chip_cfg.gyro_fsr = 0xFF;
00004c  20ff              MOVS     r0,#0xff
00004e  4916              LDR      r1,|L42.168|
000050  7208              STRB     r0,[r1,#8]
;;;2769       st.chip_cfg.accel_fsr = 0xFF;
000052  21ff              MOVS     r1,#0xff
000054  4814              LDR      r0,|L42.168|
000056  7241              STRB     r1,[r0,#9]
;;;2770       st.chip_cfg.lpf = 0xFF;
000058  72c1              STRB     r1,[r0,#0xb]
;;;2771       st.chip_cfg.sample_rate = 0xFFFF;
00005a  f64f71ff          MOV      r1,#0xffff
00005e  81c1              STRH     r1,[r0,#0xe]
;;;2772       st.chip_cfg.sensors = 0xFF;
000060  21ff              MOVS     r1,#0xff
000062  7281              STRB     r1,[r0,#0xa]
;;;2773       st.chip_cfg.fifo_enable = 0xFF;
000064  7401              STRB     r1,[r0,#0x10]
;;;2774       st.chip_cfg.clk_src = INV_CLK_PLL;
000066  2101              MOVS     r1,#1
000068  7301              STRB     r1,[r0,#0xc]
;;;2775       mpu_set_gyro_fsr(gyro_fsr);
00006a  f8bd000c          LDRH     r0,[sp,#0xc]
00006e  f7fffffe          BL       mpu_set_gyro_fsr
;;;2776       mpu_set_accel_fsr(accel_fsr);
000072  f89d0014          LDRB     r0,[sp,#0x14]
000076  f7fffffe          BL       mpu_set_accel_fsr
;;;2777       mpu_set_lpf(lpf);
00007a  f8bd0004          LDRH     r0,[sp,#4]
00007e  f7fffffe          BL       mpu_set_lpf
;;;2778       mpu_set_sample_rate(sample_rate);
000082  f8bd0008          LDRH     r0,[sp,#8]
000086  f7fffffe          BL       mpu_set_sample_rate
;;;2779       mpu_set_sensors(sensors_on);
00008a  4630              MOV      r0,r6
00008c  f7fffffe          BL       mpu_set_sensors
;;;2780       mpu_configure_fifo(fifo_sensors);
000090  f89d0010          LDRB     r0,[sp,#0x10]
000094  f7fffffe          BL       mpu_configure_fifo
;;;2781   
;;;2782       if (dmp_was_on)
000098  b114              CBZ      r4,|L42.160|
;;;2783           mpu_set_dmp_state(1);
00009a  2001              MOVS     r0,#1
00009c  f7fffffe          BL       mpu_set_dmp_state
                  |L42.160|
;;;2784   
;;;2785       return result;
0000a0  4628              MOV      r0,r5
;;;2786   }
0000a2  b006              ADD      sp,sp,#0x18
0000a4  e8bd81f0          POP      {r4-r8,pc}
;;;2787   
                          ENDP

                  |L42.168|
                          DCD      ||st||

                          AREA ||i.mpu_set_accel_bias_6050_reg||, CODE, READONLY, ALIGN=2

                  mpu_set_accel_bias_6050_reg PROC
;;;1068    */
;;;1069   int mpu_set_accel_bias_6050_reg(const long *accel_bias) {
000000  b510              PUSH     {r4,lr}
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;1070       unsigned char data[6] = {0, 0, 0, 0, 0, 0};
000006  2000              MOVS     r0,#0
000008  9004              STR      r0,[sp,#0x10]
00000a  9005              STR      r0,[sp,#0x14]
;;;1071       long accel_reg_bias[3] = {0, 0, 0};
00000c  9001              STR      r0,[sp,#4]
00000e  9002              STR      r0,[sp,#8]
000010  9003              STR      r0,[sp,#0xc]
;;;1072   
;;;1073       if(mpu_read_6050_accel_bias(accel_reg_bias))
000012  a801              ADD      r0,sp,#4
000014  f7fffffe          BL       mpu_read_6050_accel_bias
000018  b118              CBZ      r0,|L43.34|
;;;1074           return -1;
00001a  f04f30ff          MOV      r0,#0xffffffff
                  |L43.30|
;;;1075   
;;;1076       accel_reg_bias[0] -= (accel_bias[0] & ~1);
;;;1077       accel_reg_bias[1] -= (accel_bias[1] & ~1);
;;;1078       accel_reg_bias[2] -= (accel_bias[2] & ~1);
;;;1079   
;;;1080       data[0] = (accel_reg_bias[0] >> 8) & 0xff;
;;;1081       data[1] = (accel_reg_bias[0]) & 0xff;
;;;1082       data[2] = (accel_reg_bias[1] >> 8) & 0xff;
;;;1083       data[3] = (accel_reg_bias[1]) & 0xff;
;;;1084       data[4] = (accel_reg_bias[2] >> 8) & 0xff;
;;;1085       data[5] = (accel_reg_bias[2]) & 0xff;
;;;1086   
;;;1087       if (i2c_write(st.hw->addr, 0x06, 2, &data[0]))
;;;1088           return -1;
;;;1089       if (i2c_write(st.hw->addr, 0x08, 2, &data[2]))
;;;1090           return -1;
;;;1091       if (i2c_write(st.hw->addr, 0x0A, 2, &data[4]))
;;;1092           return -1;
;;;1093   
;;;1094       return 0;
;;;1095   }
00001e  b006              ADD      sp,sp,#0x18
000020  bd10              POP      {r4,pc}
                  |L43.34|
000022  9801              LDR      r0,[sp,#4]            ;1076
000024  6821              LDR      r1,[r4,#0]            ;1076
000026  f0210101          BIC      r1,r1,#1              ;1076
00002a  1a40              SUBS     r0,r0,r1              ;1076
00002c  9001              STR      r0,[sp,#4]            ;1076
00002e  9802              LDR      r0,[sp,#8]            ;1077
000030  6861              LDR      r1,[r4,#4]            ;1077
000032  f0210101          BIC      r1,r1,#1              ;1077
000036  1a40              SUBS     r0,r0,r1              ;1077
000038  9002              STR      r0,[sp,#8]            ;1077
00003a  9803              LDR      r0,[sp,#0xc]          ;1078
00003c  68a1              LDR      r1,[r4,#8]            ;1078
00003e  f0210101          BIC      r1,r1,#1              ;1078
000042  1a40              SUBS     r0,r0,r1              ;1078
000044  9003              STR      r0,[sp,#0xc]          ;1078
000046  9801              LDR      r0,[sp,#4]            ;1080
000048  0a00              LSRS     r0,r0,#8              ;1080
00004a  f88d0010          STRB     r0,[sp,#0x10]         ;1080
00004e  9801              LDR      r0,[sp,#4]            ;1081
000050  b2c0              UXTB     r0,r0                 ;1081
000052  f88d0011          STRB     r0,[sp,#0x11]         ;1081
000056  9802              LDR      r0,[sp,#8]            ;1082
000058  0a00              LSRS     r0,r0,#8              ;1082
00005a  f88d0012          STRB     r0,[sp,#0x12]         ;1082
00005e  9802              LDR      r0,[sp,#8]            ;1083
000060  b2c0              UXTB     r0,r0                 ;1083
000062  f88d0013          STRB     r0,[sp,#0x13]         ;1083
000066  9803              LDR      r0,[sp,#0xc]          ;1084
000068  0a00              LSRS     r0,r0,#8              ;1084
00006a  f88d0014          STRB     r0,[sp,#0x14]         ;1084
00006e  9803              LDR      r0,[sp,#0xc]          ;1085
000070  b2c0              UXTB     r0,r0                 ;1085
000072  f88d0015          STRB     r0,[sp,#0x15]         ;1085
000076  4913              LDR      r1,|L43.196|
000078  6849              LDR      r1,[r1,#4]            ;1087  ; st
00007a  7808              LDRB     r0,[r1,#0]            ;1087
00007c  ab04              ADD      r3,sp,#0x10           ;1087
00007e  2202              MOVS     r2,#2                 ;1087
000080  2106              MOVS     r1,#6                 ;1087
000082  f7fffffe          BL       MPU_Write_Len
000086  b110              CBZ      r0,|L43.142|
000088  f04f30ff          MOV      r0,#0xffffffff        ;1088
00008c  e7c7              B        |L43.30|
                  |L43.142|
00008e  490d              LDR      r1,|L43.196|
000090  6849              LDR      r1,[r1,#4]            ;1089  ; st
000092  7808              LDRB     r0,[r1,#0]            ;1089
000094  f10d0312          ADD      r3,sp,#0x12           ;1089
000098  2202              MOVS     r2,#2                 ;1089
00009a  2108              MOVS     r1,#8                 ;1089
00009c  f7fffffe          BL       MPU_Write_Len
0000a0  b110              CBZ      r0,|L43.168|
0000a2  f04f30ff          MOV      r0,#0xffffffff        ;1090
0000a6  e7ba              B        |L43.30|
                  |L43.168|
0000a8  4906              LDR      r1,|L43.196|
0000aa  6849              LDR      r1,[r1,#4]            ;1091  ; st
0000ac  7808              LDRB     r0,[r1,#0]            ;1091
0000ae  ab05              ADD      r3,sp,#0x14           ;1091
0000b0  2202              MOVS     r2,#2                 ;1091
0000b2  210a              MOVS     r1,#0xa               ;1091
0000b4  f7fffffe          BL       MPU_Write_Len
0000b8  b110              CBZ      r0,|L43.192|
0000ba  f04f30ff          MOV      r0,#0xffffffff        ;1092
0000be  e7ae              B        |L43.30|
                  |L43.192|
0000c0  2000              MOVS     r0,#0                 ;1094
0000c2  e7ac              B        |L43.30|
;;;1096   
                          ENDP

                  |L43.196|
                          DCD      ||st||

                          AREA ||i.mpu_set_accel_bias_6500_reg||, CODE, READONLY, ALIGN=2

                  mpu_set_accel_bias_6500_reg PROC
;;;1106    */
;;;1107   int mpu_set_accel_bias_6500_reg(const long *accel_bias) {
000000  b510              PUSH     {r4,lr}
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;1108       unsigned char data[6] = {0, 0, 0, 0, 0, 0};
000006  2000              MOVS     r0,#0
000008  9004              STR      r0,[sp,#0x10]
00000a  9005              STR      r0,[sp,#0x14]
;;;1109       long accel_reg_bias[3] = {0, 0, 0};
00000c  9001              STR      r0,[sp,#4]
00000e  9002              STR      r0,[sp,#8]
000010  9003              STR      r0,[sp,#0xc]
;;;1110   
;;;1111       if(mpu_read_6500_accel_bias(accel_reg_bias))
000012  a801              ADD      r0,sp,#4
000014  f7fffffe          BL       mpu_read_6500_accel_bias
000018  b118              CBZ      r0,|L44.34|
;;;1112           return -1;
00001a  f04f30ff          MOV      r0,#0xffffffff
                  |L44.30|
;;;1113   
;;;1114       // Preserve bit 0 of factory value (for temperature compensation)
;;;1115       accel_reg_bias[0] -= (accel_bias[0] & ~1);
;;;1116       accel_reg_bias[1] -= (accel_bias[1] & ~1);
;;;1117       accel_reg_bias[2] -= (accel_bias[2] & ~1);
;;;1118   
;;;1119       data[0] = (accel_reg_bias[0] >> 8) & 0xff;
;;;1120       data[1] = (accel_reg_bias[0]) & 0xff;
;;;1121       data[2] = (accel_reg_bias[1] >> 8) & 0xff;
;;;1122       data[3] = (accel_reg_bias[1]) & 0xff;
;;;1123       data[4] = (accel_reg_bias[2] >> 8) & 0xff;
;;;1124       data[5] = (accel_reg_bias[2]) & 0xff;
;;;1125   
;;;1126       if (i2c_write(st.hw->addr, 0x77, 2, &data[0]))
;;;1127           return -1;
;;;1128       if (i2c_write(st.hw->addr, 0x7A, 2, &data[2]))
;;;1129           return -1;
;;;1130       if (i2c_write(st.hw->addr, 0x7D, 2, &data[4]))
;;;1131           return -1;
;;;1132   
;;;1133       return 0;
;;;1134   }
00001e  b006              ADD      sp,sp,#0x18
000020  bd10              POP      {r4,pc}
                  |L44.34|
000022  9801              LDR      r0,[sp,#4]            ;1115
000024  6821              LDR      r1,[r4,#0]            ;1115
000026  f0210101          BIC      r1,r1,#1              ;1115
00002a  1a40              SUBS     r0,r0,r1              ;1115
00002c  9001              STR      r0,[sp,#4]            ;1115
00002e  9802              LDR      r0,[sp,#8]            ;1116
000030  6861              LDR      r1,[r4,#4]            ;1116
000032  f0210101          BIC      r1,r1,#1              ;1116
000036  1a40              SUBS     r0,r0,r1              ;1116
000038  9002              STR      r0,[sp,#8]            ;1116
00003a  9803              LDR      r0,[sp,#0xc]          ;1117
00003c  68a1              LDR      r1,[r4,#8]            ;1117
00003e  f0210101          BIC      r1,r1,#1              ;1117
000042  1a40              SUBS     r0,r0,r1              ;1117
000044  9003              STR      r0,[sp,#0xc]          ;1117
000046  9801              LDR      r0,[sp,#4]            ;1119
000048  0a00              LSRS     r0,r0,#8              ;1119
00004a  f88d0010          STRB     r0,[sp,#0x10]         ;1119
00004e  9801              LDR      r0,[sp,#4]            ;1120
000050  b2c0              UXTB     r0,r0                 ;1120
000052  f88d0011          STRB     r0,[sp,#0x11]         ;1120
000056  9802              LDR      r0,[sp,#8]            ;1121
000058  0a00              LSRS     r0,r0,#8              ;1121
00005a  f88d0012          STRB     r0,[sp,#0x12]         ;1121
00005e  9802              LDR      r0,[sp,#8]            ;1122
000060  b2c0              UXTB     r0,r0                 ;1122
000062  f88d0013          STRB     r0,[sp,#0x13]         ;1122
000066  9803              LDR      r0,[sp,#0xc]          ;1123
000068  0a00              LSRS     r0,r0,#8              ;1123
00006a  f88d0014          STRB     r0,[sp,#0x14]         ;1123
00006e  9803              LDR      r0,[sp,#0xc]          ;1124
000070  b2c0              UXTB     r0,r0                 ;1124
000072  f88d0015          STRB     r0,[sp,#0x15]         ;1124
000076  4913              LDR      r1,|L44.196|
000078  6849              LDR      r1,[r1,#4]            ;1126  ; st
00007a  7808              LDRB     r0,[r1,#0]            ;1126
00007c  ab04              ADD      r3,sp,#0x10           ;1126
00007e  2202              MOVS     r2,#2                 ;1126
000080  2177              MOVS     r1,#0x77              ;1126
000082  f7fffffe          BL       MPU_Write_Len
000086  b110              CBZ      r0,|L44.142|
000088  f04f30ff          MOV      r0,#0xffffffff        ;1127
00008c  e7c7              B        |L44.30|
                  |L44.142|
00008e  490d              LDR      r1,|L44.196|
000090  6849              LDR      r1,[r1,#4]            ;1128  ; st
000092  7808              LDRB     r0,[r1,#0]            ;1128
000094  f10d0312          ADD      r3,sp,#0x12           ;1128
000098  2202              MOVS     r2,#2                 ;1128
00009a  217a              MOVS     r1,#0x7a              ;1128
00009c  f7fffffe          BL       MPU_Write_Len
0000a0  b110              CBZ      r0,|L44.168|
0000a2  f04f30ff          MOV      r0,#0xffffffff        ;1129
0000a6  e7ba              B        |L44.30|
                  |L44.168|
0000a8  4906              LDR      r1,|L44.196|
0000aa  6849              LDR      r1,[r1,#4]            ;1130  ; st
0000ac  7808              LDRB     r0,[r1,#0]            ;1130
0000ae  ab05              ADD      r3,sp,#0x14           ;1130
0000b0  2202              MOVS     r2,#2                 ;1130
0000b2  217d              MOVS     r1,#0x7d              ;1130
0000b4  f7fffffe          BL       MPU_Write_Len
0000b8  b110              CBZ      r0,|L44.192|
0000ba  f04f30ff          MOV      r0,#0xffffffff        ;1131
0000be  e7ae              B        |L44.30|
                  |L44.192|
0000c0  2000              MOVS     r0,#0                 ;1133
0000c2  e7ac              B        |L44.30|
;;;1135   
                          ENDP

                  |L44.196|
                          DCD      ||st||

                          AREA ||i.mpu_set_accel_fsr||, CODE, READONLY, ALIGN=2

                  mpu_set_accel_fsr PROC
;;;1294    */
;;;1295   int mpu_set_accel_fsr(unsigned char fsr)
000000  b538              PUSH     {r3-r5,lr}
;;;1296   {
000002  4604              MOV      r4,r0
;;;1297       unsigned char data;
;;;1298   
;;;1299       if (!(st.chip_cfg.sensors))
000004  481e              LDR      r0,|L45.128|
000006  7a80              LDRB     r0,[r0,#0xa]
000008  b910              CBNZ     r0,|L45.16|
;;;1300           return -1;
00000a  f04f30ff          MOV      r0,#0xffffffff
                  |L45.14|
;;;1301   
;;;1302       switch (fsr) {
;;;1303       case 2:
;;;1304           data = INV_FSR_2G << 3;
;;;1305           break;
;;;1306       case 4:
;;;1307           data = INV_FSR_4G << 3;
;;;1308           break;
;;;1309       case 8:
;;;1310           data = INV_FSR_8G << 3;
;;;1311           break;
;;;1312       case 16:
;;;1313           data = INV_FSR_16G << 3;
;;;1314           break;
;;;1315       default:
;;;1316           return -1;
;;;1317       }
;;;1318   
;;;1319       if (st.chip_cfg.accel_fsr == (data >> 3))
;;;1320           return 0;
;;;1321       if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
;;;1322           return -1;
;;;1323       st.chip_cfg.accel_fsr = data >> 3;
;;;1324       return 0;
;;;1325   }
00000e  bd38              POP      {r3-r5,pc}
                  |L45.16|
000010  2c02              CMP      r4,#2                 ;1302
000012  d006              BEQ      |L45.34|
000014  2c04              CMP      r4,#4                 ;1302
000016  d007              BEQ      |L45.40|
000018  2c08              CMP      r4,#8                 ;1302
00001a  d008              BEQ      |L45.46|
00001c  2c10              CMP      r4,#0x10              ;1302
00001e  d10c              BNE      |L45.58|
000020  e008              B        |L45.52|
                  |L45.34|
000022  2000              MOVS     r0,#0                 ;1304
000024  9000              STR      r0,[sp,#0]            ;1304
000026  e00b              B        |L45.64|
                  |L45.40|
000028  2008              MOVS     r0,#8                 ;1307
00002a  9000              STR      r0,[sp,#0]            ;1307
00002c  e008              B        |L45.64|
                  |L45.46|
00002e  2010              MOVS     r0,#0x10              ;1310
000030  9000              STR      r0,[sp,#0]            ;1310
000032  e005              B        |L45.64|
                  |L45.52|
000034  2018              MOVS     r0,#0x18              ;1313
000036  9000              STR      r0,[sp,#0]            ;1313
000038  e002              B        |L45.64|
                  |L45.58|
00003a  f04f30ff          MOV      r0,#0xffffffff        ;1316
00003e  e7e6              B        |L45.14|
                  |L45.64|
000040  bf00              NOP                            ;1305
000042  480f              LDR      r0,|L45.128|
000044  7a40              LDRB     r0,[r0,#9]            ;1319
000046  f89d1000          LDRB     r1,[sp,#0]            ;1319
00004a  ebb00fe1          CMP      r0,r1,ASR #3          ;1319
00004e  d101              BNE      |L45.84|
000050  2000              MOVS     r0,#0                 ;1320
000052  e7dc              B        |L45.14|
                  |L45.84|
000054  4a0a              LDR      r2,|L45.128|
000056  6812              LDR      r2,[r2,#0]            ;1321  ; st
000058  79d1              LDRB     r1,[r2,#7]            ;1321
00005a  4a09              LDR      r2,|L45.128|
00005c  6852              LDR      r2,[r2,#4]            ;1321  ; st
00005e  7810              LDRB     r0,[r2,#0]            ;1321
000060  466b              MOV      r3,sp                 ;1321
000062  2201              MOVS     r2,#1                 ;1321
000064  f7fffffe          BL       MPU_Write_Len
000068  b110              CBZ      r0,|L45.112|
00006a  f04f30ff          MOV      r0,#0xffffffff        ;1322
00006e  e7ce              B        |L45.14|
                  |L45.112|
000070  f89d0000          LDRB     r0,[sp,#0]            ;1323
000074  10c1              ASRS     r1,r0,#3              ;1323
000076  4802              LDR      r0,|L45.128|
000078  7241              STRB     r1,[r0,#9]            ;1323
00007a  2000              MOVS     r0,#0                 ;1324
00007c  e7c7              B        |L45.14|
;;;1326   
                          ENDP

00007e  0000              DCW      0x0000
                  |L45.128|
                          DCD      ||st||

                          AREA ||i.mpu_set_bypass||, CODE, READONLY, ALIGN=2

                  mpu_set_bypass PROC
;;;1865    */
;;;1866   int mpu_set_bypass(unsigned char bypass_on)
000000  b538              PUSH     {r3-r5,lr}
;;;1867   {
000002  4604              MOV      r4,r0
;;;1868       unsigned char tmp;
;;;1869   
;;;1870       if (st.chip_cfg.bypass_mode == bypass_on)
000004  4850              LDR      r0,|L46.328|
000006  7c80              LDRB     r0,[r0,#0x12]
000008  42a0              CMP      r0,r4
00000a  d101              BNE      |L46.16|
;;;1871           return 0;
00000c  2000              MOVS     r0,#0
                  |L46.14|
;;;1872   
;;;1873       if (bypass_on) {
;;;1874           if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
;;;1875               return -1;
;;;1876           tmp &= ~BIT_AUX_IF_EN;
;;;1877           if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
;;;1878               return -1;
;;;1879           delay_ms(3);
;;;1880           tmp = BIT_BYPASS_EN;
;;;1881           if (st.chip_cfg.active_low_int)
;;;1882               tmp |= BIT_ACTL;
;;;1883           if (st.chip_cfg.latched_int)
;;;1884               tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
;;;1885           if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
;;;1886               return -1;
;;;1887       } else {
;;;1888           /* Enable I2C master mode if compass is being used. */
;;;1889           if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
;;;1890               return -1;
;;;1891           if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
;;;1892               tmp |= BIT_AUX_IF_EN;
;;;1893           else
;;;1894               tmp &= ~BIT_AUX_IF_EN;
;;;1895           if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
;;;1896               return -1;
;;;1897           delay_ms(3);
;;;1898           if (st.chip_cfg.active_low_int)
;;;1899               tmp = BIT_ACTL;
;;;1900           else
;;;1901               tmp = 0;
;;;1902           if (st.chip_cfg.latched_int)
;;;1903               tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
;;;1904           if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
;;;1905               return -1;
;;;1906       }
;;;1907       st.chip_cfg.bypass_mode = bypass_on;
;;;1908       return 0;
;;;1909   }
00000e  bd38              POP      {r3-r5,pc}
                  |L46.16|
000010  2c00              CMP      r4,#0                 ;1873
000012  d046              BEQ      |L46.162|
000014  4a4c              LDR      r2,|L46.328|
000016  6812              LDR      r2,[r2,#0]            ;1874  ; st
000018  7911              LDRB     r1,[r2,#4]            ;1874
00001a  4a4b              LDR      r2,|L46.328|
00001c  6852              LDR      r2,[r2,#4]            ;1874  ; st
00001e  7810              LDRB     r0,[r2,#0]            ;1874
000020  466b              MOV      r3,sp                 ;1874
000022  2201              MOVS     r2,#1                 ;1874
000024  f7fffffe          BL       MPU_Read_Len
000028  b110              CBZ      r0,|L46.48|
00002a  f04f30ff          MOV      r0,#0xffffffff        ;1875
00002e  e7ee              B        |L46.14|
                  |L46.48|
000030  f89d0000          LDRB     r0,[sp,#0]            ;1876
000034  f0200020          BIC      r0,r0,#0x20           ;1876
000038  9000              STR      r0,[sp,#0]            ;1876
00003a  4a43              LDR      r2,|L46.328|
00003c  6812              LDR      r2,[r2,#0]            ;1877  ; st
00003e  7911              LDRB     r1,[r2,#4]            ;1877
000040  4a41              LDR      r2,|L46.328|
000042  6852              LDR      r2,[r2,#4]            ;1877  ; st
000044  7810              LDRB     r0,[r2,#0]            ;1877
000046  466b              MOV      r3,sp                 ;1877
000048  2201              MOVS     r2,#1                 ;1877
00004a  f7fffffe          BL       MPU_Write_Len
00004e  b110              CBZ      r0,|L46.86|
000050  f04f30ff          MOV      r0,#0xffffffff        ;1878
000054  e7db              B        |L46.14|
                  |L46.86|
000056  2003              MOVS     r0,#3                 ;1879
000058  f7fffffe          BL       delay_ms
00005c  2002              MOVS     r0,#2                 ;1880
00005e  9000              STR      r0,[sp,#0]            ;1880
000060  4839              LDR      r0,|L46.328|
000062  f8900022          LDRB     r0,[r0,#0x22]         ;1881
000066  b120              CBZ      r0,|L46.114|
000068  f89d0000          LDRB     r0,[sp,#0]            ;1882
00006c  f0400080          ORR      r0,r0,#0x80           ;1882
000070  9000              STR      r0,[sp,#0]            ;1882
                  |L46.114|
000072  4835              LDR      r0,|L46.328|
000074  f8900023          LDRB     r0,[r0,#0x23]         ;1883
000078  b120              CBZ      r0,|L46.132|
00007a  f89d0000          LDRB     r0,[sp,#0]            ;1884
00007e  f0400030          ORR      r0,r0,#0x30           ;1884
000082  9000              STR      r0,[sp,#0]            ;1884
                  |L46.132|
000084  4a30              LDR      r2,|L46.328|
000086  6812              LDR      r2,[r2,#0]            ;1885  ; st
000088  7dd1              LDRB     r1,[r2,#0x17]         ;1885
00008a  4a2f              LDR      r2,|L46.328|
00008c  6852              LDR      r2,[r2,#4]            ;1885  ; st
00008e  7810              LDRB     r0,[r2,#0]            ;1885
000090  466b              MOV      r3,sp                 ;1885
000092  2201              MOVS     r2,#1                 ;1885
000094  f7fffffe          BL       MPU_Write_Len
000098  2800              CMP      r0,#0                 ;1885
00009a  d051              BEQ      |L46.320|
00009c  f04f30ff          MOV      r0,#0xffffffff        ;1886
0000a0  e7b5              B        |L46.14|
                  |L46.162|
0000a2  4a29              LDR      r2,|L46.328|
0000a4  6812              LDR      r2,[r2,#0]            ;1889  ; st
0000a6  7911              LDRB     r1,[r2,#4]            ;1889
0000a8  4a27              LDR      r2,|L46.328|
0000aa  6852              LDR      r2,[r2,#4]            ;1889  ; st
0000ac  7810              LDRB     r0,[r2,#0]            ;1889
0000ae  466b              MOV      r3,sp                 ;1889
0000b0  2201              MOVS     r2,#1                 ;1889
0000b2  f7fffffe          BL       MPU_Read_Len
0000b6  b110              CBZ      r0,|L46.190|
0000b8  f04f30ff          MOV      r0,#0xffffffff        ;1890
0000bc  e7a7              B        |L46.14|
                  |L46.190|
0000be  4822              LDR      r0,|L46.328|
0000c0  7a80              LDRB     r0,[r0,#0xa]          ;1891
0000c2  f0000001          AND      r0,r0,#1              ;1891
0000c6  b128              CBZ      r0,|L46.212|
0000c8  f89d0000          LDRB     r0,[sp,#0]            ;1892
0000cc  f0400020          ORR      r0,r0,#0x20           ;1892
0000d0  9000              STR      r0,[sp,#0]            ;1892
0000d2  e004              B        |L46.222|
                  |L46.212|
0000d4  f89d0000          LDRB     r0,[sp,#0]            ;1894
0000d8  f0200020          BIC      r0,r0,#0x20           ;1894
0000dc  9000              STR      r0,[sp,#0]            ;1894
                  |L46.222|
0000de  4a1a              LDR      r2,|L46.328|
0000e0  6812              LDR      r2,[r2,#0]            ;1895  ; st
0000e2  7911              LDRB     r1,[r2,#4]            ;1895
0000e4  4a18              LDR      r2,|L46.328|
0000e6  6852              LDR      r2,[r2,#4]            ;1895  ; st
0000e8  7810              LDRB     r0,[r2,#0]            ;1895
0000ea  466b              MOV      r3,sp                 ;1895
0000ec  2201              MOVS     r2,#1                 ;1895
0000ee  f7fffffe          BL       MPU_Write_Len
0000f2  b110              CBZ      r0,|L46.250|
0000f4  f04f30ff          MOV      r0,#0xffffffff        ;1896
0000f8  e789              B        |L46.14|
                  |L46.250|
0000fa  2003              MOVS     r0,#3                 ;1897
0000fc  f7fffffe          BL       delay_ms
000100  4811              LDR      r0,|L46.328|
000102  f8900022          LDRB     r0,[r0,#0x22]         ;1898
000106  b110              CBZ      r0,|L46.270|
000108  2080              MOVS     r0,#0x80              ;1899
00010a  9000              STR      r0,[sp,#0]            ;1899
00010c  e001              B        |L46.274|
                  |L46.270|
00010e  2000              MOVS     r0,#0                 ;1901
000110  9000              STR      r0,[sp,#0]            ;1901
                  |L46.274|
000112  480d              LDR      r0,|L46.328|
000114  f8900023          LDRB     r0,[r0,#0x23]         ;1902
000118  b120              CBZ      r0,|L46.292|
00011a  f89d0000          LDRB     r0,[sp,#0]            ;1903
00011e  f0400030          ORR      r0,r0,#0x30           ;1903
000122  9000              STR      r0,[sp,#0]            ;1903
                  |L46.292|
000124  4a08              LDR      r2,|L46.328|
000126  6812              LDR      r2,[r2,#0]            ;1904  ; st
000128  7dd1              LDRB     r1,[r2,#0x17]         ;1904
00012a  4a07              LDR      r2,|L46.328|
00012c  6852              LDR      r2,[r2,#4]            ;1904  ; st
00012e  7810              LDRB     r0,[r2,#0]            ;1904
000130  466b              MOV      r3,sp                 ;1904
000132  2201              MOVS     r2,#1                 ;1904
000134  f7fffffe          BL       MPU_Write_Len
000138  b110              CBZ      r0,|L46.320|
00013a  f04f30ff          MOV      r0,#0xffffffff        ;1905
00013e  e766              B        |L46.14|
                  |L46.320|
000140  4801              LDR      r0,|L46.328|
000142  7484              STRB     r4,[r0,#0x12]         ;1907
000144  2000              MOVS     r0,#0                 ;1908
000146  e762              B        |L46.14|
;;;1910   
                          ENDP

                  |L46.328|
                          DCD      ||st||

                          AREA ||i.mpu_set_compass_sample_rate||, CODE, READONLY, ALIGN=2

                  mpu_set_compass_sample_rate PROC
;;;1484    */
;;;1485   int mpu_set_compass_sample_rate(unsigned short rate)
000000  b538              PUSH     {r3-r5,lr}
;;;1486   {
000002  4604              MOV      r4,r0
;;;1487   #ifdef AK89xx_SECONDARY
;;;1488       unsigned char div;
;;;1489       if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
000004  b12c              CBZ      r4,|L47.18|
000006  4815              LDR      r0,|L47.92|
000008  89c0              LDRH     r0,[r0,#0xe]
00000a  42a0              CMP      r0,r4
00000c  db01              BLT      |L47.18|
00000e  2c64              CMP      r4,#0x64
000010  dd02              BLE      |L47.24|
                  |L47.18|
;;;1490           return -1;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L47.22|
;;;1491   
;;;1492       div = st.chip_cfg.sample_rate / rate - 1;
;;;1493       if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
;;;1494           return -1;
;;;1495       st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
;;;1496       return 0;
;;;1497   #else
;;;1498       return -1;
;;;1499   #endif
;;;1500   }
000016  bd38              POP      {r3-r5,pc}
                  |L47.24|
000018  4810              LDR      r0,|L47.92|
00001a  89c0              LDRH     r0,[r0,#0xe]          ;1492
00001c  fb90f0f4          SDIV     r0,r0,r4              ;1492
000020  1e40              SUBS     r0,r0,#1              ;1492
000022  b2c0              UXTB     r0,r0                 ;1492
000024  9000              STR      r0,[sp,#0]            ;1492
000026  4a0d              LDR      r2,|L47.92|
000028  6812              LDR      r2,[r2,#0]            ;1493  ; st
00002a  f8921024          LDRB     r1,[r2,#0x24]         ;1493
00002e  4a0b              LDR      r2,|L47.92|
000030  6852              LDR      r2,[r2,#4]            ;1493  ; st
000032  7810              LDRB     r0,[r2,#0]            ;1493
000034  466b              MOV      r3,sp                 ;1493
000036  2201              MOVS     r2,#1                 ;1493
000038  f7fffffe          BL       MPU_Write_Len
00003c  b110              CBZ      r0,|L47.68|
00003e  f04f30ff          MOV      r0,#0xffffffff        ;1494
000042  e7e8              B        |L47.22|
                  |L47.68|
000044  4805              LDR      r0,|L47.92|
000046  89c1              LDRH     r1,[r0,#0xe]          ;1495
000048  f89d0000          LDRB     r0,[sp,#0]            ;1495
00004c  1c40              ADDS     r0,r0,#1              ;1495
00004e  fb91f0f0          SDIV     r0,r1,r0              ;1495
000052  b281              UXTH     r1,r0                 ;1495
000054  4801              LDR      r0,|L47.92|
000056  8501              STRH     r1,[r0,#0x28]         ;1495
000058  2000              MOVS     r0,#0                 ;1496
00005a  e7dc              B        |L47.22|
;;;1501   
                          ENDP

                  |L47.92|
                          DCD      ||st||

                          AREA ||i.mpu_set_dmp_state||, CODE, READONLY, ALIGN=2

                  mpu_set_dmp_state PROC
;;;2902    */
;;;2903   int mpu_set_dmp_state(unsigned char enable)
000000  b538              PUSH     {r3-r5,lr}
;;;2904   {
000002  4604              MOV      r4,r0
;;;2905       unsigned char tmp;
;;;2906       if (st.chip_cfg.dmp_on == enable)
000004  4821              LDR      r0,|L48.140|
000006  f8900024          LDRB     r0,[r0,#0x24]
00000a  42a0              CMP      r0,r4
00000c  d101              BNE      |L48.18|
;;;2907           return 0;
00000e  2000              MOVS     r0,#0
                  |L48.16|
;;;2908   
;;;2909       if (enable) {
;;;2910           if (!st.chip_cfg.dmp_loaded)
;;;2911               return -1;
;;;2912           /* Disable data ready interrupt. */
;;;2913           set_int_enable(0);
;;;2914           /* Disable bypass mode. */
;;;2915           mpu_set_bypass(0);
;;;2916           /* Keep constant sample rate, FIFO rate controlled by DMP. */
;;;2917           mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
;;;2918           /* Remove FIFO elements. */
;;;2919           tmp = 0;
;;;2920           i2c_write(st.hw->addr, 0x23, 1, &tmp);
;;;2921           st.chip_cfg.dmp_on = 1;
;;;2922           /* Enable DMP interrupt. */
;;;2923           set_int_enable(1);
;;;2924           mpu_reset_fifo();
;;;2925       } else {
;;;2926           /* Disable DMP interrupt. */
;;;2927           set_int_enable(0);
;;;2928           /* Restore FIFO settings. */
;;;2929           tmp = st.chip_cfg.fifo_enable;
;;;2930           i2c_write(st.hw->addr, 0x23, 1, &tmp);
;;;2931           st.chip_cfg.dmp_on = 0;
;;;2932           mpu_reset_fifo();
;;;2933       }
;;;2934       return 0;
;;;2935   }
000010  bd38              POP      {r3-r5,pc}
                  |L48.18|
000012  b324              CBZ      r4,|L48.94|
000014  481d              LDR      r0,|L48.140|
000016  f8900025          LDRB     r0,[r0,#0x25]         ;2910
00001a  b910              CBNZ     r0,|L48.34|
00001c  f04f30ff          MOV      r0,#0xffffffff        ;2911
000020  e7f6              B        |L48.16|
                  |L48.34|
000022  2000              MOVS     r0,#0                 ;2913
000024  f7fffffe          BL       set_int_enable
000028  2000              MOVS     r0,#0                 ;2915
00002a  f7fffffe          BL       mpu_set_bypass
00002e  4917              LDR      r1,|L48.140|
000030  8cc8              LDRH     r0,[r1,#0x26]         ;2917
000032  f7fffffe          BL       mpu_set_sample_rate
000036  2000              MOVS     r0,#0                 ;2919
000038  9000              STR      r0,[sp,#0]            ;2919
00003a  4914              LDR      r1,|L48.140|
00003c  6849              LDR      r1,[r1,#4]            ;2920  ; st
00003e  7808              LDRB     r0,[r1,#0]            ;2920
000040  466b              MOV      r3,sp                 ;2920
000042  2201              MOVS     r2,#1                 ;2920
000044  2123              MOVS     r1,#0x23              ;2920
000046  f7fffffe          BL       MPU_Write_Len
00004a  2101              MOVS     r1,#1                 ;2921
00004c  480f              LDR      r0,|L48.140|
00004e  f8801024          STRB     r1,[r0,#0x24]         ;2921
000052  2001              MOVS     r0,#1                 ;2923
000054  f7fffffe          BL       set_int_enable
000058  f7fffffe          BL       mpu_reset_fifo
00005c  e013              B        |L48.134|
                  |L48.94|
00005e  2000              MOVS     r0,#0                 ;2927
000060  f7fffffe          BL       set_int_enable
000064  4809              LDR      r0,|L48.140|
000066  7c00              LDRB     r0,[r0,#0x10]         ;2929
000068  9000              STR      r0,[sp,#0]            ;2929
00006a  4908              LDR      r1,|L48.140|
00006c  6849              LDR      r1,[r1,#4]            ;2930  ; st
00006e  7808              LDRB     r0,[r1,#0]            ;2930
000070  466b              MOV      r3,sp                 ;2930
000072  2201              MOVS     r2,#1                 ;2930
000074  2123              MOVS     r1,#0x23              ;2930
000076  f7fffffe          BL       MPU_Write_Len
00007a  2100              MOVS     r1,#0                 ;2931
00007c  4803              LDR      r0,|L48.140|
00007e  f8801024          STRB     r1,[r0,#0x24]         ;2931
000082  f7fffffe          BL       mpu_reset_fifo
                  |L48.134|
000086  2000              MOVS     r0,#0                 ;2934
000088  e7c2              B        |L48.16|
;;;2936   
                          ENDP

00008a  0000              DCW      0x0000
                  |L48.140|
                          DCD      ||st||

                          AREA ||i.mpu_set_gyro_bias_reg||, CODE, READONLY, ALIGN=2

                  mpu_set_gyro_bias_reg PROC
;;;1038    */
;;;1039   int mpu_set_gyro_bias_reg(long *gyro_bias)
000000  b57c              PUSH     {r2-r6,lr}
;;;1040   {
000002  4604              MOV      r4,r0
;;;1041       unsigned char data[6] = {0, 0, 0, 0, 0, 0};
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
000008  9001              STR      r0,[sp,#4]
;;;1042       int i=0;
00000a  2500              MOVS     r5,#0
;;;1043       for(i=0;i<3;i++) {
00000c  bf00              NOP      
00000e  e005              B        |L49.28|
                  |L49.16|
;;;1044       	gyro_bias[i]= (-gyro_bias[i]);
000010  f8540025          LDR      r0,[r4,r5,LSL #2]
000014  4240              RSBS     r0,r0,#0
000016  f8440025          STR      r0,[r4,r5,LSL #2]
00001a  1c6d              ADDS     r5,r5,#1              ;1043
                  |L49.28|
00001c  2d03              CMP      r5,#3                 ;1043
00001e  dbf7              BLT      |L49.16|
;;;1045       }
;;;1046       data[0] = (gyro_bias[0] >> 8) & 0xff;
000020  8820              LDRH     r0,[r4,#0]
000022  0a00              LSRS     r0,r0,#8
000024  f88d0000          STRB     r0,[sp,#0]
;;;1047       data[1] = (gyro_bias[0]) & 0xff;
000028  7820              LDRB     r0,[r4,#0]
00002a  f88d0001          STRB     r0,[sp,#1]
;;;1048       data[2] = (gyro_bias[1] >> 8) & 0xff;
00002e  88a0              LDRH     r0,[r4,#4]
000030  0a00              LSRS     r0,r0,#8
000032  f88d0002          STRB     r0,[sp,#2]
;;;1049       data[3] = (gyro_bias[1]) & 0xff;
000036  7920              LDRB     r0,[r4,#4]
000038  f88d0003          STRB     r0,[sp,#3]
;;;1050       data[4] = (gyro_bias[2] >> 8) & 0xff;
00003c  8920              LDRH     r0,[r4,#8]
00003e  0a00              LSRS     r0,r0,#8
000040  f88d0004          STRB     r0,[sp,#4]
;;;1051       data[5] = (gyro_bias[2]) & 0xff;
000044  7a20              LDRB     r0,[r4,#8]
000046  f88d0005          STRB     r0,[sp,#5]
;;;1052       if (i2c_write(st.hw->addr, 0x13, 2, &data[0]))
00004a  4913              LDR      r1,|L49.152|
00004c  6849              LDR      r1,[r1,#4]  ; st
00004e  7808              LDRB     r0,[r1,#0]
000050  466b              MOV      r3,sp
000052  2202              MOVS     r2,#2
000054  2113              MOVS     r1,#0x13
000056  f7fffffe          BL       MPU_Write_Len
00005a  b110              CBZ      r0,|L49.98|
;;;1053           return -1;
00005c  f04f30ff          MOV      r0,#0xffffffff
                  |L49.96|
;;;1054       if (i2c_write(st.hw->addr, 0x15, 2, &data[2]))
;;;1055           return -1;
;;;1056       if (i2c_write(st.hw->addr, 0x17, 2, &data[4]))
;;;1057           return -1;
;;;1058       return 0;
;;;1059   }
000060  bd7c              POP      {r2-r6,pc}
                  |L49.98|
000062  490d              LDR      r1,|L49.152|
000064  6849              LDR      r1,[r1,#4]            ;1054  ; st
000066  7808              LDRB     r0,[r1,#0]            ;1054
000068  f10d0302          ADD      r3,sp,#2              ;1054
00006c  2202              MOVS     r2,#2                 ;1054
00006e  2115              MOVS     r1,#0x15              ;1054
000070  f7fffffe          BL       MPU_Write_Len
000074  b110              CBZ      r0,|L49.124|
000076  f04f30ff          MOV      r0,#0xffffffff        ;1055
00007a  e7f1              B        |L49.96|
                  |L49.124|
00007c  4906              LDR      r1,|L49.152|
00007e  6849              LDR      r1,[r1,#4]            ;1056  ; st
000080  7808              LDRB     r0,[r1,#0]            ;1056
000082  ab01              ADD      r3,sp,#4              ;1056
000084  2202              MOVS     r2,#2                 ;1056
000086  2117              MOVS     r1,#0x17              ;1056
000088  f7fffffe          BL       MPU_Write_Len
00008c  b110              CBZ      r0,|L49.148|
00008e  f04f30ff          MOV      r0,#0xffffffff        ;1057
000092  e7e5              B        |L49.96|
                  |L49.148|
000094  2000              MOVS     r0,#0                 ;1058
000096  e7e3              B        |L49.96|
;;;1060   
                          ENDP

                  |L49.152|
                          DCD      ||st||

                          AREA ||i.mpu_set_gyro_fsr||, CODE, READONLY, ALIGN=2

                  mpu_set_gyro_fsr PROC
;;;1229    */
;;;1230   int mpu_set_gyro_fsr(unsigned short fsr)
000000  b538              PUSH     {r3-r5,lr}
;;;1231   {
000002  4604              MOV      r4,r0
;;;1232       unsigned char data;
;;;1233   
;;;1234       if (!(st.chip_cfg.sensors))
000004  481f              LDR      r0,|L50.132|
000006  7a80              LDRB     r0,[r0,#0xa]
000008  b910              CBNZ     r0,|L50.16|
;;;1235           return -1;
00000a  f04f30ff          MOV      r0,#0xffffffff
                  |L50.14|
;;;1236   
;;;1237       switch (fsr) {
;;;1238       case 250:
;;;1239           data = INV_FSR_250DPS << 3;
;;;1240           break;
;;;1241       case 500:
;;;1242           data = INV_FSR_500DPS << 3;
;;;1243           break;
;;;1244       case 1000:
;;;1245           data = INV_FSR_1000DPS << 3;
;;;1246           break;
;;;1247       case 2000:
;;;1248           data = INV_FSR_2000DPS << 3;
;;;1249           break;
;;;1250       default:
;;;1251           return -1;
;;;1252       }
;;;1253   
;;;1254       if (st.chip_cfg.gyro_fsr == (data >> 3))
;;;1255           return 0;
;;;1256       if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
;;;1257           return -1;
;;;1258       st.chip_cfg.gyro_fsr = data >> 3;
;;;1259       return 0;
;;;1260   }
00000e  bd38              POP      {r3-r5,pc}
                  |L50.16|
000010  2cfa              CMP      r4,#0xfa              ;1237
000012  d009              BEQ      |L50.40|
000014  f5b47ffa          CMP      r4,#0x1f4             ;1237
000018  d009              BEQ      |L50.46|
00001a  f5b47f7a          CMP      r4,#0x3e8             ;1237
00001e  d009              BEQ      |L50.52|
000020  f5b46ffa          CMP      r4,#0x7d0             ;1237
000024  d10c              BNE      |L50.64|
000026  e008              B        |L50.58|
                  |L50.40|
000028  2000              MOVS     r0,#0                 ;1239
00002a  9000              STR      r0,[sp,#0]            ;1239
00002c  e00b              B        |L50.70|
                  |L50.46|
00002e  2008              MOVS     r0,#8                 ;1242
000030  9000              STR      r0,[sp,#0]            ;1242
000032  e008              B        |L50.70|
                  |L50.52|
000034  2010              MOVS     r0,#0x10              ;1245
000036  9000              STR      r0,[sp,#0]            ;1245
000038  e005              B        |L50.70|
                  |L50.58|
00003a  2018              MOVS     r0,#0x18              ;1248
00003c  9000              STR      r0,[sp,#0]            ;1248
00003e  e002              B        |L50.70|
                  |L50.64|
000040  f04f30ff          MOV      r0,#0xffffffff        ;1251
000044  e7e3              B        |L50.14|
                  |L50.70|
000046  bf00              NOP                            ;1240
000048  480e              LDR      r0,|L50.132|
00004a  7a00              LDRB     r0,[r0,#8]            ;1254  ; st
00004c  f89d1000          LDRB     r1,[sp,#0]            ;1254
000050  ebb00fe1          CMP      r0,r1,ASR #3          ;1254
000054  d101              BNE      |L50.90|
000056  2000              MOVS     r0,#0                 ;1255
000058  e7d9              B        |L50.14|
                  |L50.90|
00005a  4a0a              LDR      r2,|L50.132|
00005c  6812              LDR      r2,[r2,#0]            ;1256  ; st
00005e  7991              LDRB     r1,[r2,#6]            ;1256
000060  4a08              LDR      r2,|L50.132|
000062  6852              LDR      r2,[r2,#4]            ;1256  ; st
000064  7810              LDRB     r0,[r2,#0]            ;1256
000066  466b              MOV      r3,sp                 ;1256
000068  2201              MOVS     r2,#1                 ;1256
00006a  f7fffffe          BL       MPU_Write_Len
00006e  b110              CBZ      r0,|L50.118|
000070  f04f30ff          MOV      r0,#0xffffffff        ;1257
000074  e7cb              B        |L50.14|
                  |L50.118|
000076  f89d0000          LDRB     r0,[sp,#0]            ;1258
00007a  10c0              ASRS     r0,r0,#3              ;1258
00007c  4901              LDR      r1,|L50.132|
00007e  7208              STRB     r0,[r1,#8]            ;1258
000080  2000              MOVS     r0,#0                 ;1259
000082  e7c4              B        |L50.14|
;;;1261   
                          ENDP

                  |L50.132|
                          DCD      ||st||

                          AREA ||i.mpu_set_int_latched||, CODE, READONLY, ALIGN=2

                  mpu_set_int_latched PROC
;;;1927    */
;;;1928   int mpu_set_int_latched(unsigned char enable)
000000  b538              PUSH     {r3-r5,lr}
;;;1929   {
000002  4604              MOV      r4,r0
;;;1930       unsigned char tmp;
;;;1931       if (st.chip_cfg.latched_int == enable)
000004  4818              LDR      r0,|L51.104|
000006  f8900023          LDRB     r0,[r0,#0x23]
00000a  42a0              CMP      r0,r4
00000c  d101              BNE      |L51.18|
;;;1932           return 0;
00000e  2000              MOVS     r0,#0
                  |L51.16|
;;;1933   
;;;1934       if (enable)
;;;1935           tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
;;;1936       else
;;;1937           tmp = 0;
;;;1938       if (st.chip_cfg.bypass_mode)
;;;1939           tmp |= BIT_BYPASS_EN;
;;;1940       if (st.chip_cfg.active_low_int)
;;;1941           tmp |= BIT_ACTL;
;;;1942       if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
;;;1943           return -1;
;;;1944       st.chip_cfg.latched_int = enable;
;;;1945       return 0;
;;;1946   }
000010  bd38              POP      {r3-r5,pc}
                  |L51.18|
000012  b114              CBZ      r4,|L51.26|
000014  2030              MOVS     r0,#0x30              ;1935
000016  9000              STR      r0,[sp,#0]            ;1935
000018  e001              B        |L51.30|
                  |L51.26|
00001a  2000              MOVS     r0,#0                 ;1937
00001c  9000              STR      r0,[sp,#0]            ;1937
                  |L51.30|
00001e  4812              LDR      r0,|L51.104|
000020  7c80              LDRB     r0,[r0,#0x12]         ;1938
000022  b120              CBZ      r0,|L51.46|
000024  f89d0000          LDRB     r0,[sp,#0]            ;1939
000028  f0400002          ORR      r0,r0,#2              ;1939
00002c  9000              STR      r0,[sp,#0]            ;1939
                  |L51.46|
00002e  480e              LDR      r0,|L51.104|
000030  f8900022          LDRB     r0,[r0,#0x22]         ;1940
000034  b120              CBZ      r0,|L51.64|
000036  f89d0000          LDRB     r0,[sp,#0]            ;1941
00003a  f0400080          ORR      r0,r0,#0x80           ;1941
00003e  9000              STR      r0,[sp,#0]            ;1941
                  |L51.64|
000040  4a09              LDR      r2,|L51.104|
000042  6812              LDR      r2,[r2,#0]            ;1942  ; st
000044  7dd1              LDRB     r1,[r2,#0x17]         ;1942
000046  4a08              LDR      r2,|L51.104|
000048  6852              LDR      r2,[r2,#4]            ;1942  ; st
00004a  7810              LDRB     r0,[r2,#0]            ;1942
00004c  466b              MOV      r3,sp                 ;1942
00004e  2201              MOVS     r2,#1                 ;1942
000050  f7fffffe          BL       MPU_Write_Len
000054  b110              CBZ      r0,|L51.92|
000056  f04f30ff          MOV      r0,#0xffffffff        ;1943
00005a  e7d9              B        |L51.16|
                  |L51.92|
00005c  4802              LDR      r0,|L51.104|
00005e  f8804023          STRB     r4,[r0,#0x23]         ;1944
000062  2000              MOVS     r0,#0                 ;1945
000064  e7d4              B        |L51.16|
;;;1947   
                          ENDP

000066  0000              DCW      0x0000
                  |L51.104|
                          DCD      ||st||

                          AREA ||i.mpu_set_int_level||, CODE, READONLY, ALIGN=2

                  mpu_set_int_level PROC
;;;1915    */
;;;1916   int mpu_set_int_level(unsigned char active_low)
000000  4601              MOV      r1,r0
;;;1917   {
;;;1918       st.chip_cfg.active_low_int = active_low;
000002  4802              LDR      r0,|L52.12|
000004  f8801022          STRB     r1,[r0,#0x22]
;;;1919       return 0;
000008  2000              MOVS     r0,#0
;;;1920   }
00000a  4770              BX       lr
;;;1921   
                          ENDP

                  |L52.12|
                          DCD      ||st||

                          AREA ||i.mpu_set_lpf||, CODE, READONLY, ALIGN=2

                  mpu_set_lpf PROC
;;;1367    */
;;;1368   int mpu_set_lpf(unsigned short lpf)
000000  b538              PUSH     {r3-r5,lr}
;;;1369   {
000002  4604              MOV      r4,r0
;;;1370       unsigned char data;
;;;1371   
;;;1372       if (!(st.chip_cfg.sensors))
000004  481e              LDR      r0,|L53.128|
000006  7a80              LDRB     r0,[r0,#0xa]
000008  b910              CBNZ     r0,|L53.16|
;;;1373           return -1;
00000a  f04f30ff          MOV      r0,#0xffffffff
                  |L53.14|
;;;1374   
;;;1375       if (lpf >= 188)
;;;1376           data = INV_FILTER_188HZ;
;;;1377       else if (lpf >= 98)
;;;1378           data = INV_FILTER_98HZ;
;;;1379       else if (lpf >= 42)
;;;1380           data = INV_FILTER_42HZ;
;;;1381       else if (lpf >= 20)
;;;1382           data = INV_FILTER_20HZ;
;;;1383       else if (lpf >= 10)
;;;1384           data = INV_FILTER_10HZ;
;;;1385       else
;;;1386           data = INV_FILTER_5HZ;
;;;1387   
;;;1388       if (st.chip_cfg.lpf == data)
;;;1389           return 0;
;;;1390       if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
;;;1391           return -1;
;;;1392       st.chip_cfg.lpf = data;
;;;1393       return 0;
;;;1394   }
00000e  bd38              POP      {r3-r5,pc}
                  |L53.16|
000010  2cbc              CMP      r4,#0xbc              ;1375
000012  db02              BLT      |L53.26|
000014  2001              MOVS     r0,#1                 ;1376
000016  9000              STR      r0,[sp,#0]            ;1376
000018  e015              B        |L53.70|
                  |L53.26|
00001a  2c62              CMP      r4,#0x62              ;1377
00001c  db02              BLT      |L53.36|
00001e  2002              MOVS     r0,#2                 ;1378
000020  9000              STR      r0,[sp,#0]            ;1378
000022  e010              B        |L53.70|
                  |L53.36|
000024  2c2a              CMP      r4,#0x2a              ;1379
000026  db02              BLT      |L53.46|
000028  2003              MOVS     r0,#3                 ;1380
00002a  9000              STR      r0,[sp,#0]            ;1380
00002c  e00b              B        |L53.70|
                  |L53.46|
00002e  2c14              CMP      r4,#0x14              ;1381
000030  db02              BLT      |L53.56|
000032  2004              MOVS     r0,#4                 ;1382
000034  9000              STR      r0,[sp,#0]            ;1382
000036  e006              B        |L53.70|
                  |L53.56|
000038  2c0a              CMP      r4,#0xa               ;1383
00003a  db02              BLT      |L53.66|
00003c  2005              MOVS     r0,#5                 ;1384
00003e  9000              STR      r0,[sp,#0]            ;1384
000040  e001              B        |L53.70|
                  |L53.66|
000042  2006              MOVS     r0,#6                 ;1386
000044  9000              STR      r0,[sp,#0]            ;1386
                  |L53.70|
000046  480e              LDR      r0,|L53.128|
000048  7ac0              LDRB     r0,[r0,#0xb]          ;1388
00004a  f89d1000          LDRB     r1,[sp,#0]            ;1388
00004e  4288              CMP      r0,r1                 ;1388
000050  d101              BNE      |L53.86|
000052  2000              MOVS     r0,#0                 ;1389
000054  e7db              B        |L53.14|
                  |L53.86|
000056  4a0a              LDR      r2,|L53.128|
000058  6812              LDR      r2,[r2,#0]            ;1390  ; st
00005a  7891              LDRB     r1,[r2,#2]            ;1390
00005c  4a08              LDR      r2,|L53.128|
00005e  6852              LDR      r2,[r2,#4]            ;1390  ; st
000060  7810              LDRB     r0,[r2,#0]            ;1390
000062  466b              MOV      r3,sp                 ;1390
000064  2201              MOVS     r2,#1                 ;1390
000066  f7fffffe          BL       MPU_Write_Len
00006a  b110              CBZ      r0,|L53.114|
00006c  f04f30ff          MOV      r0,#0xffffffff        ;1391
000070  e7cd              B        |L53.14|
                  |L53.114|
000072  f89d1000          LDRB     r1,[sp,#0]            ;1392
000076  4802              LDR      r0,|L53.128|
000078  72c1              STRB     r1,[r0,#0xb]          ;1392
00007a  2000              MOVS     r0,#0                 ;1393
00007c  e7c7              B        |L53.14|
;;;1395   
                          ENDP

00007e  0000              DCW      0x0000
                  |L53.128|
                          DCD      ||st||

                          AREA ||i.mpu_set_sample_rate||, CODE, READONLY, ALIGN=2

                  mpu_set_sample_rate PROC
;;;1415    */
;;;1416   int mpu_set_sample_rate(unsigned short rate)
000000  b538              PUSH     {r3-r5,lr}
;;;1417   {
000002  4604              MOV      r4,r0
;;;1418       unsigned char data;
;;;1419   
;;;1420       if (!(st.chip_cfg.sensors))
000004  482a              LDR      r0,|L54.176|
000006  7a80              LDRB     r0,[r0,#0xa]
000008  b910              CBNZ     r0,|L54.16|
;;;1421           return -1;
00000a  f04f30ff          MOV      r0,#0xffffffff
                  |L54.14|
;;;1422   
;;;1423       if (st.chip_cfg.dmp_on)
;;;1424           return -1;
;;;1425       else {
;;;1426           if (st.chip_cfg.lp_accel_mode) {
;;;1427               if (rate && (rate <= 40)) {
;;;1428                   /* Just stay in low-power accel mode. */
;;;1429                   mpu_lp_accel_mode(rate);
;;;1430                   return 0;
;;;1431               }
;;;1432               /* Requested rate exceeds the allowed frequencies in LP accel mode,
;;;1433                * switch back to full-power mode.
;;;1434                */
;;;1435               mpu_lp_accel_mode(0);
;;;1436           }
;;;1437           if (rate < 4)
;;;1438               rate = 4;
;;;1439           else if (rate > 1000)
;;;1440               rate = 1000;
;;;1441   
;;;1442           data = 1000 / rate - 1;
;;;1443           if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
;;;1444               return -1;
;;;1445   
;;;1446           st.chip_cfg.sample_rate = 1000 / (1 + data);
;;;1447   
;;;1448   #ifdef AK89xx_SECONDARY
;;;1449           mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
;;;1450   #endif
;;;1451   
;;;1452           /* Automatically set LPF to 1/2 sampling rate. */
;;;1453           mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
;;;1454           return 0;
;;;1455       }
;;;1456   }
00000e  bd38              POP      {r3-r5,pc}
                  |L54.16|
000010  4827              LDR      r0,|L54.176|
000012  f8900024          LDRB     r0,[r0,#0x24]         ;1423
000016  b110              CBZ      r0,|L54.30|
000018  f04f30ff          MOV      r0,#0xffffffff        ;1424
00001c  e7f7              B        |L54.14|
                  |L54.30|
00001e  4824              LDR      r0,|L54.176|
000020  7d00              LDRB     r0,[r0,#0x14]         ;1426
000022  b150              CBZ      r0,|L54.58|
000024  b134              CBZ      r4,|L54.52|
000026  2c28              CMP      r4,#0x28              ;1427
000028  dc04              BGT      |L54.52|
00002a  4620              MOV      r0,r4                 ;1429
00002c  f7fffffe          BL       mpu_lp_accel_mode
000030  2000              MOVS     r0,#0                 ;1430
000032  e7ec              B        |L54.14|
                  |L54.52|
000034  2000              MOVS     r0,#0                 ;1435
000036  f7fffffe          BL       mpu_lp_accel_mode
                  |L54.58|
00003a  2c04              CMP      r4,#4                 ;1437
00003c  da01              BGE      |L54.66|
00003e  2404              MOVS     r4,#4                 ;1438
000040  e004              B        |L54.76|
                  |L54.66|
000042  f5b47f7a          CMP      r4,#0x3e8             ;1439
000046  dd01              BLE      |L54.76|
000048  f44f747a          MOV      r4,#0x3e8             ;1440
                  |L54.76|
00004c  f44f707a          MOV      r0,#0x3e8             ;1442
000050  fb90f0f4          SDIV     r0,r0,r4              ;1442
000054  1e40              SUBS     r0,r0,#1              ;1442
000056  b2c0              UXTB     r0,r0                 ;1442
000058  9000              STR      r0,[sp,#0]            ;1442
00005a  4a15              LDR      r2,|L54.176|
00005c  6812              LDR      r2,[r2,#0]            ;1443  ; st
00005e  7851              LDRB     r1,[r2,#1]            ;1443
000060  4a13              LDR      r2,|L54.176|
000062  6852              LDR      r2,[r2,#4]            ;1443  ; st
000064  7810              LDRB     r0,[r2,#0]            ;1443
000066  466b              MOV      r3,sp                 ;1443
000068  2201              MOVS     r2,#1                 ;1443
00006a  f7fffffe          BL       MPU_Write_Len
00006e  b110              CBZ      r0,|L54.118|
000070  f04f30ff          MOV      r0,#0xffffffff        ;1444
000074  e7cb              B        |L54.14|
                  |L54.118|
000076  f89d0000          LDRB     r0,[sp,#0]            ;1446
00007a  1c40              ADDS     r0,r0,#1              ;1446
00007c  f44f717a          MOV      r1,#0x3e8             ;1446
000080  fb91f0f0          SDIV     r0,r1,r0              ;1446
000084  b281              UXTH     r1,r0                 ;1446
000086  480a              LDR      r0,|L54.176|
000088  81c1              STRH     r1,[r0,#0xe]          ;1446
00008a  4601              MOV      r1,r0                 ;1449
00008c  8d09              LDRH     r1,[r1,#0x28]         ;1449
00008e  2964              CMP      r1,#0x64              ;1449
000090  da02              BGE      |L54.152|
000092  4601              MOV      r1,r0                 ;1449
000094  8d09              LDRH     r1,[r1,#0x28]         ;1449
000096  e000              B        |L54.154|
                  |L54.152|
000098  2164              MOVS     r1,#0x64              ;1449
                  |L54.154|
00009a  4608              MOV      r0,r1                 ;1449
00009c  f7fffffe          BL       mpu_set_compass_sample_rate
0000a0  4903              LDR      r1,|L54.176|
0000a2  89c9              LDRH     r1,[r1,#0xe]          ;1453
0000a4  1048              ASRS     r0,r1,#1              ;1453
0000a6  f7fffffe          BL       mpu_set_lpf
0000aa  2000              MOVS     r0,#0                 ;1454
0000ac  e7af              B        |L54.14|
;;;1457   
                          ENDP

0000ae  0000              DCW      0x0000
                  |L54.176|
                          DCD      ||st||

                          AREA ||i.mpu_set_sensors||, CODE, READONLY, ALIGN=2

                  mpu_set_sensors PROC
;;;1640    */
;;;1641   int mpu_set_sensors(unsigned char sensors)
000000  b51c              PUSH     {r2-r4,lr}
;;;1642   {
000002  4604              MOV      r4,r0
;;;1643       unsigned char data;
;;;1644   #ifdef AK89xx_SECONDARY
;;;1645       unsigned char user_ctrl;
;;;1646   #endif
;;;1647   
;;;1648       if (sensors & INV_XYZ_GYRO)
000004  f0040070          AND      r0,r4,#0x70
000008  b110              CBZ      r0,|L55.16|
;;;1649           data = INV_CLK_PLL;
00000a  2001              MOVS     r0,#1
00000c  9001              STR      r0,[sp,#4]
00000e  e005              B        |L55.28|
                  |L55.16|
;;;1650       else if (sensors)
000010  b114              CBZ      r4,|L55.24|
;;;1651           data = 0;
000012  2000              MOVS     r0,#0
000014  9001              STR      r0,[sp,#4]
000016  e001              B        |L55.28|
                  |L55.24|
;;;1652       else
;;;1653           data = BIT_SLEEP;
000018  2040              MOVS     r0,#0x40
00001a  9001              STR      r0,[sp,#4]
                  |L55.28|
;;;1654       if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
00001c  4a51              LDR      r2,|L55.356|
00001e  6812              LDR      r2,[r2,#0]  ; st
000020  7d51              LDRB     r1,[r2,#0x15]
000022  4a50              LDR      r2,|L55.356|
000024  6852              LDR      r2,[r2,#4]  ; st
000026  7810              LDRB     r0,[r2,#0]
000028  ab01              ADD      r3,sp,#4
00002a  2201              MOVS     r2,#1
00002c  f7fffffe          BL       MPU_Write_Len
000030  b120              CBZ      r0,|L55.60|
;;;1655           st.chip_cfg.sensors = 0;
000032  2100              MOVS     r1,#0
000034  484b              LDR      r0,|L55.356|
000036  7281              STRB     r1,[r0,#0xa]
;;;1656           return -1;
000038  1e48              SUBS     r0,r1,#1
                  |L55.58|
;;;1657       }
;;;1658       st.chip_cfg.clk_src = data & ~BIT_SLEEP;
;;;1659   
;;;1660       data = 0;
;;;1661       if (!(sensors & INV_X_GYRO))
;;;1662           data |= BIT_STBY_XG;
;;;1663       if (!(sensors & INV_Y_GYRO))
;;;1664           data |= BIT_STBY_YG;
;;;1665       if (!(sensors & INV_Z_GYRO))
;;;1666           data |= BIT_STBY_ZG;
;;;1667       if (!(sensors & INV_XYZ_ACCEL))
;;;1668           data |= BIT_STBY_XYZA;
;;;1669       if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
;;;1670           st.chip_cfg.sensors = 0;
;;;1671           return -1;
;;;1672       }
;;;1673   
;;;1674       if (sensors && (sensors != INV_XYZ_ACCEL))
;;;1675           /* Latched interrupts only used in LP accel mode. */
;;;1676           mpu_set_int_latched(0);
;;;1677   
;;;1678   #ifdef AK89xx_SECONDARY
;;;1679   #ifdef AK89xx_BYPASS
;;;1680       if (sensors & INV_XYZ_COMPASS)
;;;1681           mpu_set_bypass(1);
;;;1682       else
;;;1683           mpu_set_bypass(0);
;;;1684   #else
;;;1685       if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
;;;1686           return -1;
;;;1687       /* Handle AKM power management. */
;;;1688       if (sensors & INV_XYZ_COMPASS) {
;;;1689           data = AKM_SINGLE_MEASUREMENT;
;;;1690           user_ctrl |= BIT_AUX_IF_EN;
;;;1691       } else {
;;;1692           data = AKM_POWER_DOWN;
;;;1693           user_ctrl &= ~BIT_AUX_IF_EN;
;;;1694       }
;;;1695       if (st.chip_cfg.dmp_on)
;;;1696           user_ctrl |= BIT_DMP_EN;
;;;1697       else
;;;1698           user_ctrl &= ~BIT_DMP_EN;
;;;1699       if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
;;;1700           return -1;
;;;1701       /* Enable/disable I2C master mode. */
;;;1702       if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
;;;1703           return -1;
;;;1704   #endif
;;;1705   #endif
;;;1706   
;;;1707       st.chip_cfg.sensors = sensors;
;;;1708       st.chip_cfg.lp_accel_mode = 0;
;;;1709       delay_ms(50);
;;;1710       return 0;
;;;1711   }
00003a  bd1c              POP      {r2-r4,pc}
                  |L55.60|
00003c  f89d0004          LDRB     r0,[sp,#4]            ;1658
000040  f0200140          BIC      r1,r0,#0x40           ;1658
000044  4847              LDR      r0,|L55.356|
000046  7301              STRB     r1,[r0,#0xc]          ;1658
000048  2000              MOVS     r0,#0                 ;1660
00004a  9001              STR      r0,[sp,#4]            ;1660
00004c  f0040040          AND      r0,r4,#0x40           ;1661
000050  b920              CBNZ     r0,|L55.92|
000052  f89d0004          LDRB     r0,[sp,#4]            ;1662
000056  f0400004          ORR      r0,r0,#4              ;1662
00005a  9001              STR      r0,[sp,#4]            ;1662
                  |L55.92|
00005c  f0040020          AND      r0,r4,#0x20           ;1663
000060  b920              CBNZ     r0,|L55.108|
000062  f89d0004          LDRB     r0,[sp,#4]            ;1664
000066  f0400002          ORR      r0,r0,#2              ;1664
00006a  9001              STR      r0,[sp,#4]            ;1664
                  |L55.108|
00006c  f0040010          AND      r0,r4,#0x10           ;1665
000070  b920              CBNZ     r0,|L55.124|
000072  f89d0004          LDRB     r0,[sp,#4]            ;1666
000076  f0400001          ORR      r0,r0,#1              ;1666
00007a  9001              STR      r0,[sp,#4]            ;1666
                  |L55.124|
00007c  f0040008          AND      r0,r4,#8              ;1667
000080  b920              CBNZ     r0,|L55.140|
000082  f89d0004          LDRB     r0,[sp,#4]            ;1668
000086  f0400038          ORR      r0,r0,#0x38           ;1668
00008a  9001              STR      r0,[sp,#4]            ;1668
                  |L55.140|
00008c  4a35              LDR      r2,|L55.356|
00008e  6812              LDR      r2,[r2,#0]            ;1669  ; st
000090  7d91              LDRB     r1,[r2,#0x16]         ;1669
000092  4a34              LDR      r2,|L55.356|
000094  6852              LDR      r2,[r2,#4]            ;1669  ; st
000096  7810              LDRB     r0,[r2,#0]            ;1669
000098  ab01              ADD      r3,sp,#4              ;1669
00009a  2201              MOVS     r2,#1                 ;1669
00009c  f7fffffe          BL       MPU_Write_Len
0000a0  b120              CBZ      r0,|L55.172|
0000a2  2100              MOVS     r1,#0                 ;1670
0000a4  482f              LDR      r0,|L55.356|
0000a6  7281              STRB     r1,[r0,#0xa]          ;1670
0000a8  1e48              SUBS     r0,r1,#1              ;1671
0000aa  e7c6              B        |L55.58|
                  |L55.172|
0000ac  b124              CBZ      r4,|L55.184|
0000ae  2c08              CMP      r4,#8                 ;1674
0000b0  d002              BEQ      |L55.184|
0000b2  2000              MOVS     r0,#0                 ;1676
0000b4  f7fffffe          BL       mpu_set_int_latched
                  |L55.184|
0000b8  4a2a              LDR      r2,|L55.356|
0000ba  6812              LDR      r2,[r2,#0]            ;1685  ; st
0000bc  7911              LDRB     r1,[r2,#4]            ;1685
0000be  4a29              LDR      r2,|L55.356|
0000c0  6852              LDR      r2,[r2,#4]            ;1685  ; st
0000c2  7810              LDRB     r0,[r2,#0]            ;1685
0000c4  466b              MOV      r3,sp                 ;1685
0000c6  2201              MOVS     r2,#1                 ;1685
0000c8  f7fffffe          BL       MPU_Read_Len
0000cc  b110              CBZ      r0,|L55.212|
0000ce  f04f30ff          MOV      r0,#0xffffffff        ;1686
0000d2  e7b2              B        |L55.58|
                  |L55.212|
0000d4  f0040001          AND      r0,r4,#1              ;1688
0000d8  b138              CBZ      r0,|L55.234|
0000da  2011              MOVS     r0,#0x11              ;1689
0000dc  9001              STR      r0,[sp,#4]            ;1689
0000de  f89d0000          LDRB     r0,[sp,#0]            ;1690
0000e2  f0400020          ORR      r0,r0,#0x20           ;1690
0000e6  9000              STR      r0,[sp,#0]            ;1690
0000e8  e006              B        |L55.248|
                  |L55.234|
0000ea  2010              MOVS     r0,#0x10              ;1692
0000ec  9001              STR      r0,[sp,#4]            ;1692
0000ee  f89d0000          LDRB     r0,[sp,#0]            ;1693
0000f2  f0200020          BIC      r0,r0,#0x20           ;1693
0000f6  9000              STR      r0,[sp,#0]            ;1693
                  |L55.248|
0000f8  481a              LDR      r0,|L55.356|
0000fa  f8900024          LDRB     r0,[r0,#0x24]         ;1695
0000fe  b128              CBZ      r0,|L55.268|
000100  f89d0000          LDRB     r0,[sp,#0]            ;1696
000104  f0400080          ORR      r0,r0,#0x80           ;1696
000108  9000              STR      r0,[sp,#0]            ;1696
00010a  e004              B        |L55.278|
                  |L55.268|
00010c  f89d0000          LDRB     r0,[sp,#0]            ;1698
000110  f0200080          BIC      r0,r0,#0x80           ;1698
000114  9000              STR      r0,[sp,#0]            ;1698
                  |L55.278|
000116  4a13              LDR      r2,|L55.356|
000118  6812              LDR      r2,[r2,#0]            ;1699  ; st
00011a  f8921026          LDRB     r1,[r2,#0x26]         ;1699
00011e  4a11              LDR      r2,|L55.356|
000120  6852              LDR      r2,[r2,#4]            ;1699  ; st
000122  7810              LDRB     r0,[r2,#0]            ;1699
000124  ab01              ADD      r3,sp,#4              ;1699
000126  2201              MOVS     r2,#1                 ;1699
000128  f7fffffe          BL       MPU_Write_Len
00012c  b110              CBZ      r0,|L55.308|
00012e  f04f30ff          MOV      r0,#0xffffffff        ;1700
000132  e782              B        |L55.58|
                  |L55.308|
000134  4a0b              LDR      r2,|L55.356|
000136  6812              LDR      r2,[r2,#0]            ;1702  ; st
000138  7911              LDRB     r1,[r2,#4]            ;1702
00013a  4a0a              LDR      r2,|L55.356|
00013c  6852              LDR      r2,[r2,#4]            ;1702  ; st
00013e  7810              LDRB     r0,[r2,#0]            ;1702
000140  466b              MOV      r3,sp                 ;1702
000142  2201              MOVS     r2,#1                 ;1702
000144  f7fffffe          BL       MPU_Write_Len
000148  b110              CBZ      r0,|L55.336|
00014a  f04f30ff          MOV      r0,#0xffffffff        ;1703
00014e  e774              B        |L55.58|
                  |L55.336|
000150  4804              LDR      r0,|L55.356|
000152  7284              STRB     r4,[r0,#0xa]          ;1707
000154  2100              MOVS     r1,#0                 ;1708
000156  7501              STRB     r1,[r0,#0x14]         ;1708
000158  2032              MOVS     r0,#0x32              ;1709
00015a  f7fffffe          BL       delay_ms
00015e  2000              MOVS     r0,#0                 ;1710
000160  e76b              B        |L55.58|
;;;1712   
                          ENDP

000162  0000              DCW      0x0000
                  |L55.356|
                          DCD      ||st||

                          AREA ||i.mpu_write_mem||, CODE, READONLY, ALIGN=2

                  mpu_write_mem PROC
;;;2796    */
;;;2797   int mpu_write_mem(unsigned short mem_addr, unsigned short length,
000000  b5f8              PUSH     {r3-r7,lr}
;;;2798           unsigned char *data)
;;;2799   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;2800       unsigned char tmp[2];
;;;2801   
;;;2802       if (!data)
000008  b916              CBNZ     r6,|L56.16|
;;;2803           return -1;
00000a  f04f30ff          MOV      r0,#0xffffffff
                  |L56.14|
;;;2804       if (!st.chip_cfg.sensors)
;;;2805           return -1;
;;;2806   
;;;2807       tmp[0] = (unsigned char)(mem_addr >> 8);
;;;2808       tmp[1] = (unsigned char)(mem_addr & 0xFF);
;;;2809   
;;;2810       /* Check bank boundaries. */
;;;2811       if (tmp[1] + length > st.hw->bank_size)
;;;2812           return -1;
;;;2813   
;;;2814       if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
;;;2815           return -1;
;;;2816       if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
;;;2817           return -1;
;;;2818       return 0;
;;;2819   }
00000e  bdf8              POP      {r3-r7,pc}
                  |L56.16|
000010  481a              LDR      r0,|L56.124|
000012  7a80              LDRB     r0,[r0,#0xa]          ;2804
000014  b910              CBNZ     r0,|L56.28|
000016  f04f30ff          MOV      r0,#0xffffffff        ;2805
00001a  e7f8              B        |L56.14|
                  |L56.28|
00001c  1220              ASRS     r0,r4,#8              ;2807
00001e  f88d0000          STRB     r0,[sp,#0]            ;2807
000022  b2e0              UXTB     r0,r4                 ;2808
000024  f88d0001          STRB     r0,[sp,#1]            ;2808
000028  f89d0001          LDRB     r0,[sp,#1]            ;2811
00002c  4428              ADD      r0,r0,r5              ;2811
00002e  4913              LDR      r1,|L56.124|
000030  6849              LDR      r1,[r1,#4]            ;2811  ; st
000032  8949              LDRH     r1,[r1,#0xa]          ;2811
000034  4288              CMP      r0,r1                 ;2811
000036  dd02              BLE      |L56.62|
000038  f04f30ff          MOV      r0,#0xffffffff        ;2812
00003c  e7e7              B        |L56.14|
                  |L56.62|
00003e  4a0f              LDR      r2,|L56.124|
000040  6812              LDR      r2,[r2,#0]            ;2814  ; st
000042  7ed1              LDRB     r1,[r2,#0x1b]         ;2814
000044  4a0d              LDR      r2,|L56.124|
000046  6852              LDR      r2,[r2,#4]            ;2814  ; st
000048  7810              LDRB     r0,[r2,#0]            ;2814
00004a  466b              MOV      r3,sp                 ;2814
00004c  2202              MOVS     r2,#2                 ;2814
00004e  f7fffffe          BL       MPU_Write_Len
000052  b110              CBZ      r0,|L56.90|
000054  f04f30ff          MOV      r0,#0xffffffff        ;2815
000058  e7d9              B        |L56.14|
                  |L56.90|
00005a  b2ea              UXTB     r2,r5                 ;2816
00005c  4b07              LDR      r3,|L56.124|
00005e  681b              LDR      r3,[r3,#0]            ;2816  ; st
000060  7e19              LDRB     r1,[r3,#0x18]         ;2816
000062  4b06              LDR      r3,|L56.124|
000064  685b              LDR      r3,[r3,#4]            ;2816  ; st
000066  7818              LDRB     r0,[r3,#0]            ;2816
000068  4633              MOV      r3,r6                 ;2816
00006a  f7fffffe          BL       MPU_Write_Len
00006e  b110              CBZ      r0,|L56.118|
000070  f04f30ff          MOV      r0,#0xffffffff        ;2817
000074  e7cb              B        |L56.14|
                  |L56.118|
000076  2000              MOVS     r0,#0                 ;2818
000078  e7c9              B        |L56.14|
;;;2820   
                          ENDP

00007a  0000              DCW      0x0000
                  |L56.124|
                          DCD      ||st||

                          AREA ||i.run_self_test||, CODE, READONLY, ALIGN=1

                  run_self_test PROC
;;;3332   //    其他,失败
;;;3333   u8 run_self_test(void)
000000  b510              PUSH     {r4,lr}
;;;3334   {
000002  b088              SUB      sp,sp,#0x20
;;;3335   	int result;
;;;3336   	//char test_packet[4] = {0};
;;;3337   	long gyro[3], accel[3]; 
;;;3338   	result = mpu_run_6500_self_test(gyro, accel,0);
000004  2200              MOVS     r2,#0
000006  a902              ADD      r1,sp,#8
000008  a805              ADD      r0,sp,#0x14
00000a  f7fffffe          BL       mpu_run_6500_self_test
00000e  4604              MOV      r4,r0
;;;3339   	if (result == 0x7) 
000010  2c07              CMP      r4,#7
000012  d141              BNE      |L57.152|
;;;3340   	{
;;;3341   		/* Test passed. We can trust the gyro data here, so let's push it down
;;;3342   		* to the DMP.
;;;3343   		*/
;;;3344           unsigned short accel_sens;
;;;3345   		float gyro_sens;
;;;3346   
;;;3347   		mpu_get_gyro_sens(&gyro_sens);
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       mpu_get_gyro_sens
;;;3348   		gyro[0] = (long)(gyro[0] * gyro_sens);
00001a  ed9d0a05          VLDR     s0,[sp,#0x14]
00001e  eeb80ac0          VCVT.F32.S32 s0,s0
000022  eddd0a00          VLDR     s1,[sp,#0]
000026  ee200a20          VMUL.F32 s0,s0,s1
00002a  eebd0ac0          VCVT.S32.F32 s0,s0
00002e  ed8d0a05          VSTR     s0,[sp,#0x14]
;;;3349   		gyro[1] = (long)(gyro[1] * gyro_sens);
000032  ed9d0a06          VLDR     s0,[sp,#0x18]
000036  eeb80ac0          VCVT.F32.S32 s0,s0
00003a  eddd0a00          VLDR     s1,[sp,#0]
00003e  ee200a20          VMUL.F32 s0,s0,s1
000042  eebd0ac0          VCVT.S32.F32 s0,s0
000046  ed8d0a06          VSTR     s0,[sp,#0x18]
;;;3350   		gyro[2] = (long)(gyro[2] * gyro_sens);
00004a  ed9d0a07          VLDR     s0,[sp,#0x1c]
00004e  eeb80ac0          VCVT.F32.S32 s0,s0
000052  eddd0a00          VLDR     s1,[sp,#0]
000056  ee200a20          VMUL.F32 s0,s0,s1
00005a  eebd0ac0          VCVT.S32.F32 s0,s0
00005e  ed8d0a07          VSTR     s0,[sp,#0x1c]
;;;3351           //inv_set_gyro_bias(gyro, 3);
;;;3352   		dmp_set_gyro_bias(gyro);
000062  a805              ADD      r0,sp,#0x14
000064  f7fffffe          BL       dmp_set_gyro_bias
;;;3353   		mpu_get_accel_sens(&accel_sens);
000068  a801              ADD      r0,sp,#4
00006a  f7fffffe          BL       mpu_get_accel_sens
;;;3354   		accel[0] *= accel_sens;
00006e  f8bd1004          LDRH     r1,[sp,#4]
000072  9802              LDR      r0,[sp,#8]
000074  4348              MULS     r0,r1,r0
000076  9002              STR      r0,[sp,#8]
;;;3355   		accel[1] *= accel_sens;
000078  f8bd1004          LDRH     r1,[sp,#4]
00007c  9803              LDR      r0,[sp,#0xc]
00007e  4348              MULS     r0,r1,r0
000080  9003              STR      r0,[sp,#0xc]
;;;3356   		accel[2] *= accel_sens;
000082  f8bd1004          LDRH     r1,[sp,#4]
000086  9804              LDR      r0,[sp,#0x10]
000088  4348              MULS     r0,r1,r0
00008a  9004              STR      r0,[sp,#0x10]
;;;3357          // inv_set_accel_bias(accel, 3);
;;;3358   		dmp_set_accel_bias(accel);
00008c  a802              ADD      r0,sp,#8
00008e  f7fffffe          BL       dmp_set_accel_bias
;;;3359   		return 0;
000092  2000              MOVS     r0,#0
                  |L57.148|
;;;3360   	}else return 1;
;;;3361   }
000094  b008              ADD      sp,sp,#0x20
000096  bd10              POP      {r4,pc}
                  |L57.152|
000098  2001              MOVS     r0,#1                 ;3360
00009a  e7fb              B        |L57.148|
;;;3362   
                          ENDP


                          AREA ||i.set_int_enable||, CODE, READONLY, ALIGN=2

                  set_int_enable PROC
;;;654     */
;;;655    static int set_int_enable(unsigned char enable)
000000  b538              PUSH     {r3-r5,lr}
;;;656    {
000002  4604              MOV      r4,r0
;;;657        unsigned char tmp;
;;;658    
;;;659        if (st.chip_cfg.dmp_on) {
000004  4821              LDR      r0,|L58.140|
000006  f8900024          LDRB     r0,[r0,#0x24]
00000a  b1c0              CBZ      r0,|L58.62|
;;;660            if (enable)
00000c  b114              CBZ      r4,|L58.20|
;;;661                tmp = BIT_DMP_INT_EN;
00000e  2002              MOVS     r0,#2
000010  9000              STR      r0,[sp,#0]
000012  e001              B        |L58.24|
                  |L58.20|
;;;662            else
;;;663                tmp = 0x00;
000014  2000              MOVS     r0,#0
000016  9000              STR      r0,[sp,#0]
                  |L58.24|
;;;664            if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
000018  4a1c              LDR      r2,|L58.140|
00001a  6812              LDR      r2,[r2,#0]  ; st
00001c  7c51              LDRB     r1,[r2,#0x11]
00001e  4a1b              LDR      r2,|L58.140|
000020  6852              LDR      r2,[r2,#4]  ; st
000022  7810              LDRB     r0,[r2,#0]
000024  466b              MOV      r3,sp
000026  2201              MOVS     r2,#1
000028  f7fffffe          BL       MPU_Write_Len
00002c  b110              CBZ      r0,|L58.52|
;;;665                return -1;
00002e  f04f30ff          MOV      r0,#0xffffffff
                  |L58.50|
;;;666            st.chip_cfg.int_enable = tmp;
;;;667        } else {
;;;668            if (!st.chip_cfg.sensors)
;;;669                return -1;
;;;670            if (enable && st.chip_cfg.int_enable)
;;;671                return 0;
;;;672            if (enable)
;;;673                tmp = BIT_DATA_RDY_EN;
;;;674            else
;;;675                tmp = 0x00;
;;;676            if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
;;;677                return -1;
;;;678            st.chip_cfg.int_enable = tmp;
;;;679        }
;;;680        return 0;
;;;681    }
000032  bd38              POP      {r3-r5,pc}
                  |L58.52|
000034  f89d1000          LDRB     r1,[sp,#0]            ;666
000038  4814              LDR      r0,|L58.140|
00003a  7441              STRB     r1,[r0,#0x11]         ;666
00003c  e023              B        |L58.134|
                  |L58.62|
00003e  4813              LDR      r0,|L58.140|
000040  7a80              LDRB     r0,[r0,#0xa]          ;668
000042  b910              CBNZ     r0,|L58.74|
000044  f04f30ff          MOV      r0,#0xffffffff        ;669
000048  e7f3              B        |L58.50|
                  |L58.74|
00004a  b124              CBZ      r4,|L58.86|
00004c  480f              LDR      r0,|L58.140|
00004e  7c40              LDRB     r0,[r0,#0x11]         ;670
000050  b108              CBZ      r0,|L58.86|
000052  2000              MOVS     r0,#0                 ;671
000054  e7ed              B        |L58.50|
                  |L58.86|
000056  b114              CBZ      r4,|L58.94|
000058  2001              MOVS     r0,#1                 ;673
00005a  9000              STR      r0,[sp,#0]            ;673
00005c  e001              B        |L58.98|
                  |L58.94|
00005e  2000              MOVS     r0,#0                 ;675
000060  9000              STR      r0,[sp,#0]            ;675
                  |L58.98|
000062  4a0a              LDR      r2,|L58.140|
000064  6812              LDR      r2,[r2,#0]            ;676  ; st
000066  7c51              LDRB     r1,[r2,#0x11]         ;676
000068  4a08              LDR      r2,|L58.140|
00006a  6852              LDR      r2,[r2,#4]            ;676  ; st
00006c  7810              LDRB     r0,[r2,#0]            ;676
00006e  466b              MOV      r3,sp                 ;676
000070  2201              MOVS     r2,#1                 ;676
000072  f7fffffe          BL       MPU_Write_Len
000076  b110              CBZ      r0,|L58.126|
000078  f04f30ff          MOV      r0,#0xffffffff        ;677
00007c  e7d9              B        |L58.50|
                  |L58.126|
00007e  f89d1000          LDRB     r1,[sp,#0]            ;678
000082  4802              LDR      r0,|L58.140|
000084  7441              STRB     r1,[r0,#0x11]         ;678
                  |L58.134|
000086  2000              MOVS     r0,#0                 ;680
000088  e7d3              B        |L58.50|
;;;682    
                          ENDP

00008a  0000              DCW      0x0000
                  |L58.140|
                          DCD      ||st||

                          AREA ||i.setup_compass||, CODE, READONLY, ALIGN=2

                  setup_compass PROC
;;;2949   /* This initialization is similar to the one in ak8975.c. */
;;;2950   static int setup_compass(void)
000000  b538              PUSH     {r3-r5,lr}
;;;2951   {
;;;2952       unsigned char data[4], akm_addr;
;;;2953   
;;;2954       mpu_set_bypass(1);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       mpu_set_bypass
;;;2955   
;;;2956       /* Find compass. Possible addresses range from 0x0C to 0x0F. */
;;;2957       for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
000008  240c              MOVS     r4,#0xc
00000a  e00e              B        |L59.42|
                  |L59.12|
;;;2958           int result;
;;;2959           result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
00000c  466b              MOV      r3,sp
00000e  2201              MOVS     r2,#1
000010  2100              MOVS     r1,#0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       MPU_Read_Len
000018  4605              MOV      r5,r0
;;;2960           if (!result && (data[0] == AKM_WHOAMI))
00001a  b925              CBNZ     r5,|L59.38|
00001c  f89d0000          LDRB     r0,[sp,#0]
000020  2848              CMP      r0,#0x48
000022  d100              BNE      |L59.38|
;;;2961               break;
000024  e003              B        |L59.46|
                  |L59.38|
000026  1c60              ADDS     r0,r4,#1              ;2957
000028  b2c4              UXTB     r4,r0                 ;2957
                  |L59.42|
00002a  2c0f              CMP      r4,#0xf               ;2957
00002c  ddee              BLE      |L59.12|
                  |L59.46|
00002e  bf00              NOP      
;;;2962       }
;;;2963   
;;;2964       if (akm_addr > 0x0F) {
000030  2c0f              CMP      r4,#0xf
000032  dd05              BLE      |L59.64|
;;;2965           /* TODO: Handle this case in all compass-related functions. */
;;;2966           log_e("Compass not found.\n");
000034  a081              ADR      r0,|L59.572|
000036  f7fffffe          BL       __2printf
;;;2967           return -1;
00003a  f04f30ff          MOV      r0,#0xffffffff
                  |L59.62|
;;;2968       }
;;;2969   
;;;2970       st.chip_cfg.compass_addr = akm_addr;
;;;2971   
;;;2972       data[0] = AKM_POWER_DOWN;
;;;2973       if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
;;;2974           return -1;
;;;2975       delay_ms(1);
;;;2976   
;;;2977       data[0] = AKM_FUSE_ROM_ACCESS;
;;;2978       if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
;;;2979           return -1;
;;;2980       delay_ms(1);
;;;2981   
;;;2982       /* Get sensitivity adjustment data from fuse ROM. */
;;;2983       if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
;;;2984           return -1;
;;;2985       st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
;;;2986       st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
;;;2987       st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
;;;2988   
;;;2989       data[0] = AKM_POWER_DOWN;
;;;2990       if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
;;;2991           return -1;
;;;2992       delay_ms(1);
;;;2993   
;;;2994       mpu_set_bypass(0);
;;;2995   
;;;2996       /* Set up master mode, master clock, and ES bit. */
;;;2997       data[0] = 0x40;
;;;2998       if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
;;;2999           return -1;
;;;3000   
;;;3001       /* Slave 0 reads from AKM data registers. */
;;;3002       data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
;;;3003       if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
;;;3004           return -1;
;;;3005   
;;;3006       /* Compass reads start at this register. */
;;;3007       data[0] = AKM_REG_ST1;
;;;3008       if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
;;;3009           return -1;
;;;3010   
;;;3011       /* Enable slave 0, 8-byte reads. */
;;;3012       data[0] = BIT_SLAVE_EN | 8;
;;;3013       if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
;;;3014           return -1;
;;;3015   
;;;3016       /* Slave 1 changes AKM measurement mode. */
;;;3017       data[0] = st.chip_cfg.compass_addr;
;;;3018       if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
;;;3019           return -1;
;;;3020   
;;;3021       /* AKM measurement mode register. */
;;;3022       data[0] = AKM_REG_CNTL;
;;;3023       if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
;;;3024           return -1;
;;;3025   
;;;3026       /* Enable slave 1, 1-byte writes. */
;;;3027       data[0] = BIT_SLAVE_EN | 1;
;;;3028       if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
;;;3029           return -1;
;;;3030   
;;;3031       /* Set slave 1 data. */
;;;3032       data[0] = AKM_SINGLE_MEASUREMENT;
;;;3033       if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
;;;3034           return -1;
;;;3035   
;;;3036       /* Trigger slave 0 and slave 1 actions at each sample. */
;;;3037       data[0] = 0x03;
;;;3038       if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
;;;3039           return -1;
;;;3040   
;;;3041   #ifdef MPU9150
;;;3042       /* For the MPU9150, the auxiliary I2C bus needs to be set to VDD. */
;;;3043       data[0] = BIT_I2C_MST_VDDIO;
;;;3044       if (i2c_write(st.hw->addr, st.reg->yg_offs_tc, 1, data))
;;;3045           return -1;
;;;3046   #endif
;;;3047   
;;;3048       return 0;
;;;3049   }
00003e  bd38              POP      {r3-r5,pc}
                  |L59.64|
000040  4883              LDR      r0,|L59.592|
000042  f880402a          STRB     r4,[r0,#0x2a]         ;2970
000046  2010              MOVS     r0,#0x10              ;2972
000048  f88d0000          STRB     r0,[sp,#0]            ;2972
00004c  4980              LDR      r1,|L59.592|
00004e  f891002a          LDRB     r0,[r1,#0x2a]         ;2973
000052  466b              MOV      r3,sp                 ;2973
000054  2201              MOVS     r2,#1                 ;2973
000056  210a              MOVS     r1,#0xa               ;2973
000058  f7fffffe          BL       MPU_Write_Len
00005c  b110              CBZ      r0,|L59.100|
00005e  f04f30ff          MOV      r0,#0xffffffff        ;2974
000062  e7ec              B        |L59.62|
                  |L59.100|
000064  2001              MOVS     r0,#1                 ;2975
000066  f7fffffe          BL       delay_ms
00006a  201f              MOVS     r0,#0x1f              ;2977
00006c  f88d0000          STRB     r0,[sp,#0]            ;2977
000070  4977              LDR      r1,|L59.592|
000072  f891002a          LDRB     r0,[r1,#0x2a]         ;2978
000076  466b              MOV      r3,sp                 ;2978
000078  2201              MOVS     r2,#1                 ;2978
00007a  210a              MOVS     r1,#0xa               ;2978
00007c  f7fffffe          BL       MPU_Write_Len
000080  b110              CBZ      r0,|L59.136|
000082  f04f30ff          MOV      r0,#0xffffffff        ;2979
000086  e7da              B        |L59.62|
                  |L59.136|
000088  2001              MOVS     r0,#1                 ;2980
00008a  f7fffffe          BL       delay_ms
00008e  4970              LDR      r1,|L59.592|
000090  f891002a          LDRB     r0,[r1,#0x2a]         ;2983
000094  466b              MOV      r3,sp                 ;2983
000096  2203              MOVS     r2,#3                 ;2983
000098  2110              MOVS     r1,#0x10              ;2983
00009a  f7fffffe          BL       MPU_Read_Len
00009e  b110              CBZ      r0,|L59.166|
0000a0  f04f30ff          MOV      r0,#0xffffffff        ;2984
0000a4  e7cb              B        |L59.62|
                  |L59.166|
0000a6  f89d0000          LDRB     r0,[sp,#0]            ;2985
0000aa  3080              ADDS     r0,r0,#0x80           ;2985
0000ac  4968              LDR      r1,|L59.592|
0000ae  8588              STRH     r0,[r1,#0x2c]         ;2985
0000b0  f89d1001          LDRB     r1,[sp,#1]            ;2986
0000b4  3180              ADDS     r1,r1,#0x80           ;2986
0000b6  4866              LDR      r0,|L59.592|
0000b8  85c1              STRH     r1,[r0,#0x2e]         ;2986
0000ba  f89d1002          LDRB     r1,[sp,#2]            ;2987
0000be  3180              ADDS     r1,r1,#0x80           ;2987
0000c0  8601              STRH     r1,[r0,#0x30]         ;2987
0000c2  2010              MOVS     r0,#0x10              ;2989
0000c4  f88d0000          STRB     r0,[sp,#0]            ;2989
0000c8  4961              LDR      r1,|L59.592|
0000ca  f891002a          LDRB     r0,[r1,#0x2a]         ;2990
0000ce  466b              MOV      r3,sp                 ;2990
0000d0  2201              MOVS     r2,#1                 ;2990
0000d2  210a              MOVS     r1,#0xa               ;2990
0000d4  f7fffffe          BL       MPU_Write_Len
0000d8  b110              CBZ      r0,|L59.224|
0000da  f04f30ff          MOV      r0,#0xffffffff        ;2991
0000de  e7ae              B        |L59.62|
                  |L59.224|
0000e0  2001              MOVS     r0,#1                 ;2992
0000e2  f7fffffe          BL       delay_ms
0000e6  2000              MOVS     r0,#0                 ;2994
0000e8  f7fffffe          BL       mpu_set_bypass
0000ec  2040              MOVS     r0,#0x40              ;2997
0000ee  f88d0000          STRB     r0,[sp,#0]            ;2997
0000f2  4a57              LDR      r2,|L59.592|
0000f4  6812              LDR      r2,[r2,#0]            ;2998  ; st
0000f6  7e91              LDRB     r1,[r2,#0x1a]         ;2998
0000f8  4a55              LDR      r2,|L59.592|
0000fa  6852              LDR      r2,[r2,#4]            ;2998  ; st
0000fc  7810              LDRB     r0,[r2,#0]            ;2998
0000fe  466b              MOV      r3,sp                 ;2998
000100  2201              MOVS     r2,#1                 ;2998
000102  f7fffffe          BL       MPU_Write_Len
000106  b110              CBZ      r0,|L59.270|
000108  f04f30ff          MOV      r0,#0xffffffff        ;2999
00010c  e797              B        |L59.62|
                  |L59.270|
00010e  4850              LDR      r0,|L59.592|
000110  f890002a          LDRB     r0,[r0,#0x2a]         ;3002
000114  f0400080          ORR      r0,r0,#0x80           ;3002
000118  f88d0000          STRB     r0,[sp,#0]            ;3002
00011c  4a4c              LDR      r2,|L59.592|
00011e  6812              LDR      r2,[r2,#0]            ;3003  ; st
000120  7f91              LDRB     r1,[r2,#0x1e]         ;3003
000122  4a4b              LDR      r2,|L59.592|
000124  6852              LDR      r2,[r2,#4]            ;3003  ; st
000126  7810              LDRB     r0,[r2,#0]            ;3003
000128  466b              MOV      r3,sp                 ;3003
00012a  2201              MOVS     r2,#1                 ;3003
00012c  f7fffffe          BL       MPU_Write_Len
000130  b110              CBZ      r0,|L59.312|
000132  f04f30ff          MOV      r0,#0xffffffff        ;3004
000136  e782              B        |L59.62|
                  |L59.312|
000138  2002              MOVS     r0,#2                 ;3007
00013a  f88d0000          STRB     r0,[sp,#0]            ;3007
00013e  4a44              LDR      r2,|L59.592|
000140  6812              LDR      r2,[r2,#0]            ;3008  ; st
000142  7fd1              LDRB     r1,[r2,#0x1f]         ;3008
000144  4a42              LDR      r2,|L59.592|
000146  6852              LDR      r2,[r2,#4]            ;3008  ; st
000148  7810              LDRB     r0,[r2,#0]            ;3008
00014a  466b              MOV      r3,sp                 ;3008
00014c  2201              MOVS     r2,#1                 ;3008
00014e  f7fffffe          BL       MPU_Write_Len
000152  b110              CBZ      r0,|L59.346|
000154  f04f30ff          MOV      r0,#0xffffffff        ;3009
000158  e771              B        |L59.62|
                  |L59.346|
00015a  2088              MOVS     r0,#0x88              ;3012
00015c  f88d0000          STRB     r0,[sp,#0]            ;3012
000160  4a3b              LDR      r2,|L59.592|
000162  6812              LDR      r2,[r2,#0]            ;3013  ; st
000164  f8921020          LDRB     r1,[r2,#0x20]         ;3013
000168  4a39              LDR      r2,|L59.592|
00016a  6852              LDR      r2,[r2,#4]            ;3013  ; st
00016c  7810              LDRB     r0,[r2,#0]            ;3013
00016e  466b              MOV      r3,sp                 ;3013
000170  2201              MOVS     r2,#1                 ;3013
000172  f7fffffe          BL       MPU_Write_Len
000176  b110              CBZ      r0,|L59.382|
000178  f04f30ff          MOV      r0,#0xffffffff        ;3014
00017c  e75f              B        |L59.62|
                  |L59.382|
00017e  4834              LDR      r0,|L59.592|
000180  f890002a          LDRB     r0,[r0,#0x2a]         ;3017
000184  f88d0000          STRB     r0,[sp,#0]            ;3017
000188  4a31              LDR      r2,|L59.592|
00018a  6812              LDR      r2,[r2,#0]            ;3018  ; st
00018c  f8921021          LDRB     r1,[r2,#0x21]         ;3018
000190  4a2f              LDR      r2,|L59.592|
000192  6852              LDR      r2,[r2,#4]            ;3018  ; st
000194  7810              LDRB     r0,[r2,#0]            ;3018
000196  466b              MOV      r3,sp                 ;3018
000198  2201              MOVS     r2,#1                 ;3018
00019a  f7fffffe          BL       MPU_Write_Len
00019e  b110              CBZ      r0,|L59.422|
0001a0  f04f30ff          MOV      r0,#0xffffffff        ;3019
0001a4  e74b              B        |L59.62|
                  |L59.422|
0001a6  200a              MOVS     r0,#0xa               ;3022
0001a8  f88d0000          STRB     r0,[sp,#0]            ;3022
0001ac  4a28              LDR      r2,|L59.592|
0001ae  6812              LDR      r2,[r2,#0]            ;3023  ; st
0001b0  f8921022          LDRB     r1,[r2,#0x22]         ;3023
0001b4  4a26              LDR      r2,|L59.592|
0001b6  6852              LDR      r2,[r2,#4]            ;3023  ; st
0001b8  7810              LDRB     r0,[r2,#0]            ;3023
0001ba  466b              MOV      r3,sp                 ;3023
0001bc  2201              MOVS     r2,#1                 ;3023
0001be  f7fffffe          BL       MPU_Write_Len
0001c2  b110              CBZ      r0,|L59.458|
0001c4  f04f30ff          MOV      r0,#0xffffffff        ;3024
0001c8  e739              B        |L59.62|
                  |L59.458|
0001ca  2081              MOVS     r0,#0x81              ;3027
0001cc  f88d0000          STRB     r0,[sp,#0]            ;3027
0001d0  4a1f              LDR      r2,|L59.592|
0001d2  6812              LDR      r2,[r2,#0]            ;3028  ; st
0001d4  f8921023          LDRB     r1,[r2,#0x23]         ;3028
0001d8  4a1d              LDR      r2,|L59.592|
0001da  6852              LDR      r2,[r2,#4]            ;3028  ; st
0001dc  7810              LDRB     r0,[r2,#0]            ;3028
0001de  466b              MOV      r3,sp                 ;3028
0001e0  2201              MOVS     r2,#1                 ;3028
0001e2  f7fffffe          BL       MPU_Write_Len
0001e6  b110              CBZ      r0,|L59.494|
0001e8  f04f30ff          MOV      r0,#0xffffffff        ;3029
0001ec  e727              B        |L59.62|
                  |L59.494|
0001ee  2011              MOVS     r0,#0x11              ;3032
0001f0  f88d0000          STRB     r0,[sp,#0]            ;3032
0001f4  4a16              LDR      r2,|L59.592|
0001f6  6812              LDR      r2,[r2,#0]            ;3033  ; st
0001f8  f8921026          LDRB     r1,[r2,#0x26]         ;3033
0001fc  4a14              LDR      r2,|L59.592|
0001fe  6852              LDR      r2,[r2,#4]            ;3033  ; st
000200  7810              LDRB     r0,[r2,#0]            ;3033
000202  466b              MOV      r3,sp                 ;3033
000204  2201              MOVS     r2,#1                 ;3033
000206  f7fffffe          BL       MPU_Write_Len
00020a  b110              CBZ      r0,|L59.530|
00020c  f04f30ff          MOV      r0,#0xffffffff        ;3034
000210  e715              B        |L59.62|
                  |L59.530|
000212  2003              MOVS     r0,#3                 ;3037
000214  f88d0000          STRB     r0,[sp,#0]            ;3037
000218  4a0d              LDR      r2,|L59.592|
00021a  6812              LDR      r2,[r2,#0]            ;3038  ; st
00021c  f8921027          LDRB     r1,[r2,#0x27]         ;3038
000220  4a0b              LDR      r2,|L59.592|
000222  6852              LDR      r2,[r2,#4]            ;3038  ; st
000224  7810              LDRB     r0,[r2,#0]            ;3038
000226  466b              MOV      r3,sp                 ;3038
000228  2201              MOVS     r2,#1                 ;3038
00022a  f7fffffe          BL       MPU_Write_Len
00022e  b110              CBZ      r0,|L59.566|
000230  f04f30ff          MOV      r0,#0xffffffff        ;3039
000234  e703              B        |L59.62|
                  |L59.566|
000236  2000              MOVS     r0,#0                 ;3048
000238  e701              B        |L59.62|
;;;3050   #endif
                          ENDP

00023a  0000              DCW      0x0000
                  |L59.572|
00023c  436f6d70          DCB      "Compass not found.\n",0
000240  61737320
000244  6e6f7420
000248  666f756e
00024c  642e0a00
                  |L59.592|
                          DCD      ||st||

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  ||reg||
000000  75191a0c          DCB      0x75,0x19,0x1a,0x0c
000004  6a231b1c          DCB      0x6a,0x23,0x1b,0x1c
000008  1d1e1f20          DCB      0x1d,0x1e,0x1f,0x20
00000c  7274433b          DCB      0x72,0x74,0x43,0x3b
000010  4138393a          DCB      0x41,0x38,0x39,0x3a
000014  696b6c37          DCB      0x69,0x6b,0x6c,0x37
000018  6f77246d          DCB      0x6f,0x77,0x24,0x6d
00001c  6e702526          DCB      0x6e,0x70,0x25,0x26
000020  2728292a          DCB      0x27,0x28,0x29,0x2a
000024  34636467          DCB      0x34,0x63,0x64,0x67
000028  4900              DCB      0x49,0x00
                  ||hw||
00002a  6800              DCB      0x68,0x00
00002c  0400              DCW      0x0400
00002e  8000              DCB      0x80,0x00
000030  01410000          DCW      0x0141,0x0000
000034  01001333          DCW      0x0100,0x1333
                  test
                          DCD      0x00000083
                          DCD      0x00004000
000040  00020000          DCB      0x00,0x02,0x00,0x00
000044  00c8              DCW      0x00c8
000046  c800              DCB      0xc8,0x00
000048  41a00000          DCFS     0x41a00000 ; 20
00004c  42700000          DCFS     0x42700000 ; 60
000050  3f000000          DCFS     0x3f000000 ; 0.5
000054  3e666666          DCFS     0x3e666666 ; 0.22499999403953552
000058  3f2ccccd          DCFS     0x3f2ccccd ; 0.67500001192092896
00005c  3f000000          DCFS     0x3f000000 ; 0.5
000060  3f000000          DCFS     0x3f000000 ; 0.5
000064  000a              DCW      0x000a
000066  0000              DCB      0x00,0x00
                  mpu_6500_st_tb
000068  0a3c0a56          DCW      0x0a3c,0x0a56
00006c  0a700a8b          DCW      0x0a70,0x0a8b
000070  0aa60ac1          DCW      0x0aa6,0x0ac1
000074  0add0af8          DCW      0x0add,0x0af8
000078  0b150b31          DCW      0x0b15,0x0b31
00007c  0b4e0b6b          DCW      0x0b4e,0x0b6b
000080  0b880ba5          DCW      0x0b88,0x0ba5
000084  0bc30be1          DCW      0x0bc3,0x0be1
000088  0c000c1e          DCW      0x0c00,0x0c1e
00008c  0c3d0c5d          DCW      0x0c3d,0x0c5d
000090  0c7c0c9c          DCW      0x0c7c,0x0c9c
000094  0cbd0cdd          DCW      0x0cbd,0x0cdd
000098  0cfe0d1f          DCW      0x0cfe,0x0d1f
00009c  0d410d63          DCW      0x0d41,0x0d63
0000a0  0d850da8          DCW      0x0d85,0x0da8
0000a4  0dcb0dee          DCW      0x0dcb,0x0dee
0000a8  0e120e36          DCW      0x0e12,0x0e36
0000ac  0e5a0e7f          DCW      0x0e5a,0x0e7f
0000b0  0ea40eca          DCW      0x0ea4,0x0eca
0000b4  0eef0f16          DCW      0x0eef,0x0f16
0000b8  0f3c0f63          DCW      0x0f3c,0x0f63
0000bc  0f8b0fb3          DCW      0x0f8b,0x0fb3
0000c0  0fdb1003          DCW      0x0fdb,0x1003
0000c4  102c1056          DCW      0x102c,0x1056
0000c8  108010aa          DCW      0x1080,0x10aa
0000cc  10d41100          DCW      0x10d4,0x1100
0000d0  112b1157          DCW      0x112b,0x1157
0000d4  118311b0          DCW      0x1183,0x11b0
0000d8  11de120b          DCW      0x11de,0x120b
0000dc  12391268          DCW      0x1239,0x1268
0000e0  129712c7          DCW      0x1297,0x12c7
0000e4  12f71327          DCW      0x12f7,0x1327
0000e8  1359138a          DCW      0x1359,0x138a
0000ec  13bc13ef          DCW      0x13bc,0x13ef
0000f0  14221455          DCW      0x1422,0x1455
0000f4  148914be          DCW      0x1489,0x14be
0000f8  14f31529          DCW      0x14f3,0x1529
0000fc  155f1595          DCW      0x155f,0x1595
000100  15cd1604          DCW      0x15cd,0x1604
000104  163d1676          DCW      0x163d,0x1676
000108  16af16e9          DCW      0x16af,0x16e9
00010c  1724175f          DCW      0x1724,0x175f
000110  179b17d8          DCW      0x179b,0x17d8
000114  18151852          DCW      0x1815,0x1852
000118  189118cf          DCW      0x1891,0x18cf
00011c  190f194f          DCW      0x190f,0x194f
000120  199019d1          DCW      0x1990,0x19d1
000124  1a131a56          DCW      0x1a13,0x1a56
000128  1a9a1ade          DCW      0x1a9a,0x1ade
00012c  1b221b68          DCW      0x1b22,0x1b68
000130  1bae1bf5          DCW      0x1bae,0x1bf5
000134  1c3d1c85          DCW      0x1c3d,0x1c85
000138  1cce1d18          DCW      0x1cce,0x1d18
00013c  1d621dad          DCW      0x1d62,0x1dad
000140  1df91e46          DCW      0x1df9,0x1e46
000144  1e941ee2          DCW      0x1e94,0x1ee2
000148  1f311f81          DCW      0x1f31,0x1f81
00014c  1fd12023          DCW      0x1fd1,0x2023
000150  207520c8          DCW      0x2075,0x20c8
000154  211c2171          DCW      0x211c,0x2171
000158  21c7221d          DCW      0x21c7,0x221d
00015c  227422cd          DCW      0x2274,0x22cd
000160  23262380          DCW      0x2326,0x2380
000164  23da2436          DCW      0x23da,0x2436
000168  249324f1          DCW      0x2493,0x24f1
00016c  254f25af          DCW      0x254f,0x25af
000170  260f2671          DCW      0x260f,0x2671
000174  26d32736          DCW      0x26d3,0x2736
000178  279b2800          DCW      0x279b,0x2800
00017c  286728ce          DCW      0x2867,0x28ce
000180  293629a0          DCW      0x2936,0x29a0
000184  2a0b2a76          DCW      0x2a0b,0x2a76
000188  2ae32b51          DCW      0x2ae3,0x2b51
00018c  2bc02c30          DCW      0x2bc0,0x2c30
000190  2ca12d13          DCW      0x2ca1,0x2d13
000194  2d862dfb          DCW      0x2d86,0x2dfb
000198  2e712ee8          DCW      0x2e71,0x2ee8
00019c  2f602fd9          DCW      0x2f60,0x2fd9
0001a0  305330cf          DCW      0x3053,0x30cf
0001a4  314c31ca          DCW      0x314c,0x31ca
0001a8  324a32ca          DCW      0x324a,0x32ca
0001ac  334c33d0          DCW      0x334c,0x33d0
0001b0  345434da          DCW      0x3454,0x34da
0001b4  356235ea          DCW      0x3562,0x35ea
0001b8  36743700          DCW      0x3674,0x3700
0001bc  378d381b          DCW      0x378d,0x381b
0001c0  38aa393c          DCW      0x38aa,0x393c
0001c4  39ce3a62          DCW      0x39ce,0x3a62
0001c8  3af83b8f          DCW      0x3af8,0x3b8f
0001cc  3c273cc1          DCW      0x3c27,0x3cc1
0001d0  3d5d3dfa          DCW      0x3d5d,0x3dfa
0001d4  3e983f38          DCW      0x3e98,0x3f38
0001d8  3fda407e          DCW      0x3fda,0x407e
0001dc  412341ca          DCW      0x4123,0x41ca
0001e0  4272431c          DCW      0x4272,0x431c
0001e4  43c84476          DCW      0x43c8,0x4476
0001e8  452545d6          DCW      0x4525,0x45d6
0001ec  4689473d          DCW      0x4689,0x473d
0001f0  47f448ac          DCW      0x47f4,0x48ac
0001f4  49664a22          DCW      0x4966,0x4a22
0001f8  4adf4b9f          DCW      0x4adf,0x4b9f
0001fc  4c614d24          DCW      0x4c61,0x4d24
000200  4dea4eb1          DCW      0x4dea,0x4eb1
000204  4f7b5046          DCW      0x4f7b,0x5046
000208  511451e3          DCW      0x5114,0x51e3
00020c  52b55389          DCW      0x52b5,0x5389
000210  545e5536          DCW      0x545e,0x5536
000214  561156ed          DCW      0x5611,0x56ed
000218  57cb58ac          DCW      0x57cb,0x58ac
00021c  598f5a74          DCW      0x598f,0x5a74
000220  5b5c5c46          DCW      0x5b5c,0x5c46
000224  5d325e21          DCW      0x5d32,0x5e21
000228  5f126005          DCW      0x5f12,0x6005
00022c  60fb61f3          DCW      0x60fb,0x61f3
000230  62ee63eb          DCW      0x62ee,0x63eb
000234  64eb65ed          DCW      0x64eb,0x65ed
000238  66f267fa          DCW      0x66f2,0x67fa
00023c  69046a11          DCW      0x6904,0x6a11
000240  6b206c33          DCW      0x6b20,0x6c33
000244  6d486e5f          DCW      0x6d48,0x6e5f
000248  6f7a7097          DCW      0x6f7a,0x7097
00024c  71b872db          DCW      0x71b8,0x72db
000250  7401752a          DCW      0x7401,0x752a
000254  76567785          DCW      0x7656,0x7785
000258  78b779ec          DCW      0x78b7,0x79ec
00025c  7b247c5f          DCW      0x7b24,0x7c5f
000260  7d9d7edf          DCW      0x7d9d,0x7edf
000264  8024816c          DCW      0x8024,0x816c

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  654d504c          DCB      "eMPL 5.1",0
000004  20352e31
000008  00      

                          AREA ||.data||, DATA, ALIGN=2

                  mpl_key
                          DCD      ||.conststring||
                  ||st||
                          DCD      ||reg||
                          DCD      ||hw||
00000c  00000000          DCB      0x00,0x00,0x00,0x00
000010  0000              DCB      0x00,0x00
000012  0000              DCW      0x0000
000014  00000000          DCB      0x00,0x00,0x00,0x00
000018  00000000          DCB      0x00,0x00,0x00,0x00
                          %        8
000024  00000000          DCB      0x00,0x00,0x00,0x00
000028  0000              DCB      0x00,0x00
00002a  0000              DCW      0x0000
00002c  0000              DCW      0x0000
00002e  0000              DCB      0x00,0x00
                          DCD      0x00000000
000034  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      test
                  gyro_orientation
00003c  01000000          DCB      0x01,0x00,0x00,0x00
000040  01000000          DCB      0x01,0x00,0x00,0x00
000044  01                DCB      0x01
                  comp_orientation
000045  000100            DCB      0x00,0x01,0x00
000048  01000000          DCB      0x01,0x00,0x00,0x00
00004c  00ff              DCB      0x00,0xff

;*** Start embedded assembler ***

#line 1 "..\\DMP\\driver\\eMPL\\inv_mpu.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_inv_mpu_c_mpl_key____REV16|
#line 388 "..\\CORE\\cmsis_armcc.h"
|__asm___9_inv_mpu_c_mpl_key____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_inv_mpu_c_mpl_key____REVSH|
#line 402
|__asm___9_inv_mpu_c_mpl_key____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_inv_mpu_c_mpl_key____RRX|
#line 587
|__asm___9_inv_mpu_c_mpl_key____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
