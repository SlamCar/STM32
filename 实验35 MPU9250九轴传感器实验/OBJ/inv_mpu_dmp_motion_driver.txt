; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\inv_mpu_dmp_motion_driver.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\inv_mpu_dmp_motion_driver.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\OBJ -I..\USER -I..\HALLIB\STM32F7xx_HAL_Driver\Inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\SDRAM -I..\HARDWARE\IIC -I..\HARDWARE\24CXX -I..\HARDWARE\MPU9250 -I..\HARDWARE\DHT11 -I..\HARDWARE\MPU -I..\USMART -I..\DMP\driver\eMPL -I..\DMP\driver\include -I..\DMP\driver\stm32L -I..\DMP\eMPL-hal -I..\DMP\mllite -I..\DMP\mpl -I..\UCOSIII -I..\UCOSIII\UCOS-BSP -I..\UCOSIII\UCOS-CONFIG -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\uC-CPU\ARM-Cortex-M4\RealView -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-CPU -I..\HARDWARE\MY_FUNCTION -I..\USER -I..\HARDWARE\CRC -I..\HARDWARE\DMA -I..\HARDWARE\HEART_BEAT -I..\HARDWARE\RECEIVE_ANALYZE -I..\HARDWARE\FEED_BACK -I..\HARDWARE\DATA -I"D:\1111111\32F4\Slam car\实验35 MPU9250九轴传感器实验\USER\RTE" -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0 -IF:\Keil_v5\ARM\CMSIS\Include -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__UVISION_VERSION=514 -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=..\obj\inv_mpu_dmp_motion_driver.crf ..\DMP\driver\eMPL\inv_mpu_dmp_motion_driver.c]
                          THUMB

                          AREA ||i.decode_gesture||, CODE, READONLY, ALIGN=2

                  decode_gesture PROC
;;;1191    */
;;;1192   static int decode_gesture(unsigned char *gesture)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1193   {
000004  4604              MOV      r4,r0
;;;1194       unsigned char tap, android_orient;
;;;1195   
;;;1196       android_orient = gesture[3] & 0xC0;
000006  78e0              LDRB     r0,[r4,#3]
000008  f00006c0          AND      r6,r0,#0xc0
;;;1197       tap = 0x3F & gesture[3];
00000c  78e0              LDRB     r0,[r4,#3]
00000e  f000053f          AND      r5,r0,#0x3f
;;;1198   
;;;1199       if (gesture[1] & INT_SRC_TAP) {
000012  7860              LDRB     r0,[r4,#1]
000014  f0000001          AND      r0,r0,#1
000018  b198              CBZ      r0,|L1.66|
;;;1200           unsigned char direction, count;
;;;1201           direction = tap >> 3;
00001a  10ef              ASRS     r7,r5,#3
;;;1202           count = (tap % 8) + 1;
00001c  4628              MOV      r0,r5
00001e  17e9              ASRS     r1,r5,#31
000020  eb057151          ADD      r1,r5,r1,LSR #29
000024  10c9              ASRS     r1,r1,#3
000026  eba501c1          SUB      r1,r5,r1,LSL #3
00002a  1c49              ADDS     r1,r1,#1
00002c  f00108ff          AND      r8,r1,#0xff
;;;1203           if (dmp.tap_cb)
000030  480b              LDR      r0,|L1.96|
000032  6800              LDR      r0,[r0,#0]  ; dmp
000034  b120              CBZ      r0,|L1.64|
;;;1204               dmp.tap_cb(direction, count);
000036  480a              LDR      r0,|L1.96|
000038  4641              MOV      r1,r8
00003a  6802              LDR      r2,[r0,#0]  ; dmp
00003c  4638              MOV      r0,r7
00003e  4790              BLX      r2
                  |L1.64|
;;;1205       }
000040  bf00              NOP      
                  |L1.66|
;;;1206   
;;;1207       if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
000042  7860              LDRB     r0,[r4,#1]
000044  f0000008          AND      r0,r0,#8
000048  b130              CBZ      r0,|L1.88|
;;;1208           if (dmp.android_orient_cb)
00004a  4805              LDR      r0,|L1.96|
00004c  6840              LDR      r0,[r0,#4]  ; dmp
00004e  b118              CBZ      r0,|L1.88|
;;;1209               dmp.android_orient_cb(android_orient >> 6);
000050  11b0              ASRS     r0,r6,#6
000052  4a03              LDR      r2,|L1.96|
000054  6851              LDR      r1,[r2,#4]  ; dmp
000056  4788              BLX      r1
                  |L1.88|
;;;1210       }
;;;1211   
;;;1212       return 0;
000058  2000              MOVS     r0,#0
;;;1213   }
00005a  e8bd81f0          POP      {r4-r8,pc}
;;;1214   
                          ENDP

00005e  0000              DCW      0x0000
                  |L1.96|
                          DCD      ||dmp||

                          AREA ||i.dmp_enable_6x_lp_quat||, CODE, READONLY, ALIGN=1

                  dmp_enable_6x_lp_quat PROC
;;;1170    */
;;;1171   int dmp_enable_6x_lp_quat(unsigned char enable)
000000  b538              PUSH     {r3-r5,lr}
;;;1172   {
000002  4604              MOV      r4,r0
;;;1173       unsigned char regs[4];
;;;1174       if (enable) {
000004  b164              CBZ      r4,|L2.32|
;;;1175           regs[0] = DINA20;
000006  2020              MOVS     r0,#0x20
000008  f88d0000          STRB     r0,[sp,#0]
;;;1176           regs[1] = DINA28;
00000c  2028              MOVS     r0,#0x28
00000e  f88d0001          STRB     r0,[sp,#1]
;;;1177           regs[2] = DINA30;
000012  2030              MOVS     r0,#0x30
000014  f88d0002          STRB     r0,[sp,#2]
;;;1178           regs[3] = DINA38;
000018  2038              MOVS     r0,#0x38
00001a  f88d0003          STRB     r0,[sp,#3]
00001e  e004              B        |L2.42|
                  |L2.32|
;;;1179       } else
;;;1180           memset(regs, 0xA3, 4);
000020  22a3              MOVS     r2,#0xa3
000022  2104              MOVS     r1,#4
000024  4668              MOV      r0,sp
000026  f7fffffe          BL       __aeabi_memset
                  |L2.42|
;;;1181   
;;;1182       mpu_write_mem(CFG_8, 4, regs);
00002a  466a              MOV      r2,sp
00002c  2104              MOVS     r1,#4
00002e  f640209e          MOV      r0,#0xa9e
000032  f7fffffe          BL       mpu_write_mem
;;;1183   
;;;1184       return mpu_reset_fifo();
000036  f7fffffe          BL       mpu_reset_fifo
;;;1185   }
00003a  bd38              POP      {r3-r5,pc}
;;;1186   
                          ENDP


                          AREA ||i.dmp_enable_feature||, CODE, READONLY, ALIGN=2

                  dmp_enable_feature PROC
;;;991     */
;;;992    int dmp_enable_feature(unsigned short mask)
000000  b53e              PUSH     {r1-r5,lr}
;;;993    {
000002  4604              MOV      r4,r0
;;;994        unsigned char tmp[10];
;;;995    
;;;996        /* TODO: All of these settings can probably be integrated into the default
;;;997         * DMP image.
;;;998         */
;;;999        /* Set integration scale factor. */
;;;1000       tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
000004  2002              MOVS     r0,#2
000006  f88d0000          STRB     r0,[sp,#0]
;;;1001       tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
00000a  20ca              MOVS     r0,#0xca
00000c  f88d0001          STRB     r0,[sp,#1]
;;;1002       tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
000010  20e3              MOVS     r0,#0xe3
000012  f88d0002          STRB     r0,[sp,#2]
;;;1003       tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
000016  2009              MOVS     r0,#9
000018  f88d0003          STRB     r0,[sp,#3]
;;;1004       mpu_write_mem(D_0_104, 4, tmp);
00001c  466a              MOV      r2,sp
00001e  2104              MOVS     r1,#4
000020  2068              MOVS     r0,#0x68
000022  f7fffffe          BL       mpu_write_mem
;;;1005   
;;;1006       /* Send sensor data to the FIFO. */
;;;1007       tmp[0] = 0xA3;
000026  20a3              MOVS     r0,#0xa3
000028  f88d0000          STRB     r0,[sp,#0]
;;;1008       if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
00002c  f0040040          AND      r0,r4,#0x40
000030  b148              CBZ      r0,|L3.70|
;;;1009           tmp[1] = 0xC0;
000032  20c0              MOVS     r0,#0xc0
000034  f88d0001          STRB     r0,[sp,#1]
;;;1010           tmp[2] = 0xC8;
000038  20c8              MOVS     r0,#0xc8
00003a  f88d0002          STRB     r0,[sp,#2]
;;;1011           tmp[3] = 0xC2;
00003e  20c2              MOVS     r0,#0xc2
000040  f88d0003          STRB     r0,[sp,#3]
000044  e006              B        |L3.84|
                  |L3.70|
;;;1012       } else {
;;;1013           tmp[1] = 0xA3;
000046  20a3              MOVS     r0,#0xa3
000048  f88d0001          STRB     r0,[sp,#1]
;;;1014           tmp[2] = 0xA3;
00004c  f88d0002          STRB     r0,[sp,#2]
;;;1015           tmp[3] = 0xA3;
000050  f88d0003          STRB     r0,[sp,#3]
                  |L3.84|
;;;1016       }
;;;1017       if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
000054  f40470c0          AND      r0,r4,#0x180
000058  b148              CBZ      r0,|L3.110|
;;;1018           tmp[4] = 0xC4;
00005a  20c4              MOVS     r0,#0xc4
00005c  f88d0004          STRB     r0,[sp,#4]
;;;1019           tmp[5] = 0xCC;
000060  20cc              MOVS     r0,#0xcc
000062  f88d0005          STRB     r0,[sp,#5]
;;;1020           tmp[6] = 0xC6;
000066  20c6              MOVS     r0,#0xc6
000068  f88d0006          STRB     r0,[sp,#6]
00006c  e006              B        |L3.124|
                  |L3.110|
;;;1021       } else {
;;;1022           tmp[4] = 0xA3;
00006e  20a3              MOVS     r0,#0xa3
000070  f88d0004          STRB     r0,[sp,#4]
;;;1023           tmp[5] = 0xA3;
000074  f88d0005          STRB     r0,[sp,#5]
;;;1024           tmp[6] = 0xA3;
000078  f88d0006          STRB     r0,[sp,#6]
                  |L3.124|
;;;1025       }
;;;1026       tmp[7] = 0xA3;
00007c  20a3              MOVS     r0,#0xa3
00007e  f88d0007          STRB     r0,[sp,#7]
;;;1027       tmp[8] = 0xA3;
000082  f88d0008          STRB     r0,[sp,#8]
;;;1028       tmp[9] = 0xA3;
000086  f88d0009          STRB     r0,[sp,#9]
;;;1029       mpu_write_mem(CFG_15,10,tmp);
00008a  466a              MOV      r2,sp
00008c  210a              MOVS     r1,#0xa
00008e  f64020a7          MOV      r0,#0xaa7
000092  f7fffffe          BL       mpu_write_mem
;;;1030   
;;;1031       /* Send gesture data to the FIFO. */
;;;1032       if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
000096  f0040003          AND      r0,r4,#3
00009a  b118              CBZ      r0,|L3.164|
;;;1033           tmp[0] = DINA20;
00009c  2020              MOVS     r0,#0x20
00009e  f88d0000          STRB     r0,[sp,#0]
0000a2  e002              B        |L3.170|
                  |L3.164|
;;;1034       else
;;;1035           tmp[0] = 0xD8;
0000a4  20d8              MOVS     r0,#0xd8
0000a6  f88d0000          STRB     r0,[sp,#0]
                  |L3.170|
;;;1036       mpu_write_mem(CFG_27,1,tmp);
0000aa  466a              MOV      r2,sp
0000ac  2101              MOVS     r1,#1
0000ae  f64020b6          MOV      r0,#0xab6
0000b2  f7fffffe          BL       mpu_write_mem
;;;1037   
;;;1038       if (mask & DMP_FEATURE_GYRO_CAL)
0000b6  f0040020          AND      r0,r4,#0x20
0000ba  b118              CBZ      r0,|L3.196|
;;;1039           dmp_enable_gyro_cal(1);
0000bc  2001              MOVS     r0,#1
0000be  f7fffffe          BL       dmp_enable_gyro_cal
0000c2  e002              B        |L3.202|
                  |L3.196|
;;;1040       else
;;;1041           dmp_enable_gyro_cal(0);
0000c4  2000              MOVS     r0,#0
0000c6  f7fffffe          BL       dmp_enable_gyro_cal
                  |L3.202|
;;;1042   
;;;1043       if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
0000ca  f40470c0          AND      r0,r4,#0x180
0000ce  b308              CBZ      r0,|L3.276|
;;;1044           if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
0000d0  f4047080          AND      r0,r4,#0x100
0000d4  b160              CBZ      r0,|L3.240|
;;;1045               tmp[0] = 0xB2;
0000d6  20b2              MOVS     r0,#0xb2
0000d8  f88d0000          STRB     r0,[sp,#0]
;;;1046               tmp[1] = 0x8B;
0000dc  208b              MOVS     r0,#0x8b
0000de  f88d0001          STRB     r0,[sp,#1]
;;;1047               tmp[2] = 0xB6;
0000e2  20b6              MOVS     r0,#0xb6
0000e4  f88d0002          STRB     r0,[sp,#2]
;;;1048               tmp[3] = 0x9B;
0000e8  209b              MOVS     r0,#0x9b
0000ea  f88d0003          STRB     r0,[sp,#3]
0000ee  e00b              B        |L3.264|
                  |L3.240|
;;;1049           } else {
;;;1050               tmp[0] = DINAC0;
0000f0  20b0              MOVS     r0,#0xb0
0000f2  f88d0000          STRB     r0,[sp,#0]
;;;1051               tmp[1] = DINA80;
0000f6  2080              MOVS     r0,#0x80
0000f8  f88d0001          STRB     r0,[sp,#1]
;;;1052               tmp[2] = DINAC2;
0000fc  20b4              MOVS     r0,#0xb4
0000fe  f88d0002          STRB     r0,[sp,#2]
;;;1053               tmp[3] = DINA90;
000102  2090              MOVS     r0,#0x90
000104  f88d0003          STRB     r0,[sp,#3]
                  |L3.264|
;;;1054           }
;;;1055           mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
000108  466a              MOV      r2,sp
00010a  2104              MOVS     r1,#4
00010c  f64020a2          MOV      r0,#0xaa2
000110  f7fffffe          BL       mpu_write_mem
                  |L3.276|
;;;1056       }
;;;1057   
;;;1058       if (mask & DMP_FEATURE_TAP) {
000114  f0040001          AND      r0,r4,#1
000118  b320              CBZ      r0,|L3.356|
;;;1059           /* Enable tap. */
;;;1060           tmp[0] = 0xF8;
00011a  20f8              MOVS     r0,#0xf8
00011c  f88d0000          STRB     r0,[sp,#0]
;;;1061           mpu_write_mem(CFG_20, 1, tmp);
000120  466a              MOV      r2,sp
000122  2101              MOVS     r1,#1
000124  f44f600b          MOV      r0,#0x8b0
000128  f7fffffe          BL       mpu_write_mem
;;;1062           dmp_set_tap_thresh(TAP_XYZ, 250);
00012c  21fa              MOVS     r1,#0xfa
00012e  2007              MOVS     r0,#7
000130  f7fffffe          BL       dmp_set_tap_thresh
;;;1063           dmp_set_tap_axes(TAP_XYZ);
000134  2007              MOVS     r0,#7
000136  f7fffffe          BL       dmp_set_tap_axes
;;;1064           dmp_set_tap_count(1);
00013a  2001              MOVS     r0,#1
00013c  f7fffffe          BL       dmp_set_tap_count
;;;1065           dmp_set_tap_time(100);
000140  2064              MOVS     r0,#0x64
000142  f7fffffe          BL       dmp_set_tap_time
;;;1066           dmp_set_tap_time_multi(500);
000146  f44f70fa          MOV      r0,#0x1f4
00014a  f7fffffe          BL       dmp_set_tap_time_multi
;;;1067   
;;;1068           dmp_set_shake_reject_thresh(GYRO_SF, 200);
00014e  21c8              MOVS     r1,#0xc8
000150  4830              LDR      r0,|L3.532|
000152  f7fffffe          BL       dmp_set_shake_reject_thresh
;;;1069           dmp_set_shake_reject_time(40);
000156  2028              MOVS     r0,#0x28
000158  f7fffffe          BL       dmp_set_shake_reject_time
;;;1070           dmp_set_shake_reject_timeout(10);
00015c  200a              MOVS     r0,#0xa
00015e  f7fffffe          BL       dmp_set_shake_reject_timeout
000162  e008              B        |L3.374|
                  |L3.356|
;;;1071       } else {
;;;1072           tmp[0] = 0xD8;
000164  20d8              MOVS     r0,#0xd8
000166  f88d0000          STRB     r0,[sp,#0]
;;;1073           mpu_write_mem(CFG_20, 1, tmp);
00016a  466a              MOV      r2,sp
00016c  2101              MOVS     r1,#1
00016e  f44f600b          MOV      r0,#0x8b0
000172  f7fffffe          BL       mpu_write_mem
                  |L3.374|
;;;1074       }
;;;1075   
;;;1076       if (mask & DMP_FEATURE_ANDROID_ORIENT) {
000176  f0040002          AND      r0,r4,#2
00017a  b118              CBZ      r0,|L3.388|
;;;1077           tmp[0] = 0xD9;
00017c  20d9              MOVS     r0,#0xd9
00017e  f88d0000          STRB     r0,[sp,#0]
000182  e002              B        |L3.394|
                  |L3.388|
;;;1078       } else
;;;1079           tmp[0] = 0xD8;
000184  20d8              MOVS     r0,#0xd8
000186  f88d0000          STRB     r0,[sp,#0]
                  |L3.394|
;;;1080       mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
00018a  466a              MOV      r2,sp
00018c  2101              MOVS     r1,#1
00018e  f240703d          MOV      r0,#0x73d
000192  f7fffffe          BL       mpu_write_mem
;;;1081   
;;;1082       if (mask & DMP_FEATURE_LP_QUAT)
000196  f0040004          AND      r0,r4,#4
00019a  b118              CBZ      r0,|L3.420|
;;;1083           dmp_enable_lp_quat(1);
00019c  2001              MOVS     r0,#1
00019e  f7fffffe          BL       dmp_enable_lp_quat
0001a2  e002              B        |L3.426|
                  |L3.420|
;;;1084       else
;;;1085           dmp_enable_lp_quat(0);
0001a4  2000              MOVS     r0,#0
0001a6  f7fffffe          BL       dmp_enable_lp_quat
                  |L3.426|
;;;1086   
;;;1087       if (mask & DMP_FEATURE_6X_LP_QUAT)
0001aa  f0040010          AND      r0,r4,#0x10
0001ae  b118              CBZ      r0,|L3.440|
;;;1088           dmp_enable_6x_lp_quat(1);
0001b0  2001              MOVS     r0,#1
0001b2  f7fffffe          BL       dmp_enable_6x_lp_quat
0001b6  e002              B        |L3.446|
                  |L3.440|
;;;1089       else
;;;1090           dmp_enable_6x_lp_quat(0);
0001b8  2000              MOVS     r0,#0
0001ba  f7fffffe          BL       dmp_enable_6x_lp_quat
                  |L3.446|
;;;1091   
;;;1092       /* Pedometer is always enabled. */
;;;1093       dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
0001be  f0440008          ORR      r0,r4,#8
0001c2  4915              LDR      r1,|L3.536|
0001c4  8148              STRH     r0,[r1,#0xa]
;;;1094       mpu_reset_fifo();
0001c6  f7fffffe          BL       mpu_reset_fifo
;;;1095   
;;;1096       dmp.packet_length = 0;
0001ca  2000              MOVS     r0,#0
0001cc  4912              LDR      r1,|L3.536|
0001ce  7388              STRB     r0,[r1,#0xe]
;;;1097       if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
0001d0  f0040040          AND      r0,r4,#0x40
0001d4  b118              CBZ      r0,|L3.478|
;;;1098           dmp.packet_length += 6;
0001d6  4608              MOV      r0,r1
0001d8  7b80              LDRB     r0,[r0,#0xe]  ; dmp
0001da  1d80              ADDS     r0,r0,#6
0001dc  7388              STRB     r0,[r1,#0xe]
                  |L3.478|
;;;1099       if (mask & DMP_FEATURE_SEND_ANY_GYRO)
0001de  f40470c0          AND      r0,r4,#0x180
0001e2  b120              CBZ      r0,|L3.494|
;;;1100           dmp.packet_length += 6;
0001e4  480c              LDR      r0,|L3.536|
0001e6  7b80              LDRB     r0,[r0,#0xe]  ; dmp
0001e8  1d80              ADDS     r0,r0,#6
0001ea  490b              LDR      r1,|L3.536|
0001ec  7388              STRB     r0,[r1,#0xe]
                  |L3.494|
;;;1101       if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
0001ee  f0040014          AND      r0,r4,#0x14
0001f2  b120              CBZ      r0,|L3.510|
;;;1102           dmp.packet_length += 16;
0001f4  4808              LDR      r0,|L3.536|
0001f6  7b80              LDRB     r0,[r0,#0xe]  ; dmp
0001f8  3010              ADDS     r0,r0,#0x10
0001fa  4907              LDR      r1,|L3.536|
0001fc  7388              STRB     r0,[r1,#0xe]
                  |L3.510|
;;;1103       if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
0001fe  f0040003          AND      r0,r4,#3
000202  b120              CBZ      r0,|L3.526|
;;;1104           dmp.packet_length += 4;
000204  4804              LDR      r0,|L3.536|
000206  7b80              LDRB     r0,[r0,#0xe]  ; dmp
000208  1d00              ADDS     r0,r0,#4
00020a  4903              LDR      r1,|L3.536|
00020c  7388              STRB     r0,[r1,#0xe]
                  |L3.526|
;;;1105   
;;;1106       return 0;
00020e  2000              MOVS     r0,#0
;;;1107   }
000210  bd3e              POP      {r1-r5,pc}
;;;1108   
                          ENDP

000212  0000              DCW      0x0000
                  |L3.532|
                          DCD      0x02cae309
                  |L3.536|
                          DCD      ||dmp||

                          AREA ||i.dmp_enable_gyro_cal||, CODE, READONLY, ALIGN=2

                  dmp_enable_gyro_cal PROC
;;;1128    */
;;;1129   int dmp_enable_gyro_cal(unsigned char enable)
000000  b53e              PUSH     {r1-r5,lr}
;;;1130   {
000002  4604              MOV      r4,r0
;;;1131       if (enable) {
000004  b16c              CBZ      r4,|L4.34|
;;;1132           unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
000006  a10e              ADR      r1,|L4.64|
000008  e9d12000          LDRD     r2,r0,[r1,#0]
00000c  6889              LDR      r1,[r1,#8]
00000e  e9cd2000          STRD     r2,r0,[sp,#0]
000012  9102              STR      r1,[sp,#8]
;;;1133           return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
000014  466a              MOV      r2,sp
000016  2109              MOVS     r1,#9
000018  f44f6097          MOV      r0,#0x4b8
00001c  f7fffffe          BL       mpu_write_mem
                  |L4.32|
;;;1134       } else {
;;;1135           unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
;;;1136           return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
;;;1137       }
;;;1138   }
000020  bd3e              POP      {r1-r5,pc}
                  |L4.34|
000022  a20a              ADR      r2,|L4.76|
000024  e9d21000          LDRD     r1,r0,[r2,#0]         ;1135
000028  6892              LDR      r2,[r2,#8]            ;1135
00002a  e9cd0201          STRD     r0,r2,[sp,#4]         ;1135
00002e  9100              STR      r1,[sp,#0]            ;1135
000030  466a              MOV      r2,sp                 ;1136
000032  2109              MOVS     r1,#9                 ;1136
000034  f44f6097          MOV      r0,#0x4b8             ;1136
000038  f7fffffe          BL       mpu_write_mem
00003c  e7f0              B        |L4.32|
;;;1139   
                          ENDP

00003e  0000              DCW      0x0000
                  |L4.64|
000040  b8aab38d          DCB      184,170,179,141,180,152,"\r5]",0
000044  b4980d35
000048  5d00    
00004a  00                DCB      0
00004b  00                DCB      0
                  |L4.76|
00004c  b8aaaaaa          DCB      184,170,170,170,176,136,195,197,199,0
000050  b088c3c5
000054  c700    
000056  00                DCB      0
000057  00                DCB      0

                          AREA ||i.dmp_enable_lp_quat||, CODE, READONLY, ALIGN=1

                  dmp_enable_lp_quat PROC
;;;1146    */
;;;1147   int dmp_enable_lp_quat(unsigned char enable)
000000  b538              PUSH     {r3-r5,lr}
;;;1148   {
000002  4604              MOV      r4,r0
;;;1149       unsigned char regs[4];
;;;1150       if (enable) {
000004  b164              CBZ      r4,|L5.32|
;;;1151           regs[0] = DINBC0;
000006  20c0              MOVS     r0,#0xc0
000008  f88d0000          STRB     r0,[sp,#0]
;;;1152           regs[1] = DINBC2;
00000c  20c2              MOVS     r0,#0xc2
00000e  f88d0001          STRB     r0,[sp,#1]
;;;1153           regs[2] = DINBC4;
000012  20c4              MOVS     r0,#0xc4
000014  f88d0002          STRB     r0,[sp,#2]
;;;1154           regs[3] = DINBC6;
000018  20c6              MOVS     r0,#0xc6
00001a  f88d0003          STRB     r0,[sp,#3]
00001e  e004              B        |L5.42|
                  |L5.32|
;;;1155       }
;;;1156       else
;;;1157           memset(regs, 0x8B, 4);
000020  228b              MOVS     r2,#0x8b
000022  2104              MOVS     r1,#4
000024  4668              MOV      r0,sp
000026  f7fffffe          BL       __aeabi_memset
                  |L5.42|
;;;1158   
;;;1159       mpu_write_mem(CFG_LP_QUAT, 4, regs);
00002a  466a              MOV      r2,sp
00002c  2104              MOVS     r1,#4
00002e  f6402098          MOV      r0,#0xa98
000032  f7fffffe          BL       mpu_write_mem
;;;1160   
;;;1161       return mpu_reset_fifo();
000036  f7fffffe          BL       mpu_reset_fifo
;;;1162   }
00003a  bd38              POP      {r3-r5,pc}
;;;1163   
                          ENDP


                          AREA ||i.dmp_get_enabled_features||, CODE, READONLY, ALIGN=2

                  dmp_get_enabled_features PROC
;;;1113    */
;;;1114   int dmp_get_enabled_features(unsigned short *mask)
000000  4601              MOV      r1,r0
;;;1115   {
;;;1116       mask[0] = dmp.feature_mask;
000002  4802              LDR      r0,|L6.12|
000004  8940              LDRH     r0,[r0,#0xa]  ; dmp
000006  8008              STRH     r0,[r1,#0]
;;;1117       return 0;
000008  2000              MOVS     r0,#0
;;;1118   }
00000a  4770              BX       lr
;;;1119   
                          ENDP

                  |L6.12|
                          DCD      ||dmp||

                          AREA ||i.dmp_get_fifo_rate||, CODE, READONLY, ALIGN=2

                  dmp_get_fifo_rate PROC
;;;704     */
;;;705    int dmp_get_fifo_rate(unsigned short *rate)
000000  4601              MOV      r1,r0
;;;706    {
;;;707        rate[0] = dmp.fifo_rate;
000002  4802              LDR      r0,|L7.12|
000004  8980              LDRH     r0,[r0,#0xc]  ; dmp
000006  8008              STRH     r0,[r1,#0]
;;;708        return 0;
000008  2000              MOVS     r0,#0
;;;709    }
00000a  4770              BX       lr
;;;710    
                          ENDP

                  |L7.12|
                          DCD      ||dmp||

                          AREA ||i.dmp_get_pedometer_step_count||, CODE, READONLY, ALIGN=1

                  dmp_get_pedometer_step_count PROC
;;;904     */
;;;905    int dmp_get_pedometer_step_count(unsigned long *count)
000000  b538              PUSH     {r3-r5,lr}
;;;906    {
000002  4604              MOV      r4,r0
;;;907        unsigned char tmp[4];
;;;908        if (!count)
000004  b914              CBNZ     r4,|L8.12|
;;;909            return -1;
000006  f04f30ff          MOV      r0,#0xffffffff
                  |L8.10|
;;;910    
;;;911        if (mpu_read_mem(D_PEDSTD_STEPCTR, 4, tmp))
;;;912            return -1;
;;;913    
;;;914        count[0] = ((unsigned long)tmp[0] << 24) | ((unsigned long)tmp[1] << 16) |
;;;915            ((unsigned long)tmp[2] << 8) | tmp[3];
;;;916        return 0;
;;;917    }
00000a  bd38              POP      {r3-r5,pc}
                  |L8.12|
00000c  466a              MOV      r2,sp                 ;911
00000e  2104              MOVS     r1,#4                 ;911
000010  f44f7058          MOV      r0,#0x360             ;911
000014  f7fffffe          BL       mpu_read_mem
000018  b110              CBZ      r0,|L8.32|
00001a  f04f30ff          MOV      r0,#0xffffffff        ;912
00001e  e7f4              B        |L8.10|
                  |L8.32|
000020  f89d0000          LDRB     r0,[sp,#0]            ;914
000024  0600              LSLS     r0,r0,#24             ;914
000026  f89d1001          LDRB     r1,[sp,#1]            ;914
00002a  ea404001          ORR      r0,r0,r1,LSL #16      ;914
00002e  f89d1002          LDRB     r1,[sp,#2]            ;914
000032  ea402001          ORR      r0,r0,r1,LSL #8       ;914
000036  f89d1003          LDRB     r1,[sp,#3]            ;914
00003a  4308              ORRS     r0,r0,r1              ;914
00003c  6020              STR      r0,[r4,#0]            ;914
00003e  2000              MOVS     r0,#0                 ;916
000040  e7e3              B        |L8.10|
;;;918    
                          ENDP


                          AREA ||i.dmp_get_pedometer_walk_time||, CODE, READONLY, ALIGN=1

                  dmp_get_pedometer_walk_time PROC
;;;941     */
;;;942    int dmp_get_pedometer_walk_time(unsigned long *time)
000000  b538              PUSH     {r3-r5,lr}
;;;943    {
000002  4604              MOV      r4,r0
;;;944        unsigned char tmp[4];
;;;945        if (!time)
000004  b914              CBNZ     r4,|L9.12|
;;;946            return -1;
000006  f04f30ff          MOV      r0,#0xffffffff
                  |L9.10|
;;;947    
;;;948        if (mpu_read_mem(D_PEDSTD_TIMECTR, 4, tmp))
;;;949            return -1;
;;;950    
;;;951        time[0] = (((unsigned long)tmp[0] << 24) | ((unsigned long)tmp[1] << 16) |
;;;952            ((unsigned long)tmp[2] << 8) | tmp[3]) * 20;
;;;953        return 0;
;;;954    }
00000a  bd38              POP      {r3-r5,pc}
                  |L9.12|
00000c  466a              MOV      r2,sp                 ;948
00000e  2104              MOVS     r1,#4                 ;948
000010  f44f7071          MOV      r0,#0x3c4             ;948
000014  f7fffffe          BL       mpu_read_mem
000018  b110              CBZ      r0,|L9.32|
00001a  f04f30ff          MOV      r0,#0xffffffff        ;949
00001e  e7f4              B        |L9.10|
                  |L9.32|
000020  f89d0000          LDRB     r0,[sp,#0]            ;951
000024  0600              LSLS     r0,r0,#24             ;951
000026  f89d1001          LDRB     r1,[sp,#1]            ;951
00002a  ea404001          ORR      r0,r0,r1,LSL #16      ;951
00002e  f89d1002          LDRB     r1,[sp,#2]            ;951
000032  ea402001          ORR      r0,r0,r1,LSL #8       ;951
000036  f89d1003          LDRB     r1,[sp,#3]            ;951
00003a  4308              ORRS     r0,r0,r1              ;951
00003c  eb000080          ADD      r0,r0,r0,LSL #2       ;951
000040  0080              LSLS     r0,r0,#2              ;951
000042  6020              STR      r0,[r4,#0]            ;951
000044  2000              MOVS     r0,#0                 ;953
000046  e7e0              B        |L9.10|
;;;955    
                          ENDP


                          AREA ||i.dmp_load_motion_driver_firmware||, CODE, READONLY, ALIGN=2

                  dmp_load_motion_driver_firmware PROC
;;;506     */
;;;507    int dmp_load_motion_driver_firmware(void)
000000  b510              PUSH     {r4,lr}
;;;508    {
;;;509        return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
000002  23c8              MOVS     r3,#0xc8
000004  f44f6280          MOV      r2,#0x400
000008  4902              LDR      r1,|L10.20|
00000a  f64030f6          MOV      r0,#0xbf6
00000e  f7fffffe          BL       mpu_load_firmware
;;;510            DMP_SAMPLE_RATE);
;;;511    }
000012  bd10              POP      {r4,pc}
;;;512    
                          ENDP

                  |L10.20|
                          DCD      dmp_memory

                          AREA ||i.dmp_read_fifo||, CODE, READONLY, ALIGN=2

                  dmp_read_fifo PROC
;;;1262    */
;;;1263   int dmp_read_fifo(short *gyro, short *accel, long *quat,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1264       unsigned long *timestamp, short *sensors, unsigned char *more)
;;;1265   {
000004  b08d              SUB      sp,sp,#0x34
000006  4607              MOV      r7,r0
000008  4688              MOV      r8,r1
00000a  4615              MOV      r5,r2
00000c  4699              MOV      r9,r3
00000e  e9dd6b16          LDRD     r6,r11,[sp,#0x58]
;;;1266       unsigned char fifo_data[MAX_PACKET_LENGTH];
;;;1267       unsigned char ii = 0;
000012  2400              MOVS     r4,#0
;;;1268   
;;;1269       /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
;;;1270        * cache this value and save some cycles.
;;;1271        */
;;;1272       sensors[0] = 0;
000014  2000              MOVS     r0,#0
000016  8030              STRH     r0,[r6,#0]
;;;1273   
;;;1274       /* Get a packet. */
;;;1275       if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
000018  496b              LDR      r1,|L11.456|
00001a  7b88              LDRB     r0,[r1,#0xe]  ; dmp
00001c  465a              MOV      r2,r11
00001e  a905              ADD      r1,sp,#0x14
000020  f7fffffe          BL       mpu_read_fifo_stream
000024  b118              CBZ      r0,|L11.46|
;;;1276           return -1;
000026  1e60              SUBS     r0,r4,#1
                  |L11.40|
;;;1277   
;;;1278       /* Parse DMP packet. */
;;;1279       if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
;;;1280   #ifdef FIFO_CORRUPTION_CHECK
;;;1281           long quat_q14[4], quat_mag_sq;
;;;1282   #endif
;;;1283           quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
;;;1284               ((long)fifo_data[2] << 8) | fifo_data[3];
;;;1285           quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
;;;1286               ((long)fifo_data[6] << 8) | fifo_data[7];
;;;1287           quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
;;;1288               ((long)fifo_data[10] << 8) | fifo_data[11];
;;;1289           quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
;;;1290               ((long)fifo_data[14] << 8) | fifo_data[15];
;;;1291           ii += 16;
;;;1292   #ifdef FIFO_CORRUPTION_CHECK
;;;1293           /* We can detect a corrupted FIFO by monitoring the quaternion data and
;;;1294            * ensuring that the magnitude is always normalized to one. This
;;;1295            * shouldn't happen in normal operation, but if an I2C error occurs,
;;;1296            * the FIFO reads might become misaligned.
;;;1297            *
;;;1298            * Let's start by scaling down the quaternion data to avoid long long
;;;1299            * math.
;;;1300            */
;;;1301           quat_q14[0] = quat[0] >> 16;
;;;1302           quat_q14[1] = quat[1] >> 16;
;;;1303           quat_q14[2] = quat[2] >> 16;
;;;1304           quat_q14[3] = quat[3] >> 16;
;;;1305           quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
;;;1306               quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
;;;1307           if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
;;;1308               (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
;;;1309               /* Quaternion is outside of the acceptable threshold. */
;;;1310               mpu_reset_fifo();
;;;1311               sensors[0] = 0;
;;;1312               return -1;
;;;1313           }
;;;1314           sensors[0] |= INV_WXYZ_QUAT;
;;;1315   #endif
;;;1316       }
;;;1317   
;;;1318       if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
;;;1319           accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
;;;1320           accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
;;;1321           accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
;;;1322           ii += 6;
;;;1323           sensors[0] |= INV_XYZ_ACCEL;
;;;1324       }
;;;1325   
;;;1326       if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
;;;1327           gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
;;;1328           gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
;;;1329           gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
;;;1330           ii += 6;
;;;1331           sensors[0] |= INV_XYZ_GYRO;
;;;1332       }
;;;1333   
;;;1334       /* Gesture data is at the end of the DMP packet. Parse it and call
;;;1335        * the gesture callbacks (if registered).
;;;1336        */
;;;1337       if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
;;;1338           decode_gesture(fifo_data + ii);
;;;1339   
;;;1340       get_ms(timestamp);
;;;1341       return 0;
;;;1342   }
000028  b00d              ADD      sp,sp,#0x34
00002a  e8bd8ff0          POP      {r4-r11,pc}
                  |L11.46|
00002e  4866              LDR      r0,|L11.456|
000030  7a80              LDRB     r0,[r0,#0xa]          ;1279  ; dmp
000032  f0000014          AND      r0,r0,#0x14           ;1279
000036  2800              CMP      r0,#0                 ;1279
000038  d067              BEQ      |L11.266|
00003a  f89d0014          LDRB     r0,[sp,#0x14]         ;1283
00003e  0600              LSLS     r0,r0,#24             ;1283
000040  f89d1015          LDRB     r1,[sp,#0x15]         ;1283
000044  ea404001          ORR      r0,r0,r1,LSL #16      ;1283
000048  f89d1016          LDRB     r1,[sp,#0x16]         ;1283
00004c  ea402001          ORR      r0,r0,r1,LSL #8       ;1283
000050  f89d1017          LDRB     r1,[sp,#0x17]         ;1283
000054  4308              ORRS     r0,r0,r1              ;1283
000056  6028              STR      r0,[r5,#0]            ;1283
000058  f89d0018          LDRB     r0,[sp,#0x18]         ;1285
00005c  0600              LSLS     r0,r0,#24             ;1285
00005e  f89d1019          LDRB     r1,[sp,#0x19]         ;1285
000062  ea404001          ORR      r0,r0,r1,LSL #16      ;1285
000066  f89d101a          LDRB     r1,[sp,#0x1a]         ;1285
00006a  ea402001          ORR      r0,r0,r1,LSL #8       ;1285
00006e  f89d101b          LDRB     r1,[sp,#0x1b]         ;1285
000072  4308              ORRS     r0,r0,r1              ;1285
000074  6068              STR      r0,[r5,#4]            ;1285
000076  f89d001c          LDRB     r0,[sp,#0x1c]         ;1287
00007a  0600              LSLS     r0,r0,#24             ;1287
00007c  f89d101d          LDRB     r1,[sp,#0x1d]         ;1287
000080  ea404001          ORR      r0,r0,r1,LSL #16      ;1287
000084  f89d101e          LDRB     r1,[sp,#0x1e]         ;1287
000088  ea402001          ORR      r0,r0,r1,LSL #8       ;1287
00008c  f89d101f          LDRB     r1,[sp,#0x1f]         ;1287
000090  4308              ORRS     r0,r0,r1              ;1287
000092  60a8              STR      r0,[r5,#8]            ;1287
000094  f89d0020          LDRB     r0,[sp,#0x20]         ;1289
000098  0600              LSLS     r0,r0,#24             ;1289
00009a  f89d1021          LDRB     r1,[sp,#0x21]         ;1289
00009e  ea404001          ORR      r0,r0,r1,LSL #16      ;1289
0000a2  f89d1022          LDRB     r1,[sp,#0x22]         ;1289
0000a6  ea402001          ORR      r0,r0,r1,LSL #8       ;1289
0000aa  f89d1023          LDRB     r1,[sp,#0x23]         ;1289
0000ae  4308              ORRS     r0,r0,r1              ;1289
0000b0  60e8              STR      r0,[r5,#0xc]          ;1289
0000b2  f1040010          ADD      r0,r4,#0x10           ;1291
0000b6  b2c4              UXTB     r4,r0                 ;1291
0000b8  6828              LDR      r0,[r5,#0]            ;1301
0000ba  1400              ASRS     r0,r0,#16             ;1301
0000bc  9001              STR      r0,[sp,#4]            ;1301
0000be  6868              LDR      r0,[r5,#4]            ;1302
0000c0  1400              ASRS     r0,r0,#16             ;1302
0000c2  9002              STR      r0,[sp,#8]            ;1302
0000c4  68a8              LDR      r0,[r5,#8]            ;1303
0000c6  1400              ASRS     r0,r0,#16             ;1303
0000c8  9003              STR      r0,[sp,#0xc]          ;1303
0000ca  68e8              LDR      r0,[r5,#0xc]          ;1304
0000cc  1400              ASRS     r0,r0,#16             ;1304
0000ce  9004              STR      r0,[sp,#0x10]         ;1304
0000d0  9801              LDR      r0,[sp,#4]            ;1305
0000d2  4340              MULS     r0,r0,r0              ;1305
0000d4  9902              LDR      r1,[sp,#8]            ;1305
0000d6  fb010001          MLA      r0,r1,r1,r0           ;1305
0000da  9903              LDR      r1,[sp,#0xc]          ;1305
0000dc  fb010001          MLA      r0,r1,r1,r0           ;1305
0000e0  9904              LDR      r1,[sp,#0x10]         ;1305
0000e2  fb010a01          MLA      r10,r1,r1,r0          ;1305
0000e6  f1ba6f70          CMP      r10,#0xf000000        ;1307
0000ea  db02              BLT      |L11.242|
0000ec  f1ba5f88          CMP      r10,#0x11000000       ;1308
0000f0  dd05              BLE      |L11.254|
                  |L11.242|
0000f2  f7fffffe          BL       mpu_reset_fifo
0000f6  2000              MOVS     r0,#0                 ;1311
0000f8  8030              STRH     r0,[r6,#0]            ;1311
0000fa  1e40              SUBS     r0,r0,#1              ;1312
0000fc  e794              B        |L11.40|
                  |L11.254|
0000fe  f9b60000          LDRSH    r0,[r6,#0]            ;1314
000102  f4407080          ORR      r0,r0,#0x100          ;1314
000106  8030              STRH     r0,[r6,#0]            ;1314
000108  bf00              NOP                            ;1316
                  |L11.266|
00010a  482f              LDR      r0,|L11.456|
00010c  7a80              LDRB     r0,[r0,#0xa]          ;1318  ; dmp
00010e  f0000040          AND      r0,r0,#0x40           ;1318
000112  b320              CBZ      r0,|L11.350|
000114  a905              ADD      r1,sp,#0x14           ;1319
000116  1c60              ADDS     r0,r4,#1              ;1319
000118  5c08              LDRB     r0,[r1,r0]            ;1319
00011a  5d09              LDRB     r1,[r1,r4]            ;1319
00011c  ea402001          ORR      r0,r0,r1,LSL #8       ;1319
000120  b200              SXTH     r0,r0                 ;1319
000122  f8a80000          STRH     r0,[r8,#0]            ;1319
000126  a905              ADD      r1,sp,#0x14           ;1320
000128  1ce0              ADDS     r0,r4,#3              ;1320
00012a  5c09              LDRB     r1,[r1,r0]            ;1320
00012c  aa05              ADD      r2,sp,#0x14           ;1320
00012e  1ca0              ADDS     r0,r4,#2              ;1320
000130  5c10              LDRB     r0,[r2,r0]            ;1320
000132  ea412000          ORR      r0,r1,r0,LSL #8       ;1320
000136  b200              SXTH     r0,r0                 ;1320
000138  f8a80002          STRH     r0,[r8,#2]            ;1320
00013c  a905              ADD      r1,sp,#0x14           ;1321
00013e  1d60              ADDS     r0,r4,#5              ;1321
000140  5c09              LDRB     r1,[r1,r0]            ;1321
000142  1d20              ADDS     r0,r4,#4              ;1321
000144  5c10              LDRB     r0,[r2,r0]            ;1321
000146  ea412000          ORR      r0,r1,r0,LSL #8       ;1321
00014a  b200              SXTH     r0,r0                 ;1321
00014c  f8a80004          STRH     r0,[r8,#4]            ;1321
000150  1da0              ADDS     r0,r4,#6              ;1322
000152  b2c4              UXTB     r4,r0                 ;1322
000154  f9b60000          LDRSH    r0,[r6,#0]            ;1323
000158  f0400008          ORR      r0,r0,#8              ;1323
00015c  8030              STRH     r0,[r6,#0]            ;1323
                  |L11.350|
00015e  481a              LDR      r0,|L11.456|
000160  8940              LDRH     r0,[r0,#0xa]          ;1326  ; dmp
000162  f40070c0          AND      r0,r0,#0x180          ;1326
000166  b308              CBZ      r0,|L11.428|
000168  a905              ADD      r1,sp,#0x14           ;1327
00016a  1c60              ADDS     r0,r4,#1              ;1327
00016c  5c08              LDRB     r0,[r1,r0]            ;1327
00016e  5d09              LDRB     r1,[r1,r4]            ;1327
000170  ea402001          ORR      r0,r0,r1,LSL #8       ;1327
000174  b200              SXTH     r0,r0                 ;1327
000176  8038              STRH     r0,[r7,#0]            ;1327
000178  a905              ADD      r1,sp,#0x14           ;1328
00017a  1ce0              ADDS     r0,r4,#3              ;1328
00017c  5c09              LDRB     r1,[r1,r0]            ;1328
00017e  aa05              ADD      r2,sp,#0x14           ;1328
000180  1ca0              ADDS     r0,r4,#2              ;1328
000182  5c10              LDRB     r0,[r2,r0]            ;1328
000184  ea412000          ORR      r0,r1,r0,LSL #8       ;1328
000188  b200              SXTH     r0,r0                 ;1328
00018a  8078              STRH     r0,[r7,#2]            ;1328
00018c  a905              ADD      r1,sp,#0x14           ;1329
00018e  1d60              ADDS     r0,r4,#5              ;1329
000190  5c09              LDRB     r1,[r1,r0]            ;1329
000192  1d20              ADDS     r0,r4,#4              ;1329
000194  5c10              LDRB     r0,[r2,r0]            ;1329
000196  ea412000          ORR      r0,r1,r0,LSL #8       ;1329
00019a  b200              SXTH     r0,r0                 ;1329
00019c  80b8              STRH     r0,[r7,#4]            ;1329
00019e  1da0              ADDS     r0,r4,#6              ;1330
0001a0  b2c4              UXTB     r4,r0                 ;1330
0001a2  f9b60000          LDRSH    r0,[r6,#0]            ;1331
0001a6  f0400070          ORR      r0,r0,#0x70           ;1331
0001aa  8030              STRH     r0,[r6,#0]            ;1331
                  |L11.428|
0001ac  4806              LDR      r0,|L11.456|
0001ae  7a80              LDRB     r0,[r0,#0xa]          ;1337  ; dmp
0001b0  f0000003          AND      r0,r0,#3              ;1337
0001b4  b118              CBZ      r0,|L11.446|
0001b6  a905              ADD      r1,sp,#0x14           ;1338
0001b8  1908              ADDS     r0,r1,r4              ;1338
0001ba  f7fffffe          BL       decode_gesture
                  |L11.446|
0001be  4648              MOV      r0,r9                 ;1340
0001c0  f7fffffe          BL       mget_ms
0001c4  2000              MOVS     r0,#0                 ;1341
0001c6  e72f              B        |L11.40|
;;;1343   
                          ENDP

                  |L11.456|
                          DCD      ||dmp||

                          AREA ||i.dmp_register_android_orient_cb||, CODE, READONLY, ALIGN=2

                  dmp_register_android_orient_cb PROC
;;;1366    */
;;;1367   int dmp_register_android_orient_cb(void (*func)(unsigned char))
000000  4601              MOV      r1,r0
;;;1368   {
;;;1369       dmp.android_orient_cb = func;
000002  4802              LDR      r0,|L12.12|
000004  6041              STR      r1,[r0,#4]  ; dmp
;;;1370       return 0;
000006  2000              MOVS     r0,#0
;;;1371   }
000008  4770              BX       lr
;;;1372   
                          ENDP

00000a  0000              DCW      0x0000
                  |L12.12|
                          DCD      ||dmp||

                          AREA ||i.dmp_register_tap_cb||, CODE, READONLY, ALIGN=2

                  dmp_register_tap_cb PROC
;;;1355    */
;;;1356   int dmp_register_tap_cb(void (*func)(unsigned char, unsigned char))
000000  4601              MOV      r1,r0
;;;1357   {
;;;1358       dmp.tap_cb = func;
000002  4802              LDR      r0,|L13.12|
000004  6001              STR      r1,[r0,#0]  ; dmp
;;;1359       return 0;
000006  2000              MOVS     r0,#0
;;;1360   }
000008  4770              BX       lr
;;;1361   
                          ENDP

00000a  0000              DCW      0x0000
                  |L13.12|
                          DCD      ||dmp||

                          AREA ||i.dmp_set_accel_bias||, CODE, READONLY, ALIGN=2

                  dmp_set_accel_bias PROC
;;;626     */
;;;627    int dmp_set_accel_bias(long *bias)
000000  b570              PUSH     {r4-r6,lr}
;;;628    {
000002  b088              SUB      sp,sp,#0x20
000004  4606              MOV      r6,r0
;;;629        long accel_bias_body[3];
;;;630        unsigned char regs[12];
;;;631        long long accel_sf;
;;;632        unsigned short accel_sens;
;;;633    
;;;634        mpu_get_accel_sens(&accel_sens);
000006  a801              ADD      r0,sp,#4
000008  f7fffffe          BL       mpu_get_accel_sens
;;;635        accel_sf = (long long)accel_sens << 15;
00000c  f8bd0004          LDRH     r0,[sp,#4]
000010  2100              MOVS     r1,#0
000012  03c9              LSLS     r1,r1,#15
000014  ea414550          ORR      r5,r1,r0,LSR #17
000018  03c4              LSLS     r4,r0,#15
;;;636       // __no_operation();
;;;637    
;;;638        accel_bias_body[0] = bias[dmp.orient & 3];
00001a  4844              LDR      r0,|L14.300|
00001c  7a00              LDRB     r0,[r0,#8]  ; dmp
00001e  f0000003          AND      r0,r0,#3
000022  f8560020          LDR      r0,[r6,r0,LSL #2]
000026  9005              STR      r0,[sp,#0x14]
;;;639        if (dmp.orient & 4)
000028  4840              LDR      r0,|L14.300|
00002a  7a00              LDRB     r0,[r0,#8]  ; dmp
00002c  f0000004          AND      r0,r0,#4
000030  b110              CBZ      r0,|L14.56|
;;;640            accel_bias_body[0] *= -1;
000032  9805              LDR      r0,[sp,#0x14]
000034  4240              RSBS     r0,r0,#0
000036  9005              STR      r0,[sp,#0x14]
                  |L14.56|
;;;641        accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
000038  483c              LDR      r0,|L14.300|
00003a  7a00              LDRB     r0,[r0,#8]  ; dmp
00003c  f3c000c1          UBFX     r0,r0,#3,#2
000040  f8560020          LDR      r0,[r6,r0,LSL #2]
000044  9006              STR      r0,[sp,#0x18]
;;;642        if (dmp.orient & 0x20)
000046  4839              LDR      r0,|L14.300|
000048  7a00              LDRB     r0,[r0,#8]  ; dmp
00004a  f0000020          AND      r0,r0,#0x20
00004e  b110              CBZ      r0,|L14.86|
;;;643            accel_bias_body[1] *= -1;
000050  9806              LDR      r0,[sp,#0x18]
000052  4240              RSBS     r0,r0,#0
000054  9006              STR      r0,[sp,#0x18]
                  |L14.86|
;;;644        accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
000056  4835              LDR      r0,|L14.300|
000058  7a00              LDRB     r0,[r0,#8]  ; dmp
00005a  f3c01081          UBFX     r0,r0,#6,#2
00005e  f8560020          LDR      r0,[r6,r0,LSL #2]
000062  9007              STR      r0,[sp,#0x1c]
;;;645        if (dmp.orient & 0x100)
000064  4831              LDR      r0,|L14.300|
000066  8900              LDRH     r0,[r0,#8]  ; dmp
000068  f4007080          AND      r0,r0,#0x100
00006c  b110              CBZ      r0,|L14.116|
;;;646            accel_bias_body[2] *= -1;
00006e  9807              LDR      r0,[sp,#0x1c]
000070  4240              RSBS     r0,r0,#0
000072  9007              STR      r0,[sp,#0x1c]
                  |L14.116|
;;;647    
;;;648    #ifdef EMPL_NO_64BIT
;;;649        accel_bias_body[0] = (long)(((float)accel_bias_body[0] * accel_sf) / 1073741824.f);
;;;650        accel_bias_body[1] = (long)(((float)accel_bias_body[1] * accel_sf) / 1073741824.f);
;;;651        accel_bias_body[2] = (long)(((float)accel_bias_body[2] * accel_sf) / 1073741824.f);
;;;652    #else
;;;653        accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
000074  9805              LDR      r0,[sp,#0x14]
000076  17c1              ASRS     r1,r0,#31
000078  fba02304          UMULL    r2,r3,r0,r4
00007c  fb013104          MLA      r1,r1,r4,r3
000080  fb001005          MLA      r0,r0,r5,r1
000084  0081              LSLS     r1,r0,#2
000086  ea417092          ORR      r0,r1,r2,LSR #30
00008a  9005              STR      r0,[sp,#0x14]
;;;654        accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
00008c  9806              LDR      r0,[sp,#0x18]
00008e  17c1              ASRS     r1,r0,#31
000090  fba02304          UMULL    r2,r3,r0,r4
000094  fb013104          MLA      r1,r1,r4,r3
000098  fb001005          MLA      r0,r0,r5,r1
00009c  0081              LSLS     r1,r0,#2
00009e  ea417092          ORR      r0,r1,r2,LSR #30
0000a2  9006              STR      r0,[sp,#0x18]
;;;655        accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
0000a4  9807              LDR      r0,[sp,#0x1c]
0000a6  17c1              ASRS     r1,r0,#31
0000a8  fba02304          UMULL    r2,r3,r0,r4
0000ac  fb013104          MLA      r1,r1,r4,r3
0000b0  fb001005          MLA      r0,r0,r5,r1
0000b4  0081              LSLS     r1,r0,#2
0000b6  ea417092          ORR      r0,r1,r2,LSR #30
0000ba  9007              STR      r0,[sp,#0x1c]
;;;656    #endif
;;;657    
;;;658        regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
0000bc  9805              LDR      r0,[sp,#0x14]
0000be  0e00              LSRS     r0,r0,#24
0000c0  f88d0008          STRB     r0,[sp,#8]
;;;659        regs[1] = (unsigned char)((accel_bias_body[0] >> 16) & 0xFF);
0000c4  9805              LDR      r0,[sp,#0x14]
0000c6  0c00              LSRS     r0,r0,#16
0000c8  f88d0009          STRB     r0,[sp,#9]
;;;660        regs[2] = (unsigned char)((accel_bias_body[0] >> 8) & 0xFF);
0000cc  9805              LDR      r0,[sp,#0x14]
0000ce  0a00              LSRS     r0,r0,#8
0000d0  f88d000a          STRB     r0,[sp,#0xa]
;;;661        regs[3] = (unsigned char)(accel_bias_body[0] & 0xFF);
0000d4  9805              LDR      r0,[sp,#0x14]
0000d6  b2c0              UXTB     r0,r0
0000d8  f88d000b          STRB     r0,[sp,#0xb]
;;;662        regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
0000dc  9806              LDR      r0,[sp,#0x18]
0000de  0e00              LSRS     r0,r0,#24
0000e0  f88d000c          STRB     r0,[sp,#0xc]
;;;663        regs[5] = (unsigned char)((accel_bias_body[1] >> 16) & 0xFF);
0000e4  9806              LDR      r0,[sp,#0x18]
0000e6  0c00              LSRS     r0,r0,#16
0000e8  f88d000d          STRB     r0,[sp,#0xd]
;;;664        regs[6] = (unsigned char)((accel_bias_body[1] >> 8) & 0xFF);
0000ec  9806              LDR      r0,[sp,#0x18]
0000ee  0a00              LSRS     r0,r0,#8
0000f0  f88d000e          STRB     r0,[sp,#0xe]
;;;665        regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
0000f4  9806              LDR      r0,[sp,#0x18]
0000f6  b2c0              UXTB     r0,r0
0000f8  f88d000f          STRB     r0,[sp,#0xf]
;;;666        regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
0000fc  9807              LDR      r0,[sp,#0x1c]
0000fe  0e00              LSRS     r0,r0,#24
000100  f88d0010          STRB     r0,[sp,#0x10]
;;;667        regs[9] = (unsigned char)((accel_bias_body[2] >> 16) & 0xFF);
000104  9807              LDR      r0,[sp,#0x1c]
000106  0c00              LSRS     r0,r0,#16
000108  f88d0011          STRB     r0,[sp,#0x11]
;;;668        regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
00010c  9807              LDR      r0,[sp,#0x1c]
00010e  0a00              LSRS     r0,r0,#8
000110  f88d0012          STRB     r0,[sp,#0x12]
;;;669        regs[11] = (unsigned char)(accel_bias_body[2] & 0xFF);
000114  9807              LDR      r0,[sp,#0x1c]
000116  b2c0              UXTB     r0,r0
000118  f88d0013          STRB     r0,[sp,#0x13]
;;;670        return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
00011c  aa02              ADD      r2,sp,#8
00011e  210c              MOVS     r1,#0xc
000120  f44f7025          MOV      r0,#0x294
000124  f7fffffe          BL       mpu_write_mem
;;;671    }
000128  b008              ADD      sp,sp,#0x20
00012a  bd70              POP      {r4-r6,pc}
;;;672    
                          ENDP

                  |L14.300|
                          DCD      ||dmp||

                          AREA ||i.dmp_set_fifo_rate||, CODE, READONLY, ALIGN=2

                  dmp_set_fifo_rate PROC
;;;678     */
;;;679    int dmp_set_fifo_rate(unsigned short rate)
000000  b530              PUSH     {r4,r5,lr}
;;;680    {
000002  b085              SUB      sp,sp,#0x14
000004  4604              MOV      r4,r0
;;;681        const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
000006  a216              ADR      r2,|L15.96|
000008  ca07              LDM      r2,{r0-r2}
00000a  ab02              ADD      r3,sp,#8
00000c  c307              STM      r3!,{r0-r2}
;;;682            0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
;;;683        unsigned short div;
;;;684        unsigned char tmp[8];
;;;685    
;;;686        if (rate > DMP_SAMPLE_RATE)
00000e  2cc8              CMP      r4,#0xc8
000010  dd03              BLE      |L15.26|
;;;687            return -1;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L15.22|
;;;688        div = DMP_SAMPLE_RATE / rate - 1;
;;;689        tmp[0] = (unsigned char)((div >> 8) & 0xFF);
;;;690        tmp[1] = (unsigned char)(div & 0xFF);
;;;691        if (mpu_write_mem(D_0_22, 2, tmp))
;;;692            return -1;
;;;693        if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
;;;694            return -1;
;;;695    
;;;696        dmp.fifo_rate = rate;
;;;697        return 0;
;;;698    }
000016  b005              ADD      sp,sp,#0x14
000018  bd30              POP      {r4,r5,pc}
                  |L15.26|
00001a  20c8              MOVS     r0,#0xc8              ;688
00001c  fb90f0f4          SDIV     r0,r0,r4              ;688
000020  1e40              SUBS     r0,r0,#1              ;688
000022  b285              UXTH     r5,r0                 ;688
000024  0a28              LSRS     r0,r5,#8              ;689
000026  f88d0000          STRB     r0,[sp,#0]            ;689
00002a  b2e8              UXTB     r0,r5                 ;690
00002c  f88d0001          STRB     r0,[sp,#1]            ;690
000030  466a              MOV      r2,sp                 ;691
000032  2102              MOVS     r1,#2                 ;691
000034  f2402016          MOV      r0,#0x216             ;691
000038  f7fffffe          BL       mpu_write_mem
00003c  b110              CBZ      r0,|L15.68|
00003e  f04f30ff          MOV      r0,#0xffffffff        ;692
000042  e7e8              B        |L15.22|
                  |L15.68|
000044  aa02              ADD      r2,sp,#8              ;693
000046  210c              MOVS     r1,#0xc               ;693
000048  f64020c1          MOV      r0,#0xac1             ;693
00004c  f7fffffe          BL       mpu_write_mem
000050  b110              CBZ      r0,|L15.88|
000052  f04f30ff          MOV      r0,#0xffffffff        ;694
000056  e7de              B        |L15.22|
                  |L15.88|
000058  4804              LDR      r0,|L15.108|
00005a  8184              STRH     r4,[r0,#0xc]          ;696
00005c  2000              MOVS     r0,#0                 ;697
00005e  e7da              B        |L15.22|
;;;699    
                          ENDP

                  |L15.96|
000060  fef2abc4          DCB      254,242,171,196,170,241,223,223,187,175,223,223
000064  aaf1dfdf
000068  bbafdfdf
                  |L15.108|
                          DCD      ||dmp||

                          AREA ||i.dmp_set_gyro_bias||, CODE, READONLY, ALIGN=2

                  dmp_set_gyro_bias PROC
;;;574     */
;;;575    int dmp_set_gyro_bias(long *bias)
000000  b51f              PUSH     {r0-r4,lr}
;;;576    {
000002  4604              MOV      r4,r0
;;;577        long gyro_bias_body[3];
;;;578        unsigned char regs[4];
;;;579    
;;;580        gyro_bias_body[0] = bias[dmp.orient & 3];
000004  4848              LDR      r0,|L16.296|
000006  7a00              LDRB     r0,[r0,#8]  ; dmp
000008  f0000003          AND      r0,r0,#3
00000c  f8540020          LDR      r0,[r4,r0,LSL #2]
000010  9001              STR      r0,[sp,#4]
;;;581        if (dmp.orient & 4)
000012  4845              LDR      r0,|L16.296|
000014  7a00              LDRB     r0,[r0,#8]  ; dmp
000016  f0000004          AND      r0,r0,#4
00001a  b110              CBZ      r0,|L16.34|
;;;582            gyro_bias_body[0] *= -1;
00001c  9801              LDR      r0,[sp,#4]
00001e  4240              RSBS     r0,r0,#0
000020  9001              STR      r0,[sp,#4]
                  |L16.34|
;;;583        gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
000022  4841              LDR      r0,|L16.296|
000024  7a00              LDRB     r0,[r0,#8]  ; dmp
000026  f3c000c1          UBFX     r0,r0,#3,#2
00002a  f8540020          LDR      r0,[r4,r0,LSL #2]
00002e  9002              STR      r0,[sp,#8]
;;;584        if (dmp.orient & 0x20)
000030  483d              LDR      r0,|L16.296|
000032  7a00              LDRB     r0,[r0,#8]  ; dmp
000034  f0000020          AND      r0,r0,#0x20
000038  b110              CBZ      r0,|L16.64|
;;;585            gyro_bias_body[1] *= -1;
00003a  9802              LDR      r0,[sp,#8]
00003c  4240              RSBS     r0,r0,#0
00003e  9002              STR      r0,[sp,#8]
                  |L16.64|
;;;586        gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
000040  4839              LDR      r0,|L16.296|
000042  7a00              LDRB     r0,[r0,#8]  ; dmp
000044  f3c01081          UBFX     r0,r0,#6,#2
000048  f8540020          LDR      r0,[r4,r0,LSL #2]
00004c  9003              STR      r0,[sp,#0xc]
;;;587        if (dmp.orient & 0x100)
00004e  4836              LDR      r0,|L16.296|
000050  8900              LDRH     r0,[r0,#8]  ; dmp
000052  f4007080          AND      r0,r0,#0x100
000056  b110              CBZ      r0,|L16.94|
;;;588            gyro_bias_body[2] *= -1;
000058  9803              LDR      r0,[sp,#0xc]
00005a  4240              RSBS     r0,r0,#0
00005c  9003              STR      r0,[sp,#0xc]
                  |L16.94|
;;;589    
;;;590    #ifdef EMPL_NO_64BIT
;;;591        gyro_bias_body[0] = (long)(((float)gyro_bias_body[0] * GYRO_SF) / 1073741824.f);
;;;592        gyro_bias_body[1] = (long)(((float)gyro_bias_body[1] * GYRO_SF) / 1073741824.f);
;;;593        gyro_bias_body[2] = (long)(((float)gyro_bias_body[2] * GYRO_SF) / 1073741824.f);
;;;594    #else
;;;595        gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
00005e  4933              LDR      r1,|L16.300|
000060  9801              LDR      r0,[sp,#4]
000062  fb800101          SMULL    r0,r1,r0,r1
000066  0f80              LSRS     r0,r0,#30
000068  ea400081          ORR      r0,r0,r1,LSL #2
00006c  9001              STR      r0,[sp,#4]
;;;596        gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
00006e  492f              LDR      r1,|L16.300|
000070  9802              LDR      r0,[sp,#8]
000072  fb801001          SMULL    r1,r0,r0,r1
000076  0082              LSLS     r2,r0,#2
000078  ea427091          ORR      r0,r2,r1,LSR #30
00007c  9002              STR      r0,[sp,#8]
;;;597        gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
00007e  492b              LDR      r1,|L16.300|
000080  9803              LDR      r0,[sp,#0xc]
000082  fb801001          SMULL    r1,r0,r0,r1
000086  0082              LSLS     r2,r0,#2
000088  ea427091          ORR      r0,r2,r1,LSR #30
00008c  9003              STR      r0,[sp,#0xc]
;;;598    #endif
;;;599    
;;;600        regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
00008e  9801              LDR      r0,[sp,#4]
000090  0e00              LSRS     r0,r0,#24
000092  f88d0000          STRB     r0,[sp,#0]
;;;601        regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
000096  9801              LDR      r0,[sp,#4]
000098  0c00              LSRS     r0,r0,#16
00009a  f88d0001          STRB     r0,[sp,#1]
;;;602        regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
00009e  9801              LDR      r0,[sp,#4]
0000a0  0a00              LSRS     r0,r0,#8
0000a2  f88d0002          STRB     r0,[sp,#2]
;;;603        regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
0000a6  9801              LDR      r0,[sp,#4]
0000a8  b2c0              UXTB     r0,r0
0000aa  f88d0003          STRB     r0,[sp,#3]
;;;604        if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
0000ae  466a              MOV      r2,sp
0000b0  2104              MOVS     r1,#4
0000b2  f44f7074          MOV      r0,#0x3d0
0000b6  f7fffffe          BL       mpu_write_mem
0000ba  b118              CBZ      r0,|L16.196|
;;;605            return -1;
0000bc  f04f30ff          MOV      r0,#0xffffffff
                  |L16.192|
;;;606    
;;;607        regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
;;;608        regs[1] = (unsigned char)((gyro_bias_body[1] >> 16) & 0xFF);
;;;609        regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
;;;610        regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
;;;611        if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
;;;612            return -1;
;;;613    
;;;614        regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
;;;615        regs[1] = (unsigned char)((gyro_bias_body[2] >> 16) & 0xFF);
;;;616        regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
;;;617        regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
;;;618        return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
;;;619    }
0000c0  b004              ADD      sp,sp,#0x10
0000c2  bd10              POP      {r4,pc}
                  |L16.196|
0000c4  9802              LDR      r0,[sp,#8]            ;607
0000c6  0e00              LSRS     r0,r0,#24             ;607
0000c8  f88d0000          STRB     r0,[sp,#0]            ;607
0000cc  9802              LDR      r0,[sp,#8]            ;608
0000ce  0c00              LSRS     r0,r0,#16             ;608
0000d0  f88d0001          STRB     r0,[sp,#1]            ;608
0000d4  9802              LDR      r0,[sp,#8]            ;609
0000d6  0a00              LSRS     r0,r0,#8              ;609
0000d8  f88d0002          STRB     r0,[sp,#2]            ;609
0000dc  9802              LDR      r0,[sp,#8]            ;610
0000de  b2c0              UXTB     r0,r0                 ;610
0000e0  f88d0003          STRB     r0,[sp,#3]            ;610
0000e4  466a              MOV      r2,sp                 ;611
0000e6  2104              MOVS     r1,#4                 ;611
0000e8  f44f7075          MOV      r0,#0x3d4             ;611
0000ec  f7fffffe          BL       mpu_write_mem
0000f0  b110              CBZ      r0,|L16.248|
0000f2  f04f30ff          MOV      r0,#0xffffffff        ;612
0000f6  e7e3              B        |L16.192|
                  |L16.248|
0000f8  9803              LDR      r0,[sp,#0xc]          ;614
0000fa  0e00              LSRS     r0,r0,#24             ;614
0000fc  f88d0000          STRB     r0,[sp,#0]            ;614
000100  9803              LDR      r0,[sp,#0xc]          ;615
000102  0c00              LSRS     r0,r0,#16             ;615
000104  f88d0001          STRB     r0,[sp,#1]            ;615
000108  9803              LDR      r0,[sp,#0xc]          ;616
00010a  0a00              LSRS     r0,r0,#8              ;616
00010c  f88d0002          STRB     r0,[sp,#2]            ;616
000110  9803              LDR      r0,[sp,#0xc]          ;617
000112  b2c0              UXTB     r0,r0                 ;617
000114  f88d0003          STRB     r0,[sp,#3]            ;617
000118  466a              MOV      r2,sp                 ;618
00011a  2104              MOVS     r1,#4                 ;618
00011c  f44f7076          MOV      r0,#0x3d8             ;618
000120  f7fffffe          BL       mpu_write_mem
000124  e7cc              B        |L16.192|
;;;620    
                          ENDP

000126  0000              DCW      0x0000
                  |L16.296|
                          DCD      ||dmp||
                  |L16.300|
                          DCD      0x02cae309

                          AREA ||i.dmp_set_interrupt_mode||, CODE, READONLY, ALIGN=2

                  dmp_set_interrupt_mode PROC
;;;1223    */
;;;1224   int dmp_set_interrupt_mode(unsigned char mode)
000000  b510              PUSH     {r4,lr}
;;;1225   {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;1226       const unsigned char regs_continuous[11] =
000006  a20f              ADR      r2,|L17.68|
000008  ca07              LDM      r2,{r0-r2}
00000a  ab03              ADD      r3,sp,#0xc
00000c  c307              STM      r3!,{r0-r2}
;;;1227           {0xd8, 0xb1, 0xb9, 0xf3, 0x8b, 0xa3, 0x91, 0xb6, 0x09, 0xb4, 0xd9};
;;;1228       const unsigned char regs_gesture[11] =
00000e  a210              ADR      r2,|L17.80|
000010  ca07              LDM      r2,{r0-r2}
000012  e88d0007          STM      sp,{r0-r2}
;;;1229           {0xda, 0xb1, 0xb9, 0xf3, 0x8b, 0xa3, 0x91, 0xb6, 0xda, 0xb4, 0xda};
;;;1230   
;;;1231       switch (mode) {
000016  2c01              CMP      r4,#1
000018  d009              BEQ      |L17.46|
00001a  2c02              CMP      r4,#2
00001c  d10e              BNE      |L17.60|
;;;1232       case DMP_INT_CONTINUOUS:
;;;1233           return mpu_write_mem(CFG_FIFO_ON_EVENT, 11,
00001e  aa03              ADD      r2,sp,#0xc
000020  210b              MOVS     r1,#0xb
000022  f6402082          MOV      r0,#0xa82
000026  f7fffffe          BL       mpu_write_mem
                  |L17.42|
;;;1234               (unsigned char*)regs_continuous);
;;;1235       case DMP_INT_GESTURE:
;;;1236           return mpu_write_mem(CFG_FIFO_ON_EVENT, 11,
;;;1237               (unsigned char*)regs_gesture);
;;;1238       default:
;;;1239           return -1;
;;;1240       }
;;;1241   }
00002a  b006              ADD      sp,sp,#0x18
00002c  bd10              POP      {r4,pc}
                  |L17.46|
00002e  466a              MOV      r2,sp                 ;1236
000030  210b              MOVS     r1,#0xb               ;1236
000032  f6402082          MOV      r0,#0xa82             ;1236
000036  f7fffffe          BL       mpu_write_mem
00003a  e7f6              B        |L17.42|
                  |L17.60|
00003c  f04f30ff          MOV      r0,#0xffffffff        ;1239
000040  e7f3              B        |L17.42|
;;;1242   
                          ENDP

000042  0000              DCW      0x0000
                  |L17.68|
000044  d8b1b9f3          DCB      216,177,185,243,139,163,145,182,"\t",180,217,0
000048  8ba391b6
00004c  09b4d900
                  |L17.80|
000050  dab1b9f3          DCB      218,177,185,243,139,163,145,182,218,180,218,0
000054  8ba391b6
000058  dab4da00

                          AREA ||i.dmp_set_orientation||, CODE, READONLY, ALIGN=2

                  dmp_set_orientation PROC
;;;519     */
;;;520    int dmp_set_orientation(unsigned short orient)
000000  b510              PUSH     {r4,lr}
;;;521    {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;522        unsigned char gyro_regs[3], accel_regs[3];
;;;523        const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
000006  a047              ADR      r0,|L18.292|
000008  6800              LDR      r0,[r0,#0]
00000a  9003              STR      r0,[sp,#0xc]
;;;524        const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
00000c  a046              ADR      r0,|L18.296|
00000e  6800              LDR      r0,[r0,#0]
000010  9002              STR      r0,[sp,#8]
;;;525        const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
000012  a046              ADR      r0,|L18.300|
000014  6800              LDR      r0,[r0,#0]
000016  9001              STR      r0,[sp,#4]
;;;526        const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
000018  a045              ADR      r0,|L18.304|
00001a  6800              LDR      r0,[r0,#0]
00001c  9000              STR      r0,[sp,#0]
;;;527    
;;;528        gyro_regs[0] = gyro_axes[orient & 3];
00001e  f0040003          AND      r0,r4,#3
000022  a903              ADD      r1,sp,#0xc
000024  5c08              LDRB     r0,[r1,r0]
000026  f88d0014          STRB     r0,[sp,#0x14]
;;;529        gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
00002a  a803              ADD      r0,sp,#0xc
00002c  f3c401c1          UBFX     r1,r4,#3,#2
000030  5c40              LDRB     r0,[r0,r1]
000032  f88d0015          STRB     r0,[sp,#0x15]
;;;530        gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
000036  a803              ADD      r0,sp,#0xc
000038  f3c41181          UBFX     r1,r4,#6,#2
00003c  5c40              LDRB     r0,[r0,r1]
00003e  f88d0016          STRB     r0,[sp,#0x16]
;;;531        accel_regs[0] = accel_axes[orient & 3];
000042  f0040003          AND      r0,r4,#3
000046  a902              ADD      r1,sp,#8
000048  5c08              LDRB     r0,[r1,r0]
00004a  f88d0010          STRB     r0,[sp,#0x10]
;;;532        accel_regs[1] = accel_axes[(orient >> 3) & 3];
00004e  a802              ADD      r0,sp,#8
000050  f3c401c1          UBFX     r1,r4,#3,#2
000054  5c40              LDRB     r0,[r0,r1]
000056  f88d0011          STRB     r0,[sp,#0x11]
;;;533        accel_regs[2] = accel_axes[(orient >> 6) & 3];
00005a  a802              ADD      r0,sp,#8
00005c  f3c41181          UBFX     r1,r4,#6,#2
000060  5c40              LDRB     r0,[r0,r1]
000062  f88d0012          STRB     r0,[sp,#0x12]
;;;534    
;;;535        /* Chip-to-body, axes only. */
;;;536        if (mpu_write_mem(FCFG_1, 3, gyro_regs))
000066  aa05              ADD      r2,sp,#0x14
000068  2103              MOVS     r1,#3
00006a  f2404026          MOV      r0,#0x426
00006e  f7fffffe          BL       mpu_write_mem
000072  b118              CBZ      r0,|L18.124|
;;;537            return -1;
000074  f04f30ff          MOV      r0,#0xffffffff
                  |L18.120|
;;;538        if (mpu_write_mem(FCFG_2, 3, accel_regs))
;;;539            return -1;
;;;540    
;;;541        memcpy(gyro_regs, gyro_sign, 3);
;;;542        memcpy(accel_regs, accel_sign, 3);
;;;543        if (orient & 4) {
;;;544            gyro_regs[0] |= 1;
;;;545            accel_regs[0] |= 1;
;;;546        }
;;;547        if (orient & 0x20) {
;;;548            gyro_regs[1] |= 1;
;;;549            accel_regs[1] |= 1;
;;;550        }
;;;551        if (orient & 0x100) {
;;;552            gyro_regs[2] |= 1;
;;;553            accel_regs[2] |= 1;
;;;554        }
;;;555    
;;;556        /* Chip-to-body, sign only. */
;;;557        if (mpu_write_mem(FCFG_3, 3, gyro_regs))
;;;558            return -1;
;;;559        if (mpu_write_mem(FCFG_7, 3, accel_regs))
;;;560            return -1;
;;;561        dmp.orient = orient;
;;;562        return 0;
;;;563    }
000078  b006              ADD      sp,sp,#0x18
00007a  bd10              POP      {r4,pc}
                  |L18.124|
00007c  aa04              ADD      r2,sp,#0x10           ;538
00007e  2103              MOVS     r1,#3                 ;538
000080  f240402a          MOV      r0,#0x42a             ;538
000084  f7fffffe          BL       mpu_write_mem
000088  b110              CBZ      r0,|L18.144|
00008a  f04f30ff          MOV      r0,#0xffffffff        ;539
00008e  e7f3              B        |L18.120|
                  |L18.144|
000090  9801              LDR      r0,[sp,#4]            ;541
000092  9005              STR      r0,[sp,#0x14]         ;541
000094  9800              LDR      r0,[sp,#0]            ;542
000096  9004              STR      r0,[sp,#0x10]         ;542
000098  f0040004          AND      r0,r4,#4              ;543
00009c  b158              CBZ      r0,|L18.182|
00009e  f89d0014          LDRB     r0,[sp,#0x14]         ;544
0000a2  f0400001          ORR      r0,r0,#1              ;544
0000a6  f88d0014          STRB     r0,[sp,#0x14]         ;544
0000aa  f89d0010          LDRB     r0,[sp,#0x10]         ;545
0000ae  f0400001          ORR      r0,r0,#1              ;545
0000b2  f88d0010          STRB     r0,[sp,#0x10]         ;545
                  |L18.182|
0000b6  f0040020          AND      r0,r4,#0x20           ;547
0000ba  b158              CBZ      r0,|L18.212|
0000bc  f89d0015          LDRB     r0,[sp,#0x15]         ;548
0000c0  f0400001          ORR      r0,r0,#1              ;548
0000c4  f88d0015          STRB     r0,[sp,#0x15]         ;548
0000c8  f89d0011          LDRB     r0,[sp,#0x11]         ;549
0000cc  f0400001          ORR      r0,r0,#1              ;549
0000d0  f88d0011          STRB     r0,[sp,#0x11]         ;549
                  |L18.212|
0000d4  f4047080          AND      r0,r4,#0x100          ;551
0000d8  b158              CBZ      r0,|L18.242|
0000da  f89d0016          LDRB     r0,[sp,#0x16]         ;552
0000de  f0400001          ORR      r0,r0,#1              ;552
0000e2  f88d0016          STRB     r0,[sp,#0x16]         ;552
0000e6  f89d0012          LDRB     r0,[sp,#0x12]         ;553
0000ea  f0400001          ORR      r0,r0,#1              ;553
0000ee  f88d0012          STRB     r0,[sp,#0x12]         ;553
                  |L18.242|
0000f2  aa05              ADD      r2,sp,#0x14           ;557
0000f4  2103              MOVS     r1,#3                 ;557
0000f6  f44f6088          MOV      r0,#0x440             ;557
0000fa  f7fffffe          BL       mpu_write_mem
0000fe  b110              CBZ      r0,|L18.262|
000100  f04f30ff          MOV      r0,#0xffffffff        ;558
000104  e7b8              B        |L18.120|
                  |L18.262|
000106  aa04              ADD      r2,sp,#0x10           ;559
000108  2103              MOVS     r1,#3                 ;559
00010a  f2404031          MOV      r0,#0x431             ;559
00010e  f7fffffe          BL       mpu_write_mem
000112  b110              CBZ      r0,|L18.282|
000114  f04f30ff          MOV      r0,#0xffffffff        ;560
000118  e7ae              B        |L18.120|
                  |L18.282|
00011a  4806              LDR      r0,|L18.308|
00011c  8104              STRH     r4,[r0,#8]            ;561
00011e  2000              MOVS     r0,#0                 ;562
000120  e7aa              B        |L18.120|
;;;564    
                          ENDP

000122  0000              DCW      0x0000
                  |L18.292|
000124  4ccd6c00          DCB      "L",205,"l",0
                  |L18.296|
000128  0cc92c00          DCB      "\f",201,",",0
                  |L18.300|
00012c  36567600          DCB      "6Vv",0
                  |L18.304|
000130  26466600          DCB      "&Ff",0
                  |L18.308|
                          DCD      ||dmp||

                          AREA ||i.dmp_set_pedometer_step_count||, CODE, READONLY, ALIGN=1

                  dmp_set_pedometer_step_count PROC
;;;925     */
;;;926    int dmp_set_pedometer_step_count(unsigned long count)
000000  b538              PUSH     {r3-r5,lr}
;;;927    {
000002  4604              MOV      r4,r0
;;;928        unsigned char tmp[4];
;;;929    
;;;930        tmp[0] = (unsigned char)((count >> 24) & 0xFF);
000004  0e20              LSRS     r0,r4,#24
000006  f88d0000          STRB     r0,[sp,#0]
;;;931        tmp[1] = (unsigned char)((count >> 16) & 0xFF);
00000a  0c20              LSRS     r0,r4,#16
00000c  f88d0001          STRB     r0,[sp,#1]
;;;932        tmp[2] = (unsigned char)((count >> 8) & 0xFF);
000010  0a20              LSRS     r0,r4,#8
000012  f88d0002          STRB     r0,[sp,#2]
;;;933        tmp[3] = (unsigned char)(count & 0xFF);
000016  b2e0              UXTB     r0,r4
000018  f88d0003          STRB     r0,[sp,#3]
;;;934        return mpu_write_mem(D_PEDSTD_STEPCTR, 4, tmp);
00001c  466a              MOV      r2,sp
00001e  2104              MOVS     r1,#4
000020  f44f7058          MOV      r0,#0x360
000024  f7fffffe          BL       mpu_write_mem
;;;935    }
000028  bd38              POP      {r3-r5,pc}
;;;936    
                          ENDP


                          AREA ||i.dmp_set_pedometer_walk_time||, CODE, READONLY, ALIGN=1

                  dmp_set_pedometer_walk_time PROC
;;;961     */
;;;962    int dmp_set_pedometer_walk_time(unsigned long time)
000000  b538              PUSH     {r3-r5,lr}
;;;963    {
000002  4604              MOV      r4,r0
;;;964        unsigned char tmp[4];
;;;965    
;;;966        time /= 20;
000004  2014              MOVS     r0,#0x14
000006  fbb4f4f0          UDIV     r4,r4,r0
;;;967    
;;;968        tmp[0] = (unsigned char)((time >> 24) & 0xFF);
00000a  0e20              LSRS     r0,r4,#24
00000c  f88d0000          STRB     r0,[sp,#0]
;;;969        tmp[1] = (unsigned char)((time >> 16) & 0xFF);
000010  0c20              LSRS     r0,r4,#16
000012  f88d0001          STRB     r0,[sp,#1]
;;;970        tmp[2] = (unsigned char)((time >> 8) & 0xFF);
000016  0a20              LSRS     r0,r4,#8
000018  f88d0002          STRB     r0,[sp,#2]
;;;971        tmp[3] = (unsigned char)(time & 0xFF);
00001c  b2e0              UXTB     r0,r4
00001e  f88d0003          STRB     r0,[sp,#3]
;;;972        return mpu_write_mem(D_PEDSTD_TIMECTR, 4, tmp);
000022  466a              MOV      r2,sp
000024  2104              MOVS     r1,#4
000026  f44f7071          MOV      r0,#0x3c4
00002a  f7fffffe          BL       mpu_write_mem
;;;973    }
00002e  bd38              POP      {r3-r5,pc}
;;;974    
                          ENDP


                          AREA ||i.dmp_set_shake_reject_thresh||, CODE, READONLY, ALIGN=1

                  dmp_set_shake_reject_thresh PROC
;;;852     */
;;;853    int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
000000  b5f8              PUSH     {r3-r7,lr}
;;;854    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;855        unsigned char tmp[4];
;;;856        long thresh_scaled = sf / 1000 * thresh;
000006  f44f707a          MOV      r0,#0x3e8
00000a  fb95f0f0          SDIV     r0,r5,r0
00000e  fb00f406          MUL      r4,r0,r6
;;;857        tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
000012  0e20              LSRS     r0,r4,#24
000014  f88d0000          STRB     r0,[sp,#0]
;;;858        tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
000018  0c20              LSRS     r0,r4,#16
00001a  f88d0001          STRB     r0,[sp,#1]
;;;859        tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
00001e  0a20              LSRS     r0,r4,#8
000020  f88d0002          STRB     r0,[sp,#2]
;;;860        tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
000024  b2e0              UXTB     r0,r4
000026  f88d0003          STRB     r0,[sp,#3]
;;;861        return mpu_write_mem(D_1_92, 4, tmp);
00002a  466a              MOV      r2,sp
00002c  2104              MOVS     r1,#4
00002e  f44f70ae          MOV      r0,#0x15c
000032  f7fffffe          BL       mpu_write_mem
;;;862    }
000036  bdf8              POP      {r3-r7,pc}
;;;863    
                          ENDP


                          AREA ||i.dmp_set_shake_reject_time||, CODE, READONLY, ALIGN=1

                  dmp_set_shake_reject_time PROC
;;;871     */
;;;872    int dmp_set_shake_reject_time(unsigned short time)
000000  b538              PUSH     {r3-r5,lr}
;;;873    {
000002  4604              MOV      r4,r0
;;;874        unsigned char tmp[2];
;;;875    
;;;876        time /= (1000 / DMP_SAMPLE_RATE);
000004  2005              MOVS     r0,#5
000006  fb94f0f0          SDIV     r0,r4,r0
00000a  b284              UXTH     r4,r0
;;;877        tmp[0] = time >> 8;
00000c  1220              ASRS     r0,r4,#8
00000e  f88d0000          STRB     r0,[sp,#0]
;;;878        tmp[1] = time & 0xFF;
000012  b2e0              UXTB     r0,r4
000014  f88d0001          STRB     r0,[sp,#1]
;;;879        return mpu_write_mem(D_1_90,2,tmp);
000018  466a              MOV      r2,sp
00001a  2102              MOVS     r1,#2
00001c  f44f70ad          MOV      r0,#0x15a
000020  f7fffffe          BL       mpu_write_mem
;;;880    }
000024  bd38              POP      {r3-r5,pc}
;;;881    
                          ENDP


                          AREA ||i.dmp_set_shake_reject_timeout||, CODE, READONLY, ALIGN=1

                  dmp_set_shake_reject_timeout PROC
;;;889     */
;;;890    int dmp_set_shake_reject_timeout(unsigned short time)
000000  b538              PUSH     {r3-r5,lr}
;;;891    {
000002  4604              MOV      r4,r0
;;;892        unsigned char tmp[2];
;;;893    
;;;894        time /= (1000 / DMP_SAMPLE_RATE);
000004  2005              MOVS     r0,#5
000006  fb94f0f0          SDIV     r0,r4,r0
00000a  b284              UXTH     r4,r0
;;;895        tmp[0] = time >> 8;
00000c  1220              ASRS     r0,r4,#8
00000e  f88d0000          STRB     r0,[sp,#0]
;;;896        tmp[1] = time & 0xFF;
000012  b2e0              UXTB     r0,r4
000014  f88d0001          STRB     r0,[sp,#1]
;;;897        return mpu_write_mem(D_1_88,2,tmp);
000018  466a              MOV      r2,sp
00001a  2102              MOVS     r1,#2
00001c  f44f70ac          MOV      r0,#0x158
000020  f7fffffe          BL       mpu_write_mem
;;;898    }
000024  bd38              POP      {r3-r5,pc}
;;;899    
                          ENDP


                          AREA ||i.dmp_set_tap_axes||, CODE, READONLY, ALIGN=1

                  dmp_set_tap_axes PROC
;;;782     */
;;;783    int dmp_set_tap_axes(unsigned char axis)
000000  b538              PUSH     {r3-r5,lr}
;;;784    {
000002  4604              MOV      r4,r0
;;;785        unsigned char tmp = 0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;786    
;;;787        if (axis & TAP_X)
000008  f0040001          AND      r0,r4,#1
00000c  b120              CBZ      r0,|L24.24|
;;;788            tmp |= 0x30;
00000e  f89d0000          LDRB     r0,[sp,#0]
000012  f0400030          ORR      r0,r0,#0x30
000016  9000              STR      r0,[sp,#0]
                  |L24.24|
;;;789        if (axis & TAP_Y)
000018  f0040002          AND      r0,r4,#2
00001c  b120              CBZ      r0,|L24.40|
;;;790            tmp |= 0x0C;
00001e  f89d0000          LDRB     r0,[sp,#0]
000022  f040000c          ORR      r0,r0,#0xc
000026  9000              STR      r0,[sp,#0]
                  |L24.40|
;;;791        if (axis & TAP_Z)
000028  f0040004          AND      r0,r4,#4
00002c  b120              CBZ      r0,|L24.56|
;;;792            tmp |= 0x03;
00002e  f89d0000          LDRB     r0,[sp,#0]
000032  f0400003          ORR      r0,r0,#3
000036  9000              STR      r0,[sp,#0]
                  |L24.56|
;;;793        return mpu_write_mem(D_1_72, 1, &tmp);
000038  466a              MOV      r2,sp
00003a  2101              MOVS     r1,#1
00003c  f44f70a4          MOV      r0,#0x148
000040  f7fffffe          BL       mpu_write_mem
;;;794    }
000044  bd38              POP      {r3-r5,pc}
;;;795    
                          ENDP


                          AREA ||i.dmp_set_tap_count||, CODE, READONLY, ALIGN=1

                  dmp_set_tap_count PROC
;;;800     */
;;;801    int dmp_set_tap_count(unsigned char min_taps)
000000  b538              PUSH     {r3-r5,lr}
;;;802    {
000002  4604              MOV      r4,r0
;;;803        unsigned char tmp;
;;;804    
;;;805        if (min_taps < 1)
000004  2c01              CMP      r4,#1
000006  da01              BGE      |L25.12|
;;;806            min_taps = 1;
000008  2401              MOVS     r4,#1
00000a  e002              B        |L25.18|
                  |L25.12|
;;;807        else if (min_taps > 4)
00000c  2c04              CMP      r4,#4
00000e  dd00              BLE      |L25.18|
;;;808            min_taps = 4;
000010  2404              MOVS     r4,#4
                  |L25.18|
;;;809    
;;;810        tmp = min_taps - 1;
000012  1e60              SUBS     r0,r4,#1
000014  b2c0              UXTB     r0,r0
000016  9000              STR      r0,[sp,#0]
;;;811        return mpu_write_mem(D_1_79, 1, &tmp);
000018  466a              MOV      r2,sp
00001a  2101              MOVS     r1,#1
00001c  f240104f          MOV      r0,#0x14f
000020  f7fffffe          BL       mpu_write_mem
;;;812    }
000024  bd38              POP      {r3-r5,pc}
;;;813    
                          ENDP


                          AREA ||i.dmp_set_tap_thresh||, CODE, READONLY, ALIGN=2

                  dmp_set_tap_thresh PROC
;;;716     */
;;;717    int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
000000  b5f0              PUSH     {r4-r7,lr}
;;;718    {
000002  ed2d8b02          VPUSH    {d8}
000006  b083              SUB      sp,sp,#0xc
000008  4606              MOV      r6,r0
00000a  460f              MOV      r7,r1
;;;719        unsigned char tmp[4], accel_fsr;
;;;720        float scaled_thresh;
;;;721        unsigned short dmp_thresh, dmp_thresh_2;
;;;722        if (!(axis & TAP_XYZ) || thresh > 1600)
00000c  f0060007          AND      r0,r6,#7
000010  b110              CBZ      r0,|L26.24|
000012  f5b76fc8          CMP      r7,#0x640
000016  dd05              BLE      |L26.36|
                  |L26.24|
;;;723            return -1;
000018  f04f30ff          MOV      r0,#0xffffffff
                  |L26.28|
;;;724    
;;;725        scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
;;;726    
;;;727        mpu_get_accel_fsr(&accel_fsr);
;;;728        switch (accel_fsr) {
;;;729        case 2:
;;;730            dmp_thresh = (unsigned short)(scaled_thresh * 16384);
;;;731            /* dmp_thresh * 0.75 */
;;;732            dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
;;;733            break;
;;;734        case 4:
;;;735            dmp_thresh = (unsigned short)(scaled_thresh * 8192);
;;;736            /* dmp_thresh * 0.75 */
;;;737            dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
;;;738            break;
;;;739        case 8:
;;;740            dmp_thresh = (unsigned short)(scaled_thresh * 4096);
;;;741            /* dmp_thresh * 0.75 */
;;;742            dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
;;;743            break;
;;;744        case 16:
;;;745            dmp_thresh = (unsigned short)(scaled_thresh * 2048);
;;;746            /* dmp_thresh * 0.75 */
;;;747            dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
;;;748            break;
;;;749        default:
;;;750            return -1;
;;;751        }
;;;752        tmp[0] = (unsigned char)(dmp_thresh >> 8);
;;;753        tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
;;;754        tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
;;;755        tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
;;;756    
;;;757        if (axis & TAP_X) {
;;;758            if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
;;;759                return -1;
;;;760            if (mpu_write_mem(D_1_36, 2, tmp+2))
;;;761                return -1;
;;;762        }
;;;763        if (axis & TAP_Y) {
;;;764            if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
;;;765                return -1;
;;;766            if (mpu_write_mem(D_1_40, 2, tmp+2))
;;;767                return -1;
;;;768        }
;;;769        if (axis & TAP_Z) {
;;;770            if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
;;;771                return -1;
;;;772            if (mpu_write_mem(D_1_44, 2, tmp+2))
;;;773                return -1;
;;;774        }
;;;775        return 0;
;;;776    }
00001c  b003              ADD      sp,sp,#0xc
00001e  ecbd8b02          VPOP     {d8}
000022  bdf0              POP      {r4-r7,pc}
                  |L26.36|
000024  ee007a10          VMOV     s0,r7                 ;725
000028  eeb80a40          VCVT.F32.U32 s0,s0                 ;725
00002c  eddf0a5b          VLDR     s1,|L26.412|
000030  ee808a20          VDIV.F32 s16,s0,s1             ;725
000034  a801              ADD      r0,sp,#4              ;727
000036  f7fffffe          BL       mpu_get_accel_fsr
00003a  f89d0004          LDRB     r0,[sp,#4]            ;728
00003e  2802              CMP      r0,#2                 ;728
000040  d006              BEQ      |L26.80|
000042  2804              CMP      r0,#4                 ;728
000044  d017              BEQ      |L26.118|
000046  2808              CMP      r0,#8                 ;728
000048  d028              BEQ      |L26.156|
00004a  2810              CMP      r0,#0x10              ;728
00004c  d14c              BNE      |L26.232|
00004e  e038              B        |L26.194|
                  |L26.80|
000050  ed9f0a53          VLDR     s0,|L26.416|
000054  ee280a00          VMUL.F32 s0,s16,s0             ;730
000058  eebc0ac0          VCVT.U32.F32 s0,s0                 ;730
00005c  ee100a10          VMOV     r0,s0                 ;730
000060  b284              UXTH     r4,r0                 ;730
000062  ed9f0a50          VLDR     s0,|L26.420|
000066  ee280a00          VMUL.F32 s0,s16,s0             ;732
00006a  eebc0ac0          VCVT.U32.F32 s0,s0                 ;732
00006e  ee100a10          VMOV     r0,s0                 ;732
000072  b285              UXTH     r5,r0                 ;732
000074  e03b              B        |L26.238|
                  |L26.118|
000076  ed9f0a4c          VLDR     s0,|L26.424|
00007a  ee280a00          VMUL.F32 s0,s16,s0             ;735
00007e  eebc0ac0          VCVT.U32.F32 s0,s0                 ;735
000082  ee100a10          VMOV     r0,s0                 ;735
000086  b284              UXTH     r4,r0                 ;735
000088  ed9f0a48          VLDR     s0,|L26.428|
00008c  ee280a00          VMUL.F32 s0,s16,s0             ;737
000090  eebc0ac0          VCVT.U32.F32 s0,s0                 ;737
000094  ee100a10          VMOV     r0,s0                 ;737
000098  b285              UXTH     r5,r0                 ;737
00009a  e028              B        |L26.238|
                  |L26.156|
00009c  ed9f0a44          VLDR     s0,|L26.432|
0000a0  ee280a00          VMUL.F32 s0,s16,s0             ;740
0000a4  eebc0ac0          VCVT.U32.F32 s0,s0                 ;740
0000a8  ee100a10          VMOV     r0,s0                 ;740
0000ac  b284              UXTH     r4,r0                 ;740
0000ae  ed9f0a41          VLDR     s0,|L26.436|
0000b2  ee280a00          VMUL.F32 s0,s16,s0             ;742
0000b6  eebc0ac0          VCVT.U32.F32 s0,s0                 ;742
0000ba  ee100a10          VMOV     r0,s0                 ;742
0000be  b285              UXTH     r5,r0                 ;742
0000c0  e015              B        |L26.238|
                  |L26.194|
0000c2  ed9f0a3d          VLDR     s0,|L26.440|
0000c6  ee280a00          VMUL.F32 s0,s16,s0             ;745
0000ca  eebc0ac0          VCVT.U32.F32 s0,s0                 ;745
0000ce  ee100a10          VMOV     r0,s0                 ;745
0000d2  b284              UXTH     r4,r0                 ;745
0000d4  ed9f0a39          VLDR     s0,|L26.444|
0000d8  ee280a00          VMUL.F32 s0,s16,s0             ;747
0000dc  eebc0ac0          VCVT.U32.F32 s0,s0                 ;747
0000e0  ee100a10          VMOV     r0,s0                 ;747
0000e4  b285              UXTH     r5,r0                 ;747
0000e6  e002              B        |L26.238|
                  |L26.232|
0000e8  f04f30ff          MOV      r0,#0xffffffff        ;750
0000ec  e796              B        |L26.28|
                  |L26.238|
0000ee  bf00              NOP                            ;733
0000f0  1220              ASRS     r0,r4,#8              ;752
0000f2  f88d0008          STRB     r0,[sp,#8]            ;752
0000f6  b2e0              UXTB     r0,r4                 ;753
0000f8  f88d0009          STRB     r0,[sp,#9]            ;753
0000fc  1228              ASRS     r0,r5,#8              ;754
0000fe  f88d000a          STRB     r0,[sp,#0xa]          ;754
000102  b2e8              UXTB     r0,r5                 ;755
000104  f88d000b          STRB     r0,[sp,#0xb]          ;755
000108  f0060001          AND      r0,r6,#1              ;757
00010c  b1a0              CBZ      r0,|L26.312|
00010e  aa02              ADD      r2,sp,#8              ;758
000110  2102              MOVS     r1,#2                 ;758
000112  f44f70ea          MOV      r0,#0x1d4             ;758
000116  f7fffffe          BL       mpu_write_mem
00011a  b110              CBZ      r0,|L26.290|
00011c  f04f30ff          MOV      r0,#0xffffffff        ;759
000120  e77c              B        |L26.28|
                  |L26.290|
000122  f10d020a          ADD      r2,sp,#0xa            ;760
000126  2102              MOVS     r1,#2                 ;760
000128  f44f7092          MOV      r0,#0x124             ;760
00012c  f7fffffe          BL       mpu_write_mem
000130  b110              CBZ      r0,|L26.312|
000132  f04f30ff          MOV      r0,#0xffffffff        ;761
000136  e771              B        |L26.28|
                  |L26.312|
000138  f0060002          AND      r0,r6,#2              ;763
00013c  b1a0              CBZ      r0,|L26.360|
00013e  aa02              ADD      r2,sp,#8              ;764
000140  2102              MOVS     r1,#2                 ;764
000142  f44f70ec          MOV      r0,#0x1d8             ;764
000146  f7fffffe          BL       mpu_write_mem
00014a  b110              CBZ      r0,|L26.338|
00014c  f04f30ff          MOV      r0,#0xffffffff        ;765
000150  e764              B        |L26.28|
                  |L26.338|
000152  f10d020a          ADD      r2,sp,#0xa            ;766
000156  2102              MOVS     r1,#2                 ;766
000158  f44f7094          MOV      r0,#0x128             ;766
00015c  f7fffffe          BL       mpu_write_mem
000160  b110              CBZ      r0,|L26.360|
000162  f04f30ff          MOV      r0,#0xffffffff        ;767
000166  e759              B        |L26.28|
                  |L26.360|
000168  f0060004          AND      r0,r6,#4              ;769
00016c  b1a0              CBZ      r0,|L26.408|
00016e  aa02              ADD      r2,sp,#8              ;770
000170  2102              MOVS     r1,#2                 ;770
000172  f44f70ee          MOV      r0,#0x1dc             ;770
000176  f7fffffe          BL       mpu_write_mem
00017a  b110              CBZ      r0,|L26.386|
00017c  f04f30ff          MOV      r0,#0xffffffff        ;771
000180  e74c              B        |L26.28|
                  |L26.386|
000182  f10d020a          ADD      r2,sp,#0xa            ;772
000186  2102              MOVS     r1,#2                 ;772
000188  f44f7096          MOV      r0,#0x12c             ;772
00018c  f7fffffe          BL       mpu_write_mem
000190  b110              CBZ      r0,|L26.408|
000192  f04f30ff          MOV      r0,#0xffffffff        ;773
000196  e741              B        |L26.28|
                  |L26.408|
000198  2000              MOVS     r0,#0                 ;775
00019a  e73f              B        |L26.28|
;;;777    
                          ENDP

                  |L26.412|
00019c  43480000          DCFS     0x43480000 ; 200
                  |L26.416|
0001a0  46800000          DCFS     0x46800000 ; 16384
                  |L26.420|
0001a4  46400000          DCFS     0x46400000 ; 12288
                  |L26.424|
0001a8  46000000          DCFS     0x46000000 ; 8192
                  |L26.428|
0001ac  45c00000          DCFS     0x45c00000 ; 6144
                  |L26.432|
0001b0  45800000          DCFS     0x45800000 ; 4096
                  |L26.436|
0001b4  45400000          DCFS     0x45400000 ; 3072
                  |L26.440|
0001b8  45000000          DCFS     0x45000000 ; 2048
                  |L26.444|
0001bc  44c00000          DCFS     0x44c00000 ; 1536

                          AREA ||i.dmp_set_tap_time||, CODE, READONLY, ALIGN=1

                  dmp_set_tap_time PROC
;;;818     */
;;;819    int dmp_set_tap_time(unsigned short time)
000000  b538              PUSH     {r3-r5,lr}
;;;820    {
000002  4604              MOV      r4,r0
;;;821        unsigned short dmp_time;
;;;822        unsigned char tmp[2];
;;;823    
;;;824        dmp_time = time / (1000 / DMP_SAMPLE_RATE);
000004  2005              MOVS     r0,#5
000006  fb94f0f0          SDIV     r0,r4,r0
00000a  b285              UXTH     r5,r0
;;;825        tmp[0] = (unsigned char)(dmp_time >> 8);
00000c  1228              ASRS     r0,r5,#8
00000e  f88d0000          STRB     r0,[sp,#0]
;;;826        tmp[1] = (unsigned char)(dmp_time & 0xFF);
000012  b2e8              UXTB     r0,r5
000014  f88d0001          STRB     r0,[sp,#1]
;;;827        return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
000018  466a              MOV      r2,sp
00001a  2102              MOVS     r1,#2
00001c  f44f70ef          MOV      r0,#0x1de
000020  f7fffffe          BL       mpu_write_mem
;;;828    }
000024  bd38              POP      {r3-r5,pc}
;;;829    
                          ENDP


                          AREA ||i.dmp_set_tap_time_multi||, CODE, READONLY, ALIGN=1

                  dmp_set_tap_time_multi PROC
;;;834     */
;;;835    int dmp_set_tap_time_multi(unsigned short time)
000000  b538              PUSH     {r3-r5,lr}
;;;836    {
000002  4604              MOV      r4,r0
;;;837        unsigned short dmp_time;
;;;838        unsigned char tmp[2];
;;;839    
;;;840        dmp_time = time / (1000 / DMP_SAMPLE_RATE);
000004  2005              MOVS     r0,#5
000006  fb94f0f0          SDIV     r0,r4,r0
00000a  b285              UXTH     r5,r0
;;;841        tmp[0] = (unsigned char)(dmp_time >> 8);
00000c  1228              ASRS     r0,r5,#8
00000e  f88d0000          STRB     r0,[sp,#0]
;;;842        tmp[1] = (unsigned char)(dmp_time & 0xFF);
000012  b2e8              UXTB     r0,r5
000014  f88d0001          STRB     r0,[sp,#1]
;;;843        return mpu_write_mem(D_1_218, 2, tmp);
000018  466a              MOV      r2,sp
00001a  2102              MOVS     r1,#2
00001c  f44f70ed          MOV      r0,#0x1da
000020  f7fffffe          BL       mpu_write_mem
;;;844    }
000024  bd38              POP      {r3-r5,pc}
;;;845    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  ||dmp||
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  dmp_memory
000000  00007000          DCB      0x00,0x00,0x70,0x00
000004  00000024          DCB      0x00,0x00,0x00,0x24
000008  00000002          DCB      0x00,0x00,0x00,0x02
00000c  00030000          DCB      0x00,0x03,0x00,0x00
000010  00650054          DCB      0x00,0x65,0x00,0x54
000014  ffef0000          DCB      0xff,0xef,0x00,0x00
000018  fa80000b          DCB      0xfa,0x80,0x00,0x0b
00001c  12820001          DCB      0x12,0x82,0x00,0x01
000020  030c30c3          DCB      0x03,0x0c,0x30,0xc3
000024  0e8c8ce9          DCB      0x0e,0x8c,0x8c,0xe9
000028  14d54002          DCB      0x14,0xd5,0x40,0x02
00002c  13710f8e          DCB      0x13,0x71,0x0f,0x8e
000030  3883f883          DCB      0x38,0x83,0xf8,0x83
000034  3000f883          DCB      0x30,0x00,0xf8,0x83
000038  258ef883          DCB      0x25,0x8e,0xf8,0x83
00003c  3000f883          DCB      0x30,0x00,0xf8,0x83
000040  ffffffff          DCB      0xff,0xff,0xff,0xff
000044  0ffea9d6          DCB      0x0f,0xfe,0xa9,0xd6
000048  24000400          DCB      0x24,0x00,0x04,0x00
00004c  1a8279a1          DCB      0x1a,0x82,0x79,0xa1
000050  0000003c          DCB      0x00,0x00,0x00,0x3c
000054  ffff0000          DCB      0xff,0xff,0x00,0x00
000058  00100000          DCB      0x00,0x10,0x00,0x00
00005c  38836fa2          DCB      0x38,0x83,0x6f,0xa2
000060  003e0330          DCB      0x00,0x3e,0x03,0x30
000064  40000000          DCB      0x40,0x00,0x00,0x00
000068  02cae309          DCB      0x02,0xca,0xe3,0x09
00006c  3e800000          DCB      0x3e,0x80,0x00,0x00
000070  20000000          DCB      0x20,0x00,0x00,0x00
000074  00000000          DCB      0x00,0x00,0x00,0x00
000078  40000000          DCB      0x40,0x00,0x00,0x00
00007c  60000000          DCB      0x60,0x00,0x00,0x00
000080  000c0000          DCB      0x00,0x0c,0x00,0x00
000084  000c186e          DCB      0x00,0x0c,0x18,0x6e
000088  00000692          DCB      0x00,0x00,0x06,0x92
00008c  0a16c0df          DCB      0x0a,0x16,0xc0,0xdf
000090  ffff0256          DCB      0xff,0xff,0x02,0x56
000094  fd8cd377          DCB      0xfd,0x8c,0xd3,0x77
000098  ffe1c496          DCB      0xff,0xe1,0xc4,0x96
00009c  e0c5beaa          DCB      0xe0,0xc5,0xbe,0xaa
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
0000a4  ffff0b2b          DCB      0xff,0xff,0x0b,0x2b
0000a8  00001657          DCB      0x00,0x00,0x16,0x57
0000ac  00000359          DCB      0x00,0x00,0x03,0x59
0000b0  40000000          DCB      0x40,0x00,0x00,0x00
0000b4  00001dfa          DCB      0x00,0x00,0x1d,0xfa
0000b8  00026c1d          DCB      0x00,0x02,0x6c,0x1d
0000bc  00000000          DCB      0x00,0x00,0x00,0x00
0000c0  3fffdfeb          DCB      0x3f,0xff,0xdf,0xeb
0000c4  003eb3b6          DCB      0x00,0x3e,0xb3,0xb6
0000c8  000d2278          DCB      0x00,0x0d,0x22,0x78
0000cc  00002f3c          DCB      0x00,0x00,0x2f,0x3c
0000d0  00000000          DCB      0x00,0x00,0x00,0x00
0000d4  001942b5          DCB      0x00,0x19,0x42,0xb5
0000d8  000039a2          DCB      0x00,0x00,0x39,0xa2
0000dc  0000b365          DCB      0x00,0x00,0xb3,0x65
0000e0  d90e9fc9          DCB      0xd9,0x0e,0x9f,0xc9
0000e4  1dcf4c34          DCB      0x1d,0xcf,0x4c,0x34
0000e8  30000000          DCB      0x30,0x00,0x00,0x00
0000ec  50000000          DCB      0x50,0x00,0x00,0x00
0000f0  3bb67ae8          DCB      0x3b,0xb6,0x7a,0xe8
0000f4  00640000          DCB      0x00,0x64,0x00,0x00
0000f8  00c80000          DCB      0x00,0xc8,0x00,0x00
0000fc  00000000          DCB      0x00,0x00,0x00,0x00
000100  10000000          DCB      0x10,0x00,0x00,0x00
000104  1000fa92          DCB      0x10,0x00,0xfa,0x92
000108  1000225e          DCB      0x10,0x00,0x22,0x5e
00010c  000d229f          DCB      0x00,0x0d,0x22,0x9f
000110  00010000          DCB      0x00,0x01,0x00,0x00
000114  00320000          DCB      0x00,0x32,0x00,0x00
000118  ff460000          DCB      0xff,0x46,0x00,0x00
00011c  63d40000          DCB      0x63,0xd4,0x00,0x00
000120  10000000          DCB      0x10,0x00,0x00,0x00
000124  04d60000          DCB      0x04,0xd6,0x00,0x00
000128  04cc0000          DCB      0x04,0xcc,0x00,0x00
00012c  04cc0000          DCB      0x04,0xcc,0x00,0x00
000130  00001072          DCB      0x00,0x00,0x10,0x72
000134  00000040          DCB      0x00,0x00,0x00,0x40
000138  00000000          DCB      0x00,0x00,0x00,0x00
00013c  00000000          DCB      0x00,0x00,0x00,0x00
000140  00060002          DCB      0x00,0x06,0x00,0x02
000144  00050007          DCB      0x00,0x05,0x00,0x07
000148  00000000          DCB      0x00,0x00,0x00,0x00
00014c  00640000          DCB      0x00,0x64,0x00,0x00
000150  00000000          DCB      0x00,0x00,0x00,0x00
000154  00000005          DCB      0x00,0x00,0x00,0x05
000158  00050064          DCB      0x00,0x05,0x00,0x64
00015c  00200000          DCB      0x00,0x20,0x00,0x00
000160  00000000          DCB      0x00,0x00,0x00,0x00
000164  00000000          DCB      0x00,0x00,0x00,0x00
000168  00004000          DCB      0x00,0x00,0x40,0x00
00016c  00000300          DCB      0x00,0x00,0x03,0x00
000170  00000032          DCB      0x00,0x00,0x00,0x32
000174  f8980000          DCB      0xf8,0x98,0x00,0x00
000178  ff650000          DCB      0xff,0x65,0x00,0x00
00017c  830f0000          DCB      0x83,0x0f,0x00,0x00
000180  ff9bfc00          DCB      0xff,0x9b,0xfc,0x00
000184  00000000          DCB      0x00,0x00,0x00,0x00
000188  00000000          DCB      0x00,0x00,0x00,0x00
00018c  00000000          DCB      0x00,0x00,0x00,0x00
000190  00000000          DCB      0x00,0x00,0x00,0x00
000194  00000000          DCB      0x00,0x00,0x00,0x00
000198  00000000          DCB      0x00,0x00,0x00,0x00
00019c  00000000          DCB      0x00,0x00,0x00,0x00
0001a0  00000000          DCB      0x00,0x00,0x00,0x00
0001a4  00000000          DCB      0x00,0x00,0x00,0x00
0001a8  00000000          DCB      0x00,0x00,0x00,0x00
0001ac  00001000          DCB      0x00,0x00,0x10,0x00
0001b0  40000000          DCB      0x40,0x00,0x00,0x00
0001b4  00000006          DCB      0x00,0x00,0x00,0x06
0001b8  0000b26a          DCB      0x00,0x00,0xb2,0x6a
0001bc  00020000          DCB      0x00,0x02,0x00,0x00
0001c0  0001fb83          DCB      0x00,0x01,0xfb,0x83
0001c4  00680000          DCB      0x00,0x68,0x00,0x00
0001c8  00d9fc00          DCB      0x00,0xd9,0xfc,0x00
0001cc  7cf1ff83          DCB      0x7c,0xf1,0xff,0x83
0001d0  00000000          DCB      0x00,0x00,0x00,0x00
0001d4  00650000          DCB      0x00,0x65,0x00,0x00
0001d8  006403e8          DCB      0x00,0x64,0x03,0xe8
0001dc  00640028          DCB      0x00,0x64,0x00,0x28
0001e0  00000025          DCB      0x00,0x00,0x00,0x25
0001e4  00000000          DCB      0x00,0x00,0x00,0x00
0001e8  16a00000          DCB      0x16,0xa0,0x00,0x00
0001ec  00001000          DCB      0x00,0x00,0x10,0x00
0001f0  00001000          DCB      0x00,0x00,0x10,0x00
0001f4  002f0000          DCB      0x00,0x2f,0x00,0x00
0001f8  000001f4          DCB      0x00,0x00,0x01,0xf4
0001fc  00001000          DCB      0x00,0x00,0x10,0x00
000200  00280000          DCB      0x00,0x28,0x00,0x00
000204  ffff4581          DCB      0xff,0xff,0x45,0x81
000208  fffffa72          DCB      0xff,0xff,0xfa,0x72
00020c  00000000          DCB      0x00,0x00,0x00,0x00
000210  00000000          DCB      0x00,0x00,0x00,0x00
000214  00440005          DCB      0x00,0x44,0x00,0x05
000218  0005bac6          DCB      0x00,0x05,0xba,0xc6
00021c  004778a2          DCB      0x00,0x47,0x78,0xa2
000220  00000001          DCB      0x00,0x00,0x00,0x01
000224  00000000          DCB      0x00,0x00,0x00,0x00
000228  00000600          DCB      0x00,0x00,0x06,0x00
00022c  00000014          DCB      0x00,0x00,0x00,0x14
000230  0000254d          DCB      0x00,0x00,0x25,0x4d
000234  002f706d          DCB      0x00,0x2f,0x70,0x6d
000238  000005ae          DCB      0x00,0x00,0x05,0xae
00023c  000c02d0          DCB      0x00,0x0c,0x02,0xd0
000240  00000000          DCB      0x00,0x00,0x00,0x00
000244  00000000          DCB      0x00,0x00,0x00,0x00
000248  00000000          DCB      0x00,0x00,0x00,0x00
00024c  00000000          DCB      0x00,0x00,0x00,0x00
000250  001b0000          DCB      0x00,0x1b,0x00,0x00
000254  00000000          DCB      0x00,0x00,0x00,0x00
000258  00000000          DCB      0x00,0x00,0x00,0x00
00025c  00000000          DCB      0x00,0x00,0x00,0x00
000260  00640000          DCB      0x00,0x64,0x00,0x00
000264  00080000          DCB      0x00,0x08,0x00,0x00
000268  00000000          DCB      0x00,0x00,0x00,0x00
00026c  00000000          DCB      0x00,0x00,0x00,0x00
000270  00000000          DCB      0x00,0x00,0x00,0x00
000274  00000000          DCB      0x00,0x00,0x00,0x00
000278  00000000          DCB      0x00,0x00,0x00,0x00
00027c  00000000          DCB      0x00,0x00,0x00,0x00
000280  00000000          DCB      0x00,0x00,0x00,0x00
000284  00000000          DCB      0x00,0x00,0x00,0x00
000288  00000000          DCB      0x00,0x00,0x00,0x00
00028c  00000000          DCB      0x00,0x00,0x00,0x00
000290  00000000          DCB      0x00,0x00,0x00,0x00
000294  00000000          DCB      0x00,0x00,0x00,0x00
000298  00000000          DCB      0x00,0x00,0x00,0x00
00029c  00000000          DCB      0x00,0x00,0x00,0x00
0002a0  00000000          DCB      0x00,0x00,0x00,0x00
0002a4  00000000          DCB      0x00,0x00,0x00,0x00
0002a8  00000000          DCB      0x00,0x00,0x00,0x00
0002ac  00000000          DCB      0x00,0x00,0x00,0x00
0002b0  00000000          DCB      0x00,0x00,0x00,0x00
0002b4  00000000          DCB      0x00,0x00,0x00,0x00
0002b8  00000000          DCB      0x00,0x00,0x00,0x00
0002bc  00000000          DCB      0x00,0x00,0x00,0x00
0002c0  001b0000          DCB      0x00,0x1b,0x00,0x00
0002c4  00000000          DCB      0x00,0x00,0x00,0x00
0002c8  00000000          DCB      0x00,0x00,0x00,0x00
0002cc  000e000e          DCB      0x00,0x0e,0x00,0x0e
0002d0  00000ac7          DCB      0x00,0x00,0x0a,0xc7
0002d4  00040000          DCB      0x00,0x04,0x00,0x00
0002d8  00000032          DCB      0x00,0x00,0x00,0x32
0002dc  ffffff9c          DCB      0xff,0xff,0xff,0x9c
0002e0  00000b2b          DCB      0x00,0x00,0x0b,0x2b
0002e4  00000002          DCB      0x00,0x00,0x00,0x02
0002e8  00000001          DCB      0x00,0x00,0x00,0x01
0002ec  00000064          DCB      0x00,0x00,0x00,0x64
0002f0  ffe50000          DCB      0xff,0xe5,0x00,0x00
0002f4  00000000          DCB      0x00,0x00,0x00,0x00
0002f8  00000000          DCB      0x00,0x00,0x00,0x00
0002fc  00000000          DCB      0x00,0x00,0x00,0x00
000300  00000001          DCB      0x00,0x00,0x00,0x01
000304  00000000          DCB      0x00,0x00,0x00,0x00
000308  00010000          DCB      0x00,0x01,0x00,0x00
00030c  00000000          DCB      0x00,0x00,0x00,0x00
000310  00018000          DCB      0x00,0x01,0x80,0x00
000314  00018000          DCB      0x00,0x01,0x80,0x00
000318  00018000          DCB      0x00,0x01,0x80,0x00
00031c  002426d3          DCB      0x00,0x24,0x26,0xd3
000320  00000000          DCB      0x00,0x00,0x00,0x00
000324  00000000          DCB      0x00,0x00,0x00,0x00
000328  00060010          DCB      0x00,0x06,0x00,0x10
00032c  0096003c          DCB      0x00,0x96,0x00,0x3c
000330  00000000          DCB      0x00,0x00,0x00,0x00
000334  00000000          DCB      0x00,0x00,0x00,0x00
000338  00000000          DCB      0x00,0x00,0x00,0x00
00033c  00000000          DCB      0x00,0x00,0x00,0x00
000340  0c0a4e68          DCB      0x0c,0x0a,0x4e,0x68
000344  cdcf7709          DCB      0xcd,0xcf,0x77,0x09
000348  50166759          DCB      0x50,0x16,0x67,0x59
00034c  c619ce82          DCB      0xc6,0x19,0xce,0x82
000350  00000000          DCB      0x00,0x00,0x00,0x00
000354  00000000          DCB      0x00,0x00,0x00,0x00
000358  00000000          DCB      0x00,0x00,0x00,0x00
00035c  00000000          DCB      0x00,0x00,0x00,0x00
000360  00000000          DCB      0x00,0x00,0x00,0x00
000364  00000000          DCB      0x00,0x00,0x00,0x00
000368  17d78400          DCB      0x17,0xd7,0x84,0x00
00036c  03000000          DCB      0x03,0x00,0x00,0x00
000370  00000000          DCB      0x00,0x00,0x00,0x00
000374  00000000          DCB      0x00,0x00,0x00,0x00
000378  c7938f9d          DCB      0xc7,0x93,0x8f,0x9d
00037c  1e1b1c19          DCB      0x1e,0x1b,0x1c,0x19
000380  00000000          DCB      0x00,0x00,0x00,0x00
000384  00000000          DCB      0x00,0x00,0x00,0x00
000388  00000000          DCB      0x00,0x00,0x00,0x00
00038c  00000000          DCB      0x00,0x00,0x00,0x00
000390  00000000          DCB      0x00,0x00,0x00,0x00
000394  00000000          DCB      0x00,0x00,0x00,0x00
000398  02031885          DCB      0x02,0x03,0x18,0x85
00039c  00004000          DCB      0x00,0x00,0x40,0x00
0003a0  00000003          DCB      0x00,0x00,0x00,0x03
0003a4  00000003          DCB      0x00,0x00,0x00,0x03
0003a8  00000000          DCB      0x00,0x00,0x00,0x00
0003ac  00000000          DCB      0x00,0x00,0x00,0x00
0003b0  40000000          DCB      0x40,0x00,0x00,0x00
0003b4  00000000          DCB      0x00,0x00,0x00,0x00
0003b8  00000000          DCB      0x00,0x00,0x00,0x00
0003bc  00000000          DCB      0x00,0x00,0x00,0x00
0003c0  00000000          DCB      0x00,0x00,0x00,0x00
0003c4  00000000          DCB      0x00,0x00,0x00,0x00
0003c8  00000000          DCB      0x00,0x00,0x00,0x00
0003cc  00000000          DCB      0x00,0x00,0x00,0x00
0003d0  00000000          DCB      0x00,0x00,0x00,0x00
0003d4  00000000          DCB      0x00,0x00,0x00,0x00
0003d8  00000000          DCB      0x00,0x00,0x00,0x00
0003dc  00000000          DCB      0x00,0x00,0x00,0x00
0003e0  00000000          DCB      0x00,0x00,0x00,0x00
0003e4  677ddf7e          DCB      0x67,0x7d,0xdf,0x7e
0003e8  72902e55          DCB      0x72,0x90,0x2e,0x55
0003ec  4cf6e688          DCB      0x4c,0xf6,0xe6,0x88
0003f0  00000000          DCB      0x00,0x00,0x00,0x00
0003f4  00000000          DCB      0x00,0x00,0x00,0x00
0003f8  00000000          DCB      0x00,0x00,0x00,0x00
0003fc  00000000          DCB      0x00,0x00,0x00,0x00
000400  d8dcb4b8          DCB      0xd8,0xdc,0xb4,0xb8
000404  b0d8b9ab          DCB      0xb0,0xd8,0xb9,0xab
000408  f3f8fab3          DCB      0xf3,0xf8,0xfa,0xb3
00040c  b7bb8e9e          DCB      0xb7,0xbb,0x8e,0x9e
000410  aef132f5          DCB      0xae,0xf1,0x32,0xf5
000414  1bf1b4b8          DCB      0x1b,0xf1,0xb4,0xb8
000418  b08097f1          DCB      0xb0,0x80,0x97,0xf1
00041c  a9dfdfdf          DCB      0xa9,0xdf,0xdf,0xdf
000420  aadfdfdf          DCB      0xaa,0xdf,0xdf,0xdf
000424  f2aac5cd          DCB      0xf2,0xaa,0xc5,0xcd
000428  c7a90cc9          DCB      0xc7,0xa9,0x0c,0xc9
00042c  2c97f1a9          DCB      0x2c,0x97,0xf1,0xa9
000430  89264666          DCB      0x89,0x26,0x46,0x66
000434  b28999a9          DCB      0xb2,0x89,0x99,0xa9
000438  2d557db0          DCB      0x2d,0x55,0x7d,0xb0
00043c  b08aa896          DCB      0xb0,0x8a,0xa8,0x96
000440  365676f1          DCB      0x36,0x56,0x76,0xf1
000444  baa3b4b2          DCB      0xba,0xa3,0xb4,0xb2
000448  80c0b8a8          DCB      0x80,0xc0,0xb8,0xa8
00044c  9711b283          DCB      0x97,0x11,0xb2,0x83
000450  98baa3f0          DCB      0x98,0xba,0xa3,0xf0
000454  24084410          DCB      0x24,0x08,0x44,0x10
000458  6418b2b9          DCB      0x64,0x18,0xb2,0xb9
00045c  b49883f1          DCB      0xb4,0x98,0x83,0xf1
000460  a329557d          DCB      0xa3,0x29,0x55,0x7d
000464  bab5b1a3          DCB      0xba,0xb5,0xb1,0xa3
000468  8393f000          DCB      0x83,0x93,0xf0,0x00
00046c  2850f5b2          DCB      0x28,0x50,0xf5,0xb2
000470  b6aa8393          DCB      0xb6,0xaa,0x83,0x93
000474  28547cf1          DCB      0x28,0x54,0x7c,0xf1
000478  b9a38293          DCB      0xb9,0xa3,0x82,0x93
00047c  61baa2da          DCB      0x61,0xba,0xa2,0xda
000480  dedfdb81          DCB      0xde,0xdf,0xdb,0x81
000484  9ab9aef5          DCB      0x9a,0xb9,0xae,0xf5
000488  606870f1          DCB      0x60,0x68,0x70,0xf1
00048c  dabaa2df          DCB      0xda,0xba,0xa2,0xdf
000490  d9baa2fa          DCB      0xd9,0xba,0xa2,0xfa
000494  b9a38292          DCB      0xb9,0xa3,0x82,0x92
000498  db31baa2          DCB      0xdb,0x31,0xba,0xa2
00049c  d9baa2f8          DCB      0xd9,0xba,0xa2,0xf8
0004a0  df85a4d0          DCB      0xdf,0x85,0xa4,0xd0
0004a4  c1bbad83          DCB      0xc1,0xbb,0xad,0x83
0004a8  c2c5c7b8          DCB      0xc2,0xc5,0xc7,0xb8
0004ac  a2dfdfdf          DCB      0xa2,0xdf,0xdf,0xdf
0004b0  baa0dfdf          DCB      0xba,0xa0,0xdf,0xdf
0004b4  dfd8d8f1          DCB      0xdf,0xd8,0xd8,0xf1
0004b8  b8aab38d          DCB      0xb8,0xaa,0xb3,0x8d
0004bc  b4980d35          DCB      0xb4,0x98,0x0d,0x35
0004c0  5db2b6ba          DCB      0x5d,0xb2,0xb6,0xba
0004c4  af8c9619          DCB      0xaf,0x8c,0x96,0x19
0004c8  8f9fa70e          DCB      0x8f,0x9f,0xa7,0x0e
0004cc  161eb49a          DCB      0x16,0x1e,0xb4,0x9a
0004d0  b8aa872c          DCB      0xb8,0xaa,0x87,0x2c
0004d4  547cbaa4          DCB      0x54,0x7c,0xba,0xa4
0004d8  b08ab691          DCB      0xb0,0x8a,0xb6,0x91
0004dc  325676b2          DCB      0x32,0x56,0x76,0xb2
0004e0  8494a4c8          DCB      0x84,0x94,0xa4,0xc8
0004e4  08cdd8b8          DCB      0x08,0xcd,0xd8,0xb8
0004e8  b4b0f199          DCB      0xb4,0xb0,0xf1,0x99
0004ec  82a82d55          DCB      0x82,0xa8,0x2d,0x55
0004f0  7d98a80e          DCB      0x7d,0x98,0xa8,0x0e
0004f4  161ea22c          DCB      0x16,0x1e,0xa2,0x2c
0004f8  547c92a4          DCB      0x54,0x7c,0x92,0xa4
0004fc  f02c5078          DCB      0xf0,0x2c,0x50,0x78
000500  f184a898          DCB      0xf1,0x84,0xa8,0x98
000504  c4cdfcd8          DCB      0xc4,0xcd,0xfc,0xd8
000508  0ddba8fc          DCB      0x0d,0xdb,0xa8,0xfc
00050c  2df3d9ba          DCB      0x2d,0xf3,0xd9,0xba
000510  a6f8daba          DCB      0xa6,0xf8,0xda,0xba
000514  a6ded8ba          DCB      0xa6,0xde,0xd8,0xba
000518  b2b68696          DCB      0xb2,0xb6,0x86,0x96
00051c  a6d0f3c8          DCB      0xa6,0xd0,0xf3,0xc8
000520  41daa6c8          DCB      0x41,0xda,0xa6,0xc8
000524  f8d8b0b4          DCB      0xf8,0xd8,0xb0,0xb4
000528  b882a892          DCB      0xb8,0x82,0xa8,0x92
00052c  f52c5488          DCB      0xf5,0x2c,0x54,0x88
000530  98f135d9          DCB      0x98,0xf1,0x35,0xd9
000534  f418d8f1          DCB      0xf4,0x18,0xd8,0xf1
000538  a2d0f8f9          DCB      0xa2,0xd0,0xf8,0xf9
00053c  a884d9c7          DCB      0xa8,0x84,0xd9,0xc7
000540  dff8f883          DCB      0xdf,0xf8,0xf8,0x83
000544  c5dadf69          DCB      0xc5,0xda,0xdf,0x69
000548  df83c1d8          DCB      0xdf,0x83,0xc1,0xd8
00054c  f40114f1          DCB      0xf4,0x01,0x14,0xf1
000550  a8824ea8          DCB      0xa8,0x82,0x4e,0xa8
000554  84f311d1          DCB      0x84,0xf3,0x11,0xd1
000558  82f5d992          DCB      0x82,0xf5,0xd9,0x92
00055c  289788f1          DCB      0x28,0x97,0x88,0xf1
000560  09f41c1c          DCB      0x09,0xf4,0x1c,0x1c
000564  d884a8f3          DCB      0xd8,0x84,0xa8,0xf3
000568  c0f9d1d9          DCB      0xc0,0xf9,0xd1,0xd9
00056c  9782f129          DCB      0x97,0x82,0xf1,0x29
000570  f40dd8f3          DCB      0xf4,0x0d,0xd8,0xf3
000574  f9f9d1d9          DCB      0xf9,0xf9,0xd1,0xd9
000578  82f4c203          DCB      0x82,0xf4,0xc2,0x03
00057c  d8dedf1a          DCB      0xd8,0xde,0xdf,0x1a
000580  d8f1a2fa          DCB      0xd8,0xf1,0xa2,0xfa
000584  f9a88498          DCB      0xf9,0xa8,0x84,0x98
000588  d9c7dff8          DCB      0xd9,0xc7,0xdf,0xf8
00058c  f8f883c7          DCB      0xf8,0xf8,0x83,0xc7
000590  dadf69df          DCB      0xda,0xdf,0x69,0xdf
000594  f883c3d8          DCB      0xf8,0x83,0xc3,0xd8
000598  f40114f1          DCB      0xf4,0x01,0x14,0xf1
00059c  98a8822e          DCB      0x98,0xa8,0x82,0x2e
0005a0  a884f311          DCB      0xa8,0x84,0xf3,0x11
0005a4  d182f5d9          DCB      0xd1,0x82,0xf5,0xd9
0005a8  92509788          DCB      0x92,0x50,0x97,0x88
0005ac  f109f41c          DCB      0xf1,0x09,0xf4,0x1c
0005b0  d884a8f3          DCB      0xd8,0x84,0xa8,0xf3
0005b4  c0f8f9d1          DCB      0xc0,0xf8,0xf9,0xd1
0005b8  d99782f1          DCB      0xd9,0x97,0x82,0xf1
0005bc  49f40dd8          DCB      0x49,0xf4,0x0d,0xd8
0005c0  f3f9f9d1          DCB      0xf3,0xf9,0xf9,0xd1
0005c4  d982f4c4          DCB      0xd9,0x82,0xf4,0xc4
0005c8  03d8dedf          DCB      0x03,0xd8,0xde,0xdf
0005cc  d8f1ad88          DCB      0xd8,0xf1,0xad,0x88
0005d0  98cca809          DCB      0x98,0xcc,0xa8,0x09
0005d4  f9d98292          DCB      0xf9,0xd9,0x82,0x92
0005d8  a8f57cf1          DCB      0xa8,0xf5,0x7c,0xf1
0005dc  883acf94          DCB      0x88,0x3a,0xcf,0x94
0005e0  4a6e98db          DCB      0x4a,0x6e,0x98,0xdb
0005e4  6931daad          DCB      0x69,0x31,0xda,0xad
0005e8  f2def9d8          DCB      0xf2,0xde,0xf9,0xd8
0005ec  8795a8f2          DCB      0x87,0x95,0xa8,0xf2
0005f0  21d1daa5          DCB      0x21,0xd1,0xda,0xa5
0005f4  f9f417d9          DCB      0xf9,0xf4,0x17,0xd9
0005f8  f1ae8ed0          DCB      0xf1,0xae,0x8e,0xd0
0005fc  c0c3ae82          DCB      0xc0,0xc3,0xae,0x82
000600  c684c3a8          DCB      0xc6,0x84,0xc3,0xa8
000604  8595c8a5          DCB      0x85,0x95,0xc8,0xa5
000608  88f2c0f1          DCB      0x88,0xf2,0xc0,0xf1
00060c  f4010ef1          DCB      0xf4,0x01,0x0e,0xf1
000610  8e9ea8c6          DCB      0x8e,0x9e,0xa8,0xc6
000614  3e56f554          DCB      0x3e,0x56,0xf5,0x54
000618  f18872f4          DCB      0xf1,0x88,0x72,0xf4
00061c  0115f198          DCB      0x01,0x15,0xf1,0x98
000620  45856ef5          DCB      0x45,0x85,0x6e,0xf5
000624  8e9e0488          DCB      0x8e,0x9e,0x04,0x88
000628  f142985a          DCB      0xf1,0x42,0x98,0x5a
00062c  8e9e0688          DCB      0x8e,0x9e,0x06,0x88
000630  69f4011c          DCB      0x69,0xf4,0x01,0x1c
000634  f1981e11          DCB      0xf1,0x98,0x1e,0x11
000638  08d0f504          DCB      0x08,0xd0,0xf5,0x04
00063c  f11e9702          DCB      0xf1,0x1e,0x97,0x02
000640  02983625          DCB      0x02,0x98,0x36,0x25
000644  dbf9d985          DCB      0xdb,0xf9,0xd9,0x85
000648  a5f3c1da          DCB      0xa5,0xf3,0xc1,0xda
00064c  85a5f3df          DCB      0x85,0xa5,0xf3,0xdf
000650  d88595a8          DCB      0xd8,0x85,0x95,0xa8
000654  f309daa5          DCB      0xf3,0x09,0xda,0xa5
000658  fad88292          DCB      0xfa,0xd8,0x82,0x92
00065c  a8f578f1          DCB      0xa8,0xf5,0x78,0xf1
000660  881a849f          DCB      0x88,0x1a,0x84,0x9f
000664  26889821          DCB      0x26,0x88,0x98,0x21
000668  daf41df3          DCB      0xda,0xf4,0x1d,0xf3
00066c  d8879f39          DCB      0xd8,0x87,0x9f,0x39
000670  d1afd9df          DCB      0xd1,0xaf,0xd9,0xdf
000674  dffbf9f4          DCB      0xdf,0xfb,0xf9,0xf4
000678  0cf3d8fa          DCB      0x0c,0xf3,0xd8,0xfa
00067c  d0f8daf9          DCB      0xd0,0xf8,0xda,0xf9
000680  f9d0dfd9          DCB      0xf9,0xd0,0xdf,0xd9
000684  f9d8f40b          DCB      0xf9,0xd8,0xf4,0x0b
000688  d8f3879f          DCB      0xd8,0xf3,0x87,0x9f
00068c  39d1afd9          DCB      0x39,0xd1,0xaf,0xd9
000690  dfdff41d          DCB      0xdf,0xdf,0xf4,0x1d
000694  f3d8fafc          DCB      0xf3,0xd8,0xfa,0xfc
000698  a869f9f9          DCB      0xa8,0x69,0xf9,0xf9
00069c  afd0dade          DCB      0xaf,0xd0,0xda,0xde
0006a0  fad9f88f          DCB      0xfa,0xd9,0xf8,0x8f
0006a4  9fa8f1cc          DCB      0x9f,0xa8,0xf1,0xcc
0006a8  f398db45          DCB      0xf3,0x98,0xdb,0x45
0006ac  d9afdfd0          DCB      0xd9,0xaf,0xdf,0xd0
0006b0  f8d8f18f          DCB      0xf8,0xd8,0xf1,0x8f
0006b4  9fa8caf3          DCB      0x9f,0xa8,0xca,0xf3
0006b8  8809daaf          DCB      0x88,0x09,0xda,0xaf
0006bc  8fcbf8d8          DCB      0x8f,0xcb,0xf8,0xd8
0006c0  f2ad978d          DCB      0xf2,0xad,0x97,0x8d
0006c4  0cd9a5df          DCB      0x0c,0xd9,0xa5,0xdf
0006c8  f9baa6f3          DCB      0xf9,0xba,0xa6,0xf3
0006cc  faf412f2          DCB      0xfa,0xf4,0x12,0xf2
0006d0  d8950dd1          DCB      0xd8,0x95,0x0d,0xd1
0006d4  d9baa6f3          DCB      0xd9,0xba,0xa6,0xf3
0006d8  fadaa5f2          DCB      0xfa,0xda,0xa5,0xf2
0006dc  c1baa6f3          DCB      0xc1,0xba,0xa6,0xf3
0006e0  dfd8f1ba          DCB      0xdf,0xd8,0xf1,0xba
0006e4  b2b68696          DCB      0xb2,0xb6,0x86,0x96
0006e8  a6d0caf3          DCB      0xa6,0xd0,0xca,0xf3
0006ec  49daa6cb          DCB      0x49,0xda,0xa6,0xcb
0006f0  f8d8b0b4          DCB      0xf8,0xd8,0xb0,0xb4
0006f4  b8d8ad84          DCB      0xb8,0xd8,0xad,0x84
0006f8  f2c0dff1          DCB      0xf2,0xc0,0xdf,0xf1
0006fc  8fcbc3a8          DCB      0x8f,0xcb,0xc3,0xa8
000700  b2b68696          DCB      0xb2,0xb6,0x86,0x96
000704  c8c1cbc3          DCB      0xc8,0xc1,0xcb,0xc3
000708  f3b0b488          DCB      0xf3,0xb0,0xb4,0x88
00070c  98a821db          DCB      0x98,0xa8,0x21,0xdb
000710  718d9d71          DCB      0x71,0x8d,0x9d,0x71
000714  859521d9          DCB      0x85,0x95,0x21,0xd9
000718  adf2fad8          DCB      0xad,0xf2,0xfa,0xd8
00071c  8597a828          DCB      0x85,0x97,0xa8,0x28
000720  d9f408d8          DCB      0xd9,0xf4,0x08,0xd8
000724  f28d29da          DCB      0xf2,0x8d,0x29,0xda
000728  f405d9f2          DCB      0xf4,0x05,0xd9,0xf2
00072c  85a4c2f2          DCB      0x85,0xa4,0xc2,0xf2
000730  d8a88d94          DCB      0xd8,0xa8,0x8d,0x94
000734  01d1d9f4          DCB      0x01,0xd1,0xd9,0xf4
000738  11f2d887          DCB      0x11,0xf2,0xd8,0x87
00073c  21d8f40a          DCB      0x21,0xd8,0xf4,0x0a
000740  d8f28498          DCB      0xd8,0xf2,0x84,0x98
000744  a8c801d1          DCB      0xa8,0xc8,0x01,0xd1
000748  d9f411d8          DCB      0xd9,0xf4,0x11,0xd8
00074c  f3a4c8bb          DCB      0xf3,0xa4,0xc8,0xbb
000750  afd0f2de          DCB      0xaf,0xd0,0xf2,0xde
000754  f8f8f8f8          DCB      0xf8,0xf8,0xf8,0xf8
000758  f8f8f8f8          DCB      0xf8,0xf8,0xf8,0xf8
00075c  d8f1b8f6          DCB      0xd8,0xf1,0xb8,0xf6
000760  b5b9b08a          DCB      0xb5,0xb9,0xb0,0x8a
000764  95a3de3c          DCB      0x95,0xa3,0xde,0x3c
000768  a3d9f8d8          DCB      0xa3,0xd9,0xf8,0xd8
00076c  5ca3d9f8          DCB      0x5c,0xa3,0xd9,0xf8
000770  d87ca3d9          DCB      0xd8,0x7c,0xa3,0xd9
000774  f8d8f8f9          DCB      0xf8,0xd8,0xf8,0xf9
000778  d1a5d9df          DCB      0xd1,0xa5,0xd9,0xdf
00077c  dafad8b1          DCB      0xda,0xfa,0xd8,0xb1
000780  8530f7d9          DCB      0x85,0x30,0xf7,0xd9
000784  ded8f830          DCB      0xde,0xd8,0xf8,0x30
000788  addaded8          DCB      0xad,0xda,0xde,0xd8
00078c  f2b48c99          DCB      0xf2,0xb4,0x8c,0x99
000790  a32d557d          DCB      0xa3,0x2d,0x55,0x7d
000794  a083dfdf          DCB      0xa0,0x83,0xdf,0xdf
000798  dfb591a0          DCB      0xdf,0xb5,0x91,0xa0
00079c  f629d9fb          DCB      0xf6,0x29,0xd9,0xfb
0007a0  d8a0fc29          DCB      0xd8,0xa0,0xfc,0x29
0007a4  d9fad8a0          DCB      0xd9,0xfa,0xd8,0xa0
0007a8  d051d9f8          DCB      0xd0,0x51,0xd9,0xf8
0007ac  d8fc51d9          DCB      0xd8,0xfc,0x51,0xd9
0007b0  f9d879d9          DCB      0xf9,0xd8,0x79,0xd9
0007b4  fbd8a0d0          DCB      0xfb,0xd8,0xa0,0xd0
0007b8  fc79d9fa          DCB      0xfc,0x79,0xd9,0xfa
0007bc  d8a1f9f9          DCB      0xd8,0xa1,0xf9,0xf9
0007c0  f9f9f9a0          DCB      0xf9,0xf9,0xf9,0xa0
0007c4  dadfdfdf          DCB      0xda,0xdf,0xdf,0xdf
0007c8  d8a1f8f8          DCB      0xd8,0xa1,0xf8,0xf8
0007cc  f8f8f8ac          DCB      0xf8,0xf8,0xf8,0xac
0007d0  def8adde          DCB      0xde,0xf8,0xad,0xde
0007d4  8393ac2c          DCB      0x83,0x93,0xac,0x2c
0007d8  547cf1a8          DCB      0x54,0x7c,0xf1,0xa8
0007dc  dfdfdff6          DCB      0xdf,0xdf,0xdf,0xf6
0007e0  9d2cdaa0          DCB      0x9d,0x2c,0xda,0xa0
0007e4  dfd9fadb          DCB      0xdf,0xd9,0xfa,0xdb
0007e8  2df8d8a8          DCB      0x2d,0xf8,0xd8,0xa8
0007ec  50daa0d0          DCB      0x50,0xda,0xa0,0xd0
0007f0  ded9d0f8          DCB      0xde,0xd9,0xd0,0xf8
0007f4  f8f8db55          DCB      0xf8,0xf8,0xdb,0x55
0007f8  f8d8a878          DCB      0xf8,0xd8,0xa8,0x78
0007fc  daa0d0df          DCB      0xda,0xa0,0xd0,0xdf
000800  d9d0faf8          DCB      0xd9,0xd0,0xfa,0xf8
000804  f8f8f8db          DCB      0xf8,0xf8,0xf8,0xdb
000808  7df8d89c          DCB      0x7d,0xf8,0xd8,0x9c
00080c  a88cf530          DCB      0xa8,0x8c,0xf5,0x30
000810  db38d9d0          DCB      0xdb,0x38,0xd9,0xd0
000814  dedfa0d0          DCB      0xde,0xdf,0xa0,0xd0
000818  dedfd8a8          DCB      0xde,0xdf,0xd8,0xa8
00081c  48db58d9          DCB      0x48,0xdb,0x58,0xd9
000820  dfd0dea0          DCB      0xdf,0xd0,0xde,0xa0
000824  dfd0ded8          DCB      0xdf,0xd0,0xde,0xd8
000828  a868db70          DCB      0xa8,0x68,0xdb,0x70
00082c  d9dfdfa0          DCB      0xd9,0xdf,0xdf,0xa0
000830  dfdfd8f1          DCB      0xdf,0xdf,0xd8,0xf1
000834  a888902c          DCB      0xa8,0x88,0x90,0x2c
000838  547c98a8          DCB      0x54,0x7c,0x98,0xa8
00083c  d05c38d1          DCB      0xd0,0x5c,0x38,0xd1
000840  daf2ae8c          DCB      0xda,0xf2,0xae,0x8c
000844  dff9d8b0          DCB      0xdf,0xf9,0xd8,0xb0
000848  87a8c1c1          DCB      0x87,0xa8,0xc1,0xc1
00084c  b188a8c6          DCB      0xb1,0x88,0xa8,0xc6
000850  f9f9da36          DCB      0xf9,0xf9,0xda,0x36
000854  d8a8f9da          DCB      0xd8,0xa8,0xf9,0xda
000858  36d8a8f9          DCB      0x36,0xd8,0xa8,0xf9
00085c  da36d8a8          DCB      0xda,0x36,0xd8,0xa8
000860  f9da36d8          DCB      0xf9,0xda,0x36,0xd8
000864  a8f9da36          DCB      0xa8,0xf9,0xda,0x36
000868  d8f78d9d          DCB      0xd8,0xf7,0x8d,0x9d
00086c  adf818da          DCB      0xad,0xf8,0x18,0xda
000870  f2aedfd8          DCB      0xf2,0xae,0xdf,0xd8
000874  f7adfa30          DCB      0xf7,0xad,0xfa,0x30
000878  d9a4def9          DCB      0xd9,0xa4,0xde,0xf9
00087c  d8f2aede          DCB      0xd8,0xf2,0xae,0xde
000880  faf983a7          DCB      0xfa,0xf9,0x83,0xa7
000884  d9c3c5c7          DCB      0xd9,0xc3,0xc5,0xc7
000888  f1889ba7          DCB      0xf1,0x88,0x9b,0xa7
00088c  7aadf7de          DCB      0x7a,0xad,0xf7,0xde
000890  dfa4f884          DCB      0xdf,0xa4,0xf8,0x84
000894  9408a797          DCB      0x94,0x08,0xa7,0x97
000898  f300aef2          DCB      0xf3,0x00,0xae,0xf2
00089c  9819a488          DCB      0x98,0x19,0xa4,0x88
0008a0  c6a39488          DCB      0xc6,0xa3,0x94,0x88
0008a4  f632dff2          DCB      0xf6,0x32,0xdf,0xf2
0008a8  8393db09          DCB      0x83,0x93,0xdb,0x09
0008ac  d9f2aadf          DCB      0xd9,0xf2,0xaa,0xdf
0008b0  d8d8aef8          DCB      0xd8,0xd8,0xae,0xf8
0008b4  f9d1daf3          DCB      0xf9,0xd1,0xda,0xf3
0008b8  a4dea7f1          DCB      0xa4,0xde,0xa7,0xf1
0008bc  889b7ad8          DCB      0x88,0x9b,0x7a,0xd8
0008c0  f38494ae          DCB      0xf3,0x84,0x94,0xae
0008c4  19f9daaa          DCB      0x19,0xf9,0xda,0xaa
0008c8  f1dfd8a8          DCB      0xf1,0xdf,0xd8,0xa8
0008cc  81c0c3c5          DCB      0x81,0xc0,0xc3,0xc5
0008d0  c7a39283          DCB      0xc7,0xa3,0x92,0x83
0008d4  f628adde          DCB      0xf6,0x28,0xad,0xde
0008d8  d9f8d8a3          DCB      0xd9,0xf8,0xd8,0xa3
0008dc  50add9f8          DCB      0x50,0xad,0xd9,0xf8
0008e0  d8a378ad          DCB      0xd8,0xa3,0x78,0xad
0008e4  d9f8d8f8          DCB      0xd9,0xf8,0xd8,0xf8
0008e8  f9d1a1da          DCB      0xf9,0xd1,0xa1,0xda
0008ec  dec3c5c7          DCB      0xde,0xc3,0xc5,0xc7
0008f0  d8a18194          DCB      0xd8,0xa1,0x81,0x94
0008f4  f818f2b0          DCB      0xf8,0x18,0xf2,0xb0
0008f8  89acc3c5          DCB      0x89,0xac,0xc3,0xc5
0008fc  c7f1d8b8          DCB      0xc7,0xf1,0xd8,0xb8
000900  b4b09786          DCB      0xb4,0xb0,0x97,0x86
000904  a8319b06          DCB      0xa8,0x31,0x9b,0x06
000908  9907ab97          DCB      0x99,0x07,0xab,0x97
00090c  28889bf0          DCB      0x28,0x88,0x9b,0xf0
000910  0c201440          DCB      0x0c,0x20,0x14,0x40
000914  b0b4b8f0          DCB      0xb0,0xb4,0xb8,0xf0
000918  a88a9a28          DCB      0xa8,0x8a,0x9a,0x28
00091c  5078b79b          DCB      0x50,0x78,0xb7,0x9b
000920  a8295179          DCB      0xa8,0x29,0x51,0x79
000924  24705944          DCB      0x24,0x70,0x59,0x44
000928  69386448          DCB      0x69,0x38,0x64,0x48
00092c  31f1bbab          DCB      0x31,0xf1,0xbb,0xab
000930  88002c54          DCB      0x88,0x00,0x2c,0x54
000934  7cf0b38b          DCB      0x7c,0xf0,0xb3,0x8b
000938  b8a80428          DCB      0xb8,0xa8,0x04,0x28
00093c  5078f1b0          DCB      0x50,0x78,0xf1,0xb0
000940  88b49726          DCB      0x88,0xb4,0x97,0x26
000944  a85998bb          DCB      0xa8,0x59,0x98,0xbb
000948  abb38b02          DCB      0xab,0xb3,0x8b,0x02
00094c  264666b0          DCB      0x26,0x46,0x66,0xb0
000950  b8f08a9c          DCB      0xb8,0xf0,0x8a,0x9c
000954  a8295179          DCB      0xa8,0x29,0x51,0x79
000958  8b295179          DCB      0x8b,0x29,0x51,0x79
00095c  8a247059          DCB      0x8a,0x24,0x70,0x59
000960  8b205871          DCB      0x8b,0x20,0x58,0x71
000964  8a446938          DCB      0x8a,0x44,0x69,0x38
000968  8b394068          DCB      0x8b,0x39,0x40,0x68
00096c  8a644831          DCB      0x8a,0x64,0x48,0x31
000970  8b304960          DCB      0x8b,0x30,0x49,0x60
000974  88f1ac00          DCB      0x88,0xf1,0xac,0x00
000978  2c547cf0          DCB      0x2c,0x54,0x7c,0xf0
00097c  8ca80428          DCB      0x8c,0xa8,0x04,0x28
000980  5078f188          DCB      0x50,0x78,0xf1,0x88
000984  9726a859          DCB      0x97,0x26,0xa8,0x59
000988  98ac8c02          DCB      0x98,0xac,0x8c,0x02
00098c  264666f0          DCB      0x26,0x46,0x66,0xf0
000990  899ca829          DCB      0x89,0x9c,0xa8,0x29
000994  51792470          DCB      0x51,0x79,0x24,0x70
000998  59446938          DCB      0x59,0x44,0x69,0x38
00099c  644831a9          DCB      0x64,0x48,0x31,0xa9
0009a0  88092059          DCB      0x88,0x09,0x20,0x59
0009a4  70ab1138          DCB      0x70,0xab,0x11,0x38
0009a8  4069a819          DCB      0x40,0x69,0xa8,0x19
0009ac  3148608c          DCB      0x31,0x48,0x60,0x8c
0009b0  a83c415c          DCB      0xa8,0x3c,0x41,0x5c
0009b4  207c00f1          DCB      0x20,0x7c,0x00,0xf1
0009b8  87981986          DCB      0x87,0x98,0x19,0x86
0009bc  a86e767e          DCB      0xa8,0x6e,0x76,0x7e
0009c0  a999882d          DCB      0xa9,0x99,0x88,0x2d
0009c4  557dd8b1          DCB      0x55,0x7d,0xd8,0xb1
0009c8  b5b9a3df          DCB      0xb5,0xb9,0xa3,0xdf
0009cc  dfdfaed0          DCB      0xdf,0xdf,0xae,0xd0
0009d0  dfaad0de          DCB      0xdf,0xaa,0xd0,0xde
0009d4  f2abf8f9          DCB      0xf2,0xab,0xf8,0xf9
0009d8  d9b087c4          DCB      0xd9,0xb0,0x87,0xc4
0009dc  aaf1dfdf          DCB      0xaa,0xf1,0xdf,0xdf
0009e0  bbafdfdf          DCB      0xbb,0xaf,0xdf,0xdf
0009e4  b9d8b1f1          DCB      0xb9,0xd8,0xb1,0xf1
0009e8  a3978e60          DCB      0xa3,0x97,0x8e,0x60
0009ec  dfb084f2          DCB      0xdf,0xb0,0x84,0xf2
0009f0  c8f8f9d9          DCB      0xc8,0xf8,0xf9,0xd9
0009f4  ded89385          DCB      0xde,0xd8,0x93,0x85
0009f8  f14ab183          DCB      0xf1,0x4a,0xb1,0x83
0009fc  a308b583          DCB      0xa3,0x08,0xb5,0x83
000a00  9a0810b7          DCB      0x9a,0x08,0x10,0xb7
000a04  9f10d8f1          DCB      0x9f,0x10,0xd8,0xf1
000a08  b0baaeb0          DCB      0xb0,0xba,0xae,0xb0
000a0c  8ac2b2b6          DCB      0x8a,0xc2,0xb2,0xb6
000a10  8e9ef1fb          DCB      0x8e,0x9e,0xf1,0xfb
000a14  d9f41dd8          DCB      0xd9,0xf4,0x1d,0xd8
000a18  f9d90cf1          DCB      0xf9,0xd9,0x0c,0xf1
000a1c  d8f8f8ad          DCB      0xd8,0xf8,0xf8,0xad
000a20  61d9aefb          DCB      0x61,0xd9,0xae,0xfb
000a24  d8f40cf1          DCB      0xd8,0xf4,0x0c,0xf1
000a28  d8f8f8ad          DCB      0xd8,0xf8,0xf8,0xad
000a2c  19d9aefb          DCB      0x19,0xd9,0xae,0xfb
000a30  dfd8f416          DCB      0xdf,0xd8,0xf4,0x16
000a34  f1d8f8ad          DCB      0xf1,0xd8,0xf8,0xad
000a38  8d61d9f4          DCB      0x8d,0x61,0xd9,0xf4
000a3c  f4acf59c          DCB      0xf4,0xac,0xf5,0x9c
000a40  9c8ddf2b          DCB      0x9c,0x8d,0xdf,0x2b
000a44  bab6aefa          DCB      0xba,0xb6,0xae,0xfa
000a48  f8f40bd8          DCB      0xf8,0xf4,0x0b,0xd8
000a4c  f1aed0f8          DCB      0xf1,0xae,0xd0,0xf8
000a50  ad51daae          DCB      0xad,0x51,0xda,0xae
000a54  faf8f1d8          DCB      0xfa,0xf8,0xf1,0xd8
000a58  b9b1b6a3          DCB      0xb9,0xb1,0xb6,0xa3
000a5c  839c08b9          DCB      0x83,0x9c,0x08,0xb9
000a60  b1839ab5          DCB      0xb1,0x83,0x9a,0xb5
000a64  aac0fd30          DCB      0xaa,0xc0,0xfd,0x30
000a68  83b79f10          DCB      0x83,0xb7,0x9f,0x10
000a6c  b58b93f2          DCB      0xb5,0x8b,0x93,0xf2
000a70  0202d1ab          DCB      0x02,0x02,0xd1,0xab
000a74  daded8f1          DCB      0xda,0xde,0xd8,0xf1
000a78  b080baab          DCB      0xb0,0x80,0xba,0xab
000a7c  c0c3b284          DCB      0xc0,0xc3,0xb2,0x84
000a80  c1c3d8b1          DCB      0xc1,0xc3,0xd8,0xb1
000a84  b9f38ba3          DCB      0xb9,0xf3,0x8b,0xa3
000a88  91b609b4          DCB      0x91,0xb6,0x09,0xb4
000a8c  d9abdeb0          DCB      0xd9,0xab,0xde,0xb0
000a90  879cb9a3          DCB      0x87,0x9c,0xb9,0xa3
000a94  ddf1b38b          DCB      0xdd,0xf1,0xb3,0x8b
000a98  8b8b8b8b          DCB      0x8b,0x8b,0x8b,0x8b
000a9c  b087a3a3          DCB      0xb0,0x87,0xa3,0xa3
000aa0  a3a3b28b          DCB      0xa3,0xa3,0xb2,0x8b
000aa4  b69bf2a3          DCB      0xb6,0x9b,0xf2,0xa3
000aa8  a3a3a3a3          DCB      0xa3,0xa3,0xa3,0xa3
000aac  a3a3a3a3          DCB      0xa3,0xa3,0xa3,0xa3
000ab0  a3f1b087          DCB      0xa3,0xf1,0xb0,0x87
000ab4  b59aa3f3          DCB      0xb5,0x9a,0xa3,0xf3
000ab8  9ba3a3dc          DCB      0x9b,0xa3,0xa3,0xdc
000abc  baacdfb9          DCB      0xba,0xac,0xdf,0xb9
000ac0  a3a3a3a3          DCB      0xa3,0xa3,0xa3,0xa3
000ac4  a3a3a3a3          DCB      0xa3,0xa3,0xa3,0xa3
000ac8  a3a3a3a3          DCB      0xa3,0xa3,0xa3,0xa3
000acc  a3a3a3a3          DCB      0xa3,0xa3,0xa3,0xa3
000ad0  d8d8d8bb          DCB      0xd8,0xd8,0xd8,0xbb
000ad4  b3b7f1aa          DCB      0xb3,0xb7,0xf1,0xaa
000ad8  f9daffd9          DCB      0xf9,0xda,0xff,0xd9
000adc  809aaa28          DCB      0x80,0x9a,0xaa,0x28
000ae0  b48098a7          DCB      0xb4,0x80,0x98,0xa7
000ae4  20b79787          DCB      0x20,0xb7,0x97,0x87
000ae8  a86688f0          DCB      0xa8,0x66,0x88,0xf0
000aec  7951f190          DCB      0x79,0x51,0xf1,0x90
000af0  2c870ca7          DCB      0x2c,0x87,0x0c,0xa7
000af4  81976293          DCB      0x81,0x97,0x62,0x93
000af8  f0717160          DCB      0xf0,0x71,0x71,0x60
000afc  85940129          DCB      0x85,0x94,0x01,0x29
000b00  517990a5          DCB      0x51,0x79,0x90,0xa5
000b04  f1284c6c          DCB      0xf1,0x28,0x4c,0x6c
000b08  870c9518          DCB      0x87,0x0c,0x95,0x18
000b0c  8578a383          DCB      0x85,0x78,0xa3,0x83
000b10  90284c6c          DCB      0x90,0x28,0x4c,0x6c
000b14  886cd8f3          DCB      0x88,0x6c,0xd8,0xf3
000b18  a28200f2          DCB      0xa2,0x82,0x00,0xf2
000b1c  10a89219          DCB      0x10,0xa8,0x92,0x19
000b20  80a2f2d9          DCB      0x80,0xa2,0xf2,0xd9
000b24  26d8f188          DCB      0x26,0xd8,0xf1,0x88
000b28  a84dd948          DCB      0xa8,0x4d,0xd9,0x48
000b2c  d896a839          DCB      0xd8,0x96,0xa8,0x39
000b30  80d93cd8          DCB      0x80,0xd9,0x3c,0xd8
000b34  9580a839          DCB      0x95,0x80,0xa8,0x39
000b38  a68698d9          DCB      0xa6,0x86,0x98,0xd9
000b3c  2cda87a7          DCB      0x2c,0xda,0x87,0xa7
000b40  2cd8a889          DCB      0x2c,0xd8,0xa8,0x89
000b44  9519a980          DCB      0x95,0x19,0xa9,0x80
000b48  d938d8a8          DCB      0xd9,0x38,0xd8,0xa8
000b4c  8939a980          DCB      0x89,0x39,0xa9,0x80
000b50  da3cd8a8          DCB      0xda,0x3c,0xd8,0xa8
000b54  2ea83990          DCB      0x2e,0xa8,0x39,0x90
000b58  d90cd8a8          DCB      0xd9,0x0c,0xd8,0xa8
000b5c  953198d9          DCB      0x95,0x31,0x98,0xd9
000b60  0cd8a809          DCB      0x0c,0xd8,0xa8,0x09
000b64  d9ffd801          DCB      0xd9,0xff,0xd8,0x01
000b68  daffd895          DCB      0xda,0xff,0xd8,0x95
000b6c  39a9da26          DCB      0x39,0xa9,0xda,0x26
000b70  ffd890a8          DCB      0xff,0xd8,0x90,0xa8
000b74  0d8999a8          DCB      0x0d,0x89,0x99,0xa8
000b78  10809821          DCB      0x10,0x80,0x98,0x21
000b7c  da2ed889          DCB      0xda,0x2e,0xd8,0x89
000b80  99a83180          DCB      0x99,0xa8,0x31,0x80
000b84  da2ed8a8          DCB      0xda,0x2e,0xd8,0xa8
000b88  86963180          DCB      0x86,0x96,0x31,0x80
000b8c  da2ed8a8          DCB      0xda,0x2e,0xd8,0xa8
000b90  873180da          DCB      0x87,0x31,0x80,0xda
000b94  2ed8a882          DCB      0x2e,0xd8,0xa8,0x82
000b98  92f34180          DCB      0x92,0xf3,0x41,0x80
000b9c  f1d92ed8          DCB      0xf1,0xd9,0x2e,0xd8
000ba0  a882f319          DCB      0xa8,0x82,0xf3,0x19
000ba4  80f1d92e          DCB      0x80,0xf1,0xd9,0x2e
000ba8  d882acf3          DCB      0xd8,0x82,0xac,0xf3
000bac  c0a28022          DCB      0xc0,0xa2,0x80,0x22
000bb0  f1a62ea7          DCB      0xf1,0xa6,0x2e,0xa7
000bb4  2ea92298          DCB      0x2e,0xa9,0x22,0x98
000bb8  a829daac          DCB      0xa8,0x29,0xda,0xac
000bbc  deffd8a2          DCB      0xde,0xff,0xd8,0xa2
000bc0  f22af1a9          DCB      0xf2,0x2a,0xf1,0xa9
000bc4  2e8292a8          DCB      0x2e,0x82,0x92,0xa8
000bc8  f23180a6          DCB      0xf2,0x31,0x80,0xa6
000bcc  96f1d900          DCB      0x96,0xf1,0xd9,0x00
000bd0  ac8c9c0c          DCB      0xac,0x8c,0x9c,0x0c
000bd4  30acded0          DCB      0x30,0xac,0xde,0xd0
000bd8  deffd88c          DCB      0xde,0xff,0xd8,0x8c
000bdc  9cacd010          DCB      0x9c,0xac,0xd0,0x10
000be0  acde8092          DCB      0xac,0xde,0x80,0x92
000be4  a2f24c82          DCB      0xa2,0xf2,0x4c,0x82
000be8  a8f1caf2          DCB      0xa8,0xf1,0xca,0xf2
000bec  35f19688          DCB      0x35,0xf1,0x96,0x88
000bf0  a6d900d8          DCB      0xa6,0xd9,0x00,0xd8
000bf4  f1ff              DCB      0xf1,0xff

;*** Start embedded assembler ***

#line 1 "..\\DMP\\driver\\eMPL\\inv_mpu_dmp_motion_driver.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___27_inv_mpu_dmp_motion_driver_c_9888ba14____REV16|
#line 388 "..\\CORE\\cmsis_armcc.h"
|__asm___27_inv_mpu_dmp_motion_driver_c_9888ba14____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___27_inv_mpu_dmp_motion_driver_c_9888ba14____REVSH|
#line 402
|__asm___27_inv_mpu_dmp_motion_driver_c_9888ba14____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___27_inv_mpu_dmp_motion_driver_c_9888ba14____RRX|
#line 587
|__asm___27_inv_mpu_dmp_motion_driver_c_9888ba14____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
