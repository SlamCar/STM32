; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\ltdc.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\ltdc.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\OBJ -I..\USER -I..\HALLIB\STM32F7xx_HAL_Driver\Inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\SDRAM -I..\HARDWARE\IIC -I..\HARDWARE\24CXX -I..\HARDWARE\MPU9250 -I..\HARDWARE\DHT11 -I..\HARDWARE\MPU -I..\USMART -I..\DMP\driver\eMPL -I..\DMP\driver\include -I..\DMP\driver\stm32L -I..\DMP\eMPL-hal -I..\DMP\mllite -I..\DMP\mpl -I..\UCOSIII -I..\UCOSIII\UCOS-BSP -I..\UCOSIII\UCOS-CONFIG -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\uC-CPU\ARM-Cortex-M4\RealView -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-CPU -I..\HARDWARE\MY_FUNCTION -I..\USER -I..\HARDWARE\CRC -I..\HARDWARE\DMA -I..\HARDWARE\HEART_BEAT -I..\HARDWARE\RECEIVE_ANALYZE -I..\HARDWARE\FEED_BACK -I..\HARDWARE\DATA -I"D:\1111111\32F4\Slam car\实验35 MPU9250九轴传感器实验\USER\RTE" -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0 -IF:\Keil_v5\ARM\CMSIS\Include -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__UVISION_VERSION=514 -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=..\obj\ltdc.crf ..\HARDWARE\LCD\ltdc.c]
                          THUMB

                          AREA ||i.HAL_LTDC_MspInit||, CODE, READONLY, ALIGN=2

                  HAL_LTDC_MspInit PROC
;;;471    //hltdc:LTDC句柄
;;;472    void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
000000  b510              PUSH     {r4,lr}
;;;473    {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;474        GPIO_InitTypeDef GPIO_Initure;
;;;475        
;;;476        __HAL_RCC_LTDC_CLK_ENABLE();                //使能LTDC时钟
000006  bf00              NOP      
000008  4847              LDR      r0,|L1.296|
00000a  6800              LDR      r0,[r0,#0]
00000c  f0406080          ORR      r0,r0,#0x4000000
000010  4945              LDR      r1,|L1.296|
000012  6008              STR      r0,[r1,#0]
000014  4608              MOV      r0,r1
000016  6800              LDR      r0,[r0,#0]
000018  f0006080          AND      r0,r0,#0x4000000
00001c  9000              STR      r0,[sp,#0]
00001e  bf00              NOP      
000020  bf00              NOP      
;;;477        __HAL_RCC_DMA2D_CLK_ENABLE();               //使能DMA2D时钟
000022  bf00              NOP      
000024  4840              LDR      r0,|L1.296|
000026  3814              SUBS     r0,r0,#0x14
000028  6800              LDR      r0,[r0,#0]
00002a  f4400000          ORR      r0,r0,#0x800000
00002e  493e              LDR      r1,|L1.296|
000030  3914              SUBS     r1,r1,#0x14
000032  6008              STR      r0,[r1,#0]
000034  4608              MOV      r0,r1
000036  6800              LDR      r0,[r0,#0]
000038  f4000000          AND      r0,r0,#0x800000
00003c  9000              STR      r0,[sp,#0]
00003e  bf00              NOP      
000040  bf00              NOP      
;;;478        __HAL_RCC_GPIOB_CLK_ENABLE();               //使能GPIOB时钟
000042  bf00              NOP      
000044  4608              MOV      r0,r1
000046  6800              LDR      r0,[r0,#0]
000048  f0400002          ORR      r0,r0,#2
00004c  6008              STR      r0,[r1,#0]
00004e  4608              MOV      r0,r1
000050  6800              LDR      r0,[r0,#0]
000052  f0000002          AND      r0,r0,#2
000056  9000              STR      r0,[sp,#0]
000058  bf00              NOP      
00005a  bf00              NOP      
;;;479        __HAL_RCC_GPIOF_CLK_ENABLE();               //使能GPIOF时钟
00005c  bf00              NOP      
00005e  4608              MOV      r0,r1
000060  6800              LDR      r0,[r0,#0]
000062  f0400020          ORR      r0,r0,#0x20
000066  6008              STR      r0,[r1,#0]
000068  4608              MOV      r0,r1
00006a  6800              LDR      r0,[r0,#0]
00006c  f0000020          AND      r0,r0,#0x20
000070  9000              STR      r0,[sp,#0]
000072  bf00              NOP      
000074  bf00              NOP      
;;;480        __HAL_RCC_GPIOG_CLK_ENABLE();               //使能GPIOG时钟
000076  bf00              NOP      
000078  4608              MOV      r0,r1
00007a  6800              LDR      r0,[r0,#0]
00007c  f0400040          ORR      r0,r0,#0x40
000080  6008              STR      r0,[r1,#0]
000082  4608              MOV      r0,r1
000084  6800              LDR      r0,[r0,#0]
000086  f0000040          AND      r0,r0,#0x40
00008a  9000              STR      r0,[sp,#0]
00008c  bf00              NOP      
00008e  bf00              NOP      
;;;481        __HAL_RCC_GPIOH_CLK_ENABLE();               //使能GPIOH时钟
000090  bf00              NOP      
000092  4608              MOV      r0,r1
000094  6800              LDR      r0,[r0,#0]
000096  f0400080          ORR      r0,r0,#0x80
00009a  6008              STR      r0,[r1,#0]
00009c  4608              MOV      r0,r1
00009e  6800              LDR      r0,[r0,#0]
0000a0  f0000080          AND      r0,r0,#0x80
0000a4  9000              STR      r0,[sp,#0]
0000a6  bf00              NOP      
0000a8  bf00              NOP      
;;;482        __HAL_RCC_GPIOI_CLK_ENABLE();               //使能GPIOI时钟
0000aa  bf00              NOP      
0000ac  4608              MOV      r0,r1
0000ae  6800              LDR      r0,[r0,#0]
0000b0  f4407080          ORR      r0,r0,#0x100
0000b4  6008              STR      r0,[r1,#0]
0000b6  4608              MOV      r0,r1
0000b8  6800              LDR      r0,[r0,#0]
0000ba  f4007080          AND      r0,r0,#0x100
0000be  9000              STR      r0,[sp,#0]
0000c0  bf00              NOP      
0000c2  bf00              NOP      
;;;483        
;;;484        //初始化PB5，背光引脚
;;;485        GPIO_Initure.Pin=GPIO_PIN_5;                //PB5推挽输出，控制背光
0000c4  2020              MOVS     r0,#0x20
0000c6  9001              STR      r0,[sp,#4]
;;;486        GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;      //推挽输出
0000c8  2001              MOVS     r0,#1
0000ca  9002              STR      r0,[sp,#8]
;;;487        GPIO_Initure.Pull=GPIO_PULLUP;              //上拉        
0000cc  9003              STR      r0,[sp,#0xc]
;;;488        GPIO_Initure.Speed=GPIO_SPEED_HIGH;         //高速
0000ce  2003              MOVS     r0,#3
0000d0  9004              STR      r0,[sp,#0x10]
;;;489        HAL_GPIO_Init(GPIOB,&GPIO_Initure);
0000d2  a901              ADD      r1,sp,#4
0000d4  4815              LDR      r0,|L1.300|
0000d6  f7fffffe          BL       HAL_GPIO_Init
;;;490        
;;;491        //初始化PF10
;;;492        GPIO_Initure.Pin=GPIO_PIN_10; 
0000da  f44f6080          MOV      r0,#0x400
0000de  9001              STR      r0,[sp,#4]
;;;493        GPIO_Initure.Mode=GPIO_MODE_AF_PP;          //复用
0000e0  2002              MOVS     r0,#2
0000e2  9002              STR      r0,[sp,#8]
;;;494        GPIO_Initure.Pull=GPIO_NOPULL;              
0000e4  2000              MOVS     r0,#0
0000e6  9003              STR      r0,[sp,#0xc]
;;;495        GPIO_Initure.Speed=GPIO_SPEED_HIGH;         //高速
0000e8  2003              MOVS     r0,#3
0000ea  9004              STR      r0,[sp,#0x10]
;;;496        GPIO_Initure.Alternate=GPIO_AF14_LTDC;      //复用为LTDC
0000ec  200e              MOVS     r0,#0xe
0000ee  9005              STR      r0,[sp,#0x14]
;;;497        HAL_GPIO_Init(GPIOF,&GPIO_Initure);
0000f0  a901              ADD      r1,sp,#4
0000f2  480f              LDR      r0,|L1.304|
0000f4  f7fffffe          BL       HAL_GPIO_Init
;;;498        
;;;499        //初始化PG6,7,11
;;;500        GPIO_Initure.Pin=GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
0000f8  f44f600c          MOV      r0,#0x8c0
0000fc  9001              STR      r0,[sp,#4]
;;;501        HAL_GPIO_Init(GPIOG,&GPIO_Initure);
0000fe  a901              ADD      r1,sp,#4
000100  480c              LDR      r0,|L1.308|
000102  f7fffffe          BL       HAL_GPIO_Init
;;;502        
;;;503        //初始化PH9,10,11,12,13,14,15
;;;504        GPIO_Initure.Pin=GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|\
000106  f44f407e          MOV      r0,#0xfe00
00010a  9001              STR      r0,[sp,#4]
;;;505                         GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
;;;506        HAL_GPIO_Init(GPIOH,&GPIO_Initure);
00010c  a901              ADD      r1,sp,#4
00010e  480a              LDR      r0,|L1.312|
000110  f7fffffe          BL       HAL_GPIO_Init
;;;507        
;;;508        //初始化PI0,1,2,4,5,6,7,9,10
;;;509        GPIO_Initure.Pin=GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|\
000114  f24060f7          MOV      r0,#0x6f7
000118  9001              STR      r0,[sp,#4]
;;;510                         GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
;;;511        HAL_GPIO_Init(GPIOI,&GPIO_Initure); 
00011a  a901              ADD      r1,sp,#4
00011c  4807              LDR      r0,|L1.316|
00011e  f7fffffe          BL       HAL_GPIO_Init
;;;512    }
000122  b006              ADD      sp,sp,#0x18
000124  bd10              POP      {r4,pc}
;;;513    
                          ENDP

000126  0000              DCW      0x0000
                  |L1.296|
                          DCD      0x40023844
                  |L1.300|
                          DCD      0x40020400
                  |L1.304|
                          DCD      0x40021400
                  |L1.308|
                          DCD      0x40021800
                  |L1.312|
                          DCD      0x40021c00
                  |L1.316|
                          DCD      0x40022000

                          AREA ||i.LTDC_Clear||, CODE, READONLY, ALIGN=2

                  LTDC_Clear PROC
;;;245    //color:颜色值
;;;246    void LTDC_Clear(u32 color)
000000  b518              PUSH     {r3,r4,lr}
;;;247    {
000002  4604              MOV      r4,r0
;;;248    	LTDC_Fill(0,0,lcdltdc.width-1,lcdltdc.height-1,color);
000004  4806              LDR      r0,|L2.32|
000006  9400              STR      r4,[sp,#0]
000008  8b00              LDRH     r0,[r0,#0x18]  ; lcdltdc
00000a  1e40              SUBS     r0,r0,#1
00000c  b283              UXTH     r3,r0
00000e  4804              LDR      r0,|L2.32|
000010  8ac0              LDRH     r0,[r0,#0x16]  ; lcdltdc
000012  1e40              SUBS     r0,r0,#1
000014  b282              UXTH     r2,r0
000016  2100              MOVS     r1,#0
000018  4608              MOV      r0,r1
00001a  f7fffffe          BL       LTDC_Fill
;;;249    }
00001e  bd18              POP      {r3,r4,pc}
;;;250    
                          ENDP

                  |L2.32|
                          DCD      lcdltdc

                          AREA ||i.LTDC_Clk_Set||, CODE, READONLY, ALIGN=1

                  LTDC_Clk_Set PROC
;;;263    //返回值:0,成功;1,失败。
;;;264    u8 LTDC_Clk_Set(u32 pllsain,u32 pllsair,u32 pllsaidivr)
000000  b570              PUSH     {r4-r6,lr}
;;;265    {
000002  b0a4              SUB      sp,sp,#0x90
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;266    	RCC_PeriphCLKInitTypeDef PeriphClkIniture;
;;;267    	
;;;268    	//LTDC输出像素时钟，需要根据自己所使用的LCD数据手册来配置！
;;;269        PeriphClkIniture.PeriphClockSelection=RCC_PERIPHCLK_LTDC;	//LTDC时钟 	
00000a  2008              MOVS     r0,#8
00000c  9000              STR      r0,[sp,#0]
;;;270    	PeriphClkIniture.PLLSAI.PLLSAIN=pllsain;    
00000e  9405              STR      r4,[sp,#0x14]
;;;271    	PeriphClkIniture.PLLSAI.PLLSAIR=pllsair;  
000010  9607              STR      r6,[sp,#0x1c]
;;;272    	PeriphClkIniture.PLLSAIDivR=pllsaidivr;
000012  950b              STR      r5,[sp,#0x2c]
;;;273    	if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkIniture)==HAL_OK) //配置像素时钟，这里配置为时钟为18.75MHZ
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       HAL_RCCEx_PeriphCLKConfig
00001a  b910              CBNZ     r0,|L3.34|
;;;274        {
;;;275            return 0;   //成功
00001c  2000              MOVS     r0,#0
                  |L3.30|
;;;276        }
;;;277        else return 1;  //失败    
;;;278    }
00001e  b024              ADD      sp,sp,#0x90
000020  bd70              POP      {r4-r6,pc}
                  |L3.34|
000022  2001              MOVS     r0,#1                 ;277
000024  e7fb              B        |L3.30|
;;;279    
                          ENDP


                          AREA ||i.LTDC_Color_Fill||, CODE, READONLY, ALIGN=2

                  LTDC_Color_Fill PROC
;;;207    //color:要填充的颜色数组首地址
;;;208    void LTDC_Color_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u16 *color)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;209    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;210    	u32 psx,psy,pex,pey;	//以LCD面板为基准的坐标系,不随横竖屏变化而变化
;;;211    	u32 timeout=0; 
00000a  f04f0c00          MOV      r12,#0
;;;212    	u16 offline;
;;;213    	u32 addr; 
;;;214    	//坐标系转换
;;;215    	if(lcdltdc.dir)	//横屏
00000e  f8df9130          LDR      r9,|L4.320|
000012  f8999015          LDRB     r9,[r9,#0x15]  ; lcdltdc
000016  f1b90f00          CMP      r9,#0
00001a  d004              BEQ      |L4.38|
;;;216    	{
;;;217    		psx=sx;psy=sy;
00001c  4620              MOV      r0,r4
00001e  4629              MOV      r1,r5
;;;218    		pex=ex;pey=ey;
000020  4632              MOV      r2,r6
000022  461f              MOV      r7,r3
000024  e011              B        |L4.74|
                  |L4.38|
;;;219    	}else			//竖屏
;;;220    	{
;;;221    		psx=sy;psy=lcdltdc.pheight-ex-1;
000026  4628              MOV      r0,r5
000028  f8df9114          LDR      r9,|L4.320|
00002c  f8d99004          LDR      r9,[r9,#4]  ; lcdltdc
000030  eba90906          SUB      r9,r9,r6
000034  f1a90101          SUB      r1,r9,#1
;;;222    		pex=ey;pey=lcdltdc.pheight-sx-1;
000038  461a              MOV      r2,r3
00003a  f8df9104          LDR      r9,|L4.320|
00003e  f8d99004          LDR      r9,[r9,#4]  ; lcdltdc
000042  eba90904          SUB      r9,r9,r4
000046  f1a90701          SUB      r7,r9,#1
                  |L4.74|
;;;223    	}
;;;224    	offline=lcdltdc.pwidth-(pex-psx+1);
00004a  f8df90f4          LDR      r9,|L4.320|
00004e  f8b99000          LDRH     r9,[r9,#0]  ; lcdltdc
000052  eba20a00          SUB      r10,r2,r0
000056  f10a0a01          ADD      r10,r10,#1
00005a  eba9090a          SUB      r9,r9,r10
00005e  fa1ff889          UXTH     r8,r9
;;;225    	addr=((u32)ltdc_framebuf[lcdltdc.activelayer]+lcdltdc.pixsize*(lcdltdc.pwidth*psy+psx));
000062  f8df90dc          LDR      r9,|L4.320|
000066  f8999014          LDRB     r9,[r9,#0x14]  ; lcdltdc
00006a  f8dfa0d8          LDR      r10,|L4.324|
00006e  f85a9029          LDR      r9,[r10,r9,LSL #2]
000072  f8dfa0cc          LDR      r10,|L4.320|
000076  f8daa01c          LDR      r10,[r10,#0x1c]  ; lcdltdc
00007a  f8dfb0c4          LDR      r11,|L4.320|
00007e  f8dbb000          LDR      r11,[r11,#0]  ; lcdltdc
000082  fb0b0b01          MLA      r11,r11,r1,r0
000086  fb0a9e0b          MLA      lr,r10,r11,r9
;;;226    	RCC->AHB1ENR|=1<<23;			//使能DM2D时钟
00008a  f8df90bc          LDR      r9,|L4.328|
00008e  f8d99000          LDR      r9,[r9,#0]
000092  f4490900          ORR      r9,r9,#0x800000
000096  f8dfa0b0          LDR      r10,|L4.328|
00009a  f8ca9000          STR      r9,[r10,#0]
;;;227    	DMA2D->CR=0<<16;				//存储器到存储器模式
00009e  f04f0900          MOV      r9,#0
0000a2  f8dfa0a8          LDR      r10,|L4.332|
0000a6  f8ca9000          STR      r9,[r10,#0]
;;;228    	DMA2D->FGPFCCR=LCD_PIXFORMAT;	//设置颜色格式
0000aa  f04f0902          MOV      r9,#2
0000ae  f8ca901c          STR      r9,[r10,#0x1c]
;;;229    	DMA2D->FGOR=0;					//前景层行偏移为0
0000b2  f04f0900          MOV      r9,#0
0000b6  f8ca9010          STR      r9,[r10,#0x10]
;;;230    	DMA2D->OOR=offline;				//设置行偏移 
0000ba  46d1              MOV      r9,r10
0000bc  f8c98040          STR      r8,[r9,#0x40]
;;;231    	DMA2D->CR&=~(1<<0);				//先停止DMA2D
0000c0  f8d99000          LDR      r9,[r9,#0]
0000c4  f0290901          BIC      r9,r9,#1
0000c8  f8ca9000          STR      r9,[r10,#0]
;;;232    	DMA2D->FGMAR=(u32)color;		//源地址
0000cc  f8dd9024          LDR      r9,[sp,#0x24]
0000d0  f8ca900c          STR      r9,[r10,#0xc]
;;;233    	DMA2D->OMAR=addr;				//输出存储器地址
0000d4  46d1              MOV      r9,r10
0000d6  f8c9e03c          STR      lr,[r9,#0x3c]
;;;234    	DMA2D->NLR=(pey-psy+1)|((pex-psx+1)<<16);	//设定行数寄存器 
0000da  eba70901          SUB      r9,r7,r1
0000de  f1090901          ADD      r9,r9,#1
0000e2  eba20a00          SUB      r10,r2,r0
0000e6  f10a0a01          ADD      r10,r10,#1
0000ea  ea49490a          ORR      r9,r9,r10,LSL #16
0000ee  f8dfa05c          LDR      r10,|L4.332|
0000f2  f8ca9044          STR      r9,[r10,#0x44]
;;;235    	DMA2D->CR|=1<<0;				//启动DMA2D
0000f6  46d1              MOV      r9,r10
0000f8  f8d99000          LDR      r9,[r9,#0]
0000fc  f0490901          ORR      r9,r9,#1
000100  f8ca9000          STR      r9,[r10,#0]
;;;236    	while((DMA2D->ISR&(1<<1))==0)	//等待传输完成
000104  e005              B        |L4.274|
                  |L4.262|
;;;237    	{
;;;238    		timeout++;
000106  f10c0c01          ADD      r12,r12,#1
;;;239    		if(timeout>0X1FFFFF)break;	//超时退出
00010a  f5bc1f00          CMP      r12,#0x200000
00010e  d300              BCC      |L4.274|
000110  e008              B        |L4.292|
                  |L4.274|
000112  f8df9038          LDR      r9,|L4.332|
000116  f8d99004          LDR      r9,[r9,#4]            ;236
00011a  f0090902          AND      r9,r9,#2              ;236
00011e  f1b90f00          CMP      r9,#0                 ;236
000122  d0f0              BEQ      |L4.262|
                  |L4.292|
000124  bf00              NOP      
;;;240    	} 
;;;241    	DMA2D->IFCR|=1<<1;				//清除传输完成标志  	
000126  f8df9024          LDR      r9,|L4.332|
00012a  f8d99008          LDR      r9,[r9,#8]
00012e  f0490902          ORR      r9,r9,#2
000132  f8dfa018          LDR      r10,|L4.332|
000136  f8ca9008          STR      r9,[r10,#8]
;;;242    } 
00013a  e8bd8ff0          POP      {r4-r11,pc}
;;;243    
                          ENDP

00013e  0000              DCW      0x0000
                  |L4.320|
                          DCD      lcdltdc
                  |L4.324|
                          DCD      ltdc_framebuf
                  |L4.328|
                          DCD      0x40023830
                  |L4.332|
                          DCD      0x4002b000

                          AREA ||i.LTDC_Display_Dir||, CODE, READONLY, ALIGN=2

                  LTDC_Display_Dir PROC
;;;60     //dir:0,竖屏；1,横屏
;;;61     void LTDC_Display_Dir(u8 dir)
000000  4909              LDR      r1,|L5.40|
;;;62     {
;;;63         lcdltdc.dir=dir; 	//显示方向
000002  7548              STRB     r0,[r1,#0x15]
;;;64     	if(dir==0)			//竖屏
000004  b930              CBNZ     r0,|L5.20|
;;;65     	{
;;;66     		lcdltdc.width=lcdltdc.pheight;
000006  8889              LDRH     r1,[r1,#4]  ; lcdltdc
000008  4a07              LDR      r2,|L5.40|
00000a  82d1              STRH     r1,[r2,#0x16]
;;;67     		lcdltdc.height=lcdltdc.pwidth;	
00000c  4611              MOV      r1,r2
00000e  8809              LDRH     r1,[r1,#0]  ; lcdltdc
000010  8311              STRH     r1,[r2,#0x18]
000012  e008              B        |L5.38|
                  |L5.20|
;;;68     	}else if(dir==1)	//横屏
000014  2801              CMP      r0,#1
000016  d106              BNE      |L5.38|
;;;69     	{
;;;70     		lcdltdc.width=lcdltdc.pwidth;
000018  4903              LDR      r1,|L5.40|
00001a  8809              LDRH     r1,[r1,#0]  ; lcdltdc
00001c  4a02              LDR      r2,|L5.40|
00001e  82d1              STRH     r1,[r2,#0x16]
;;;71     		lcdltdc.height=lcdltdc.pheight;
000020  4611              MOV      r1,r2
000022  8889              LDRH     r1,[r1,#4]  ; lcdltdc
000024  8311              STRH     r1,[r2,#0x18]
                  |L5.38|
;;;72     	}
;;;73     }
000026  4770              BX       lr
;;;74     
                          ENDP

                  |L5.40|
                          DCD      lcdltdc

                          AREA ||i.LTDC_Draw_Point||, CODE, READONLY, ALIGN=2

                  LTDC_Draw_Point PROC
;;;77     //color:颜色值
;;;78     void LTDC_Draw_Point(u16 x,u16 y,u32 color)
000000  b570              PUSH     {r4-r6,lr}
;;;79     { 
;;;80     #if LCD_PIXFORMAT==LCD_PIXFORMAT_ARGB8888||LCD_PIXFORMAT==LCD_PIXFORMAT_RGB888
;;;81     	if(lcdltdc.dir)	//横屏
;;;82     	{
;;;83             *(u32*)((u32)ltdc_framebuf[lcdltdc.activelayer]+lcdltdc.pixsize*(lcdltdc.pwidth*y+x))=color;
;;;84     	}else 			//竖屏
;;;85     	{
;;;86             *(u32*)((u32)ltdc_framebuf[lcdltdc.activelayer]+lcdltdc.pixsize*(lcdltdc.pwidth*(lcdltdc.pheight-x-1)+y))=color; 
;;;87     	}
;;;88     #else
;;;89     	if(lcdltdc.dir)	//横屏
000002  4b11              LDR      r3,|L6.72|
000004  7d5b              LDRB     r3,[r3,#0x15]  ; lcdltdc
000006  b16b              CBZ      r3,|L6.36|
;;;90     	{
;;;91             *(u16*)((u32)ltdc_framebuf[lcdltdc.activelayer]+lcdltdc.pixsize*(lcdltdc.pwidth*y+x))=color;
000008  4b0f              LDR      r3,|L6.72|
00000a  69db              LDR      r3,[r3,#0x1c]  ; lcdltdc
00000c  4d0e              LDR      r5,|L6.72|
00000e  682d              LDR      r5,[r5,#0]  ; lcdltdc
000010  fb050501          MLA      r5,r5,r1,r0
000014  436b              MULS     r3,r5,r3
000016  4d0c              LDR      r5,|L6.72|
000018  7d2d              LDRB     r5,[r5,#0x14]  ; lcdltdc
00001a  4e0c              LDR      r6,|L6.76|
00001c  f8565025          LDR      r5,[r6,r5,LSL #2]
000020  52ea              STRH     r2,[r5,r3]
000022  e00f              B        |L6.68|
                  |L6.36|
;;;92     	}else 			//竖屏
;;;93     	{
;;;94             *(u16*)((u32)ltdc_framebuf[lcdltdc.activelayer]+lcdltdc.pixsize*(lcdltdc.pwidth*(lcdltdc.pheight-x-1)+y))=color; 
000024  4b08              LDR      r3,|L6.72|
000026  681d              LDR      r5,[r3,#0]  ; lcdltdc
000028  685b              LDR      r3,[r3,#4]  ; lcdltdc
00002a  1a1b              SUBS     r3,r3,r0
00002c  1e5b              SUBS     r3,r3,#1
00002e  fb051303          MLA      r3,r5,r3,r1
000032  4d05              LDR      r5,|L6.72|
000034  69ed              LDR      r5,[r5,#0x1c]  ; lcdltdc
000036  436b              MULS     r3,r5,r3
000038  4d03              LDR      r5,|L6.72|
00003a  7d2d              LDRB     r5,[r5,#0x14]  ; lcdltdc
00003c  4e03              LDR      r6,|L6.76|
00003e  f8565025          LDR      r5,[r6,r5,LSL #2]
000042  52ea              STRH     r2,[r5,r3]
                  |L6.68|
;;;95     	}
;;;96     #endif
;;;97     }
000044  bd70              POP      {r4-r6,pc}
;;;98     
                          ENDP

000046  0000              DCW      0x0000
                  |L6.72|
                          DCD      lcdltdc
                  |L6.76|
                          DCD      ltdc_framebuf

                          AREA ||i.LTDC_Fill||, CODE, READONLY, ALIGN=2

                  LTDC_Fill PROC
;;;125    //color:要填充的颜色
;;;126    void LTDC_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u32 color)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;127    { 
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;128    	u32 psx,psy,pex,pey;	//以LCD面板为基准的坐标系,不随横竖屏变化而变化
;;;129    	u32 timeout=0; 
00000a  f04f0c00          MOV      r12,#0
;;;130    	u16 offline;
;;;131    	u32 addr; 
;;;132    	//坐标系转换
;;;133    	if(lcdltdc.dir)	//横屏
00000e  f8df9128          LDR      r9,|L7.312|
000012  f8999015          LDRB     r9,[r9,#0x15]  ; lcdltdc
000016  f1b90f00          CMP      r9,#0
00001a  d004              BEQ      |L7.38|
;;;134    	{
;;;135    		psx=sx;psy=sy;
00001c  4620              MOV      r0,r4
00001e  4629              MOV      r1,r5
;;;136    		pex=ex;pey=ey;
000020  4632              MOV      r2,r6
000022  461f              MOV      r7,r3
000024  e011              B        |L7.74|
                  |L7.38|
;;;137    	}else			//竖屏
;;;138    	{
;;;139    		psx=sy;psy=lcdltdc.pheight-ex-1;
000026  4628              MOV      r0,r5
000028  f8df910c          LDR      r9,|L7.312|
00002c  f8d99004          LDR      r9,[r9,#4]  ; lcdltdc
000030  eba90906          SUB      r9,r9,r6
000034  f1a90101          SUB      r1,r9,#1
;;;140    		pex=ey;pey=lcdltdc.pheight-sx-1;
000038  461a              MOV      r2,r3
00003a  f8df90fc          LDR      r9,|L7.312|
00003e  f8d99004          LDR      r9,[r9,#4]  ; lcdltdc
000042  eba90904          SUB      r9,r9,r4
000046  f1a90701          SUB      r7,r9,#1
                  |L7.74|
;;;141    	} 
;;;142    	offline=lcdltdc.pwidth-(pex-psx+1);
00004a  f8df90ec          LDR      r9,|L7.312|
00004e  f8b99000          LDRH     r9,[r9,#0]  ; lcdltdc
000052  eba20a00          SUB      r10,r2,r0
000056  f10a0a01          ADD      r10,r10,#1
00005a  eba9090a          SUB      r9,r9,r10
00005e  fa1ff889          UXTH     r8,r9
;;;143    	addr=((u32)ltdc_framebuf[lcdltdc.activelayer]+lcdltdc.pixsize*(lcdltdc.pwidth*psy+psx));
000062  f8df90d4          LDR      r9,|L7.312|
000066  f8999014          LDRB     r9,[r9,#0x14]  ; lcdltdc
00006a  f8dfa0d0          LDR      r10,|L7.316|
00006e  f85a9029          LDR      r9,[r10,r9,LSL #2]
000072  f8dfa0c4          LDR      r10,|L7.312|
000076  f8daa01c          LDR      r10,[r10,#0x1c]  ; lcdltdc
00007a  f8dfb0bc          LDR      r11,|L7.312|
00007e  f8dbb000          LDR      r11,[r11,#0]  ; lcdltdc
000082  fb0b0b01          MLA      r11,r11,r1,r0
000086  fb0a9e0b          MLA      lr,r10,r11,r9
;;;144    	RCC->AHB1ENR|=1<<23;			//使能DM2D时钟
00008a  f8df90b4          LDR      r9,|L7.320|
00008e  f8d99000          LDR      r9,[r9,#0]
000092  f4490900          ORR      r9,r9,#0x800000
000096  f8dfa0a8          LDR      r10,|L7.320|
00009a  f8ca9000          STR      r9,[r10,#0]
;;;145    	DMA2D->CR=3<<16;				//寄存器到存储器模式
00009e  f44f3940          MOV      r9,#0x30000
0000a2  f8dfa0a0          LDR      r10,|L7.324|
0000a6  f8ca9000          STR      r9,[r10,#0]
;;;146    	DMA2D->OPFCCR=LCD_PIXFORMAT;	//设置颜色格式
0000aa  f04f0902          MOV      r9,#2
0000ae  f8ca9034          STR      r9,[r10,#0x34]
;;;147    	DMA2D->OOR=offline;				//设置行偏移 
0000b2  46d1              MOV      r9,r10
0000b4  f8c98040          STR      r8,[r9,#0x40]
;;;148    	DMA2D->CR&=~(1<<0);				//先停止DMA2D
0000b8  f8d99000          LDR      r9,[r9,#0]
0000bc  f0290901          BIC      r9,r9,#1
0000c0  f8ca9000          STR      r9,[r10,#0]
;;;149    	DMA2D->OMAR=addr;				//输出存储器地址
0000c4  46d1              MOV      r9,r10
0000c6  f8c9e03c          STR      lr,[r9,#0x3c]
;;;150    	DMA2D->NLR=(pey-psy+1)|((pex-psx+1)<<16);	//设定行数寄存器
0000ca  eba70901          SUB      r9,r7,r1
0000ce  f1090901          ADD      r9,r9,#1
0000d2  eba20a00          SUB      r10,r2,r0
0000d6  f10a0a01          ADD      r10,r10,#1
0000da  ea49490a          ORR      r9,r9,r10,LSL #16
0000de  f8dfa064          LDR      r10,|L7.324|
0000e2  f8ca9044          STR      r9,[r10,#0x44]
;;;151    	DMA2D->OCOLR=color;				//设定输出颜色寄存器 
0000e6  f8dd9024          LDR      r9,[sp,#0x24]
0000ea  f8ca9038          STR      r9,[r10,#0x38]
;;;152    	DMA2D->CR|=1<<0;				//启动DMA2D
0000ee  46d1              MOV      r9,r10
0000f0  f8d99000          LDR      r9,[r9,#0]
0000f4  f0490901          ORR      r9,r9,#1
0000f8  f8ca9000          STR      r9,[r10,#0]
;;;153    	while((DMA2D->ISR&(1<<1))==0)	//等待传输完成
0000fc  e005              B        |L7.266|
                  |L7.254|
;;;154    	{
;;;155    		timeout++;
0000fe  f10c0c01          ADD      r12,r12,#1
;;;156    		if(timeout>0X1FFFFF)break;	//超时退出
000102  f5bc1f00          CMP      r12,#0x200000
000106  d300              BCC      |L7.266|
000108  e008              B        |L7.284|
                  |L7.266|
00010a  f8df9038          LDR      r9,|L7.324|
00010e  f8d99004          LDR      r9,[r9,#4]            ;153
000112  f0090902          AND      r9,r9,#2              ;153
000116  f1b90f00          CMP      r9,#0                 ;153
00011a  d0f0              BEQ      |L7.254|
                  |L7.284|
00011c  bf00              NOP      
;;;157    	}  
;;;158    	DMA2D->IFCR|=1<<1;				//清除传输完成标志 	
00011e  f8df9024          LDR      r9,|L7.324|
000122  f8d99008          LDR      r9,[r9,#8]
000126  f0490902          ORR      r9,r9,#2
00012a  f8dfa018          LDR      r10,|L7.324|
00012e  f8ca9008          STR      r9,[r10,#8]
;;;159    }
000132  e8bd8ff0          POP      {r4-r11,pc}
;;;160    //在指定区域内填充单个颜色
                          ENDP

000136  0000              DCW      0x0000
                  |L7.312|
                          DCD      lcdltdc
                  |L7.316|
                          DCD      ltdc_framebuf
                  |L7.320|
                          DCD      0x40023830
                  |L7.324|
                          DCD      0x4002b000

                          AREA ||i.LTDC_Init||, CODE, READONLY, ALIGN=2

                  LTDC_Init PROC
;;;365    //LCD初始化函数
;;;366    void LTDC_Init(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;367    {   
;;;368    	u16 lcdid=0;
000002  2400              MOVS     r4,#0
;;;369    	
;;;370    	lcdid=LTDC_PanelID_Read();			//读取LCD面板ID	
000004  f7fffffe          BL       LTDC_PanelID_Read
000008  4604              MOV      r4,r0
;;;371    	if(lcdid==0X4342)
00000a  f2443042          MOV      r0,#0x4342
00000e  4284              CMP      r4,r0
000010  d118              BNE      |L8.68|
;;;372    	{
;;;373    		lcdltdc.pwidth=480;			    //面板宽度,单位:像素
000012  f44f70f0          MOV      r0,#0x1e0
000016  4993              LDR      r1,|L8.612|
000018  6008              STR      r0,[r1,#0]  ; lcdltdc
;;;374    		lcdltdc.pheight=272;		    //面板高度,单位:像素
00001a  f44f7088          MOV      r0,#0x110
00001e  6048              STR      r0,[r1,#4]  ; lcdltdc
;;;375    		lcdltdc.hsw=1;				    //水平同步宽度
000020  2001              MOVS     r0,#1
000022  8108              STRH     r0,[r1,#8]
;;;376    		lcdltdc.vsw=1;				    //垂直同步宽度
000024  8148              STRH     r0,[r1,#0xa]
;;;377    		lcdltdc.hbp=40;				    //水平后廊
000026  2028              MOVS     r0,#0x28
000028  8188              STRH     r0,[r1,#0xc]
;;;378    		lcdltdc.vbp=8;				    //垂直后廊
00002a  2008              MOVS     r0,#8
00002c  81c8              STRH     r0,[r1,#0xe]
;;;379    		lcdltdc.hfp=5;				    //水平前廊
00002e  2005              MOVS     r0,#5
000030  8208              STRH     r0,[r1,#0x10]
;;;380    		lcdltdc.vfp=8;				    //垂直前廊
000032  2008              MOVS     r0,#8
000034  8248              STRH     r0,[r1,#0x12]
;;;381             LTDC_Clk_Set(288,4,RCC_PLLSAIDIVR_8);   //设置像素时钟 9Mhz 
000036  0382              LSLS     r2,r0,#14
000038  2104              MOVS     r1,#4
00003a  f44f7090          MOV      r0,#0x120
00003e  f7fffffe          BL       LTDC_Clk_Set
000042  e06e              B        |L8.290|
                  |L8.68|
;;;382    		//其他参数待定.
;;;383    	}else if(lcdid==0X7084)
000044  f2470084          MOV      r0,#0x7084
000048  4284              CMP      r4,r0
00004a  d119              BNE      |L8.128|
;;;384    	{
;;;385    		lcdltdc.pwidth=800;			    //面板宽度,单位:像素
00004c  f44f7048          MOV      r0,#0x320
000050  4984              LDR      r1,|L8.612|
000052  6008              STR      r0,[r1,#0]  ; lcdltdc
;;;386    		lcdltdc.pheight=480;		    //面板高度,单位:像素
000054  f44f70f0          MOV      r0,#0x1e0
000058  6048              STR      r0,[r1,#4]  ; lcdltdc
;;;387    		lcdltdc.hsw=1;				    //水平同步宽度
00005a  2001              MOVS     r0,#1
00005c  8108              STRH     r0,[r1,#8]
;;;388    		lcdltdc.vsw=1;				    //垂直同步宽度
00005e  8148              STRH     r0,[r1,#0xa]
;;;389    		lcdltdc.hbp=46;				    //水平后廊
000060  202e              MOVS     r0,#0x2e
000062  8188              STRH     r0,[r1,#0xc]
;;;390    		lcdltdc.vbp=23;				    //垂直后廊
000064  2017              MOVS     r0,#0x17
000066  81c8              STRH     r0,[r1,#0xe]
;;;391    		lcdltdc.hfp=210;			    //水平前廊
000068  20d2              MOVS     r0,#0xd2
00006a  8208              STRH     r0,[r1,#0x10]
;;;392    		lcdltdc.vfp=22;				    //垂直前廊
00006c  2016              MOVS     r0,#0x16
00006e  8248              STRH     r0,[r1,#0x12]
;;;393            LTDC_Clk_Set(396,3,RCC_PLLSAIDIVR_4); //设置像素时钟 33M(如果开双显,需要降低DCLK到:18.75Mhz  300/4/4,才会比较好)
000070  f44f3280          MOV      r2,#0x10000
000074  2103              MOVS     r1,#3
000076  f44f70c6          MOV      r0,#0x18c
00007a  f7fffffe          BL       LTDC_Clk_Set
00007e  e050              B        |L8.290|
                  |L8.128|
;;;394    	}else if(lcdid==0X7016)		
000080  f2470016          MOV      r0,#0x7016
000084  4284              CMP      r4,r0
000086  d11a              BNE      |L8.190|
;;;395    	{
;;;396    		lcdltdc.pwidth=1024;			//面板宽度,单位:像素
000088  f44f6080          MOV      r0,#0x400
00008c  4975              LDR      r1,|L8.612|
00008e  6008              STR      r0,[r1,#0]  ; lcdltdc
;;;397    		lcdltdc.pheight=600;			//面板高度,单位:像素
000090  f44f7016          MOV      r0,#0x258
000094  6048              STR      r0,[r1,#4]  ; lcdltdc
;;;398            lcdltdc.hsw=20;				    //水平同步宽度
000096  2014              MOVS     r0,#0x14
000098  8108              STRH     r0,[r1,#8]
;;;399    		lcdltdc.vsw=3;				    //垂直同步宽度
00009a  2003              MOVS     r0,#3
00009c  8148              STRH     r0,[r1,#0xa]
;;;400    		lcdltdc.hbp=140;			    //水平后廊
00009e  208c              MOVS     r0,#0x8c
0000a0  8188              STRH     r0,[r1,#0xc]
;;;401    		lcdltdc.vbp=20;				    //垂直后廊
0000a2  2014              MOVS     r0,#0x14
0000a4  81c8              STRH     r0,[r1,#0xe]
;;;402    		lcdltdc.hfp=160;			    //水平前廊
0000a6  20a0              MOVS     r0,#0xa0
0000a8  8208              STRH     r0,[r1,#0x10]
;;;403    		lcdltdc.vfp=12;				    //垂直前廊
0000aa  200c              MOVS     r0,#0xc
0000ac  8248              STRH     r0,[r1,#0x12]
;;;404    		LTDC_Clk_Set(360,2,RCC_PLLSAIDIVR_4);//设置像素时钟  45Mhz 
0000ae  f44f3280          MOV      r2,#0x10000
0000b2  2102              MOVS     r1,#2
0000b4  f44f70b4          MOV      r0,#0x168
0000b8  f7fffffe          BL       LTDC_Clk_Set
0000bc  e031              B        |L8.290|
                  |L8.190|
;;;405    		//其他参数待定.
;;;406    	}else if(lcdid==0X7018)		
0000be  f2470018          MOV      r0,#0x7018
0000c2  4284              CMP      r4,r0
0000c4  d107              BNE      |L8.214|
;;;407    	{
;;;408    		lcdltdc.pwidth=1280;			//面板宽度,单位:像素
0000c6  f44f60a0          MOV      r0,#0x500
0000ca  4966              LDR      r1,|L8.612|
0000cc  6008              STR      r0,[r1,#0]  ; lcdltdc
;;;409    		lcdltdc.pheight=800;			//面板高度,单位:像素
0000ce  f44f7048          MOV      r0,#0x320
0000d2  6048              STR      r0,[r1,#4]  ; lcdltdc
0000d4  e025              B        |L8.290|
                  |L8.214|
;;;410    		//其他参数待定.
;;;411    	}else if(lcdid==0X8016)		
0000d6  f2480016          MOV      r0,#0x8016
0000da  4284              CMP      r4,r0
0000dc  d106              BNE      |L8.236|
;;;412    	{
;;;413    		lcdltdc.pwidth=1024;			//面板宽度,单位:像素
0000de  1140              ASRS     r0,r0,#5
0000e0  4960              LDR      r1,|L8.612|
0000e2  6008              STR      r0,[r1,#0]  ; lcdltdc
;;;414    		lcdltdc.pheight=768;			//面板高度,单位:像素
0000e4  f44f7040          MOV      r0,#0x300
0000e8  6048              STR      r0,[r1,#4]  ; lcdltdc
0000ea  e01a              B        |L8.290|
                  |L8.236|
;;;415    		//其他参数待定.
;;;416        }else if(lcdid==0X1018)			//10.1寸1280*800 RGB屏	
0000ec  f2410018          MOV      r0,#0x1018
0000f0  4284              CMP      r4,r0
0000f2  d116              BNE      |L8.290|
;;;417    	{
;;;418    		lcdltdc.pwidth=1280;		//面板宽度,单位:像素
0000f4  f44f60a0          MOV      r0,#0x500
0000f8  495a              LDR      r1,|L8.612|
0000fa  6008              STR      r0,[r1,#0]  ; lcdltdc
;;;419    		lcdltdc.pheight=800;		//面板高度,单位:像素
0000fc  f44f7048          MOV      r0,#0x320
000100  6048              STR      r0,[r1,#4]  ; lcdltdc
;;;420    		lcdltdc.hbp=140;			//水平后廊
000102  208c              MOVS     r0,#0x8c
000104  8188              STRH     r0,[r1,#0xc]
;;;421    		lcdltdc.hfp=10;			    //水平前廊
000106  200a              MOVS     r0,#0xa
000108  8208              STRH     r0,[r1,#0x10]
;;;422    		lcdltdc.hsw=10;				//水平同步宽度
00010a  8108              STRH     r0,[r1,#8]
;;;423    		lcdltdc.vbp=10;				//垂直后廊
00010c  81c8              STRH     r0,[r1,#0xe]
;;;424    		lcdltdc.vfp=10;				//垂直前廊
00010e  8248              STRH     r0,[r1,#0x12]
;;;425    		lcdltdc.vsw=3;				//垂直同步宽度
000110  2003              MOVS     r0,#3
000112  8148              STRH     r0,[r1,#0xa]
;;;426    		LTDC_Clk_Set(360,2,RCC_PLLSAIDIVR_4);//设置像素时钟  45Mhz 
000114  f44f3280          MOV      r2,#0x10000
000118  2102              MOVS     r1,#2
00011a  f44f70b4          MOV      r0,#0x168
00011e  f7fffffe          BL       LTDC_Clk_Set
                  |L8.290|
;;;427    	}  
;;;428    	lcddev.width=lcdltdc.pwidth;
000122  4850              LDR      r0,|L8.612|
000124  8800              LDRH     r0,[r0,#0]  ; lcdltdc
000126  4950              LDR      r1,|L8.616|
000128  8008              STRH     r0,[r1,#0]
;;;429    	lcddev.height=lcdltdc.pheight;
00012a  484e              LDR      r0,|L8.612|
00012c  8880              LDRH     r0,[r0,#4]  ; lcdltdc
00012e  8048              STRH     r0,[r1,#2]
;;;430        
;;;431    #if LCD_PIXFORMAT==LCD_PIXFORMAT_ARGB8888||LCD_PIXFORMAT==LCD_PIXFORMAT_RGB888 
;;;432    	ltdc_framebuf[0]=(u32*)&ltdc_lcd_framebuf;
;;;433    	lcdltdc.pixsize=4;				//每个像素占4个字节
;;;434    #else 
;;;435        lcdltdc.pixsize=2;				//每个像素占2个字节
000130  2002              MOVS     r0,#2
000132  494c              LDR      r1,|L8.612|
000134  61c8              STR      r0,[r1,#0x1c]  ; lcdltdc
;;;436    	ltdc_framebuf[0]=(u32*)&ltdc_lcd_framebuf;
000136  484d              LDR      r0,|L8.620|
000138  494d              LDR      r1,|L8.624|
00013a  6008              STR      r0,[r1,#0]  ; ltdc_framebuf
;;;437    #endif 	
;;;438        
;;;439        //LTDC配置
;;;440        LTDC_Handler.Instance=LTDC;
00013c  484d              LDR      r0,|L8.628|
00013e  494e              LDR      r1,|L8.632|
000140  6008              STR      r0,[r1,#0]  ; LTDC_Handler
;;;441        LTDC_Handler.Init.HSPolarity=LTDC_HSPOLARITY_AL;         	//水平同步极性
000142  2000              MOVS     r0,#0
000144  6048              STR      r0,[r1,#4]  ; LTDC_Handler
;;;442        LTDC_Handler.Init.VSPolarity=LTDC_VSPOLARITY_AL;         	//垂直同步极性
000146  2100              MOVS     r1,#0
000148  484b              LDR      r0,|L8.632|
00014a  6081              STR      r1,[r0,#8]
;;;443        LTDC_Handler.Init.DEPolarity=LTDC_DEPOLARITY_AL;        	 //数据使能极性
00014c  60c1              STR      r1,[r0,#0xc]
;;;444        if(lcdid==0X1018)LTDC_Handler.Init.PCPolarity=LTDC_PCPOLARITY_IIPC;//像素时钟极性
00014e  f2410018          MOV      r0,#0x1018
000152  4284              CMP      r4,r0
000154  d104              BNE      |L8.352|
000156  f04f5180          MOV      r1,#0x10000000
00015a  4847              LDR      r0,|L8.632|
00015c  6101              STR      r1,[r0,#0x10]
00015e  e002              B        |L8.358|
                  |L8.352|
;;;445    	else LTDC_Handler.Init.PCPolarity=LTDC_PCPOLARITY_IPC;   	//像素时钟极性
000160  2100              MOVS     r1,#0
000162  4845              LDR      r0,|L8.632|
000164  6101              STR      r1,[r0,#0x10]
                  |L8.358|
;;;446        LTDC_Handler.Init.HorizontalSync=lcdltdc.hsw-1;          	//水平同步宽度
000166  483f              LDR      r0,|L8.612|
000168  8900              LDRH     r0,[r0,#8]  ; lcdltdc
00016a  1e40              SUBS     r0,r0,#1
00016c  4942              LDR      r1,|L8.632|
00016e  6148              STR      r0,[r1,#0x14]
;;;447        LTDC_Handler.Init.VerticalSync=lcdltdc.vsw-1;            	//垂直同步宽度
000170  483c              LDR      r0,|L8.612|
000172  8940              LDRH     r0,[r0,#0xa]  ; lcdltdc
000174  1e40              SUBS     r0,r0,#1
000176  6188              STR      r0,[r1,#0x18]
;;;448        LTDC_Handler.Init.AccumulatedHBP=lcdltdc.hsw+lcdltdc.hbp-1; //水平同步后沿宽度
000178  483a              LDR      r0,|L8.612|
00017a  8900              LDRH     r0,[r0,#8]  ; lcdltdc
00017c  4939              LDR      r1,|L8.612|
00017e  8989              LDRH     r1,[r1,#0xc]  ; lcdltdc
000180  4408              ADD      r0,r0,r1
000182  1e40              SUBS     r0,r0,#1
000184  493c              LDR      r1,|L8.632|
000186  61c8              STR      r0,[r1,#0x1c]
;;;449        LTDC_Handler.Init.AccumulatedVBP=lcdltdc.vsw+lcdltdc.vbp-1; //垂直同步后沿高度
000188  4836              LDR      r0,|L8.612|
00018a  8940              LDRH     r0,[r0,#0xa]  ; lcdltdc
00018c  4935              LDR      r1,|L8.612|
00018e  89c9              LDRH     r1,[r1,#0xe]  ; lcdltdc
000190  4408              ADD      r0,r0,r1
000192  1e40              SUBS     r0,r0,#1
000194  4938              LDR      r1,|L8.632|
000196  6208              STR      r0,[r1,#0x20]
;;;450        LTDC_Handler.Init.AccumulatedActiveW=lcdltdc.hsw+lcdltdc.hbp+lcdltdc.pwidth-1;//有效宽度
000198  4832              LDR      r0,|L8.612|
00019a  8900              LDRH     r0,[r0,#8]  ; lcdltdc
00019c  4931              LDR      r1,|L8.612|
00019e  8989              LDRH     r1,[r1,#0xc]  ; lcdltdc
0001a0  4408              ADD      r0,r0,r1
0001a2  4930              LDR      r1,|L8.612|
0001a4  6809              LDR      r1,[r1,#0]  ; lcdltdc
0001a6  4408              ADD      r0,r0,r1
0001a8  1e40              SUBS     r0,r0,#1
0001aa  4933              LDR      r1,|L8.632|
0001ac  6248              STR      r0,[r1,#0x24]
;;;451        LTDC_Handler.Init.AccumulatedActiveH=lcdltdc.vsw+lcdltdc.vbp+lcdltdc.pheight-1;//有效高度
0001ae  482d              LDR      r0,|L8.612|
0001b0  8940              LDRH     r0,[r0,#0xa]  ; lcdltdc
0001b2  492c              LDR      r1,|L8.612|
0001b4  89c9              LDRH     r1,[r1,#0xe]  ; lcdltdc
0001b6  4408              ADD      r0,r0,r1
0001b8  492a              LDR      r1,|L8.612|
0001ba  6849              LDR      r1,[r1,#4]  ; lcdltdc
0001bc  4408              ADD      r0,r0,r1
0001be  1e40              SUBS     r0,r0,#1
0001c0  492d              LDR      r1,|L8.632|
0001c2  6288              STR      r0,[r1,#0x28]
;;;452        LTDC_Handler.Init.TotalWidth=lcdltdc.hsw+lcdltdc.hbp+lcdltdc.pwidth+lcdltdc.hfp-1;   //总宽度
0001c4  4827              LDR      r0,|L8.612|
0001c6  8900              LDRH     r0,[r0,#8]  ; lcdltdc
0001c8  4926              LDR      r1,|L8.612|
0001ca  8989              LDRH     r1,[r1,#0xc]  ; lcdltdc
0001cc  4408              ADD      r0,r0,r1
0001ce  4925              LDR      r1,|L8.612|
0001d0  6809              LDR      r1,[r1,#0]  ; lcdltdc
0001d2  4408              ADD      r0,r0,r1
0001d4  4923              LDR      r1,|L8.612|
0001d6  8a09              LDRH     r1,[r1,#0x10]  ; lcdltdc
0001d8  4408              ADD      r0,r0,r1
0001da  1e40              SUBS     r0,r0,#1
0001dc  4926              LDR      r1,|L8.632|
0001de  62c8              STR      r0,[r1,#0x2c]
;;;453        LTDC_Handler.Init.TotalHeigh=lcdltdc.vsw+lcdltdc.vbp+lcdltdc.pheight+lcdltdc.vfp-1;  //总高度
0001e0  4820              LDR      r0,|L8.612|
0001e2  8940              LDRH     r0,[r0,#0xa]  ; lcdltdc
0001e4  491f              LDR      r1,|L8.612|
0001e6  89c9              LDRH     r1,[r1,#0xe]  ; lcdltdc
0001e8  4408              ADD      r0,r0,r1
0001ea  491e              LDR      r1,|L8.612|
0001ec  6849              LDR      r1,[r1,#4]  ; lcdltdc
0001ee  4408              ADD      r0,r0,r1
0001f0  491c              LDR      r1,|L8.612|
0001f2  8a49              LDRH     r1,[r1,#0x12]  ; lcdltdc
0001f4  4408              ADD      r0,r0,r1
0001f6  1e40              SUBS     r0,r0,#1
0001f8  491f              LDR      r1,|L8.632|
0001fa  6308              STR      r0,[r1,#0x30]
;;;454        LTDC_Handler.Init.Backcolor.Red=0;           //屏幕背景层红色部分
0001fc  2100              MOVS     r1,#0
0001fe  481e              LDR      r0,|L8.632|
000200  f8801036          STRB     r1,[r0,#0x36]
;;;455        LTDC_Handler.Init.Backcolor.Green=0;         //屏幕背景层绿色部分
000204  f8801035          STRB     r1,[r0,#0x35]
;;;456        LTDC_Handler.Init.Backcolor.Blue=0;          //屏幕背景色蓝色部分
000208  f8801034          STRB     r1,[r0,#0x34]
;;;457        HAL_LTDC_Init(&LTDC_Handler);
00020c  f7fffffe          BL       HAL_LTDC_Init
;;;458     	
;;;459    	//层配置
;;;460    	LTDC_Layer_Parameter_Config(0,(u32)ltdc_framebuf[0],LCD_PIXFORMAT,255,0,6,7,0X000000);//层参数配置
000210  2000              MOVS     r0,#0
000212  2107              MOVS     r1,#7
000214  2206              MOVS     r2,#6
000216  e9cd0200          STRD     r0,r2,[sp,#0]
00021a  e9cd1002          STRD     r1,r0,[sp,#8]
00021e  4814              LDR      r0,|L8.624|
000220  23ff              MOVS     r3,#0xff
000222  2202              MOVS     r2,#2
000224  6801              LDR      r1,[r0,#0]  ; ltdc_framebuf
000226  2000              MOVS     r0,#0
000228  f7fffffe          BL       LTDC_Layer_Parameter_Config
;;;461    	LTDC_Layer_Window_Config(0,0,0,lcdltdc.pwidth,lcdltdc.pheight);	//层窗口配置,以LCD面板坐标系为基准,不要随便修改!	
00022c  480d              LDR      r0,|L8.612|
00022e  8880              LDRH     r0,[r0,#4]  ; lcdltdc
000230  b280              UXTH     r0,r0
000232  9000              STR      r0,[sp,#0]
000234  480b              LDR      r0,|L8.612|
000236  8800              LDRH     r0,[r0,#0]  ; lcdltdc
000238  b283              UXTH     r3,r0
00023a  2200              MOVS     r2,#0
00023c  4611              MOV      r1,r2
00023e  4610              MOV      r0,r2
000240  f7fffffe          BL       LTDC_Layer_Window_Config
;;;462    	 	
;;;463     	LTDC_Display_Dir(0);			//默认竖屏
000244  2000              MOVS     r0,#0
000246  f7fffffe          BL       LTDC_Display_Dir
;;;464    	LTDC_Select_Layer(0); 			//选择第1层
00024a  2000              MOVS     r0,#0
00024c  f7fffffe          BL       LTDC_Select_Layer
;;;465        LCD_LED(1);         		    //点亮背光
000250  2201              MOVS     r2,#1
000252  2120              MOVS     r1,#0x20
000254  4809              LDR      r0,|L8.636|
000256  f7fffffe          BL       HAL_GPIO_WritePin
;;;466        LTDC_Clear(0XFFFFFFFF);			//清屏
00025a  f04f30ff          MOV      r0,#0xffffffff
00025e  f7fffffe          BL       LTDC_Clear
;;;467    }
000262  bd1f              POP      {r0-r4,pc}
;;;468    
                          ENDP

                  |L8.612|
                          DCD      lcdltdc
                  |L8.616|
                          DCD      lcddev
                  |L8.620|
                          DCD      ltdc_lcd_framebuf
                  |L8.624|
                          DCD      ltdc_framebuf
                  |L8.628|
                          DCD      0x40016800
                  |L8.632|
                          DCD      LTDC_Handler
                  |L8.636|
                          DCD      0x40020400

                          AREA ||i.LTDC_Layer_Parameter_Config||, CODE, READONLY, ALIGN=2

                  LTDC_Layer_Parameter_Config PROC
;;;301    //返回值:无
;;;302    void LTDC_Layer_Parameter_Config(u8 layerx,u32 bufaddr,u8 pixformat,u8 alpha,u8 alpha0,u8 bfac1,u8 bfac2,u32 bkcolor)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;303    {
000004  b08d              SUB      sp,sp,#0x34
000006  4605              MOV      r5,r0
000008  460e              MOV      r6,r1
00000a  4617              MOV      r7,r2
00000c  4698              MOV      r8,r3
00000e  e9ddab17          LDRD     r10,r11,[sp,#0x5c]
000012  f8dd9058          LDR      r9,[sp,#0x58]
000016  9c19              LDR      r4,[sp,#0x64]
;;;304    	LTDC_LayerCfgTypeDef pLayerCfg;
;;;305    	
;;;306    	pLayerCfg.WindowX0=0;                       //窗口起始X坐标
000018  2000              MOVS     r0,#0
00001a  9000              STR      r0,[sp,#0]
;;;307    	pLayerCfg.WindowY0=0;                       //窗口起始Y坐标
00001c  9002              STR      r0,[sp,#8]
;;;308    	pLayerCfg.WindowX1=lcdltdc.pwidth;          //窗口终止X坐标
00001e  4815              LDR      r0,|L9.116|
000020  6800              LDR      r0,[r0,#0]  ; lcdltdc
000022  9001              STR      r0,[sp,#4]
;;;309    	pLayerCfg.WindowY1=lcdltdc.pheight;         //窗口终止Y坐标
000024  4813              LDR      r0,|L9.116|
000026  6840              LDR      r0,[r0,#4]  ; lcdltdc
000028  9003              STR      r0,[sp,#0xc]
;;;310    	pLayerCfg.PixelFormat=pixformat;		    //像素格式
00002a  9704              STR      r7,[sp,#0x10]
;;;311    	pLayerCfg.Alpha=alpha;				        //Alpha值设置，0~255,255为完全不透明
00002c  f8cd8014          STR      r8,[sp,#0x14]
;;;312    	pLayerCfg.Alpha0=alpha0;			        //默认Alpha值
000030  f8cd9018          STR      r9,[sp,#0x18]
;;;313    	pLayerCfg.BlendingFactor1=(u32)bfac1<<8;    //设置层混合系数
000034  ea4f200a          LSL      r0,r10,#8
000038  9007              STR      r0,[sp,#0x1c]
;;;314    	pLayerCfg.BlendingFactor2=(u32)bfac2<<8;	//设置层混合系数
00003a  ea4f200b          LSL      r0,r11,#8
00003e  9008              STR      r0,[sp,#0x20]
;;;315    	pLayerCfg.FBStartAdress=bufaddr;	        //设置层颜色帧缓存起始地址
000040  9609              STR      r6,[sp,#0x24]
;;;316    	pLayerCfg.ImageWidth=lcdltdc.pwidth;        //设置颜色帧缓冲区的宽度    
000042  480c              LDR      r0,|L9.116|
000044  6800              LDR      r0,[r0,#0]  ; lcdltdc
000046  900a              STR      r0,[sp,#0x28]
;;;317    	pLayerCfg.ImageHeight=lcdltdc.pheight;      //设置颜色帧缓冲区的高度
000048  480a              LDR      r0,|L9.116|
00004a  6840              LDR      r0,[r0,#4]  ; lcdltdc
00004c  900b              STR      r0,[sp,#0x2c]
;;;318    	pLayerCfg.Backcolor.Red=(u8)(bkcolor&0X00FF0000)>>16;   //背景颜色红色部分
00004e  2000              MOVS     r0,#0
000050  1401              ASRS     r1,r0,#16
000052  f88d1032          STRB     r1,[sp,#0x32]
;;;319    	pLayerCfg.Backcolor.Green=(u8)(bkcolor&0X0000FF00)>>8;  //背景颜色绿色部分
000056  1201              ASRS     r1,r0,#8
000058  f88d1031          STRB     r1,[sp,#0x31]
;;;320    	pLayerCfg.Backcolor.Blue=(u8)bkcolor&0X000000FF;        //背景颜色蓝色部分
00005c  b2e0              UXTB     r0,r4
00005e  f88d0030          STRB     r0,[sp,#0x30]
;;;321    	HAL_LTDC_ConfigLayer(&LTDC_Handler,&pLayerCfg,layerx);   //设置所选中的层
000062  462a              MOV      r2,r5
000064  4669              MOV      r1,sp
000066  4804              LDR      r0,|L9.120|
000068  f7fffffe          BL       HAL_LTDC_ConfigLayer
;;;322    }  
00006c  b00d              ADD      sp,sp,#0x34
00006e  e8bd8ff0          POP      {r4-r11,pc}
;;;323    
                          ENDP

000072  0000              DCW      0x0000
                  |L9.116|
                          DCD      lcdltdc
                  |L9.120|
                          DCD      LTDC_Handler

                          AREA ||i.LTDC_Layer_Switch||, CODE, READONLY, ALIGN=2

                  LTDC_Layer_Switch PROC
;;;44     //sw:1 打开;0关闭
;;;45     void LTDC_Layer_Switch(u8 layerx,u8 sw)
000000  b510              PUSH     {r4,lr}
;;;46     {
;;;47     	if(sw==1) __HAL_LTDC_LAYER_ENABLE(&LTDC_Handler,layerx);
000002  2901              CMP      r1,#1
000004  d10c              BNE      |L10.32|
000006  4a11              LDR      r2,|L10.76|
000008  6812              LDR      r2,[r2,#0]  ; LTDC_Handler
00000a  3284              ADDS     r2,r2,#0x84
00000c  01c3              LSLS     r3,r0,#7
00000e  58d2              LDR      r2,[r2,r3]
000010  f0420301          ORR      r3,r2,#1
000014  4a0d              LDR      r2,|L10.76|
000016  6812              LDR      r2,[r2,#0]  ; LTDC_Handler
000018  3284              ADDS     r2,r2,#0x84
00001a  01c4              LSLS     r4,r0,#7
00001c  5113              STR      r3,[r2,r4]
00001e  e00c              B        |L10.58|
                  |L10.32|
;;;48     	else if(sw==0) __HAL_LTDC_LAYER_DISABLE(&LTDC_Handler,layerx);
000020  b959              CBNZ     r1,|L10.58|
000022  4a0a              LDR      r2,|L10.76|
000024  6812              LDR      r2,[r2,#0]  ; LTDC_Handler
000026  3284              ADDS     r2,r2,#0x84
000028  01c3              LSLS     r3,r0,#7
00002a  58d2              LDR      r2,[r2,r3]
00002c  f0220301          BIC      r3,r2,#1
000030  4a06              LDR      r2,|L10.76|
000032  6812              LDR      r2,[r2,#0]  ; LTDC_Handler
000034  3284              ADDS     r2,r2,#0x84
000036  01c4              LSLS     r4,r0,#7
000038  5113              STR      r3,[r2,r4]
                  |L10.58|
;;;49     	__HAL_LTDC_RELOAD_CONFIG(&LTDC_Handler);
00003a  4a04              LDR      r2,|L10.76|
00003c  6812              LDR      r2,[r2,#0]  ; LTDC_Handler
00003e  6a52              LDR      r2,[r2,#0x24]
000040  f0420201          ORR      r2,r2,#1
000044  4b01              LDR      r3,|L10.76|
000046  681b              LDR      r3,[r3,#0]  ; LTDC_Handler
000048  625a              STR      r2,[r3,#0x24]
;;;50     }
00004a  bd10              POP      {r4,pc}
;;;51     
                          ENDP

                  |L10.76|
                          DCD      LTDC_Handler

                          AREA ||i.LTDC_Layer_Window_Config||, CODE, READONLY, ALIGN=2

                  LTDC_Layer_Window_Config PROC
;;;284    //width,height:宽度和高度
;;;285    void LTDC_Layer_Window_Config(u8 layerx,u16 sx,u16 sy,u16 width,u16 height)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;286    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
00000c  f8dd8018          LDR      r8,[sp,#0x18]
;;;287        HAL_LTDC_SetWindowPosition(&LTDC_Handler,sx,sy,layerx);  //设置窗口的位置
000010  4623              MOV      r3,r4
000012  463a              MOV      r2,r7
000014  4631              MOV      r1,r6
000016  4805              LDR      r0,|L11.44|
000018  f7fffffe          BL       HAL_LTDC_SetWindowPosition
;;;288        HAL_LTDC_SetWindowSize(&LTDC_Handler,width,height,layerx);//设置窗口大小    
00001c  4623              MOV      r3,r4
00001e  4642              MOV      r2,r8
000020  4629              MOV      r1,r5
000022  4802              LDR      r0,|L11.44|
000024  f7fffffe          BL       HAL_LTDC_SetWindowSize
;;;289    }
000028  e8bd81f0          POP      {r4-r8,pc}
;;;290    
                          ENDP

                  |L11.44|
                          DCD      LTDC_Handler

                          AREA ||i.LTDC_PanelID_Read||, CODE, READONLY, ALIGN=2

                  LTDC_PanelID_Read PROC
;;;333    //返回值:LCD ID:0,非法;其他值,ID;
;;;334    u16 LTDC_PanelID_Read(void)
000000  b510              PUSH     {r4,lr}
;;;335    {
000002  b086              SUB      sp,sp,#0x18
;;;336    	u8 idx=0;
000004  2400              MOVS     r4,#0
;;;337        GPIO_InitTypeDef GPIO_Initure;
;;;338        __HAL_RCC_GPIOG_CLK_ENABLE();       //使能GPIOG时钟
000006  bf00              NOP      
000008  482d              LDR      r0,|L12.192|
00000a  6800              LDR      r0,[r0,#0]
00000c  f0400040          ORR      r0,r0,#0x40
000010  492b              LDR      r1,|L12.192|
000012  6008              STR      r0,[r1,#0]
000014  4608              MOV      r0,r1
000016  6800              LDR      r0,[r0,#0]
000018  f0000040          AND      r0,r0,#0x40
00001c  9000              STR      r0,[sp,#0]
00001e  bf00              NOP      
000020  bf00              NOP      
;;;339    	__HAL_RCC_GPIOI_CLK_ENABLE();       //使能GPIOI时钟
000022  bf00              NOP      
000024  4608              MOV      r0,r1
000026  6800              LDR      r0,[r0,#0]
000028  f4407080          ORR      r0,r0,#0x100
00002c  6008              STR      r0,[r1,#0]
00002e  4608              MOV      r0,r1
000030  6800              LDR      r0,[r0,#0]
000032  f4007080          AND      r0,r0,#0x100
000036  9000              STR      r0,[sp,#0]
000038  bf00              NOP      
00003a  bf00              NOP      
;;;340        
;;;341        GPIO_Initure.Pin=GPIO_PIN_6;        //PG6
00003c  2040              MOVS     r0,#0x40
00003e  9001              STR      r0,[sp,#4]
;;;342        GPIO_Initure.Mode=GPIO_MODE_INPUT;  //输入
000040  2000              MOVS     r0,#0
000042  9002              STR      r0,[sp,#8]
;;;343        GPIO_Initure.Pull=GPIO_PULLUP;      //上拉
000044  2001              MOVS     r0,#1
000046  9003              STR      r0,[sp,#0xc]
;;;344        GPIO_Initure.Speed=GPIO_SPEED_HIGH; //高速
000048  2003              MOVS     r0,#3
00004a  9004              STR      r0,[sp,#0x10]
;;;345        HAL_GPIO_Init(GPIOG,&GPIO_Initure); //初始化
00004c  a901              ADD      r1,sp,#4
00004e  481d              LDR      r0,|L12.196|
000050  f7fffffe          BL       HAL_GPIO_Init
;;;346        
;;;347        GPIO_Initure.Pin=GPIO_PIN_2|GPIO_PIN_7; //PI2,7
000054  2084              MOVS     r0,#0x84
000056  9001              STR      r0,[sp,#4]
;;;348        HAL_GPIO_Init(GPIOI,&GPIO_Initure);     //初始化
000058  a901              ADD      r1,sp,#4
00005a  481b              LDR      r0,|L12.200|
00005c  f7fffffe          BL       HAL_GPIO_Init
;;;349        
;;;350        idx=(u8)HAL_GPIO_ReadPin(GPIOG,GPIO_PIN_6); //读取M0
000060  2140              MOVS     r1,#0x40
000062  4818              LDR      r0,|L12.196|
000064  f7fffffe          BL       HAL_GPIO_ReadPin
000068  4604              MOV      r4,r0
;;;351        idx|=(u8)HAL_GPIO_ReadPin(GPIOI,GPIO_PIN_2)<<1;//读取M1
00006a  2104              MOVS     r1,#4
00006c  4816              LDR      r0,|L12.200|
00006e  f7fffffe          BL       HAL_GPIO_ReadPin
000072  ea440040          ORR      r0,r4,r0,LSL #1
000076  b2c4              UXTB     r4,r0
;;;352        idx|=(u8)HAL_GPIO_ReadPin(GPIOI,GPIO_PIN_7)<<2;//读取M2
000078  2180              MOVS     r1,#0x80
00007a  4813              LDR      r0,|L12.200|
00007c  f7fffffe          BL       HAL_GPIO_ReadPin
000080  ea440080          ORR      r0,r4,r0,LSL #2
000084  b2c4              UXTB     r4,r0
;;;353    	switch(idx)
000086  2c06              CMP      r4,#6
000088  d217              BCS      |L12.186|
00008a  e8dff004          TBB      [pc,r4]
00008e  0307              DCB      0x03,0x07
000090  0a0d1013          DCB      0x0a,0x0d,0x10,0x13
;;;354    	{
;;;355    		case 0:return 0X4342;		//4.3寸屏,480*272分辨率
000094  f2443042          MOV      r0,#0x4342
                  |L12.152|
;;;356    		case 1:return 0X7084;		//7寸屏,800*480分辨率
;;;357    		case 2:return 0X7016;		//7寸屏,1024*600分辨率
;;;358    		case 3:return 0X7018;		//7寸屏,1280*800分辨率
;;;359    		case 4:return 0X8016; 		//8寸屏,1024*600分辨率
;;;360    		case 5:return 0X1018; 		//10.1寸屏,1280*800分辨率
;;;361    		default:return 0;
;;;362    	}
;;;363    }
000098  b006              ADD      sp,sp,#0x18
00009a  bd10              POP      {r4,pc}
00009c  f2470084          MOV      r0,#0x7084            ;356
0000a0  e7fa              B        |L12.152|
0000a2  f2470016          MOV      r0,#0x7016            ;357
0000a6  e7f7              B        |L12.152|
0000a8  f2470018          MOV      r0,#0x7018            ;358
0000ac  e7f4              B        |L12.152|
0000ae  f2480016          MOV      r0,#0x8016            ;359
0000b2  e7f1              B        |L12.152|
0000b4  f2410018          MOV      r0,#0x1018            ;360
0000b8  e7ee              B        |L12.152|
                  |L12.186|
0000ba  2000              MOVS     r0,#0                 ;361
0000bc  e7ec              B        |L12.152|
;;;364    
                          ENDP

0000be  0000              DCW      0x0000
                  |L12.192|
                          DCD      0x40023830
                  |L12.196|
                          DCD      0x40021800
                  |L12.200|
                          DCD      0x40022000

                          AREA ||i.LTDC_Read_Point||, CODE, READONLY, ALIGN=2

                  LTDC_Read_Point PROC
;;;100    //返回值:颜色值
;;;101    u32 LTDC_Read_Point(u16 x,u16 y)
000000  b510              PUSH     {r4,lr}
;;;102    { 
000002  4602              MOV      r2,r0
;;;103    #if LCD_PIXFORMAT==LCD_PIXFORMAT_ARGB8888||LCD_PIXFORMAT==LCD_PIXFORMAT_RGB888
;;;104    	if(lcdltdc.dir)	//横屏
;;;105    	{
;;;106    		return *(u32*)((u32)ltdc_framebuf[lcdltdc.activelayer]+lcdltdc.pixsize*(lcdltdc.pwidth*y+x));
;;;107    	}else 			//竖屏
;;;108    	{
;;;109    		return *(u32*)((u32)ltdc_framebuf[lcdltdc.activelayer]+lcdltdc.pixsize*(lcdltdc.pwidth*(lcdltdc.pheight-x-1)+y)); 
;;;110    	}
;;;111    #else
;;;112    	if(lcdltdc.dir)	//横屏
000004  4810              LDR      r0,|L13.72|
000006  7d40              LDRB     r0,[r0,#0x15]  ; lcdltdc
000008  b168              CBZ      r0,|L13.38|
;;;113    	{
;;;114    		return *(u16*)((u32)ltdc_framebuf[lcdltdc.activelayer]+lcdltdc.pixsize*(lcdltdc.pwidth*y+x));
00000a  480f              LDR      r0,|L13.72|
00000c  69c0              LDR      r0,[r0,#0x1c]  ; lcdltdc
00000e  4b0e              LDR      r3,|L13.72|
000010  681b              LDR      r3,[r3,#0]  ; lcdltdc
000012  fb032301          MLA      r3,r3,r1,r2
000016  4358              MULS     r0,r3,r0
000018  4b0b              LDR      r3,|L13.72|
00001a  7d1b              LDRB     r3,[r3,#0x14]  ; lcdltdc
00001c  4c0b              LDR      r4,|L13.76|
00001e  f8543023          LDR      r3,[r4,r3,LSL #2]
000022  5a18              LDRH     r0,[r3,r0]
                  |L13.36|
;;;115    	}else 			//竖屏
;;;116    	{
;;;117    		return *(u16*)((u32)ltdc_framebuf[lcdltdc.activelayer]+lcdltdc.pixsize*(lcdltdc.pwidth*(lcdltdc.pheight-x-1)+y)); 
;;;118    	}
;;;119    #endif 
;;;120    }
000024  bd10              POP      {r4,pc}
                  |L13.38|
000026  4808              LDR      r0,|L13.72|
000028  6803              LDR      r3,[r0,#0]            ;117  ; lcdltdc
00002a  6840              LDR      r0,[r0,#4]            ;117  ; lcdltdc
00002c  1a80              SUBS     r0,r0,r2              ;117
00002e  1e40              SUBS     r0,r0,#1              ;117
000030  fb031000          MLA      r0,r3,r0,r1           ;117
000034  4b04              LDR      r3,|L13.72|
000036  69db              LDR      r3,[r3,#0x1c]         ;117  ; lcdltdc
000038  4358              MULS     r0,r3,r0              ;117
00003a  4b03              LDR      r3,|L13.72|
00003c  7d1b              LDRB     r3,[r3,#0x14]         ;117  ; lcdltdc
00003e  4c03              LDR      r4,|L13.76|
000040  f8543023          LDR      r3,[r4,r3,LSL #2]     ;117
000044  5a18              LDRH     r0,[r3,r0]            ;117
000046  e7ed              B        |L13.36|
;;;121    
                          ENDP

                  |L13.72|
                          DCD      lcdltdc
                  |L13.76|
                          DCD      ltdc_framebuf

                          AREA ||i.LTDC_Select_Layer||, CODE, READONLY, ALIGN=2

                  LTDC_Select_Layer PROC
;;;53     //layerx:层号;0,第一层;1,第二层;
;;;54     void LTDC_Select_Layer(u8 layerx)
000000  4901              LDR      r1,|L14.8|
;;;55     {
;;;56     	lcdltdc.activelayer=layerx;
000002  7508              STRB     r0,[r1,#0x14]
;;;57     }
000004  4770              BX       lr
;;;58     
                          ENDP

000006  0000              DCW      0x0000
                  |L14.8|
                          DCD      lcdltdc

                          AREA ||i.LTDC_Switch||, CODE, READONLY, ALIGN=2

                  LTDC_Switch PROC
;;;35     //lcd_switch:1 打开,0，关闭
;;;36     void LTDC_Switch(u8 sw)
000000  2801              CMP      r0,#1
;;;37     {
;;;38     	if(sw==1) __HAL_LTDC_ENABLE(&LTDC_Handler);
000002  d108              BNE      |L15.22|
000004  4909              LDR      r1,|L15.44|
000006  6809              LDR      r1,[r1,#0]  ; LTDC_Handler
000008  6989              LDR      r1,[r1,#0x18]
00000a  f0410101          ORR      r1,r1,#1
00000e  4a07              LDR      r2,|L15.44|
000010  6812              LDR      r2,[r2,#0]  ; LTDC_Handler
000012  6191              STR      r1,[r2,#0x18]
000014  e008              B        |L15.40|
                  |L15.22|
;;;39     	else if(sw==0)__HAL_LTDC_DISABLE(&LTDC_Handler);
000016  b938              CBNZ     r0,|L15.40|
000018  4904              LDR      r1,|L15.44|
00001a  6809              LDR      r1,[r1,#0]  ; LTDC_Handler
00001c  6989              LDR      r1,[r1,#0x18]
00001e  f0210101          BIC      r1,r1,#1
000022  4a02              LDR      r2,|L15.44|
000024  6812              LDR      r2,[r2,#0]  ; LTDC_Handler
000026  6191              STR      r1,[r2,#0x18]
                  |L15.40|
;;;40     }
000028  4770              BX       lr
;;;41     
                          ENDP

00002a  0000              DCW      0x0000
                  |L15.44|
                          DCD      LTDC_Handler

                          AREA ||.ARM.__AT_0xC0000000||, DATA, NOINIT, ALIGN=1

                  ltdc_lcd_framebuf
                          %        2048000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  LTDC_Handler
                          %        168
                  DMA2D_Handler
                          %        88
                  lcdltdc
                          %        32

                          AREA ||.data||, DATA, ALIGN=2

                  ltdc_framebuf
                          %        8

;*** Start embedded assembler ***

#line 1 "..\\HARDWARE\\LCD\\ltdc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_ltdc_c_2f5cfd20____REV16|
#line 388 "..\\CORE\\cmsis_armcc.h"
|__asm___6_ltdc_c_2f5cfd20____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_ltdc_c_2f5cfd20____REVSH|
#line 402
|__asm___6_ltdc_c_2f5cfd20____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_ltdc_c_2f5cfd20____RRX|
#line 587
|__asm___6_ltdc_c_2f5cfd20____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
