; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\main.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\main.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\OBJ -I..\USER -I..\HALLIB\STM32F7xx_HAL_Driver\Inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\SDRAM -I..\HARDWARE\IIC -I..\HARDWARE\24CXX -I..\HARDWARE\MPU9250 -I..\HARDWARE\DHT11 -I..\HARDWARE\MPU -I..\USMART -I..\DMP\driver\eMPL -I..\DMP\driver\include -I..\DMP\driver\stm32L -I..\DMP\eMPL-hal -I..\DMP\mllite -I..\DMP\mpl -I..\UCOSIII -I..\UCOSIII\UCOS-BSP -I..\UCOSIII\UCOS-CONFIG -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\uC-CPU\ARM-Cortex-M4\RealView -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-CPU -I..\HARDWARE\MY_FUNCTION -I..\USER -I..\HARDWARE\CRC -I..\HARDWARE\DMA -I..\HARDWARE\HEART_BEAT -I..\HARDWARE\RECEIVE_ANALYZE -I..\HARDWARE\FEED_BACK -I..\HARDWARE\DATA -I"D:\1111111\32F4\Slam car\实验35 MPU9250九轴传感器实验\USER\RTE" -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0 -IF:\Keil_v5\ARM\CMSIS\Include -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__UVISION_VERSION=514 -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=..\obj\main.crf main.c]
                          THUMB

                          AREA ||i.feed_back_task||, CODE, READONLY, ALIGN=1

                  feed_back_task PROC
;;;347    
;;;348    void feed_back_task(void *p_arg)
000000  b50e              PUSH     {r1-r3,lr}
;;;349    {
;;;350        OS_ERR err;
;;;351    	
;;;352    	while(1)
000002  e00b              B        |L1.28|
                  |L1.4|
;;;353    	{
;;;354    	      
;;;355    		feed_back_send();
000004  f7fffffe          BL       feed_back_send
;;;356    	    OSTimeDlyHMSM(0,0,0,10,OS_OPT_TIME_PERIODIC,&err);   //延时10ms
000008  a802              ADD      r0,sp,#8
00000a  2108              MOVS     r1,#8
00000c  230a              MOVS     r3,#0xa
00000e  2200              MOVS     r2,#0
000010  e9cd1000          STRD     r1,r0,[sp,#0]
000014  4611              MOV      r1,r2
000016  4610              MOV      r0,r2
000018  f7fffffe          BL       OSTimeDlyHMSM
                  |L1.28|
00001c  e7f2              B        |L1.4|
;;;357    	}
;;;358    }
;;;359    
                          ENDP


                          AREA ||i.heart_beat_task||, CODE, READONLY, ALIGN=2

                  heart_beat_task PROC
;;;286    //任务1的任务函数
;;;287    void heart_beat_task(void *p_arg)
000000  b50e              PUSH     {r1-r3,lr}
;;;288    {
;;;289    
;;;290    	
;;;291    	OS_ERR err;
;;;292    	
;;;293    	OSTmrStart(&tmr1,&err);	//开启定时器1
000002  a902              ADD      r1,sp,#8
000004  4810              LDR      r0,|L2.72|
000006  f7fffffe          BL       OSTmrStart
;;;294    	
;;;295    	heart_beat[5]=h_times.day=2;
00000a  2002              MOVS     r0,#2
00000c  490f              LDR      r1,|L2.76|
00000e  8088              STRH     r0,[r1,#4]
000010  490f              LDR      r1,|L2.80|
000012  8148              STRH     r0,[r1,#0xa]
;;;296    	heart_beat[4]=h_times.month=10;
000014  200a              MOVS     r0,#0xa
000016  490d              LDR      r1,|L2.76|
000018  8048              STRH     r0,[r1,#2]
00001a  490d              LDR      r1,|L2.80|
00001c  8108              STRH     r0,[r1,#8]
;;;297    	heart_beat[3]=h_times.year=2018;
00001e  f24070e2          MOV      r0,#0x7e2
000022  490a              LDR      r1,|L2.76|
000024  8008              STRH     r0,[r1,#0]
000026  490a              LDR      r1,|L2.80|
000028  80c8              STRH     r0,[r1,#6]
;;;298    	
;;;299    	
;;;300    	while(1)
00002a  e00b              B        |L2.68|
                  |L2.44|
;;;301    	{	
;;;302    		heart_run();
00002c  f7fffffe          BL       heart_run
;;;303    		
;;;304    		OSTimeDlyHMSM(0,0,0,10,OS_OPT_TIME_PERIODIC,&err);   //延时10ms
000030  a802              ADD      r0,sp,#8
000032  2108              MOVS     r1,#8
000034  230a              MOVS     r3,#0xa
000036  2200              MOVS     r2,#0
000038  e9cd1000          STRD     r1,r0,[sp,#0]
00003c  4611              MOV      r1,r2
00003e  4610              MOV      r0,r2
000040  f7fffffe          BL       OSTimeDlyHMSM
                  |L2.68|
000044  e7f2              B        |L2.44|
;;;305    	}
;;;306    }
;;;307    
                          ENDP

000046  0000              DCW      0x0000
                  |L2.72|
                          DCD      tmr1
                  |L2.76|
                          DCD      h_times
                  |L2.80|
                          DCD      heart_beat

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;114    
;;;115    int main(void)
000000  b08a              SUB      sp,sp,#0x28
;;;116    {
;;;117        OS_ERR err;
;;;118    	CPU_SR_ALLOC();
000002  2400              MOVS     r4,#0
;;;119        
;;;120        Write_Through();                //透写
000004  2004              MOVS     r0,#4
000006  4977              LDR      r1,|L3.484|
000008  6008              STR      r0,[r1,#0]
;;;121    	MPU_Memory_Protection();		//保护相关存储区域
00000a  f7fffffe          BL       MPU_Memory_Protection
;;;122        Cache_Enable();                 //打开L1-Cache
00000e  f7fffffe          BL       Cache_Enable
;;;123        HAL_Init();				        //初始化HAL库
000012  f7fffffe          BL       HAL_Init
;;;124        Stm32_Clock_Init(432,25,2,9);   //设置时钟,216Mhz 
000016  2309              MOVS     r3,#9
000018  2202              MOVS     r2,#2
00001a  2119              MOVS     r1,#0x19
00001c  f44f70d8          MOV      r0,#0x1b0
000020  f7fffffe          BL       Stm32_Clock_Init
;;;125        delay_init(216);                //延时初始化
000024  20d8              MOVS     r0,#0xd8
000026  f7fffffe          BL       delay_init
;;;126    	uart_init(115200);		        //串口初始化
00002a  f44f30e1          MOV      r0,#0x1c200
00002e  f7fffffe          BL       uart_init
;;;127        LED_Init();                     //初始化LED
000032  f7fffffe          BL       LED_Init
;;;128        KEY_Init();                     //初始化按键
000036  f7fffffe          BL       KEY_Init
;;;129        SDRAM_Init();                   //初始化SDRAM
00003a  f7fffffe          BL       SDRAM_Init
;;;130    	LCD_Init();			            //初始化LCD
00003e  f7fffffe          BL       LCD_Init
;;;131    	MPU9250_Init();             	//初始化MPU9250
000042  f7fffffe          BL       MPU9250_Init
;;;132    	MYDMA_Config(DMA2_Stream7,DMA_CHANNEL_4);//初始化DMA
000046  f04f6100          MOV      r1,#0x8000000
00004a  4867              LDR      r0,|L3.488|
00004c  f7fffffe          BL       MYDMA_Config
;;;133    	
;;;134    
;;;135    	
;;;136    	POINT_COLOR=RED;
000050  f44f4078          MOV      r0,#0xf800
000054  4965              LDR      r1,|L3.492|
000056  6008              STR      r0,[r1,#0]  ; POINT_COLOR
;;;137    	LCD_ShowString(30,50,200,16,16,"Apollo STM32F4/F7"); 
000058  a065              ADR      r0,|L3.496|
00005a  2110              MOVS     r1,#0x10
00005c  460b              MOV      r3,r1
00005e  22c8              MOVS     r2,#0xc8
000060  e9cd1000          STRD     r1,r0,[sp,#0]
000064  2132              MOVS     r1,#0x32
000066  201e              MOVS     r0,#0x1e
000068  f7fffffe          BL       LCD_ShowString
;;;138    	LCD_ShowString(30,70,200,16,16,"MPU9250 TEST");	
00006c  a065              ADR      r0,|L3.516|
00006e  2110              MOVS     r1,#0x10
000070  460b              MOV      r3,r1
000072  22c8              MOVS     r2,#0xc8
000074  e9cd1000          STRD     r1,r0,[sp,#0]
000078  2146              MOVS     r1,#0x46
00007a  201e              MOVS     r0,#0x1e
00007c  f7fffffe          BL       LCD_ShowString
;;;139    	LCD_ShowString(30,90,200,16,16,"ATOM@ALIENTEK");
000080  a064              ADR      r0,|L3.532|
000082  2110              MOVS     r1,#0x10
000084  460b              MOV      r3,r1
000086  22c8              MOVS     r2,#0xc8
000088  e9cd1000          STRD     r1,r0,[sp,#0]
00008c  215a              MOVS     r1,#0x5a
00008e  201e              MOVS     r0,#0x1e
000090  f7fffffe          BL       LCD_ShowString
;;;140    	LCD_ShowString(30,110,200,16,16,"2016/7/19");	 		
000094  a063              ADR      r0,|L3.548|
000096  2110              MOVS     r1,#0x10
000098  460b              MOV      r3,r1
00009a  22c8              MOVS     r2,#0xc8
00009c  e9cd1000          STRD     r1,r0,[sp,#0]
0000a0  216e              MOVS     r1,#0x6e
0000a2  201e              MOVS     r0,#0x1e
0000a4  f7fffffe          BL       LCD_ShowString
;;;141     	 
;;;142        while(mpu_dmp_init())         
0000a8  e01c              B        |L3.228|
                  |L3.170|
;;;143        {   
;;;144    		LCD_ShowString(30,130,200,16,16,"MPU9250 Error");
0000aa  a061              ADR      r0,|L3.560|
0000ac  2110              MOVS     r1,#0x10
0000ae  460b              MOV      r3,r1
0000b0  22c8              MOVS     r2,#0xc8
0000b2  e9cd1000          STRD     r1,r0,[sp,#0]
0000b6  2182              MOVS     r1,#0x82
0000b8  201e              MOVS     r0,#0x1e
0000ba  f7fffffe          BL       LCD_ShowString
;;;145    		delay_ms(200);
0000be  20c8              MOVS     r0,#0xc8
0000c0  f7fffffe          BL       delay_ms
;;;146    		LCD_Fill(30,130,239,130+16,WHITE);
0000c4  f64f70ff          MOV      r0,#0xffff
0000c8  2392              MOVS     r3,#0x92
0000ca  22ef              MOVS     r2,#0xef
0000cc  2182              MOVS     r1,#0x82
0000ce  9000              STR      r0,[sp,#0]
0000d0  201e              MOVS     r0,#0x1e
0000d2  f7fffffe          BL       LCD_Fill
;;;147     		delay_ms(200);
0000d6  20c8              MOVS     r0,#0xc8
0000d8  f7fffffe          BL       delay_ms
;;;148    		LED0_Toggle;//DS0闪烁 
0000dc  2102              MOVS     r1,#2
0000de  4858              LDR      r0,|L3.576|
0000e0  f7fffffe          BL       HAL_GPIO_TogglePin
                  |L3.228|
0000e4  f7fffffe          BL       mpu_dmp_init
0000e8  2800              CMP      r0,#0                 ;142
0000ea  d1de              BNE      |L3.170|
;;;149        }
;;;150    	
;;;151        LCD_ShowString(30,130,200,16,16,"MPU9250 OK");
0000ec  a055              ADR      r0,|L3.580|
0000ee  2110              MOVS     r1,#0x10
0000f0  460b              MOV      r3,r1
0000f2  22c8              MOVS     r2,#0xc8
0000f4  e9cd1000          STRD     r1,r0,[sp,#0]
0000f8  2182              MOVS     r1,#0x82
0000fa  201e              MOVS     r0,#0x1e
0000fc  f7fffffe          BL       LCD_ShowString
;;;152    	LCD_ShowString(30,150,200,16,16,"KEY0:UPLOAD ON/OFF");
000100  a053              ADR      r0,|L3.592|
000102  2110              MOVS     r1,#0x10
000104  460b              MOV      r3,r1
000106  22c8              MOVS     r2,#0xc8
000108  e9cd1000          STRD     r1,r0,[sp,#0]
00010c  2196              MOVS     r1,#0x96
00010e  201e              MOVS     r0,#0x1e
000110  f7fffffe          BL       LCD_ShowString
;;;153        POINT_COLOR=BLUE;     //设置字体为蓝色
000114  201f              MOVS     r0,#0x1f
000116  4935              LDR      r1,|L3.492|
000118  6008              STR      r0,[r1,#0]  ; POINT_COLOR
;;;154        LCD_ShowString(30,170,200,16,16,"UPLOAD ON ");	 
00011a  a052              ADR      r0,|L3.612|
00011c  2110              MOVS     r1,#0x10
00011e  460b              MOV      r3,r1
000120  22c8              MOVS     r2,#0xc8
000122  e9cd1000          STRD     r1,r0,[sp,#0]
000126  21aa              MOVS     r1,#0xaa
000128  201e              MOVS     r0,#0x1e
00012a  f7fffffe          BL       LCD_ShowString
;;;155     	LCD_ShowString(30,200,200,16,16," Temp:    . C");	
00012e  a050              ADR      r0,|L3.624|
000130  2110              MOVS     r1,#0x10
000132  460b              MOV      r3,r1
000134  22c8              MOVS     r2,#0xc8
000136  e9cd1000          STRD     r1,r0,[sp,#0]
00013a  4611              MOV      r1,r2
00013c  201e              MOVS     r0,#0x1e
00013e  f7fffffe          BL       LCD_ShowString
;;;156     	LCD_ShowString(30,220,200,16,16,"Pitch:    . C");	
000142  a04f              ADR      r0,|L3.640|
000144  2110              MOVS     r1,#0x10
000146  460b              MOV      r3,r1
000148  22c8              MOVS     r2,#0xc8
00014a  e9cd1000          STRD     r1,r0,[sp,#0]
00014e  21dc              MOVS     r1,#0xdc
000150  201e              MOVS     r0,#0x1e
000152  f7fffffe          BL       LCD_ShowString
;;;157     	LCD_ShowString(30,240,200,16,16," Roll:    . C");	 
000156  a04e              ADR      r0,|L3.656|
000158  2110              MOVS     r1,#0x10
00015a  460b              MOV      r3,r1
00015c  22c8              MOVS     r2,#0xc8
00015e  e9cd1000          STRD     r1,r0,[sp,#0]
000162  21f0              MOVS     r1,#0xf0
000164  201e              MOVS     r0,#0x1e
000166  f7fffffe          BL       LCD_ShowString
;;;158     	LCD_ShowString(30,260,200,16,16," Yaw :    . C");
00016a  a04d              ADR      r0,|L3.672|
00016c  2110              MOVS     r1,#0x10
00016e  460b              MOV      r3,r1
000170  22c8              MOVS     r2,#0xc8
000172  e9cd1000          STRD     r1,r0,[sp,#0]
000176  f44f7182          MOV      r1,#0x104
00017a  201e              MOVS     r0,#0x1e
00017c  f7fffffe          BL       LCD_ShowString
;;;159    	
;;;160    	
;;;161    	
;;;162    	OSInit(&err);		    	        //初始化UCOSIII
000180  a809              ADD      r0,sp,#0x24
000182  f7fffffe          BL       OSInit
;;;163    	OS_CRITICAL_ENTER();	            //进入临界区	
000186  bf00              NOP      
000188  bf00              NOP      
00018a  f7fffffe          BL       CPU_SR_Save
00018e  4604              MOV      r4,r0
000190  bf00              NOP      
000192  f7fffffe          BL       CPU_IntDisMeasStart
000196  bf00              NOP      
;;;164    	
;;;165    	//创建开始任务
;;;166    	OSTaskCreate((OS_TCB 	* )&StartTaskTCB,		//任务控制块
000198  a809              ADD      r0,sp,#0x24
00019a  2107              MOVS     r1,#7
00019c  2200              MOVS     r2,#0
00019e  9205              STR      r2,[sp,#0x14]
0001a0  e9cd2106          STRD     r2,r1,[sp,#0x18]
0001a4  9008              STR      r0,[sp,#0x20]
0001a6  4610              MOV      r0,r2
0001a8  2180              MOVS     r1,#0x80
0001aa  220c              MOVS     r2,#0xc
0001ac  4b40              LDR      r3,|L3.688|
0001ae  e9cd3201          STRD     r3,r2,[sp,#4]
0001b2  e9cd1003          STRD     r1,r0,[sp,#0xc]
0001b6  2003              MOVS     r0,#3
0001b8  2300              MOVS     r3,#0
0001ba  4a3e              LDR      r2,|L3.692|
0001bc  a13e              ADR      r1,|L3.696|
0001be  9000              STR      r0,[sp,#0]
0001c0  4840              LDR      r0,|L3.708|
0001c2  f7fffffe          BL       OSTaskCreate
;;;167    				 (CPU_CHAR	* )"start task", 		//任务名字
;;;168                     (OS_TASK_PTR )start_task, 			//任务函数
;;;169                     (void		* )0,					//传递给任务函数的参数
;;;170                     (OS_PRIO	  )START_TASK_PRIO,     //任务优先级
;;;171                     (CPU_STK   * )&START_TASK_STK[0],	//任务堆栈基地址
;;;172                     (CPU_STK_SIZE)START_STK_SIZE/10,	//任务堆栈深度限位
;;;173                     (CPU_STK_SIZE)START_STK_SIZE,		//任务堆栈大小
;;;174                     (OS_MSG_QTY  )0,					//任务内部消息队列能够接收的最大消息数目,为0时禁止接收消息
;;;175                     (OS_TICK	  )0,					//当使能时间片轮转时的时间片长度，为0时为默认长度，
;;;176                     (void   	* )0,					//用户补充的存储区
;;;177                     (OS_OPT      )OS_OPT_TASK_STK_CHK|OS_OPT_TASK_STK_CLR|OS_OPT_TASK_SAVE_FP, //任务选项,为了保险起见，所有任务都保存浮点寄存器的值
;;;178                     (OS_ERR 	* )&err);				//存放该函数错误时的返回值 
;;;179    	OS_CRITICAL_EXIT();	//退出临界区	 
0001c6  bf00              NOP      
0001c8  f7fffffe          BL       CPU_IntDisMeasStop
0001cc  bf00              NOP      
0001ce  4620              MOV      r0,r4
0001d0  f7fffffe          BL       CPU_SR_Restore
0001d4  bf00              NOP      
0001d6  bf00              NOP      
;;;180    	OSStart(&err);      //开启UCOSIII
0001d8  a809              ADD      r0,sp,#0x24
0001da  f7fffffe          BL       OSStart
;;;181        while(1)
0001de  bf00              NOP      
                  |L3.480|
0001e0  e7fe              B        |L3.480|
;;;182        {
;;;183    	} 
;;;184    }
;;;185    
                          ENDP

0001e2  0000              DCW      0x0000
                  |L3.484|
                          DCD      0xe000ef9c
                  |L3.488|
                          DCD      0x400264b8
                  |L3.492|
                          DCD      POINT_COLOR
                  |L3.496|
0001f0  41706f6c          DCB      "Apollo STM32F4/F7",0
0001f4  6c6f2053
0001f8  544d3332
0001fc  46342f46
000200  3700    
000202  00                DCB      0
000203  00                DCB      0
                  |L3.516|
000204  4d505539          DCB      "MPU9250 TEST",0
000208  32353020
00020c  54455354
000210  00      
000211  00                DCB      0
000212  00                DCB      0
000213  00                DCB      0
                  |L3.532|
000214  41544f4d          DCB      "ATOM@ALIENTEK",0
000218  40414c49
00021c  454e5445
000220  4b00    
000222  00                DCB      0
000223  00                DCB      0
                  |L3.548|
000224  32303136          DCB      "2016/7/19",0
000228  2f372f31
00022c  3900    
00022e  00                DCB      0
00022f  00                DCB      0
                  |L3.560|
000230  4d505539          DCB      "MPU9250 Error",0
000234  32353020
000238  4572726f
00023c  7200    
00023e  00                DCB      0
00023f  00                DCB      0
                  |L3.576|
                          DCD      0x40020400
                  |L3.580|
000244  4d505539          DCB      "MPU9250 OK",0
000248  32353020
00024c  4f4b00  
00024f  00                DCB      0
                  |L3.592|
000250  4b455930          DCB      "KEY0:UPLOAD ON/OFF",0
000254  3a55504c
000258  4f414420
00025c  4f4e2f4f
000260  464600  
000263  00                DCB      0
                  |L3.612|
000264  55504c4f          DCB      "UPLOAD ON ",0
000268  4144204f
00026c  4e2000  
00026f  00                DCB      0
                  |L3.624|
000270  2054656d          DCB      " Temp:    . C",0
000274  703a2020
000278  20202e20
00027c  4300    
00027e  00                DCB      0
00027f  00                DCB      0
                  |L3.640|
000280  50697463          DCB      "Pitch:    . C",0
000284  683a2020
000288  20202e20
00028c  4300    
00028e  00                DCB      0
00028f  00                DCB      0
                  |L3.656|
000290  20526f6c          DCB      " Roll:    . C",0
000294  6c3a2020
000298  20202e20
00029c  4300    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L3.672|
0002a0  20596177          DCB      " Yaw :    . C",0
0002a4  203a2020
0002a8  20202e20
0002ac  4300    
0002ae  00                DCB      0
0002af  00                DCB      0
                  |L3.688|
                          DCD      START_TASK_STK
                  |L3.692|
                          DCD      start_task
                  |L3.696|
0002b8  73746172          DCB      "start task",0
0002bc  74207461
0002c0  736b00  
0002c3  00                DCB      0
                  |L3.708|
                          DCD      StartTaskTCB

                          AREA ||i.mpu9250_send_data||, CODE, READONLY, ALIGN=1

                  mpu9250_send_data PROC
;;;430    //gyrox,gyroy,gyroz:x,y,z三个方向上面的陀螺仪值 
;;;431    void mpu9250_send_data(short aacx,short aacy,short aacz,short gyrox,short gyroy,short gyroz)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;432    {
000004  b085              SUB      sp,sp,#0x14
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4617              MOV      r7,r2
00000c  461e              MOV      r6,r3
00000e  e9dd890c          LDRD     r8,r9,[sp,#0x30]
;;;433    	u8 tbuf[18]; 
;;;434    	tbuf[0]=(aacx>>8)&0XFF;
000012  0a20              LSRS     r0,r4,#8
000014  f88d0000          STRB     r0,[sp,#0]
;;;435    	tbuf[1]=aacx&0XFF;
000018  b2e0              UXTB     r0,r4
00001a  f88d0001          STRB     r0,[sp,#1]
;;;436    	tbuf[2]=(aacy>>8)&0XFF;
00001e  0a28              LSRS     r0,r5,#8
000020  f88d0002          STRB     r0,[sp,#2]
;;;437    	tbuf[3]=aacy&0XFF;
000024  b2e8              UXTB     r0,r5
000026  f88d0003          STRB     r0,[sp,#3]
;;;438    	tbuf[4]=(aacz>>8)&0XFF;
00002a  0a38              LSRS     r0,r7,#8
00002c  f88d0004          STRB     r0,[sp,#4]
;;;439    	tbuf[5]=aacz&0XFF; 
000030  b2f8              UXTB     r0,r7
000032  f88d0005          STRB     r0,[sp,#5]
;;;440    	tbuf[6]=(gyrox>>8)&0XFF;
000036  0a30              LSRS     r0,r6,#8
000038  f88d0006          STRB     r0,[sp,#6]
;;;441    	tbuf[7]=gyrox&0XFF;
00003c  b2f0              UXTB     r0,r6
00003e  f88d0007          STRB     r0,[sp,#7]
;;;442    	tbuf[8]=(gyroy>>8)&0XFF;
000042  ea4f2018          LSR      r0,r8,#8
000046  f88d0008          STRB     r0,[sp,#8]
;;;443    	tbuf[9]=gyroy&0XFF;
00004a  f00800ff          AND      r0,r8,#0xff
00004e  f88d0009          STRB     r0,[sp,#9]
;;;444    	tbuf[10]=(gyroz>>8)&0XFF;
000052  ea4f2019          LSR      r0,r9,#8
000056  f88d000a          STRB     r0,[sp,#0xa]
;;;445    	tbuf[11]=gyroz&0XFF;
00005a  f00900ff          AND      r0,r9,#0xff
00005e  f88d000b          STRB     r0,[sp,#0xb]
;;;446    	tbuf[12]=0;//因为开启MPL后,无法直接读取磁力计数据,所以这里直接屏蔽掉.用0替代.
000062  2000              MOVS     r0,#0
000064  f88d000c          STRB     r0,[sp,#0xc]
;;;447    	tbuf[13]=0;
000068  f88d000d          STRB     r0,[sp,#0xd]
;;;448    	tbuf[14]=0;
00006c  f88d000e          STRB     r0,[sp,#0xe]
;;;449    	tbuf[15]=0;
000070  f88d000f          STRB     r0,[sp,#0xf]
;;;450    	tbuf[16]=0;
000074  f88d0010          STRB     r0,[sp,#0x10]
;;;451    	tbuf[17]=0;
000078  f88d0011          STRB     r0,[sp,#0x11]
;;;452    	usart1_niming_report(0X02,tbuf,18);//传感器帧,0X02
00007c  2212              MOVS     r2,#0x12
00007e  4669              MOV      r1,sp
000080  2002              MOVS     r0,#2
000082  f7fffffe          BL       usart1_niming_report
;;;453    }	
000086  b005              ADD      sp,sp,#0x14
000088  e8bd83f0          POP      {r4-r9,pc}
;;;454    //通过串口1上报结算后的姿态数据给电脑(状态帧)
                          ENDP


                          AREA ||i.mpu9250_task||, CODE, READONLY, ALIGN=1

                  mpu9250_task PROC
;;;330    
;;;331    void mpu9250_task(void *p_arg)
000000  b50e              PUSH     {r1-r3,lr}
;;;332    {
;;;333         OS_ERR err;
;;;334    	
;;;335    //	OSTaskResume((OS_TCB*)0,&err);
;;;336    	
;;;337    
;;;338    	
;;;339    	while(1)
000002  e00b              B        |L5.28|
                  |L5.4|
;;;340    	{
;;;341    	      
;;;342    		mpu9250_run();
000004  f7fffffe          BL       mpu9250_run
;;;343    	    OSTimeDlyHMSM(0,0,0,10,OS_OPT_TIME_PERIODIC,&err);   //延时10ms
000008  a802              ADD      r0,sp,#8
00000a  2108              MOVS     r1,#8
00000c  230a              MOVS     r3,#0xa
00000e  2200              MOVS     r2,#0
000010  e9cd1000          STRD     r1,r0,[sp,#0]
000014  4611              MOV      r1,r2
000016  4610              MOV      r0,r2
000018  f7fffffe          BL       OSTimeDlyHMSM
                  |L5.28|
00001c  e7f2              B        |L5.4|
;;;344    	}
;;;345    }
;;;346    
                          ENDP


                          AREA ||i.receive_task||, CODE, READONLY, ALIGN=2

                  receive_task PROC
;;;308    
;;;309    void receive_task(void *p_arg)
000000  b50e              PUSH     {r1-r3,lr}
;;;310    {
;;;311        OS_ERR err;
;;;312        	 
;;;313    	data_package.head=0x039c;
000002  f44f7067          MOV      r0,#0x39c
000006  4909              LDR      r1,|L6.44|
000008  8008              STRH     r0,[r1,#0]
;;;314     
;;;315    	
;;;316    	
;;;317    	while(1)
00000a  e00d              B        |L6.40|
                  |L6.12|
;;;318    	{
;;;319    				   
;;;320    			re_an();  //receive and analyze
00000c  f7fffffe          BL       re_an
;;;321                data_write();   
000010  f7fffffe          BL       data_write
;;;322    			OSTimeDlyHMSM(0,0,0,10,OS_OPT_TIME_PERIODIC,&err);   //延时10ms
000014  a802              ADD      r0,sp,#8
000016  2108              MOVS     r1,#8
000018  230a              MOVS     r3,#0xa
00001a  2200              MOVS     r2,#0
00001c  e9cd1000          STRD     r1,r0,[sp,#0]
000020  4611              MOV      r1,r2
000022  4610              MOV      r0,r2
000024  f7fffffe          BL       OSTimeDlyHMSM
                  |L6.40|
000028  e7f0              B        |L6.12|
;;;323    
;;;324    		
;;;325    	}
;;;326    
;;;327    }
;;;328    
                          ENDP

00002a  0000              DCW      0x0000
                  |L6.44|
                          DCD      data_package

                          AREA ||i.start_task||, CODE, READONLY, ALIGN=2

                  start_task PROC
;;;186    //开始任务函数
;;;187    void start_task(void *p_arg)
000000  b530              PUSH     {r4,r5,lr}
;;;188    {
000002  b08b              SUB      sp,sp,#0x2c
000004  4604              MOV      r4,r0
;;;189    	OS_ERR err;
;;;190    	CPU_SR_ALLOC();
000006  2500              MOVS     r5,#0
;;;191    	p_arg = p_arg;
000008  bf00              NOP      
;;;192    	
;;;193    	CPU_Init();
00000a  f7fffffe          BL       CPU_Init
;;;194    #if OS_CFG_STAT_TASK_EN > 0u
;;;195       OSStatTaskCPUUsageInit(&err);  	//统计任务                
00000e  a80a              ADD      r0,sp,#0x28
000010  f7fffffe          BL       OSStatTaskCPUUsageInit
;;;196    #endif
;;;197    	
;;;198    #ifdef CPU_CFG_INT_DIS_MEAS_EN		//如果使能了测量中断关闭时间
;;;199        CPU_IntDisMeasMaxCurReset();	
000014  f7fffffe          BL       CPU_IntDisMeasMaxCurReset
;;;200    #endif
;;;201    	
;;;202    #if	OS_CFG_SCHED_ROUND_ROBIN_EN  //当使用时间片轮转的时候
;;;203    	  //使能时间片轮转调度功能,设置默认的时间片长度
;;;204    	OSSchedRoundRobinCfg(DEF_ENABLED,10,&err);  
;;;205    #endif	
;;;206    	
;;;207    	//创建定时器1
;;;208    	OSTmrCreate((OS_TMR		*)&tmr1,		//定时器1
000018  a80a              ADD      r0,sp,#0x28
00001a  2100              MOVS     r1,#0
00001c  4a47              LDR      r2,|L7.316|
00001e  2302              MOVS     r3,#2
000020  e9cd3200          STRD     r3,r2,[sp,#0]
000024  e9cd1002          STRD     r1,r0,[sp,#8]
000028  2364              MOVS     r3,#0x64
00002a  2214              MOVS     r2,#0x14
00002c  a144              ADR      r1,|L7.320|
00002e  4846              LDR      r0,|L7.328|
000030  f7fffffe          BL       OSTmrCreate
;;;209                    (CPU_CHAR	*)"tmr1",		//定时器名字
;;;210                    (OS_TICK	 )20,			//20*10=200ms
;;;211                    (OS_TICK	 )100,          //100*10=1000ms
;;;212                    (OS_OPT		 )OS_OPT_TMR_PERIODIC, //周期模式
;;;213                    (OS_TMR_CALLBACK_PTR)tmr1_callback,//定时器1回调函数
;;;214                    (void	    *)0,			//参数为0
;;;215                    (OS_ERR	    *)&err);		//返回的错误码					
;;;216    	//创建定时器2
;;;217    	OSTmrCreate((OS_TMR		*)&tmr2,		
000034  a80a              ADD      r0,sp,#0x28
000036  2100              MOVS     r1,#0
000038  4a44              LDR      r2,|L7.332|
00003a  2301              MOVS     r3,#1
00003c  e9cd3200          STRD     r3,r2,[sp,#0]
000040  e9cd1002          STRD     r1,r0,[sp,#8]
000044  460b              MOV      r3,r1
000046  22c8              MOVS     r2,#0xc8
000048  a141              ADR      r1,|L7.336|
00004a  4843              LDR      r0,|L7.344|
00004c  f7fffffe          BL       OSTmrCreate
;;;218                    (CPU_CHAR	*)"tmr2",		
;;;219                    (OS_TICK	 )200,			//200*10=2000ms	
;;;220                    (OS_TICK	 )0,   					
;;;221                    (OS_OPT		 )OS_OPT_TMR_ONE_SHOT, 	//单次定时器
;;;222                    (OS_TMR_CALLBACK_PTR)tmr2_callback,	//定时器2回调函数
;;;223                    (void	    *)0,			
;;;224                    (OS_ERR	    *)&err);	
;;;225    	OS_CRITICAL_ENTER();	//进入临界区
000050  bf00              NOP      
000052  bf00              NOP      
000054  f7fffffe          BL       CPU_SR_Save
000058  4605              MOV      r5,r0
00005a  bf00              NOP      
00005c  f7fffffe          BL       CPU_IntDisMeasStart
000060  bf00              NOP      
;;;226    	//创建TASK1任务
;;;227    	OSTaskCreate((OS_TCB 	* )&HEART_BEAT_TaskTCB,		
000062  a80a              ADD      r0,sp,#0x28
000064  2107              MOVS     r1,#7
000066  2200              MOVS     r2,#0
000068  9205              STR      r2,[sp,#0x14]
00006a  e9cd2106          STRD     r2,r1,[sp,#0x18]
00006e  9008              STR      r0,[sp,#0x20]
000070  4610              MOV      r0,r2
000072  2180              MOVS     r1,#0x80
000074  220c              MOVS     r2,#0xc
000076  4b39              LDR      r3,|L7.348|
000078  e9cd3201          STRD     r3,r2,[sp,#4]
00007c  e9cd1003          STRD     r1,r0,[sp,#0xc]
000080  2005              MOVS     r0,#5
000082  2300              MOVS     r3,#0
000084  4a36              LDR      r2,|L7.352|
000086  a137              ADR      r1,|L7.356|
000088  9000              STR      r0,[sp,#0]
00008a  483a              LDR      r0,|L7.372|
00008c  f7fffffe          BL       OSTaskCreate
;;;228    				 (CPU_CHAR	* )"Heat_Beat task", 		
;;;229                     (OS_TASK_PTR )heart_beat_task, 			
;;;230                     (void		* )0,					
;;;231                     (OS_PRIO	  )HEART_BEAT_TASK_PRIO,     
;;;232                     (CPU_STK   * )&HEART_BEAT_TASK_STK[0],	
;;;233                     (CPU_STK_SIZE)HEART_BEAT_STK_SIZE/10,	
;;;234                     (CPU_STK_SIZE)HEART_BEAT_STK_SIZE,		
;;;235                     (OS_MSG_QTY  )0,					
;;;236                     (OS_TICK	  )0,  					
;;;237                     (void   	* )0,					
;;;238                     (OS_OPT      )OS_OPT_TASK_STK_CHK|OS_OPT_TASK_STK_CLR|OS_OPT_TASK_SAVE_FP,
;;;239                     (OS_ERR 	* )&err);		
;;;240        //创建TASK2任务
;;;241    	OSTaskCreate((OS_TCB 	* )&RECEIVE_TaskTCB,		
000090  a80a              ADD      r0,sp,#0x28
000092  2107              MOVS     r1,#7
000094  2200              MOVS     r2,#0
000096  9205              STR      r2,[sp,#0x14]
000098  e9cd2106          STRD     r2,r1,[sp,#0x18]
00009c  9008              STR      r0,[sp,#0x20]
00009e  4610              MOV      r0,r2
0000a0  2180              MOVS     r1,#0x80
0000a2  220c              MOVS     r2,#0xc
0000a4  4b34              LDR      r3,|L7.376|
0000a6  e9cd3201          STRD     r3,r2,[sp,#4]
0000aa  e9cd1003          STRD     r1,r0,[sp,#0xc]
0000ae  2004              MOVS     r0,#4
0000b0  2300              MOVS     r3,#0
0000b2  4a32              LDR      r2,|L7.380|
0000b4  a132              ADR      r1,|L7.384|
0000b6  9000              STR      r0,[sp,#0]
0000b8  4835              LDR      r0,|L7.400|
0000ba  f7fffffe          BL       OSTaskCreate
;;;242    				 (CPU_CHAR	* )"receive task", 		
;;;243                     (OS_TASK_PTR )receive_task, 			
;;;244                     (void		* )0,					
;;;245                     (OS_PRIO	  )RECEIVE_TASK_PRIO,     	
;;;246                     (CPU_STK   * )&RECEIVE_TASK_STK[0],	
;;;247                     (CPU_STK_SIZE)RECEIVE_STK_SIZE/10,	
;;;248                     (CPU_STK_SIZE)RECEIVE_STK_SIZE,		
;;;249                     (OS_MSG_QTY  )0,					
;;;250                     (OS_TICK	  )0,					
;;;251                     (void   	* )0,				
;;;252                     (OS_OPT      )OS_OPT_TASK_STK_CHK|OS_OPT_TASK_STK_CLR|OS_OPT_TASK_SAVE_FP, 
;;;253                     (OS_ERR 	* )&err);	
;;;254    //创建TASK3任务
;;;255    	OSTaskCreate((OS_TCB 	* )&MPU9250_TaskTCB,		
0000be  a80a              ADD      r0,sp,#0x28
0000c0  2107              MOVS     r1,#7
0000c2  2200              MOVS     r2,#0
0000c4  9205              STR      r2,[sp,#0x14]
0000c6  e9cd2106          STRD     r2,r1,[sp,#0x18]
0000ca  9008              STR      r0,[sp,#0x20]
0000cc  4610              MOV      r0,r2
0000ce  f44f7180          MOV      r1,#0x100
0000d2  2219              MOVS     r2,#0x19
0000d4  4b2f              LDR      r3,|L7.404|
0000d6  e9cd3201          STRD     r3,r2,[sp,#4]
0000da  e9cd1003          STRD     r1,r0,[sp,#0xc]
0000de  2004              MOVS     r0,#4
0000e0  2300              MOVS     r3,#0
0000e2  4a2d              LDR      r2,|L7.408|
0000e4  a12d              ADR      r1,|L7.412|
0000e6  9000              STR      r0,[sp,#0]
0000e8  4830              LDR      r0,|L7.428|
0000ea  f7fffffe          BL       OSTaskCreate
;;;256    				 (CPU_CHAR	* )"mpu9250 task", 		
;;;257                     (OS_TASK_PTR )mpu9250_task, 			
;;;258                     (void		* )0,					
;;;259                     (OS_PRIO	  )MPU9250_TASK_PRIO,     	
;;;260                     (CPU_STK   * )&MPU9250_TASK_STK[0],	
;;;261                     (CPU_STK_SIZE)MPU9250_STK_SIZE/10,	
;;;262                     (CPU_STK_SIZE)MPU9250_STK_SIZE,		
;;;263                     (OS_MSG_QTY  )0,					
;;;264                     (OS_TICK	  )0,					
;;;265                     (void   	* )0,				
;;;266                     (OS_OPT      )OS_OPT_TASK_STK_CHK|OS_OPT_TASK_STK_CLR|OS_OPT_TASK_SAVE_FP, 
;;;267                     (OS_ERR 	* )&err);	
;;;268    //创建TASK4任务
;;;269    	OSTaskCreate((OS_TCB 	* )&FEED_BACK_TaskTCB,		
0000ee  a80a              ADD      r0,sp,#0x28
0000f0  2107              MOVS     r1,#7
0000f2  2200              MOVS     r2,#0
0000f4  9205              STR      r2,[sp,#0x14]
0000f6  e9cd2106          STRD     r2,r1,[sp,#0x18]
0000fa  9008              STR      r0,[sp,#0x20]
0000fc  4610              MOV      r0,r2
0000fe  2180              MOVS     r1,#0x80
000100  220c              MOVS     r2,#0xc
000102  4b2b              LDR      r3,|L7.432|
000104  e9cd3201          STRD     r3,r2,[sp,#4]
000108  e9cd1003          STRD     r1,r0,[sp,#0xc]
00010c  2004              MOVS     r0,#4
00010e  2300              MOVS     r3,#0
000110  4a28              LDR      r2,|L7.436|
000112  a129              ADR      r1,|L7.440|
000114  9000              STR      r0,[sp,#0]
000116  482c              LDR      r0,|L7.456|
000118  f7fffffe          BL       OSTaskCreate
;;;270    				 (CPU_CHAR	* )"feed_back task", 		
;;;271                     (OS_TASK_PTR )feed_back_task, 			
;;;272                     (void		* )0,					
;;;273                     (OS_PRIO	  )FEED_BACK_TASK_PRIO,     	
;;;274                     (CPU_STK   * )&FEED_BACK_TASK_STK[0],	
;;;275                     (CPU_STK_SIZE)FEED_BACK_STK_SIZE/10,	
;;;276                     (CPU_STK_SIZE)FEED_BACK_STK_SIZE,		
;;;277                     (OS_MSG_QTY  )0,					
;;;278                     (OS_TICK	  )0,					
;;;279                     (void   	* )0,				
;;;280                     (OS_OPT      )OS_OPT_TASK_STK_CHK|OS_OPT_TASK_STK_CLR|OS_OPT_TASK_SAVE_FP, 
;;;281                     (OS_ERR 	* )&err);			 
;;;282    	OS_CRITICAL_EXIT();	//退出临界区
00011c  bf00              NOP      
00011e  f7fffffe          BL       CPU_IntDisMeasStop
000122  bf00              NOP      
000124  4628              MOV      r0,r5
000126  f7fffffe          BL       CPU_SR_Restore
00012a  bf00              NOP      
00012c  bf00              NOP      
;;;283    	OSTaskDel((OS_TCB*)0,&err);	//删除start_task任务自身
00012e  a90a              ADD      r1,sp,#0x28
000130  2000              MOVS     r0,#0
000132  f7fffffe          BL       OSTaskDel
;;;284    }
000136  b00b              ADD      sp,sp,#0x2c
000138  bd30              POP      {r4,r5,pc}
;;;285    
                          ENDP

00013a  0000              DCW      0x0000
                  |L7.316|
                          DCD      tmr1_callback
                  |L7.320|
000140  746d7231          DCB      "tmr1",0
000144  00      
000145  00                DCB      0
000146  00                DCB      0
000147  00                DCB      0
                  |L7.328|
                          DCD      tmr1
                  |L7.332|
                          DCD      tmr2_callback
                  |L7.336|
000150  746d7232          DCB      "tmr2",0
000154  00      
000155  00                DCB      0
000156  00                DCB      0
000157  00                DCB      0
                  |L7.344|
                          DCD      tmr2
                  |L7.348|
                          DCD      HEART_BEAT_TASK_STK
                  |L7.352|
                          DCD      heart_beat_task
                  |L7.356|
000164  48656174          DCB      "Heat_Beat task",0
000168  5f426561
00016c  74207461
000170  736b00  
000173  00                DCB      0
                  |L7.372|
                          DCD      HEART_BEAT_TaskTCB
                  |L7.376|
                          DCD      RECEIVE_TASK_STK
                  |L7.380|
                          DCD      receive_task
                  |L7.384|
000180  72656365          DCB      "receive task",0
000184  69766520
000188  7461736b
00018c  00      
00018d  00                DCB      0
00018e  00                DCB      0
00018f  00                DCB      0
                  |L7.400|
                          DCD      RECEIVE_TaskTCB
                  |L7.404|
                          DCD      MPU9250_TASK_STK
                  |L7.408|
                          DCD      mpu9250_task
                  |L7.412|
00019c  6d707539          DCB      "mpu9250 task",0
0001a0  32353020
0001a4  7461736b
0001a8  00      
0001a9  00                DCB      0
0001aa  00                DCB      0
0001ab  00                DCB      0
                  |L7.428|
                          DCD      MPU9250_TaskTCB
                  |L7.432|
                          DCD      FEED_BACK_TASK_STK
                  |L7.436|
                          DCD      feed_back_task
                  |L7.440|
0001b8  66656564          DCB      "feed_back task",0
0001bc  5f626163
0001c0  6b207461
0001c4  736b00  
0001c7  00                DCB      0
                  |L7.456|
                          DCD      FEED_BACK_TaskTCB

                          AREA ||i.tmr1_callback||, CODE, READONLY, ALIGN=2

                  tmr1_callback PROC
;;;361    //定时器1的回调函数
;;;362    void tmr1_callback(void *p_tmr, void *p_arg)
000000  b570              PUSH     {r4-r6,lr}
;;;363    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;364    	
;;;365    	h_times.second++;
000006  480d              LDR      r0,|L8.60|
000008  8940              LDRH     r0,[r0,#0xa]  ; h_times
00000a  1c40              ADDS     r0,r0,#1
00000c  490b              LDR      r1,|L8.60|
00000e  8148              STRH     r0,[r1,#0xa]
;;;366    	
;;;367    	heart_beat[8]=h_times.second;
000010  4608              MOV      r0,r1
000012  8940              LDRH     r0,[r0,#0xa]  ; h_times
000014  490a              LDR      r1,|L8.64|
000016  8208              STRH     r0,[r1,#0x10]
;;;368    	
;;;369    	
;;;370    	if(h_times.second==30) 
000018  4808              LDR      r0,|L8.60|
00001a  8940              LDRH     r0,[r0,#0xa]  ; h_times
00001c  281e              CMP      r0,#0x1e
00001e  d10b              BNE      |L8.56|
;;;371    	{	
;;;372            heart_beat[28]=CRC16(heart_beat,56);
000020  2138              MOVS     r1,#0x38
000022  4807              LDR      r0,|L8.64|
000024  f7fffffe          BL       CRC16
000028  4905              LDR      r1,|L8.64|
00002a  8708              STRH     r0,[r1,#0x38]
;;;373    	    HAL_UART_Transmit(&UART1_Handler,(uint8_t*)heart_beat,58,1000);
00002c  f44f737a          MOV      r3,#0x3e8
000030  223a              MOVS     r2,#0x3a
000032  4804              LDR      r0,|L8.68|
000034  f7fffffe          BL       HAL_UART_Transmit
                  |L8.56|
;;;374    	}
;;;375    	
;;;376    	
;;;377    //	HAL_UART_Transmit(&UART1_Handler,(uint8_t*)heart_beat,58,1000);
;;;378    	
;;;379    	
;;;380    //	for(i=0;i<58;i++) 
;;;381    //	{
;;;382    //       printf("%d",heart_beat[i]);
;;;383    //	}
;;;384    //    printf("\r\n");
;;;385    //	HAL_UART_Transmit(&UART1_Handler,(uint8_t*)heart_beat,58,1000);
;;;386    }
000038  bd70              POP      {r4-r6,pc}
;;;387    
                          ENDP

00003a  0000              DCW      0x0000
                  |L8.60|
                          DCD      h_times
                  |L8.64|
                          DCD      heart_beat
                  |L8.68|
                          DCD      UART1_Handler

                          AREA ||i.tmr2_callback||, CODE, READONLY, ALIGN=2

                  tmr2_callback PROC
;;;388    //定时器2的回调函数
;;;389    void tmr2_callback(void *p_tmr,void *p_arg)
000000  b57c              PUSH     {r2-r6,lr}
;;;390    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;391    	static u8 tmr2_num = 0;
;;;392    	tmr2_num++;		//定时器2执行次数加1
000006  4815              LDR      r0,|L9.92|
000008  7800              LDRB     r0,[r0,#0]  ; tmr2_num
00000a  1c40              ADDS     r0,r0,#1
00000c  4913              LDR      r1,|L9.92|
00000e  7008              STRB     r0,[r1,#0]
;;;393    	LCD_ShowxNum(182,111,tmr2_num,3,16,0x80);  //显示定时器1执行次数
000010  2080              MOVS     r0,#0x80
000012  2110              MOVS     r1,#0x10
000014  2303              MOVS     r3,#3
000016  e9cd1000          STRD     r1,r0,[sp,#0]
00001a  4810              LDR      r0,|L9.92|
00001c  7802              LDRB     r2,[r0,#0]  ; tmr2_num
00001e  216f              MOVS     r1,#0x6f
000020  20b6              MOVS     r0,#0xb6
000022  f7fffffe          BL       LCD_ShowxNum
;;;394    	LCD_Fill(126,131,233,313,lcd_discolor[tmr2_num%14]); //填充区域
000026  480d              LDR      r0,|L9.92|
000028  7800              LDRB     r0,[r0,#0]  ; tmr2_num
00002a  210e              MOVS     r1,#0xe
00002c  fb90f2f1          SDIV     r2,r0,r1
000030  fb010012          MLS      r0,r1,r2,r0
000034  490a              LDR      r1,|L9.96|
000036  f8514020          LDR      r4,[r1,r0,LSL #2]
00003a  f2401339          MOV      r3,#0x139
00003e  22e9              MOVS     r2,#0xe9
000040  2183              MOVS     r1,#0x83
000042  207e              MOVS     r0,#0x7e
000044  9400              STR      r4,[sp,#0]
000046  f7fffffe          BL       LCD_Fill
;;;395    	LED1_Toggle;
00004a  2101              MOVS     r1,#1
00004c  4805              LDR      r0,|L9.100|
00004e  f7fffffe          BL       HAL_GPIO_TogglePin
;;;396    	printf("定时器2运行结束\r\n");
000052  a005              ADR      r0,|L9.104|
000054  f7fffffe          BL       __2printf
;;;397    }
000058  bd7c              POP      {r2-r6,pc}
;;;398    
                          ENDP

00005a  0000              DCW      0x0000
                  |L9.92|
                          DCD      tmr2_num
                  |L9.96|
                          DCD      lcd_discolor
                  |L9.100|
                          DCD      0x40020400
                  |L9.104|
000068  b6a8cab1          DCB      182,168,202,177,198,247,"2",212,203,208,208,189,225,202,248
00006c  c6f732d4
000070  cbd0d0bd
000074  e1caf8  
000077  0d0a00            DCB      "\r\n",0
00007a  00                DCB      0
00007b  00                DCB      0

                          AREA ||i.usart1_niming_report||, CODE, READONLY, ALIGN=1

                  usart1_niming_report PROC
;;;413    //len:data区有效数据个数
;;;414    void usart1_niming_report(u8 fun,u8*data,u8 len)
000000  b570              PUSH     {r4-r6,lr}
;;;415    {
000002  b088              SUB      sp,sp,#0x20
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4613              MOV      r3,r2
;;;416    	u8 send_buf[32];
;;;417    	u8 i;
;;;418    	if(len>28)return;	//最多28字节数据 
00000a  2b1c              CMP      r3,#0x1c
00000c  dd01              BLE      |L10.18|
                  |L10.14|
;;;419    	send_buf[len+3]=0;	//校验数置零
;;;420    	send_buf[0]=0XAA;	//帧头
;;;421    	send_buf[1]=0XAA;	//帧头
;;;422    	send_buf[2]=fun;	//功能字
;;;423    	send_buf[3]=len;	//数据长度
;;;424    	for(i=0;i<len;i++)send_buf[4+i]=data[i];			//复制数据
;;;425    	for(i=0;i<len+4;i++)send_buf[len+4]+=send_buf[i];	//计算校验和	
;;;426    	for(i=0;i<len+5;i++)usart1_send_char(send_buf[i]);	//发送数据到串口1 
;;;427    }
00000e  b008              ADD      sp,sp,#0x20
000010  bd70              POP      {r4-r6,pc}
                  |L10.18|
000012  2100              MOVS     r1,#0                 ;419
000014  1cd8              ADDS     r0,r3,#3              ;419
000016  f80d1000          STRB     r1,[sp,r0]            ;419
00001a  20aa              MOVS     r0,#0xaa              ;420
00001c  f88d0000          STRB     r0,[sp,#0]            ;420
000020  f88d0001          STRB     r0,[sp,#1]            ;421
000024  f88d4002          STRB     r4,[sp,#2]            ;422
000028  f88d3003          STRB     r3,[sp,#3]            ;423
00002c  2200              MOVS     r2,#0                 ;424
00002e  e005              B        |L10.60|
                  |L10.48|
000030  5ca9              LDRB     r1,[r5,r2]            ;424
000032  1d10              ADDS     r0,r2,#4              ;424
000034  f80d1000          STRB     r1,[sp,r0]            ;424
000038  1c50              ADDS     r0,r2,#1              ;424
00003a  b2c2              UXTB     r2,r0                 ;424
                  |L10.60|
00003c  429a              CMP      r2,r3                 ;424
00003e  dbf7              BLT      |L10.48|
000040  2200              MOVS     r2,#0                 ;425
000042  e00b              B        |L10.92|
                  |L10.68|
000044  1d18              ADDS     r0,r3,#4              ;425
000046  f81d0000          LDRB     r0,[sp,r0]            ;425
00004a  f81d1002          LDRB     r1,[sp,r2]            ;425
00004e  4408              ADD      r0,r0,r1              ;425
000050  b2c1              UXTB     r1,r0                 ;425
000052  1d18              ADDS     r0,r3,#4              ;425
000054  f80d1000          STRB     r1,[sp,r0]            ;425
000058  1c50              ADDS     r0,r2,#1              ;425
00005a  b2c2              UXTB     r2,r0                 ;425
                  |L10.92|
00005c  1d18              ADDS     r0,r3,#4              ;425
00005e  4282              CMP      r2,r0                 ;425
000060  dbf0              BLT      |L10.68|
000062  2200              MOVS     r2,#0                 ;426
000064  e005              B        |L10.114|
                  |L10.102|
000066  f81d0002          LDRB     r0,[sp,r2]            ;426
00006a  f7fffffe          BL       usart1_send_char
00006e  1c50              ADDS     r0,r2,#1              ;426
000070  b2c2              UXTB     r2,r0                 ;426
                  |L10.114|
000072  1d58              ADDS     r0,r3,#5              ;426
000074  4282              CMP      r2,r0                 ;426
000076  dbf6              BLT      |L10.102|
000078  bf00              NOP      
00007a  e7c8              B        |L10.14|
;;;428    //发送加速度传感器数据+陀螺仪数据(传感器帧)
                          ENDP


                          AREA ||i.usart1_report_imu||, CODE, READONLY, ALIGN=1

                  usart1_report_imu PROC
;;;459    //prs:气压计高度,单位:mm
;;;460    void usart1_report_imu(short roll,short pitch,short yaw,short csb,int prs)
000000  e92d41fe          PUSH     {r1-r8,lr}
;;;461    {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  9c09              LDR      r4,[sp,#0x24]
;;;462    	u8 tbuf[12];   	
;;;463    	tbuf[0]=(roll>>8)&0XFF;
00000e  ea4f2018          LSR      r0,r8,#8
000012  f88d0000          STRB     r0,[sp,#0]
;;;464    	tbuf[1]=roll&0XFF;
000016  f00800ff          AND      r0,r8,#0xff
00001a  f88d0001          STRB     r0,[sp,#1]
;;;465    	tbuf[2]=(pitch>>8)&0XFF;
00001e  0a28              LSRS     r0,r5,#8
000020  f88d0002          STRB     r0,[sp,#2]
;;;466    	tbuf[3]=pitch&0XFF;
000024  b2e8              UXTB     r0,r5
000026  f88d0003          STRB     r0,[sp,#3]
;;;467    	tbuf[4]=(yaw>>8)&0XFF;
00002a  0a30              LSRS     r0,r6,#8
00002c  f88d0004          STRB     r0,[sp,#4]
;;;468    	tbuf[5]=yaw&0XFF;
000030  b2f0              UXTB     r0,r6
000032  f88d0005          STRB     r0,[sp,#5]
;;;469    	tbuf[6]=(csb>>8)&0XFF;
000036  0a38              LSRS     r0,r7,#8
000038  f88d0006          STRB     r0,[sp,#6]
;;;470    	tbuf[7]=csb&0XFF;
00003c  b2f8              UXTB     r0,r7
00003e  f88d0007          STRB     r0,[sp,#7]
;;;471    	tbuf[8]=(prs>>24)&0XFF;
000042  0e20              LSRS     r0,r4,#24
000044  f88d0008          STRB     r0,[sp,#8]
;;;472    	tbuf[9]=(prs>>16)&0XFF;
000048  0c20              LSRS     r0,r4,#16
00004a  f88d0009          STRB     r0,[sp,#9]
;;;473    	tbuf[10]=(prs>>8)&0XFF;
00004e  0a20              LSRS     r0,r4,#8
000050  f88d000a          STRB     r0,[sp,#0xa]
;;;474    	tbuf[11]=prs&0XFF;
000054  b2e0              UXTB     r0,r4
000056  f88d000b          STRB     r0,[sp,#0xb]
;;;475    	usart1_niming_report(0X01,tbuf,12);//状态帧,0X01
00005a  220c              MOVS     r2,#0xc
00005c  4669              MOV      r1,sp
00005e  2001              MOVS     r0,#1
000060  f7fffffe          BL       usart1_niming_report
;;;476    }  
000064  e8bd81fe          POP      {r1-r8,pc}
;;;477    
                          ENDP


                          AREA ||i.usart1_send_char||, CODE, READONLY, ALIGN=2

                  usart1_send_char PROC
;;;404    //c:要发送的字符
;;;405    void usart1_send_char(u8 c)
000000  bf00              NOP      
                  |L12.2|
;;;406    {
;;;407    	while((USART1->ISR&0X40)==0);	//循环发送,直到发送完毕   
000002  4904              LDR      r1,|L12.20|
000004  69c9              LDR      r1,[r1,#0x1c]
000006  f0010140          AND      r1,r1,#0x40
00000a  2900              CMP      r1,#0
00000c  d0f9              BEQ      |L12.2|
;;;408        USART1->TDR=c;  
00000e  4901              LDR      r1,|L12.20|
000010  6288              STR      r0,[r1,#0x28]
;;;409    } 
000012  4770              BX       lr
;;;410    //传送数据给匿名四轴地面站(V4版本)
                          ENDP

                  |L12.20|
                          DCD      0x40011000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  StartTaskTCB
                          %        192
                  START_TASK_STK
                          %        512
                  HEART_BEAT_TaskTCB
                          %        192
                  HEART_BEAT_TASK_STK
                          %        512
                  RECEIVE_TaskTCB
                          %        192
                  RECEIVE_TASK_STK
                          %        512
                  MPU9250_TaskTCB
                          %        192
                  MPU9250_TASK_STK
                          %        1024
                  FEED_BACK_TaskTCB
                          %        192
                  FEED_BACK_TASK_STK
                          %        512
                  tmr1
                          %        48
                  tmr2
                          %        48
                  feed_back
                          %        114
                  SendBuff
                          %        7800

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  TEXT_TO_SEND
000000  414c4945          DCB      0x41,0x4c,0x49,0x45
000004  4e54454b          DCB      0x4e,0x54,0x45,0x4b
000008  2041706f          DCB      0x20,0x41,0x70,0x6f
00000c  6c6c6f20          DCB      0x6c,0x6c,0x6f,0x20
000010  53544d33          DCB      0x53,0x54,0x4d,0x33
000014  32463720          DCB      0x32,0x46,0x37,0x20
000018  444d4120          DCB      0x44,0x4d,0x41,0x20
00001c  b4aebfda          DCB      0xb4,0xae,0xbf,0xda
000020  cab5d1e9          DCB      0xca,0xb5,0xd1,0xe9
000024  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=2

                  lcd_discolor
                          DCD      0x0000ffff
                          DCD      0x0000f800
                          DCD      0x0000001f
                          DCD      0x0000f81f
                          DCD      0x0000ffe0
                          DCD      0x000007ff
                          DCD      0x00000000
                          DCD      0x0000f81f
                          DCD      0x000007e0
                          DCD      0x00007fff
                          DCD      0x0000ffe0
                          DCD      0x0000bc40
                          DCD      0x0000fc07
                          DCD      0x00008430
                  heart_beat
000038  039c6010          DCW      0x039c,0x6010
00003c  000e              DCW      0x000e
00003e  0000              DCB      0x00,0x00
                          %        104
0000a8  0000              DCB      0x00,0x00
                  tmr2_num
0000aa  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_8d115a9e____REV16|
#line 388 "..\\CORE\\cmsis_armcc.h"
|__asm___6_main_c_8d115a9e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_8d115a9e____REVSH|
#line 402
|__asm___6_main_c_8d115a9e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_8d115a9e____RRX|
#line 587
|__asm___6_main_c_8d115a9e____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
