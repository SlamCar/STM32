; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\mlmath.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\mlmath.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\OBJ -I..\USER -I..\HALLIB\STM32F7xx_HAL_Driver\Inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\SDRAM -I..\HARDWARE\IIC -I..\HARDWARE\24CXX -I..\HARDWARE\MPU9250 -I..\HARDWARE\DHT11 -I..\HARDWARE\MPU -I..\USMART -I..\DMP\driver\eMPL -I..\DMP\driver\include -I..\DMP\driver\stm32L -I..\DMP\eMPL-hal -I..\DMP\mllite -I..\DMP\mpl -I..\UCOSIII -I..\UCOSIII\UCOS-BSP -I..\UCOSIII\UCOS-CONFIG -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\uC-CPU\ARM-Cortex-M4\RealView -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-CPU -I..\HARDWARE\MY_FUNCTION -I..\USER -I..\HARDWARE\CRC -I..\HARDWARE\DMA -I..\HARDWARE\HEART_BEAT -I..\HARDWARE\RECEIVE_ANALYZE -I..\HARDWARE\FEED_BACK -I..\HARDWARE\DATA -I"D:\1111111\32F4\Slam car\实验35 MPU9250九轴传感器实验\USER\RTE" -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0 -IF:\Keil_v5\ARM\CMSIS\Include -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__UVISION_VERSION=514 -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=..\obj\mlmath.crf ..\DMP\mllite\mlmath.c]
                          THUMB

                          AREA ||i.ml_acos||, CODE, READONLY, ALIGN=1

                  ml_acos PROC
;;;59     
;;;60     double ml_acos(double x)
000000  b510              PUSH     {r4,lr}
;;;61     {
000002  ed2d8b02          VPUSH    {d8}
000006  eeb08b40          VMOV.F64 d8,d0
;;;62         return acos(x);
00000a  eeb00b48          VMOV.F64 d0,d8
00000e  f7fffffe          BL       __hardfp_acos
;;;63     }
000012  ecbd8b02          VPOP     {d8}
000016  bd10              POP      {r4,pc}
;;;64     
                          ENDP


                          AREA ||i.ml_asin||, CODE, READONLY, ALIGN=1

                  ml_asin PROC
;;;14     
;;;15     double ml_asin(double x)
000000  b510              PUSH     {r4,lr}
;;;16     {
000002  ed2d8b02          VPUSH    {d8}
000006  eeb08b40          VMOV.F64 d8,d0
;;;17         return asin(x);
00000a  eeb00b48          VMOV.F64 d0,d8
00000e  f7fffffe          BL       __hardfp_asin
;;;18     }
000012  ecbd8b02          VPOP     {d8}
000016  bd10              POP      {r4,pc}
;;;19     
                          ENDP


                          AREA ||i.ml_atan||, CODE, READONLY, ALIGN=1

                  ml_atan PROC
;;;19     
;;;20     double ml_atan(double x)
000000  b510              PUSH     {r4,lr}
;;;21     {
000002  ed2d8b02          VPUSH    {d8}
000006  eeb08b40          VMOV.F64 d8,d0
;;;22         return atan(x);
00000a  eeb00b48          VMOV.F64 d0,d8
00000e  f7fffffe          BL       __hardfp_atan
;;;23     }
000012  ecbd8b02          VPOP     {d8}
000016  bd10              POP      {r4,pc}
;;;24     
                          ENDP


                          AREA ||i.ml_atan2||, CODE, READONLY, ALIGN=1

                  ml_atan2 PROC
;;;24     
;;;25     double ml_atan2(double x, double y)
000000  b510              PUSH     {r4,lr}
;;;26     {
000002  ed2d8b04          VPUSH    {d8-d9}
000006  eeb08b40          VMOV.F64 d8,d0
00000a  eeb09b41          VMOV.F64 d9,d1
;;;27         return atan2(x, y);
00000e  eeb01b49          VMOV.F64 d1,d9
000012  eeb00b48          VMOV.F64 d0,d8
000016  f7fffffe          BL       __hardfp_atan2
;;;28     }
00001a  ecbd8b04          VPOP     {d8-d9}
00001e  bd10              POP      {r4,pc}
;;;29     
                          ENDP


                          AREA ||i.ml_ceil||, CODE, READONLY, ALIGN=1

                  ml_ceil PROC
;;;39     
;;;40     double ml_ceil(double x)
000000  b510              PUSH     {r4,lr}
;;;41     {
000002  ed2d8b02          VPUSH    {d8}
000006  eeb08b40          VMOV.F64 d8,d0
;;;42         return ceil(x);
00000a  eeb00b48          VMOV.F64 d0,d8
00000e  f7fffffe          BL       __hardfp_ceil
;;;43     }
000012  ecbd8b02          VPOP     {d8}
000016  bd10              POP      {r4,pc}
;;;44     
                          ENDP


                          AREA ||i.ml_cos||, CODE, READONLY, ALIGN=1

                  ml_cos PROC
;;;49     
;;;50     double ml_cos(double x)
000000  b510              PUSH     {r4,lr}
;;;51     {
000002  ed2d8b02          VPUSH    {d8}
000006  eeb08b40          VMOV.F64 d8,d0
;;;52         return cos(x);
00000a  eeb00b48          VMOV.F64 d0,d8
00000e  f7fffffe          BL       __hardfp_cos
;;;53     }
000012  ecbd8b02          VPOP     {d8}
000016  bd10              POP      {r4,pc}
;;;54     
                          ENDP


                          AREA ||i.ml_floor||, CODE, READONLY, ALIGN=1

                  ml_floor PROC
;;;44     
;;;45     double ml_floor(double x)
000000  b510              PUSH     {r4,lr}
;;;46     {
000002  ed2d8b02          VPUSH    {d8}
000006  eeb08b40          VMOV.F64 d8,d0
;;;47         return floor(x);
00000a  eeb00b48          VMOV.F64 d0,d8
00000e  f7fffffe          BL       __hardfp_floor
;;;48     }
000012  ecbd8b02          VPOP     {d8}
000016  bd10              POP      {r4,pc}
;;;49     
                          ENDP


                          AREA ||i.ml_log||, CODE, READONLY, ALIGN=1

                  ml_log PROC
;;;29     
;;;30     double ml_log(double x)
000000  b510              PUSH     {r4,lr}
;;;31     {
000002  ed2d8b02          VPUSH    {d8}
000006  eeb08b40          VMOV.F64 d8,d0
;;;32         return log(x);
00000a  eeb00b48          VMOV.F64 d0,d8
00000e  f7fffffe          BL       __hardfp_log
;;;33     }
000012  ecbd8b02          VPOP     {d8}
000016  bd10              POP      {r4,pc}
;;;34     
                          ENDP


                          AREA ||i.ml_pow||, CODE, READONLY, ALIGN=1

                  ml_pow PROC
;;;64     
;;;65     double ml_pow(double x, double y)
000000  b510              PUSH     {r4,lr}
;;;66     {
000002  ed2d8b04          VPUSH    {d8-d9}
000006  eeb08b40          VMOV.F64 d8,d0
00000a  eeb09b41          VMOV.F64 d9,d1
;;;67         return pow(x, y);
00000e  eeb01b49          VMOV.F64 d1,d9
000012  eeb00b48          VMOV.F64 d0,d8
000016  f7fffffe          BL       __hardfp_pow
;;;68     }
00001a  ecbd8b04          VPOP     {d8-d9}
00001e  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i.ml_sin||, CODE, READONLY, ALIGN=1

                  ml_sin PROC
;;;54     
;;;55     double ml_sin(double x)
000000  b510              PUSH     {r4,lr}
;;;56     {
000002  ed2d8b02          VPUSH    {d8}
000006  eeb08b40          VMOV.F64 d8,d0
;;;57         return sin(x);
00000a  eeb00b48          VMOV.F64 d0,d8
00000e  f7fffffe          BL       __hardfp_sin
;;;58     }
000012  ecbd8b02          VPOP     {d8}
000016  bd10              POP      {r4,pc}
;;;59     
                          ENDP


                          AREA ||i.ml_sqrt||, CODE, READONLY, ALIGN=1

                  ml_sqrt PROC
;;;34     
;;;35     double ml_sqrt(double x)
000000  b510              PUSH     {r4,lr}
;;;36     {
000002  ed2d8b02          VPUSH    {d8}
000006  eeb08b40          VMOV.F64 d8,d0
;;;37         return sqrt(x);
00000a  eeb00b48          VMOV.F64 d0,d8
00000e  f7fffffe          BL       __hardfp_sqrt
;;;38     }
000012  ecbd8b02          VPOP     {d8}
000016  bd10              POP      {r4,pc}
;;;39     
                          ENDP

