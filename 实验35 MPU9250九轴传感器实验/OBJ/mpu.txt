; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\mpu.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\mpu.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\OBJ -I..\USER -I..\HALLIB\STM32F7xx_HAL_Driver\Inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\SDRAM -I..\HARDWARE\IIC -I..\HARDWARE\24CXX -I..\HARDWARE\MPU9250 -I..\HARDWARE\DHT11 -I..\HARDWARE\MPU -I..\USMART -I..\DMP\driver\eMPL -I..\DMP\driver\include -I..\DMP\driver\stm32L -I..\DMP\eMPL-hal -I..\DMP\mllite -I..\DMP\mpl -I..\UCOSIII -I..\UCOSIII\UCOS-BSP -I..\UCOSIII\UCOS-CONFIG -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\uC-CPU\ARM-Cortex-M4\RealView -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-CPU -I..\HARDWARE\MY_FUNCTION -I..\USER -I..\HARDWARE\CRC -I..\HARDWARE\DMA -I..\HARDWARE\HEART_BEAT -I..\HARDWARE\RECEIVE_ANALYZE -I..\HARDWARE\FEED_BACK -I..\HARDWARE\DATA -I"D:\1111111\32F4\Slam car\实验35 MPU9250九轴传感器实验\USER\RTE" -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0 -IF:\Keil_v5\ARM\CMSIS\Include -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__UVISION_VERSION=514 -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=..\obj\mpu.crf ..\HARDWARE\MPU\mpu.c]
                          THUMB

                          AREA ||i.MPU_Memory_Protection||, CODE, READONLY, ALIGN=1

                  MPU_Memory_Protection PROC
;;;55     //比如MCU屏不显示,摄像头采集数据出错等等问题...
;;;56     void MPU_Memory_Protection(void)
000000  b510              PUSH     {r4,lr}
;;;57     {
;;;58     	MPU_Set_Protection(0x60000000,MPU_REGION_SIZE_64MB,MPU_REGION_NUMBER0,MPU_REGION_FULL_ACCESS);	//保护MCU LCD屏所在的FMC区域,,共64M字节
000002  2303              MOVS     r3,#3
000004  2200              MOVS     r2,#0
000006  2119              MOVS     r1,#0x19
000008  0758              LSLS     r0,r3,#29
00000a  f7fffffe          BL       MPU_Set_Protection
;;;59     	MPU_Set_Protection(0x20000000,MPU_REGION_SIZE_512KB,MPU_REGION_NUMBER1,MPU_REGION_FULL_ACCESS);		//保护整个内部SRAM,包括SRAM1,SRAM2和DTCM,共512K字节
00000e  2303              MOVS     r3,#3
000010  2201              MOVS     r2,#1
000012  2112              MOVS     r1,#0x12
000014  0708              LSLS     r0,r1,#28
000016  f7fffffe          BL       MPU_Set_Protection
;;;60     	MPU_Set_Protection(0XC0000000,MPU_REGION_SIZE_32MB,MPU_REGION_NUMBER2,MPU_REGION_FULL_ACCESS);	//保护SDRAM区域,共32M字节
00001a  2303              MOVS     r3,#3
00001c  2202              MOVS     r2,#2
00001e  2118              MOVS     r1,#0x18
000020  06c8              LSLS     r0,r1,#27
000022  f7fffffe          BL       MPU_Set_Protection
;;;61     	MPU_Set_Protection(0X80000000,MPU_REGION_SIZE_256MB,MPU_REGION_NUMBER3,MPU_REGION_FULL_ACCESS);	//保护整个NAND FLASH区域,共256M字节
000026  2303              MOVS     r3,#3
000028  461a              MOV      r2,r3
00002a  211b              MOVS     r1,#0x1b
00002c  07c8              LSLS     r0,r1,#31
00002e  f7fffffe          BL       MPU_Set_Protection
;;;62     }
000032  bd10              POP      {r4,pc}
;;;63     
                          ENDP


                          AREA ||i.MPU_Set_Protection||, CODE, READONLY, ALIGN=2

                  MPU_Set_Protection PROC
;;;30     //    其他,错误.
;;;31     u8 MPU_Set_Protection(u32 baseaddr,u32 size,u32 rnum,u32 ap)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;32     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;33     	MPU_Region_InitTypeDef MPU_Initure;
;;;34     	
;;;35     	HAL_MPU_Disable();								        //配置MPU之前先关闭MPU,配置完成以后在使能MPU
00000c  bf00              NOP      
00000e  481f              LDR      r0,|L2.140|
000010  6800              LDR      r0,[r0,#0]
000012  f4203080          BIC      r0,r0,#0x10000
000016  491d              LDR      r1,|L2.140|
000018  6008              STR      r0,[r1,#0]
00001a  481c              LDR      r0,|L2.140|
00001c  3070              ADDS     r0,r0,#0x70
00001e  6800              LDR      r0,[r0,#0]
000020  f0200001          BIC      r0,r0,#1
000024  4919              LDR      r1,|L2.140|
000026  3170              ADDS     r1,r1,#0x70
000028  6008              STR      r0,[r1,#0]
00002a  bf00              NOP      
;;;36     
;;;37     	MPU_Initure.Enable=MPU_REGION_ENABLE;			        //使能该保护区域 
00002c  2001              MOVS     r0,#1
00002e  f88d0000          STRB     r0,[sp,#0]
;;;38     	MPU_Initure.Number=rnum;			                    //设置保护区域
000032  b2f0              UXTB     r0,r6
000034  f88d0001          STRB     r0,[sp,#1]
;;;39     	MPU_Initure.BaseAddress=baseaddr;	                    //设置基址
000038  9401              STR      r4,[sp,#4]
;;;40     	MPU_Initure.Size=size;				                    //设置保护区域大小
00003a  b2e8              UXTB     r0,r5
00003c  f88d0008          STRB     r0,[sp,#8]
;;;41     	MPU_Initure.SubRegionDisable=0X00;                      //禁止子区域
000040  2000              MOVS     r0,#0
000042  f88d0009          STRB     r0,[sp,#9]
;;;42     	MPU_Initure.TypeExtField=MPU_TEX_LEVEL0;                //设置类型扩展域为level0
000046  f88d000a          STRB     r0,[sp,#0xa]
;;;43     	MPU_Initure.AccessPermission=(u8)ap;		            //设置访问权限,
00004a  b2f8              UXTB     r0,r7
00004c  f88d000b          STRB     r0,[sp,#0xb]
;;;44     	MPU_Initure.DisableExec=MPU_INSTRUCTION_ACCESS_ENABLE;	//允许指令访问(允许读取指令)
000050  2000              MOVS     r0,#0
000052  f88d000c          STRB     r0,[sp,#0xc]
;;;45     	MPU_Initure.IsShareable=MPU_ACCESS_NOT_SHAREABLE;       //禁止共用
000056  f88d000d          STRB     r0,[sp,#0xd]
;;;46     	MPU_Initure.IsCacheable=MPU_ACCESS_CACHEABLE;       //使能cache  
00005a  2001              MOVS     r0,#1
00005c  f88d000e          STRB     r0,[sp,#0xe]
;;;47     	MPU_Initure.IsBufferable=MPU_ACCESS_BUFFERABLE;         //允许缓冲
000060  f88d000f          STRB     r0,[sp,#0xf]
;;;48     	HAL_MPU_ConfigRegion(&MPU_Initure);                     //配置MPU
000064  4668              MOV      r0,sp
000066  f7fffffe          BL       HAL_MPU_ConfigRegion
;;;49     	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);			        //开启MPU
00006a  2004              MOVS     r0,#4
00006c  f0400101          ORR      r1,r0,#1
000070  4a06              LDR      r2,|L2.140|
000072  3270              ADDS     r2,r2,#0x70
000074  6011              STR      r1,[r2,#0]
000076  4905              LDR      r1,|L2.140|
000078  6809              LDR      r1,[r1,#0]
00007a  f4413180          ORR      r1,r1,#0x10000
00007e  4a03              LDR      r2,|L2.140|
000080  6011              STR      r1,[r2,#0]
000082  bf00              NOP      
;;;50         return 0;
000084  2000              MOVS     r0,#0
;;;51     }
000086  b004              ADD      sp,sp,#0x10
000088  e8bd81f0          POP      {r4-r8,pc}
;;;52     
                          ENDP

                  |L2.140|
                          DCD      0xe000ed24

                          AREA ||i.MemManage_Handler||, CODE, READONLY, ALIGN=2

                  MemManage_Handler PROC
;;;65     //进入此中断以后,将无法恢复程序运行!!
;;;66     void MemManage_Handler(void)
000000  2200              MOVS     r2,#0
;;;67     { 
;;;68     	LED1(0);							//点亮DS1
000002  2101              MOVS     r1,#1
000004  4817              LDR      r0,|L3.100|
000006  f7fffffe          BL       HAL_GPIO_WritePin
;;;69     	printf("Mem Access Error!!\r\n"); 	//输出错误信息
00000a  a017              ADR      r0,|L3.104|
00000c  f7fffffe          BL       __2printf
;;;70     	delay_ms(1000);	
000010  f44f707a          MOV      r0,#0x3e8
000014  f7fffffe          BL       delay_ms
;;;71     	printf("Soft Reseting...\r\n");		//提示软件重启
000018  a019              ADR      r0,|L3.128|
00001a  f7fffffe          BL       __2printf
;;;72     	delay_ms(1000);	
00001e  f44f707a          MOV      r0,#0x3e8
000022  f7fffffe          BL       delay_ms
;;;73     	NVIC_SystemReset();					//软复位
000026  bf00              NOP      
000028  bf00              NOP      
00002a  bf00              NOP      
00002c  bf00              NOP      
00002e  bf00              NOP      
000030  f3bf8f4f          DSB      
000034  bf00              NOP      
000036  bf00              NOP      
000038  bf00              NOP      
00003a  4816              LDR      r0,|L3.148|
00003c  6800              LDR      r0,[r0,#0]
00003e  f40060e0          AND      r0,r0,#0x700
000042  4915              LDR      r1,|L3.152|
000044  4308              ORRS     r0,r0,r1
000046  1d00              ADDS     r0,r0,#4
000048  4912              LDR      r1,|L3.148|
00004a  6008              STR      r0,[r1,#0]
00004c  bf00              NOP      
00004e  bf00              NOP      
000050  bf00              NOP      
000052  f3bf8f4f          DSB      
000056  bf00              NOP      
000058  bf00              NOP      
00005a  bf00              NOP      
00005c  bf00              NOP      
                  |L3.94|
00005e  bf00              NOP      
000060  e7fd              B        |L3.94|
;;;74     }
                          ENDP

000062  0000              DCW      0x0000
                  |L3.100|
                          DCD      0x40020400
                  |L3.104|
000068  4d656d20          DCB      "Mem Access Error!!\r\n",0
00006c  41636365
000070  73732045
000074  72726f72
000078  21210d0a
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0
                  |L3.128|
000080  536f6674          DCB      "Soft Reseting...\r\n",0
000084  20526573
000088  6574696e
00008c  672e2e2e
000090  0d0a00  
000093  00                DCB      0
                  |L3.148|
                          DCD      0xe000ed0c
                  |L3.152|
                          DCD      0x05fa0000

;*** Start embedded assembler ***

#line 1 "..\\HARDWARE\\MPU\\mpu.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_mpu_c_93b5eee3____REV16|
#line 388 "..\\CORE\\cmsis_armcc.h"
|__asm___5_mpu_c_93b5eee3____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_mpu_c_93b5eee3____REVSH|
#line 402
|__asm___5_mpu_c_93b5eee3____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_mpu_c_93b5eee3____RRX|
#line 587
|__asm___5_mpu_c_93b5eee3____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
