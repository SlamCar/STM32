; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\my_function.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\my_function.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\OBJ -I..\USER -I..\HALLIB\STM32F7xx_HAL_Driver\Inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\SDRAM -I..\HARDWARE\IIC -I..\HARDWARE\24CXX -I..\HARDWARE\MPU9250 -I..\HARDWARE\DHT11 -I..\HARDWARE\MPU -I..\USMART -I..\DMP\driver\eMPL -I..\DMP\driver\include -I..\DMP\driver\stm32L -I..\DMP\eMPL-hal -I..\DMP\mllite -I..\DMP\mpl -I..\UCOSIII -I..\UCOSIII\UCOS-BSP -I..\UCOSIII\UCOS-CONFIG -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\uC-CPU\ARM-Cortex-M4\RealView -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-CPU -I..\HARDWARE\MY_FUNCTION -I..\USER -I..\HARDWARE\CRC -I..\HARDWARE\DMA -I..\HARDWARE\HEART_BEAT -I..\HARDWARE\RECEIVE_ANALYZE -I..\HARDWARE\FEED_BACK -I..\HARDWARE\DATA -I"D:\1111111\32F4\Slam car\实验35 MPU9250九轴传感器实验\USER\RTE" -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0 -IF:\Keil_v5\ARM\CMSIS\Include -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__UVISION_VERSION=514 -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=..\obj\my_function.crf ..\HARDWARE\MY_FUNCTION\my_function.c]
                          THUMB

                          AREA ||i.ColorMatch||, CODE, READONLY, ALIGN=1

                  ColorMatch PROC
;;;319    //匹配颜色
;;;320    static int ColorMatch(const COLOR_HSL *Hsl,const TARGET_CONDI *Condition)//HSL格式颜色、判定为的目标条件
000000  4602              MOV      r2,r0
;;;321    	{
;;;322    		if( 
000002  7810              LDRB     r0,[r2,#0]
000004  780b              LDRB     r3,[r1,#0]
000006  4298              CMP      r0,r3
000008  dd15              BLE      |L1.54|
;;;323    					Hsl->hue		>	Condition->H_MIN &&
;;;324    					Hsl->hue		<	Condition->H_MAX &&
00000a  7810              LDRB     r0,[r2,#0]
00000c  784b              LDRB     r3,[r1,#1]
00000e  4298              CMP      r0,r3
000010  da11              BGE      |L1.54|
;;;325    					Hsl->saturation	>	Condition->S_MIN &&
000012  7850              LDRB     r0,[r2,#1]
000014  788b              LDRB     r3,[r1,#2]
000016  4298              CMP      r0,r3
000018  dd0d              BLE      |L1.54|
;;;326    					Hsl->saturation	<   Condition->S_MAX &&
00001a  7850              LDRB     r0,[r2,#1]
00001c  78cb              LDRB     r3,[r1,#3]
00001e  4298              CMP      r0,r3
000020  da09              BGE      |L1.54|
;;;327    					Hsl->luminance	>	Condition->L_MIN &&
000022  7890              LDRB     r0,[r2,#2]
000024  790b              LDRB     r3,[r1,#4]
000026  4298              CMP      r0,r3
000028  dd05              BLE      |L1.54|
;;;328    					Hsl->luminance	<   Condition->L_MAX 
00002a  7890              LDRB     r0,[r2,#2]
00002c  794b              LDRB     r3,[r1,#5]
00002e  4298              CMP      r0,r3
000030  da01              BGE      |L1.54|
;;;329    			)          //hue为色调，saturation为饱和度 ，luminance为亮度
;;;330    				return 1;
000032  2001              MOVS     r0,#1
                  |L1.52|
;;;331    		else
;;;332    				return 0;
;;;333    	}
000034  4770              BX       lr
                  |L1.54|
000036  2000              MOVS     r0,#0                 ;332
000038  e7fc              B        |L1.52|
;;;334    
                          ENDP


                          AREA ||i.Corrode||, CODE, READONLY, ALIGN=1

                  Corrode PROC
;;;378    //从腐蚀中心向外腐蚀，得到新的腐蚀中心
;;;379    static int Corrode(unsigned int oldx,unsigned int oldy,const TARGET_CONDI *Condition,RESULT *Resu)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;380    {
000004  b083              SUB      sp,sp,#0xc
000006  4615              MOV      r5,r2
000008  461f              MOV      r7,r3
;;;381    	
;;;382    	unsigned int Xmin,Xmax,Ymin,Ymax,i,FailCount=0;
00000a  2600              MOVS     r6,#0
;;;383    	COLOR_RGB Rgb;
;;;384    	COLOR_HSL Hsl;
;;;385    	
;;;386    	for(i=oldx;i>IMG_X;i--)
00000c  9c03              LDR      r4,[sp,#0xc]
00000e  e016              B        |L2.62|
                  |L2.16|
;;;387    		{
;;;388    				ReadColor(i,oldy,&Rgb);
000010  aa02              ADD      r2,sp,#8
000012  4620              MOV      r0,r4
000014  9904              LDR      r1,[sp,#0x10]
000016  f7fffffe          BL       ReadColor
;;;389    				RGBtoHSL(&Rgb,&Hsl);
00001a  a901              ADD      r1,sp,#4
00001c  a802              ADD      r0,sp,#8
00001e  f7fffffe          BL       RGBtoHSL
;;;390    				if(!ColorMatch(&Hsl,Condition))
000022  4629              MOV      r1,r5
000024  a801              ADD      r0,sp,#4
000026  f7fffffe          BL       ColorMatch
00002a  b900              CBNZ     r0,|L2.46|
;;;391    					FailCount++;
00002c  1c76              ADDS     r6,r6,#1
                  |L2.46|
;;;392    				if(FailCount>(((Condition->WIDTH_MIN+Condition->WIDTH_MAX)>>2)>>ALLOW_FAIL_PER))
00002e  6929              LDR      r1,[r5,#0x10]
000030  68a8              LDR      r0,[r5,#8]
000032  4408              ADD      r0,r0,r1
000034  ebb61f10          CMP      r6,r0,LSR #4
000038  d900              BLS      |L2.60|
;;;393    					break;	
00003a  e002              B        |L2.66|
                  |L2.60|
00003c  1e64              SUBS     r4,r4,#1              ;386
                  |L2.62|
00003e  2c00              CMP      r4,#0                 ;386
000040  d1e6              BNE      |L2.16|
                  |L2.66|
000042  bf00              NOP      
;;;394    		}
;;;395    	Xmin=i;
000044  46a0              MOV      r8,r4
;;;396    	FailCount=0;
000046  2600              MOVS     r6,#0
;;;397    	
;;;398    	for(i=oldx;i<IMG_X+IMG_W;i++)
000048  9c03              LDR      r4,[sp,#0xc]
00004a  e016              B        |L2.122|
                  |L2.76|
;;;399    		{
;;;400    				ReadColor(i,oldy,&Rgb);
00004c  aa02              ADD      r2,sp,#8
00004e  4620              MOV      r0,r4
000050  9904              LDR      r1,[sp,#0x10]
000052  f7fffffe          BL       ReadColor
;;;401    				RGBtoHSL(&Rgb,&Hsl);
000056  a901              ADD      r1,sp,#4
000058  a802              ADD      r0,sp,#8
00005a  f7fffffe          BL       RGBtoHSL
;;;402    				if(!ColorMatch(&Hsl,Condition))
00005e  4629              MOV      r1,r5
000060  a801              ADD      r0,sp,#4
000062  f7fffffe          BL       ColorMatch
000066  b900              CBNZ     r0,|L2.106|
;;;403    					FailCount++;
000068  1c76              ADDS     r6,r6,#1
                  |L2.106|
;;;404    				if(FailCount>(((Condition->WIDTH_MIN+Condition->WIDTH_MAX)>>2)>>ALLOW_FAIL_PER))
00006a  6929              LDR      r1,[r5,#0x10]
00006c  68a8              LDR      r0,[r5,#8]
00006e  4408              ADD      r0,r0,r1
000070  ebb61f10          CMP      r6,r0,LSR #4
000074  d900              BLS      |L2.120|
;;;405    					break;	
000076  e003              B        |L2.128|
                  |L2.120|
000078  1c64              ADDS     r4,r4,#1              ;398
                  |L2.122|
00007a  f5b47fa0          CMP      r4,#0x140             ;398
00007e  d3e5              BCC      |L2.76|
                  |L2.128|
000080  bf00              NOP      
;;;406    		}
;;;407    	Xmax=i;
000082  46a1              MOV      r9,r4
;;;408    	FailCount=0;
000084  2600              MOVS     r6,#0
;;;409    	
;;;410    	for(i=oldy;i>IMG_Y;i--)
000086  9c04              LDR      r4,[sp,#0x10]
000088  e016              B        |L2.184|
                  |L2.138|
;;;411    		{
;;;412    				ReadColor(oldx,i,&Rgb);
00008a  aa02              ADD      r2,sp,#8
00008c  4621              MOV      r1,r4
00008e  9803              LDR      r0,[sp,#0xc]
000090  f7fffffe          BL       ReadColor
;;;413    				RGBtoHSL(&Rgb,&Hsl);
000094  a901              ADD      r1,sp,#4
000096  a802              ADD      r0,sp,#8
000098  f7fffffe          BL       RGBtoHSL
;;;414    				if(!ColorMatch(&Hsl,Condition))
00009c  4629              MOV      r1,r5
00009e  a801              ADD      r0,sp,#4
0000a0  f7fffffe          BL       ColorMatch
0000a4  b900              CBNZ     r0,|L2.168|
;;;415    					FailCount++;
0000a6  1c76              ADDS     r6,r6,#1
                  |L2.168|
;;;416    				if(FailCount>(((Condition->HIGHT_MIN+Condition->HIGHT_MAX)>>2)>>ALLOW_FAIL_PER))
0000a8  6969              LDR      r1,[r5,#0x14]
0000aa  68e8              LDR      r0,[r5,#0xc]
0000ac  4408              ADD      r0,r0,r1
0000ae  ebb61f10          CMP      r6,r0,LSR #4
0000b2  d900              BLS      |L2.182|
;;;417    					break;	
0000b4  e002              B        |L2.188|
                  |L2.182|
0000b6  1e64              SUBS     r4,r4,#1              ;410
                  |L2.184|
0000b8  2c00              CMP      r4,#0                 ;410
0000ba  d1e6              BNE      |L2.138|
                  |L2.188|
0000bc  bf00              NOP      
;;;418    		}
;;;419    	Ymin=i;
0000be  46a2              MOV      r10,r4
;;;420    	FailCount=0;
0000c0  2600              MOVS     r6,#0
;;;421    	
;;;422    	for(i=oldy;i<IMG_Y+IMG_H;i++)
0000c2  9c04              LDR      r4,[sp,#0x10]
0000c4  e016              B        |L2.244|
                  |L2.198|
;;;423    		{
;;;424    				ReadColor(oldx,i,&Rgb);
0000c6  aa02              ADD      r2,sp,#8
0000c8  4621              MOV      r1,r4
0000ca  9803              LDR      r0,[sp,#0xc]
0000cc  f7fffffe          BL       ReadColor
;;;425    				RGBtoHSL(&Rgb,&Hsl);
0000d0  a901              ADD      r1,sp,#4
0000d2  a802              ADD      r0,sp,#8
0000d4  f7fffffe          BL       RGBtoHSL
;;;426    				if(!ColorMatch(&Hsl,Condition))
0000d8  4629              MOV      r1,r5
0000da  a801              ADD      r0,sp,#4
0000dc  f7fffffe          BL       ColorMatch
0000e0  b900              CBNZ     r0,|L2.228|
;;;427    					FailCount++;
0000e2  1c76              ADDS     r6,r6,#1
                  |L2.228|
;;;428    				if(FailCount>(((Condition->HIGHT_MIN+Condition->HIGHT_MAX)>>2)>>ALLOW_FAIL_PER))
0000e4  6969              LDR      r1,[r5,#0x14]
0000e6  68e8              LDR      r0,[r5,#0xc]
0000e8  4408              ADD      r0,r0,r1
0000ea  ebb61f10          CMP      r6,r0,LSR #4
0000ee  d900              BLS      |L2.242|
;;;429    					break;	
0000f0  e002              B        |L2.248|
                  |L2.242|
0000f2  1c64              ADDS     r4,r4,#1              ;422
                  |L2.244|
0000f4  2cf0              CMP      r4,#0xf0              ;422
0000f6  d3e6              BCC      |L2.198|
                  |L2.248|
0000f8  bf00              NOP      
;;;430    		}
;;;431    	Ymax=i;
0000fa  46a3              MOV      r11,r4
;;;432    	FailCount=0;
0000fc  2600              MOVS     r6,#0
;;;433    	
;;;434    	Resu->x	= (Xmin+Xmax)/2;
0000fe  eb080009          ADD      r0,r8,r9
000102  0840              LSRS     r0,r0,#1
000104  6038              STR      r0,[r7,#0]
;;;435    	Resu->y	= (Ymin+Ymax)/2;
000106  eb0a000b          ADD      r0,r10,r11
00010a  0840              LSRS     r0,r0,#1
00010c  6078              STR      r0,[r7,#4]
;;;436    	Resu->w	= Xmax-Xmin;
00010e  eba90008          SUB      r0,r9,r8
000112  60b8              STR      r0,[r7,#8]
;;;437    	Resu->h	= Ymax-Ymin;
000114  ebab000a          SUB      r0,r11,r10
000118  60f8              STR      r0,[r7,#0xc]
;;;438    
;;;439    	if(
00011a  eba90008          SUB      r0,r9,r8
00011e  68a9              LDR      r1,[r5,#8]
000120  4288              CMP      r0,r1
000122  d912              BLS      |L2.330|
;;;440    			 ((Xmax-Xmin)>(Condition->WIDTH_MIN)) && ((Ymax-Ymin)>(Condition->HIGHT_MIN)) &&\
000124  ebab000a          SUB      r0,r11,r10
000128  68e9              LDR      r1,[r5,#0xc]
00012a  4288              CMP      r0,r1
00012c  d90d              BLS      |L2.330|
;;;441    			 ((Xmax-Xmin)<(Condition->WIDTH_MAX)) && ((Ymax-Ymin)<(Condition->HIGHT_MAX))
00012e  eba90008          SUB      r0,r9,r8
000132  6929              LDR      r1,[r5,#0x10]
000134  4288              CMP      r0,r1
000136  d208              BCS      |L2.330|
000138  ebab000a          SUB      r0,r11,r10
00013c  6969              LDR      r1,[r5,#0x14]
00013e  4288              CMP      r0,r1
000140  d203              BCS      |L2.330|
;;;442    	   )
;;;443    		  return 1;	
000142  2001              MOVS     r0,#1
                  |L2.324|
;;;444    	else
;;;445    		  return 0;	
;;;446    }
000144  b007              ADD      sp,sp,#0x1c
000146  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.330|
00014a  2000              MOVS     r0,#0                 ;445
00014c  e7fa              B        |L2.324|
;;;447    
                          ENDP


                          AREA ||i.RGBtoHSL||, CODE, READONLY, ALIGN=1

                  RGBtoHSL PROC
;;;264    //RGB转HSL
;;;265    static void RGBtoHSL(const COLOR_RGB *Rgb, COLOR_HSL *Hsl)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;266    	{
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
;;;267    			int h,s,l,maxVal,minVal,difVal;
;;;268    			int r  = Rgb->red;
000008  f8985000          LDRB     r5,[r8,#0]
;;;269    			int g  = Rgb->green;
00000c  f8981001          LDRB     r1,[r8,#1]
;;;270    			int b  = Rgb->blue;
000010  f8982002          LDRB     r2,[r8,#2]
;;;271    		
;;;272    				maxVal = max3v(r, g, b);
000014  428d              CMP      r5,r1
000016  da05              BGE      |L3.36|
000018  4291              CMP      r1,r2
00001a  da01              BGE      |L3.32|
00001c  4692              MOV      r10,r2
00001e  e006              B        |L3.46|
                  |L3.32|
000020  468a              MOV      r10,r1
000022  e004              B        |L3.46|
                  |L3.36|
000024  4295              CMP      r5,r2
000026  da01              BGE      |L3.44|
000028  4692              MOV      r10,r2
00002a  e000              B        |L3.46|
                  |L3.44|
00002c  46aa              MOV      r10,r5
                  |L3.46|
00002e  4650              MOV      r0,r10
;;;273    				minVal = min3v(r, g, b);
000030  428d              CMP      r5,r1
000032  dd05              BLE      |L3.64|
000034  4291              CMP      r1,r2
000036  dd01              BLE      |L3.60|
000038  4692              MOV      r10,r2
00003a  e006              B        |L3.74|
                  |L3.60|
00003c  468a              MOV      r10,r1
00003e  e004              B        |L3.74|
                  |L3.64|
000040  4295              CMP      r5,r2
000042  dd01              BLE      |L3.72|
000044  4692              MOV      r10,r2
000046  e000              B        |L3.74|
                  |L3.72|
000048  46aa              MOV      r10,r5
                  |L3.74|
00004a  4657              MOV      r7,r10
;;;274    				
;;;275    				difVal = maxVal-minVal;
00004c  1bc3              SUBS     r3,r0,r7
;;;276    		
;;;277    		//计算亮度
;;;278    			l = (maxVal+minVal)*240/255/2;
00004e  eb000b07          ADD      r11,r0,r7
000052  ebcb1b0b          RSB      r11,r11,r11,LSL #4
000056  ea4f1b0b          LSL      r11,r11,#4
00005a  f04f0eff          MOV      lr,#0xff
00005e  fb9bfafe          SDIV     r10,r11,lr
000062  eb0a7bda          ADD      r11,r10,r10,LSR #31
000066  ea4f0c6b          ASR      r12,r11,#1
;;;279    		
;;;280    		if(maxVal == minVal)//若r=g=b
00006a  42b8              CMP      r0,r7
00006c  d102              BNE      |L3.116|
;;;281    			{
;;;282    				h = 0; 
00006e  2400              MOVS     r4,#0
;;;283    				s = 0;
000070  2600              MOVS     r6,#0
000072  e058              B        |L3.294|
                  |L3.116|
;;;284    			}
;;;285    		else
;;;286    		{
;;;287    			//计算色调
;;;288    			if(maxVal==r)
000074  42a8              CMP      r0,r5
000076  d115              BNE      |L3.164|
;;;289    			{
;;;290    				if(g>=b)
000078  4291              CMP      r1,r2
00007a  db08              BLT      |L3.142|
;;;291    					h = 40*(g-b)/(difVal);
00007c  eba10a02          SUB      r10,r1,r2
000080  eb0a0a8a          ADD      r10,r10,r10,LSL #2
000084  ea4f0aca          LSL      r10,r10,#3
000088  fb9af4f3          SDIV     r4,r10,r3
00008c  e023              B        |L3.214|
                  |L3.142|
;;;292    				else
;;;293    					h = 40*(g-b)/(difVal) + 240;
00008e  eba10a02          SUB      r10,r1,r2
000092  eb0a0a8a          ADD      r10,r10,r10,LSL #2
000096  ea4f0aca          LSL      r10,r10,#3
00009a  fb9afaf3          SDIV     r10,r10,r3
00009e  f10a04f0          ADD      r4,r10,#0xf0
0000a2  e018              B        |L3.214|
                  |L3.164|
;;;294    			}
;;;295    			else if(maxVal==g)
0000a4  4288              CMP      r0,r1
0000a6  d10a              BNE      |L3.190|
;;;296    					h = 40*(b-r)/(difVal) + 80;
0000a8  eba20a05          SUB      r10,r2,r5
0000ac  eb0a0a8a          ADD      r10,r10,r10,LSL #2
0000b0  ea4f0aca          LSL      r10,r10,#3
0000b4  fb9afaf3          SDIV     r10,r10,r3
0000b8  f10a0450          ADD      r4,r10,#0x50
0000bc  e00b              B        |L3.214|
                  |L3.190|
;;;297    			else if(maxVal==b)
0000be  4290              CMP      r0,r2
0000c0  d109              BNE      |L3.214|
;;;298    					h = 40*(r-g)/(difVal) + 160;
0000c2  eba50a01          SUB      r10,r5,r1
0000c6  eb0a0a8a          ADD      r10,r10,r10,LSL #2
0000ca  ea4f0aca          LSL      r10,r10,#3
0000ce  fb9afaf3          SDIV     r10,r10,r3
0000d2  f10a04a0          ADD      r4,r10,#0xa0
                  |L3.214|
;;;299    			//计算饱和度
;;;300    			if(l == 0)
0000d6  f1bc0f00          CMP      r12,#0
0000da  d10c              BNE      |L3.246|
;;;301    					s = (difVal)*240/(511 - (maxVal+minVal));
0000dc  ebc31a03          RSB      r10,r3,r3,LSL #4
0000e0  ea4f1a0a          LSL      r10,r10,#4
0000e4  eb000b07          ADD      r11,r0,r7
0000e8  f2401eff          MOV      lr,#0x1ff
0000ec  ebae0b0b          SUB      r11,lr,r11
0000f0  fb9af6fb          SDIV     r6,r10,r11
0000f4  e017              B        |L3.294|
                  |L3.246|
;;;302    			else if(l<=120)
0000f6  f1bc0f78          CMP      r12,#0x78
0000fa  dc08              BGT      |L3.270|
;;;303    					s = (difVal)*240/(maxVal+minVal);
0000fc  ebc31a03          RSB      r10,r3,r3,LSL #4
000100  ea4f1a0a          LSL      r10,r10,#4
000104  eb000b07          ADD      r11,r0,r7
000108  fb9af6fb          SDIV     r6,r10,r11
00010c  e00b              B        |L3.294|
                  |L3.270|
;;;304    			else
;;;305    					s = (difVal)*240/(511 - (maxVal+minVal));
00010e  ebc31a03          RSB      r10,r3,r3,LSL #4
000112  ea4f1a0a          LSL      r10,r10,#4
000116  eb000b07          ADD      r11,r0,r7
00011a  f2401eff          MOV      lr,#0x1ff
00011e  ebae0b0b          SUB      r11,lr,r11
000122  fb9af6fb          SDIV     r6,r10,r11
                  |L3.294|
;;;306    		}
;;;307    			Hsl->hue =        (unsigned char)(((h>240)? 240 : ((h<0)?0:h)));//色度
000126  2cf0              CMP      r4,#0xf0
000128  dd02              BLE      |L3.304|
00012a  f04f0af0          MOV      r10,#0xf0
00012e  e005              B        |L3.316|
                  |L3.304|
000130  2c00              CMP      r4,#0
000132  da02              BGE      |L3.314|
000134  f04f0a00          MOV      r10,#0
000138  e000              B        |L3.316|
                  |L3.314|
00013a  46a2              MOV      r10,r4
                  |L3.316|
00013c  f889a000          STRB     r10,[r9,#0]
;;;308    			Hsl->saturation = (unsigned char)(((s>240)? 240 : ((s<0)?0:s)));//饱和度
000140  2ef0              CMP      r6,#0xf0
000142  dd02              BLE      |L3.330|
000144  f04f0af0          MOV      r10,#0xf0
000148  e005              B        |L3.342|
                  |L3.330|
00014a  2e00              CMP      r6,#0
00014c  da02              BGE      |L3.340|
00014e  f04f0a00          MOV      r10,#0
000152  e000              B        |L3.342|
                  |L3.340|
000154  46b2              MOV      r10,r6
                  |L3.342|
000156  f889a001          STRB     r10,[r9,#1]
;;;309    			Hsl->luminance =  (unsigned char)(((l>240)? 240 : ((l<0)?0:l)));//亮度
00015a  f1bc0ff0          CMP      r12,#0xf0
00015e  dd02              BLE      |L3.358|
000160  f04f0af0          MOV      r10,#0xf0
000164  e006              B        |L3.372|
                  |L3.358|
000166  f1bc0f00          CMP      r12,#0
00016a  da02              BGE      |L3.370|
00016c  f04f0a00          MOV      r10,#0
000170  e000              B        |L3.372|
                  |L3.370|
000172  46e2              MOV      r10,r12
                  |L3.372|
000174  f889a002          STRB     r10,[r9,#2]
;;;310    //            k++;
;;;311    //		    if(k>1000)
;;;312    //			{
;;;313    //			  printf("%d  %d  %d    ",Hsl->hue,Hsl->saturation,Hsl->luminance);
;;;314    //				k=0;
;;;315    //			}
;;;316    			
;;;317    	}
000178  e8bd8ff0          POP      {r4-r11,pc}
;;;318    
                          ENDP


                          AREA ||i.ReadColor||, CODE, READONLY, ALIGN=1

                  ReadColor PROC
;;;250    
;;;251    static void ReadColor(unsigned int x,unsigned int y,COLOR_RGB *Rgb)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;252    	{
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;253    		unsigned short C16;
;;;254    
;;;255    		C16 = LCD_ReadPoint(x,y);     //读某点颜色
00000a  b2b9              UXTH     r1,r7
00000c  b2b0              UXTH     r0,r6
00000e  f7fffffe          BL       LCD_ReadPoint
000012  4605              MOV      r5,r0
;;;256    
;;;257    		Rgb->red   =	 (unsigned char)((C16&0xf800)>>8);
000014  f4054078          AND      r0,r5,#0xf800
000018  1200              ASRS     r0,r0,#8
00001a  7020              STRB     r0,[r4,#0]
;;;258    		Rgb->green =	 (unsigned char)((C16&0x07e0)>>3);
00001c  f40560fc          AND      r0,r5,#0x7e0
000020  10c0              ASRS     r0,r0,#3
000022  7060              STRB     r0,[r4,#1]
;;;259    		Rgb->blue  =   (unsigned char)((C16&0x001f)<<3);
000024  06e8              LSLS     r0,r5,#27
000026  0e00              LSRS     r0,r0,#24
000028  70a0              STRB     r0,[r4,#2]
;;;260    	}
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;261    
                          ENDP


                          AREA ||i.SearchCentre||, CODE, READONLY, ALIGN=1

                  SearchCentre PROC
;;;335    //搜索腐蚀中心
;;;336    static int SearchCentre(unsigned int *x,unsigned int *y,const TARGET_CONDI *Condition,const SEARCH_AREA *Area)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;337    //TARGET_CONDI判定为的目标条件、SEARCH_AREA区域
;;;338    	{
000004  b083              SUB      sp,sp,#0xc
000006  4692              MOV      r10,r2
000008  461f              MOV      r7,r3
;;;339    			unsigned int SpaceX,SpaceY,i,j,k,FailCount=0;
00000a  f04f0b00          MOV      r11,#0
;;;340    			COLOR_RGB Rgb;
;;;341    			COLOR_HSL Hsl;
;;;342    			
;;;343    			SpaceX = Condition->WIDTH_MIN/3;   //目标最小宽度
00000e  2103              MOVS     r1,#3
000010  f8da0008          LDR      r0,[r10,#8]
000014  fbb0f4f1          UDIV     r4,r0,r1
;;;344    			SpaceY = Condition->HIGHT_MIN/3;   //目标最小高度
000018  f8da000c          LDR      r0,[r10,#0xc]
00001c  fbb0f5f1          UDIV     r5,r0,r1
;;;345    		
;;;346    //			SpaceX = Condition->WIDTH_MIN;   //目标最小宽度
;;;347    //			SpaceY = Condition->HIGHT_MIN;   //目标最小高度
;;;348    
;;;349    				for(i=Area->Y_Start;i<Area->Y_End;i+=SpaceY)
000020  f8d78008          LDR      r8,[r7,#8]
000024  e041              B        |L5.170|
                  |L5.38|
;;;350    				{
;;;351    					for(j=Area->X_Start;j<Area->X_End;j+=SpaceX)
000026  f8d79000          LDR      r9,[r7,#0]
00002a  e03a              B        |L5.162|
                  |L5.44|
;;;352    					{
;;;353    						FailCount=0;
00002c  f04f0b00          MOV      r11,#0
;;;354    						for(k=0;k<SpaceX+SpaceY;k++)
000030  2600              MOVS     r6,#0
000032  e022              B        |L5.122|
                  |L5.52|
;;;355    						{
;;;356    							if(k<SpaceX)
000034  42a6              CMP      r6,r4
000036  d207              BCS      |L5.72|
;;;357    								ReadColor(j+k,i+SpaceY/2,&Rgb);
000038  eb080155          ADD      r1,r8,r5,LSR #1
00003c  eb090006          ADD      r0,r9,r6
000040  aa02              ADD      r2,sp,#8
000042  f7fffffe          BL       ReadColor
000046  e007              B        |L5.88|
                  |L5.72|
;;;358    							else
;;;359    								ReadColor(j+SpaceX/2,i+(k-SpaceX),&Rgb);
000048  1b32              SUBS     r2,r6,r4
00004a  eb020108          ADD      r1,r2,r8
00004e  eb090054          ADD      r0,r9,r4,LSR #1
000052  aa02              ADD      r2,sp,#8
000054  f7fffffe          BL       ReadColor
                  |L5.88|
;;;360    							  RGBtoHSL(&Rgb,&Hsl);
000058  a901              ADD      r1,sp,#4
00005a  a802              ADD      r0,sp,#8
00005c  f7fffffe          BL       RGBtoHSL
;;;361    							
;;;362    							if(!ColorMatch(&Hsl,Condition))
000060  4651              MOV      r1,r10
000062  a801              ADD      r0,sp,#4
000064  f7fffffe          BL       ColorMatch
000068  b908              CBNZ     r0,|L5.110|
;;;363    								FailCount++;
00006a  f10b0b01          ADD      r11,r11,#1
                  |L5.110|
;;;364    							if(FailCount>((SpaceX+SpaceY)>>ALLOW_FAIL_PER))
00006e  1960              ADDS     r0,r4,r5
000070  ebbb0f90          CMP      r11,r0,LSR #2
000074  d900              BLS      |L5.120|
;;;365    								break;
000076  e003              B        |L5.128|
                  |L5.120|
000078  1c76              ADDS     r6,r6,#1              ;354
                  |L5.122|
00007a  1960              ADDS     r0,r4,r5              ;354
00007c  42b0              CMP      r0,r6                 ;354
00007e  d8d9              BHI      |L5.52|
                  |L5.128|
000080  bf00              NOP      
;;;366    						}
;;;367    						if(k==SpaceX+SpaceY)
000082  1960              ADDS     r0,r4,r5
000084  42b0              CMP      r0,r6
000086  d10b              BNE      |L5.160|
;;;368    						{
;;;369    							*x = j+SpaceX/2;
000088  eb090154          ADD      r1,r9,r4,LSR #1
00008c  9803              LDR      r0,[sp,#0xc]
00008e  6001              STR      r1,[r0,#0]
;;;370    							*y = i+SpaceY/2;
000090  eb080155          ADD      r1,r8,r5,LSR #1
000094  9804              LDR      r0,[sp,#0x10]
000096  6001              STR      r1,[r0,#0]
;;;371    							return 1;
000098  2001              MOVS     r0,#1
                  |L5.154|
;;;372    						}
;;;373    					}
;;;374    				}
;;;375    		return 0;
;;;376    	}
00009a  b007              ADD      sp,sp,#0x1c
00009c  e8bd8ff0          POP      {r4-r11,pc}
                  |L5.160|
0000a0  44a1              ADD      r9,r9,r4              ;351
                  |L5.162|
0000a2  6878              LDR      r0,[r7,#4]            ;351
0000a4  4548              CMP      r0,r9                 ;351
0000a6  d8c1              BHI      |L5.44|
0000a8  44a8              ADD      r8,r8,r5              ;349
                  |L5.170|
0000aa  68f8              LDR      r0,[r7,#0xc]          ;349
0000ac  4540              CMP      r0,r8                 ;349
0000ae  d8ba              BHI      |L5.38|
0000b0  2000              MOVS     r0,#0                 ;375
0000b2  e7f2              B        |L5.154|
;;;377    
                          ENDP


                          AREA ||i.Trace||, CODE, READONLY, ALIGN=2

                  Trace PROC
;;;459    //返回1识别成功，返回1识别失败
;;;460    int Trace(const TARGET_CONDI *Condition,RESULT *Resu)  //TARGET_CONDI识别条件  RESULT识别结果
000000  b57f              PUSH     {r0-r6,lr}
;;;461    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;462    	unsigned int i;
;;;463    	static unsigned int x0,y0,flag=0;  //静态变量
;;;464    	static SEARCH_AREA Area={IMG_X,IMG_X+IMG_W,IMG_Y,IMG_Y+IMG_H};  //x坐标 y坐标  w宽度  h高度
;;;465    	RESULT Result;	//RESULT识别结果
;;;466    	
;;;467    
;;;468    	if(flag==0)    //已经定义
000006  4836              LDR      r0,|L6.224|
000008  6800              LDR      r0,[r0,#0]  ; flag
00000a  bb00              CBNZ     r0,|L6.78|
;;;469    		{
;;;470    			if(SearchCentre(&x0,&y0,Condition,&Area))  //搜索腐蚀中心   &是取地址运算符
00000c  4b35              LDR      r3,|L6.228|
00000e  4632              MOV      r2,r6
000010  4935              LDR      r1,|L6.232|
000012  4836              LDR      r0,|L6.236|
000014  f7fffffe          BL       SearchCentre
000018  b118              CBZ      r0,|L6.34|
;;;471    				 flag=1;
00001a  2001              MOVS     r0,#1
00001c  4930              LDR      r1,|L6.224|
00001e  6008              STR      r0,[r1,#0]  ; flag
000020  e015              B        |L6.78|
                  |L6.34|
;;;472    			else
;;;473    				{
;;;474    						Area.X_Start= IMG_X	       ;
000022  2000              MOVS     r0,#0
000024  492f              LDR      r1,|L6.228|
000026  6008              STR      r0,[r1,#0]  ; Area
;;;475    						Area.X_End  = IMG_X+IMG_W  ;
000028  f44f70a0          MOV      r0,#0x140
00002c  6048              STR      r0,[r1,#4]  ; Area
;;;476    						Area.Y_Start= IMG_Y		     ;
00002e  2000              MOVS     r0,#0
000030  6088              STR      r0,[r1,#8]  ; Area
;;;477    						Area.Y_End  = IMG_Y+IMG_H  ;
000032  20f0              MOVS     r0,#0xf0
000034  60c8              STR      r0,[r1,#0xc]  ; Area
;;;478    
;;;479    						if(SearchCentre(&x0,&y0,Condition,&Area))	
000036  460b              MOV      r3,r1
000038  4632              MOV      r2,r6
00003a  492b              LDR      r1,|L6.232|
00003c  482b              LDR      r0,|L6.236|
00003e  f7fffffe          BL       SearchCentre
000042  b120              CBZ      r0,|L6.78|
;;;480    						{
;;;481    							flag=0;
000044  2000              MOVS     r0,#0
000046  4926              LDR      r1,|L6.224|
000048  6008              STR      r0,[r1,#0]  ; flag
                  |L6.74|
;;;482    							return 0;
;;;483    						}	
;;;484    				}
;;;485    		}
;;;486    		
;;;487    	Result.x = x0;
;;;488    	Result.y = y0;
;;;489    	
;;;490    	for(i=0;i<ITERATE_NUM;i++)  //进行迭代计算
;;;491    		 Corrode(Result.x,Result.y,Condition,&Result);
;;;492    		
;;;493    	if(Corrode(Result.x,Result.y,Condition,&Result))//从腐蚀中心向外腐蚀
;;;494    		{
;;;495    			x0=Result.x;
;;;496    			y0=Result.y;
;;;497    			Resu->x=Result.x;
;;;498    			Resu->y=Result.y;
;;;499    			Resu->w=Result.w;
;;;500    			Resu->h=Result.h;
;;;501    			flag=1;
;;;502    
;;;503    			Area.X_Start= Result.x - ((Result.w)>>1);
;;;504    			Area.X_End  = Result.x + ((Result.w)>>1);
;;;505    			Area.Y_Start= Result.y - ((Result.h)>>1);
;;;506    			Area.Y_End  = Result.y + ((Result.h)>>1);
;;;507    
;;;508    
;;;509    			return 1;
;;;510    		}
;;;511    	else
;;;512    		{
;;;513    			flag=0;
;;;514    			return 0;
;;;515    		}
;;;516    
;;;517    }
00004a  b004              ADD      sp,sp,#0x10
00004c  bd70              POP      {r4-r6,pc}
                  |L6.78|
00004e  4827              LDR      r0,|L6.236|
000050  6800              LDR      r0,[r0,#0]            ;487  ; x0
000052  9000              STR      r0,[sp,#0]            ;487
000054  4824              LDR      r0,|L6.232|
000056  6800              LDR      r0,[r0,#0]            ;488  ; y0
000058  9001              STR      r0,[sp,#4]            ;488
00005a  2500              MOVS     r5,#0                 ;490
00005c  e006              B        |L6.108|
                  |L6.94|
00005e  466b              MOV      r3,sp                 ;491
000060  4632              MOV      r2,r6                 ;491
000062  e9dd0100          LDRD     r0,r1,[sp,#0]         ;491
000066  f7fffffe          BL       Corrode
00006a  1c6d              ADDS     r5,r5,#1              ;490
                  |L6.108|
00006c  2d08              CMP      r5,#8                 ;490
00006e  d3f6              BCC      |L6.94|
000070  466b              MOV      r3,sp                 ;493
000072  4632              MOV      r2,r6                 ;493
000074  e9dd0100          LDRD     r0,r1,[sp,#0]         ;493
000078  f7fffffe          BL       Corrode
00007c  b350              CBZ      r0,|L6.212|
00007e  491b              LDR      r1,|L6.236|
000080  9800              LDR      r0,[sp,#0]            ;495
000082  6008              STR      r0,[r1,#0]            ;495  ; x0
000084  4918              LDR      r1,|L6.232|
000086  9801              LDR      r0,[sp,#4]            ;496
000088  6008              STR      r0,[r1,#0]            ;496  ; y0
00008a  9800              LDR      r0,[sp,#0]            ;497
00008c  6020              STR      r0,[r4,#0]            ;497
00008e  9801              LDR      r0,[sp,#4]            ;498
000090  6060              STR      r0,[r4,#4]            ;498
000092  9802              LDR      r0,[sp,#8]            ;499
000094  60a0              STR      r0,[r4,#8]            ;499
000096  9803              LDR      r0,[sp,#0xc]          ;500
000098  60e0              STR      r0,[r4,#0xc]          ;500
00009a  2001              MOVS     r0,#1                 ;501
00009c  4910              LDR      r1,|L6.224|
00009e  6008              STR      r0,[r1,#0]            ;501  ; flag
0000a0  9902              LDR      r1,[sp,#8]            ;503
0000a2  9800              LDR      r0,[sp,#0]            ;503
0000a4  eba00051          SUB      r0,r0,r1,LSR #1       ;503
0000a8  490e              LDR      r1,|L6.228|
0000aa  6008              STR      r0,[r1,#0]            ;503  ; Area
0000ac  9902              LDR      r1,[sp,#8]            ;504
0000ae  9800              LDR      r0,[sp,#0]            ;504
0000b0  eb000051          ADD      r0,r0,r1,LSR #1       ;504
0000b4  490b              LDR      r1,|L6.228|
0000b6  6048              STR      r0,[r1,#4]            ;504  ; Area
0000b8  9903              LDR      r1,[sp,#0xc]          ;505
0000ba  9801              LDR      r0,[sp,#4]            ;505
0000bc  eba00051          SUB      r0,r0,r1,LSR #1       ;505
0000c0  4908              LDR      r1,|L6.228|
0000c2  6088              STR      r0,[r1,#8]            ;505  ; Area
0000c4  9903              LDR      r1,[sp,#0xc]          ;506
0000c6  9801              LDR      r0,[sp,#4]            ;506
0000c8  eb000051          ADD      r0,r0,r1,LSR #1       ;506
0000cc  4905              LDR      r1,|L6.228|
0000ce  60c8              STR      r0,[r1,#0xc]          ;506  ; Area
0000d0  2001              MOVS     r0,#1                 ;509
0000d2  e7ba              B        |L6.74|
                  |L6.212|
0000d4  2000              MOVS     r0,#0                 ;513
0000d6  4902              LDR      r1,|L6.224|
0000d8  6008              STR      r0,[r1,#0]            ;513  ; flag
0000da  bf00              NOP                            ;514
0000dc  e7b5              B        |L6.74|
;;;518    
                          ENDP

0000de  0000              DCW      0x0000
                  |L6.224|
                          DCD      flag
                  |L6.228|
                          DCD      Area
                  |L6.232|
                          DCD      ||y0||
                  |L6.236|
                          DCD      ||x0||

                          AREA ||i.cal_crc||, CODE, READONLY, ALIGN=2

                  cal_crc PROC
;;;58     
;;;59     unsigned int cal_crc(u16 *ptr, unsigned char len) 
000000  b5f0              PUSH     {r4-r7,lr}
;;;60     {
000002  f5ad7d01          SUB      sp,sp,#0x204
000006  4605              MOV      r5,r0
000008  460e              MOV      r6,r1
;;;61     	OS_ERR err;
;;;62     	u8 i;
;;;63     	u16 crc;
;;;64     	u8 da;
;;;65     	u16 crc_ta[256]={ /* CRC ??? */
00000a  f44f7200          MOV      r2,#0x200
00000e  490f              LDR      r1,|L7.76|
000010  a801              ADD      r0,sp,#4
000012  f7fffffe          BL       __aeabi_memcpy4
;;;66     	0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7,
;;;67     	0x8108, 0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad, 0xe1ce, 0xf1ef,
;;;68     	0x1231, 0x0210, 0x3273, 0x2252, 0x52b5, 0x4294, 0x72f7, 0x62d6,
;;;69     	0x9339, 0x8318, 0xb37b, 0xa35a, 0xd3bd, 0xc39c, 0xf3ff, 0xe3de,
;;;70     	0x2462, 0x3443, 0x0420, 0x1401, 0x64e6, 0x74c7, 0x44a4, 0x5485,
;;;71     	0xa56a, 0xb54b, 0x8528, 0x9509, 0xe5ee, 0xf5cf, 0xc5ac, 0xd58d,
;;;72     	0x3653, 0x2672, 0x1611, 0x0630, 0x76d7, 0x66f6, 0x5695, 0x46b4,
;;;73     	0xb75b, 0xa77a, 0x9719, 0x8738, 0xf7df, 0xe7fe, 0xd79d, 0xc7bc,
;;;74     	0x48c4, 0x58e5, 0x6886, 0x78a7, 0x0840, 0x1861, 0x2802, 0x3823,
;;;75     	0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948, 0x9969, 0xa90a, 0xb92b,
;;;76     	0x5af5, 0x4ad4, 0x7ab7, 0x6a96, 0x1a71, 0x0a50, 0x3a33, 0x2a12,
;;;77     	0xdbfd, 0xcbdc, 0xfbbf, 0xeb9e, 0x9b79, 0x8b58, 0xbb3b, 0xab1a,
;;;78     	0x6ca6, 0x7c87, 0x4ce4, 0x5cc5, 0x2c22, 0x3c03, 0x0c60, 0x1c41,
;;;79     	0xedae, 0xfd8f, 0xcdec, 0xddcd, 0xad2a, 0xbd0b, 0x8d68, 0x9d49,
;;;80     	0x7e97, 0x6eb6, 0x5ed5, 0x4ef4, 0x3e13, 0x2e32, 0x1e51, 0x0e70,
;;;81     	0xff9f, 0xefbe, 0xdfdd, 0xcffc, 0xbf1b, 0xaf3a, 0x9f59, 0x8f78,
;;;82     	0x9188, 0x81a9, 0xb1ca, 0xa1eb, 0xd10c, 0xc12d, 0xf14e, 0xe16f,
;;;83     	0x1080, 0x00a1, 0x30c2, 0x20e3, 0x5004, 0x4025, 0x7046, 0x6067,
;;;84     	0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d, 0xd31c, 0xe37f, 0xf35e,
;;;85     	0x02b1, 0x1290, 0x22f3, 0x32d2, 0x4235, 0x5214, 0x6277, 0x7256,
;;;86     	0xb5ea, 0xa5cb, 0x95a8, 0x8589, 0xf56e, 0xe54f, 0xd52c, 0xc50d,
;;;87     	0x34e2, 0x24c3, 0x14a0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
;;;88     	0xa7db, 0xb7fa, 0x8799, 0x97b8, 0xe75f, 0xf77e, 0xc71d, 0xd73c,
;;;89     	0x26d3, 0x36f2, 0x0691, 0x16b0, 0x6657, 0x7676, 0x4615, 0x5634,
;;;90     	0xd94c, 0xc96d, 0xf90e, 0xe92f, 0x99c8, 0x89e9, 0xb98a, 0xa9ab,
;;;91     	0x5844, 0x4865, 0x7806, 0x6827, 0x18c0, 0x08e1, 0x3882, 0x28a3,
;;;92     	0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a,
;;;93     	0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0, 0x2ab3, 0x3a92,
;;;94     	0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b, 0x9de8, 0x8dc9,
;;;95     	0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1,
;;;96     	0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
;;;97     	0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0
;;;98     };
;;;99     	
;;;100       crc=0;
000016  2400              MOVS     r4,#0
;;;101       
;;;102    
;;;103    //    for(i=len;i>0;i--)
;;;104    	while(len--!=0) 
000018  e010              B        |L7.60|
                  |L7.26|
;;;105    	{
;;;106    		da=(u8) (crc/256); /* ? 8 ?????????? CRC ?? 8 ? */
00001a  4620              MOV      r0,r4
00001c  17e1              ASRS     r1,r4,#31
00001e  eb046111          ADD      r1,r4,r1,LSR #24
000022  f3c12707          UBFX     r7,r1,#8,#8
;;;107    		crc<<=8; /* ?? 8 ?,??? CRC ?? 8 ???
000026  f64f70ff          MOV      r0,#0xffff
00002a  ea002404          AND      r4,r0,r4,LSL #8
;;;108    		8
;;;109    		2 */
;;;110    		 crc^=crc_ta[da^*ptr]; /* ? 8 ????????????? CRC ,?????? CRC */
00002e  8828              LDRH     r0,[r5,#0]
000030  4078              EORS     r0,r0,r7
000032  a901              ADD      r1,sp,#4
000034  f8310010          LDRH     r0,[r1,r0,LSL #1]
000038  4044              EORS     r4,r4,r0
;;;111    		ptr++;
00003a  1cad              ADDS     r5,r5,#2
                  |L7.60|
00003c  0030              MOVS     r0,r6                 ;104
00003e  f1a60101          SUB      r1,r6,#1              ;104
000042  b2ce              UXTB     r6,r1                 ;104
000044  d1e9              BNE      |L7.26|
;;;112    
;;;113    	}
;;;114    	
;;;115    // return(crc);
;;;116    
;;;117    }
000046  f50d7d01          ADD      sp,sp,#0x204
00004a  bdf0              POP      {r4-r7,pc}
;;;118    
                          ENDP

                  |L7.76|
                          DCD      ||.constdata||

                          AREA ||i.do_mat||, CODE, READONLY, ALIGN=1

                  do_mat PROC
;;;14     /////////////////////////////////////////////////////////////////////////////////
;;;15     u16 do_mat(u16 abc,u16 *save,u8 start,u8 end)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;16     {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  461d              MOV      r5,r3
;;;17     	
;;;18         u8 i;
;;;19     	u16 divide_num;
;;;20     	
;;;21     	for(i=start;i<end+1;i++)
00000c  4644              MOV      r4,r8
00000e  e01b              B        |L8.72|
                  |L8.16|
;;;22     	{
;;;23     		divide_num=pow(10,(end-i));
000010  1b28              SUBS     r0,r5,r4
000012  ee000a10          VMOV     s0,r0
000016  eeb80bc0          VCVT.F64.S32 d0,s0
00001a  eeb01b40          VMOV.F64 d1,d0
00001e  eeb20b04          VMOV.F64 d0,#10.00000000
000022  f7fffffe          BL       __hardfp_pow
000026  eebc0bc0          VCVT.U32.F64 s0,d0
00002a  ee100a10          VMOV     r0,s0
00002e  fa1ff980          UXTH     r9,r0
;;;24     	    save[i]=abc/divide_num%10;
000032  fb96f0f9          SDIV     r0,r6,r9
000036  210a              MOVS     r1,#0xa
000038  fb90f2f1          SDIV     r2,r0,r1
00003c  fb010012          MLS      r0,r1,r2,r0
000040  f8270014          STRH     r0,[r7,r4,LSL #1]
000044  1c60              ADDS     r0,r4,#1              ;21
000046  b2c4              UXTB     r4,r0                 ;21
                  |L8.72|
000048  1c68              ADDS     r0,r5,#1              ;21
00004a  4284              CMP      r4,r0                 ;21
00004c  dbe0              BLT      |L8.16|
;;;25     		
;;;26     //		printf("%d  \r\n",divide_num);
;;;27     	}
;;;28     //	for(i=0;i<end+1;i++)
;;;29     //	{
;;;30     ////	  printf("%d  ",save[i]);
;;;31     //	}
;;;32     //	printf("\r\n");
;;;33     	
;;;34     
;;;35     }
00004e  e8bd87f0          POP      {r4-r10,pc}
;;;36     
                          ENDP


                          AREA ||i.read_color||, CODE, READONLY, ALIGN=1

                  read_color PROC
;;;448    
;;;449    void read_color(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;450    {
;;;451    	COLOR_RGB Rgb;
;;;452    	COLOR_HSL Hsl;
;;;453        ReadColor(5,5,&Rgb);
000002  aa01              ADD      r2,sp,#4
000004  2105              MOVS     r1,#5
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       ReadColor
;;;454    	RGBtoHSL(&Rgb,&Hsl);
00000c  4669              MOV      r1,sp
00000e  a801              ADD      r0,sp,#4
000010  f7fffffe          BL       RGBtoHSL
;;;455    
;;;456    }
000014  bd1c              POP      {r2-r4,pc}
;;;457    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  00001021          DCW      0x0000,0x1021
000004  20423063          DCW      0x2042,0x3063
000008  408450a5          DCW      0x4084,0x50a5
00000c  60c670e7          DCW      0x60c6,0x70e7
000010  81089129          DCW      0x8108,0x9129
000014  a14ab16b          DCW      0xa14a,0xb16b
000018  c18cd1ad          DCW      0xc18c,0xd1ad
00001c  e1cef1ef          DCW      0xe1ce,0xf1ef
000020  12310210          DCW      0x1231,0x0210
000024  32732252          DCW      0x3273,0x2252
000028  52b54294          DCW      0x52b5,0x4294
00002c  72f762d6          DCW      0x72f7,0x62d6
000030  93398318          DCW      0x9339,0x8318
000034  b37ba35a          DCW      0xb37b,0xa35a
000038  d3bdc39c          DCW      0xd3bd,0xc39c
00003c  f3ffe3de          DCW      0xf3ff,0xe3de
000040  24623443          DCW      0x2462,0x3443
000044  04201401          DCW      0x0420,0x1401
000048  64e674c7          DCW      0x64e6,0x74c7
00004c  44a45485          DCW      0x44a4,0x5485
000050  a56ab54b          DCW      0xa56a,0xb54b
000054  85289509          DCW      0x8528,0x9509
000058  e5eef5cf          DCW      0xe5ee,0xf5cf
00005c  c5acd58d          DCW      0xc5ac,0xd58d
000060  36532672          DCW      0x3653,0x2672
000064  16110630          DCW      0x1611,0x0630
000068  76d766f6          DCW      0x76d7,0x66f6
00006c  569546b4          DCW      0x5695,0x46b4
000070  b75ba77a          DCW      0xb75b,0xa77a
000074  97198738          DCW      0x9719,0x8738
000078  f7dfe7fe          DCW      0xf7df,0xe7fe
00007c  d79dc7bc          DCW      0xd79d,0xc7bc
000080  48c458e5          DCW      0x48c4,0x58e5
000084  688678a7          DCW      0x6886,0x78a7
000088  08401861          DCW      0x0840,0x1861
00008c  28023823          DCW      0x2802,0x3823
000090  c9ccd9ed          DCW      0xc9cc,0xd9ed
000094  e98ef9af          DCW      0xe98e,0xf9af
000098  89489969          DCW      0x8948,0x9969
00009c  a90ab92b          DCW      0xa90a,0xb92b
0000a0  5af54ad4          DCW      0x5af5,0x4ad4
0000a4  7ab76a96          DCW      0x7ab7,0x6a96
0000a8  1a710a50          DCW      0x1a71,0x0a50
0000ac  3a332a12          DCW      0x3a33,0x2a12
0000b0  dbfdcbdc          DCW      0xdbfd,0xcbdc
0000b4  fbbfeb9e          DCW      0xfbbf,0xeb9e
0000b8  9b798b58          DCW      0x9b79,0x8b58
0000bc  bb3bab1a          DCW      0xbb3b,0xab1a
0000c0  6ca67c87          DCW      0x6ca6,0x7c87
0000c4  4ce45cc5          DCW      0x4ce4,0x5cc5
0000c8  2c223c03          DCW      0x2c22,0x3c03
0000cc  0c601c41          DCW      0x0c60,0x1c41
0000d0  edaefd8f          DCW      0xedae,0xfd8f
0000d4  cdecddcd          DCW      0xcdec,0xddcd
0000d8  ad2abd0b          DCW      0xad2a,0xbd0b
0000dc  8d689d49          DCW      0x8d68,0x9d49
0000e0  7e976eb6          DCW      0x7e97,0x6eb6
0000e4  5ed54ef4          DCW      0x5ed5,0x4ef4
0000e8  3e132e32          DCW      0x3e13,0x2e32
0000ec  1e510e70          DCW      0x1e51,0x0e70
0000f0  ff9fefbe          DCW      0xff9f,0xefbe
0000f4  dfddcffc          DCW      0xdfdd,0xcffc
0000f8  bf1baf3a          DCW      0xbf1b,0xaf3a
0000fc  9f598f78          DCW      0x9f59,0x8f78
000100  918881a9          DCW      0x9188,0x81a9
000104  b1caa1eb          DCW      0xb1ca,0xa1eb
000108  d10cc12d          DCW      0xd10c,0xc12d
00010c  f14ee16f          DCW      0xf14e,0xe16f
000110  108000a1          DCW      0x1080,0x00a1
000114  30c220e3          DCW      0x30c2,0x20e3
000118  50044025          DCW      0x5004,0x4025
00011c  70466067          DCW      0x7046,0x6067
000120  83b99398          DCW      0x83b9,0x9398
000124  a3fbb3da          DCW      0xa3fb,0xb3da
000128  c33dd31c          DCW      0xc33d,0xd31c
00012c  e37ff35e          DCW      0xe37f,0xf35e
000130  02b11290          DCW      0x02b1,0x1290
000134  22f332d2          DCW      0x22f3,0x32d2
000138  42355214          DCW      0x4235,0x5214
00013c  62777256          DCW      0x6277,0x7256
000140  b5eaa5cb          DCW      0xb5ea,0xa5cb
000144  95a88589          DCW      0x95a8,0x8589
000148  f56ee54f          DCW      0xf56e,0xe54f
00014c  d52cc50d          DCW      0xd52c,0xc50d
000150  34e224c3          DCW      0x34e2,0x24c3
000154  14a00481          DCW      0x14a0,0x0481
000158  74666447          DCW      0x7466,0x6447
00015c  54244405          DCW      0x5424,0x4405
000160  a7dbb7fa          DCW      0xa7db,0xb7fa
000164  879997b8          DCW      0x8799,0x97b8
000168  e75ff77e          DCW      0xe75f,0xf77e
00016c  c71dd73c          DCW      0xc71d,0xd73c
000170  26d336f2          DCW      0x26d3,0x36f2
000174  069116b0          DCW      0x0691,0x16b0
000178  66577676          DCW      0x6657,0x7676
00017c  46155634          DCW      0x4615,0x5634
000180  d94cc96d          DCW      0xd94c,0xc96d
000184  f90ee92f          DCW      0xf90e,0xe92f
000188  99c889e9          DCW      0x99c8,0x89e9
00018c  b98aa9ab          DCW      0xb98a,0xa9ab
000190  58444865          DCW      0x5844,0x4865
000194  78066827          DCW      0x7806,0x6827
000198  18c008e1          DCW      0x18c0,0x08e1
00019c  388228a3          DCW      0x3882,0x28a3
0001a0  cb7ddb5c          DCW      0xcb7d,0xdb5c
0001a4  eb3ffb1e          DCW      0xeb3f,0xfb1e
0001a8  8bf99bd8          DCW      0x8bf9,0x9bd8
0001ac  abbbbb9a          DCW      0xabbb,0xbb9a
0001b0  4a755a54          DCW      0x4a75,0x5a54
0001b4  6a377a16          DCW      0x6a37,0x7a16
0001b8  0af11ad0          DCW      0x0af1,0x1ad0
0001bc  2ab33a92          DCW      0x2ab3,0x3a92
0001c0  fd2eed0f          DCW      0xfd2e,0xed0f
0001c4  dd6ccd4d          DCW      0xdd6c,0xcd4d
0001c8  bdaaad8b          DCW      0xbdaa,0xad8b
0001cc  9de88dc9          DCW      0x9de8,0x8dc9
0001d0  7c266c07          DCW      0x7c26,0x6c07
0001d4  5c644c45          DCW      0x5c64,0x4c45
0001d8  3ca22c83          DCW      0x3ca2,0x2c83
0001dc  1ce00cc1          DCW      0x1ce0,0x0cc1
0001e0  ef1fff3e          DCW      0xef1f,0xff3e
0001e4  cf5ddf7c          DCW      0xcf5d,0xdf7c
0001e8  af9bbfba          DCW      0xaf9b,0xbfba
0001ec  8fd99ff8          DCW      0x8fd9,0x9ff8
0001f0  6e177e36          DCW      0x6e17,0x7e36
0001f4  4e555e74          DCW      0x4e55,0x5e74
0001f8  2e933eb2          DCW      0x2e93,0x3eb2
0001fc  0ed11ef0          DCW      0x0ed1,0x1ef0

                          AREA ||.data||, DATA, ALIGN=2

                  k
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  ||x0||
                          DCD      0x00000000
                  ||y0||
                          DCD      0x00000000
                  flag
                          DCD      0x00000000
                  Area
                          DCD      0x00000000
                          DCD      0x00000140
                          DCD      0x00000000
                          DCD      0x000000f0

;*** Start embedded assembler ***

#line 1 "..\\HARDWARE\\MY_FUNCTION\\my_function.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_my_function_c_do_mat____REV16|
#line 388 "..\\CORE\\cmsis_armcc.h"
|__asm___13_my_function_c_do_mat____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_my_function_c_do_mat____REVSH|
#line 402
|__asm___13_my_function_c_do_mat____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_my_function_c_do_mat____RRX|
#line 587
|__asm___13_my_function_c_do_mat____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
