; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\os_msg.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\os_msg.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\OBJ -I..\USER -I..\HALLIB\STM32F7xx_HAL_Driver\Inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\SDRAM -I..\HARDWARE\IIC -I..\HARDWARE\24CXX -I..\HARDWARE\MPU9250 -I..\HARDWARE\DHT11 -I..\HARDWARE\MPU -I..\USMART -I..\DMP\driver\eMPL -I..\DMP\driver\include -I..\DMP\driver\stm32L -I..\DMP\eMPL-hal -I..\DMP\mllite -I..\DMP\mpl -I..\UCOSIII -I..\UCOSIII\UCOS-BSP -I..\UCOSIII\UCOS-CONFIG -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\uC-CPU\ARM-Cortex-M4\RealView -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-CPU -I..\HARDWARE\MY_FUNCTION -I..\USER -I..\HARDWARE\CRC -I..\HARDWARE\DMA -I..\HARDWARE\HEART_BEAT -I..\HARDWARE\RECEIVE_ANALYZE -I..\HARDWARE\FEED_BACK -I..\HARDWARE\DATA -I"D:\1111111\32F4\Slam car\实验35 MPU9250九轴传感器实验\USER\RTE" -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0 -IF:\Keil_v5\ARM\CMSIS\Include -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__UVISION_VERSION=514 -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=..\obj\os_msg.crf ..\UCOSIII\uCOS-III\Source\os_msg.c]
                          THUMB

                          AREA ||i.OS_MsgPoolInit||, CODE, READONLY, ALIGN=2

                  OS_MsgPoolInit PROC
;;;62     
;;;63     void  OS_MsgPoolInit (OS_ERR  *p_err)
000000  b570              PUSH     {r4-r6,lr}
;;;64     {
000002  4602              MOV      r2,r0
;;;65         OS_MSG      *p_msg1;
;;;66         OS_MSG      *p_msg2;
;;;67         OS_MSG_QTY   i;
;;;68         OS_MSG_QTY   loops;
;;;69     
;;;70     
;;;71     
;;;72     #ifdef OS_SAFETY_CRITICAL
;;;73         if (p_err == (OS_ERR *)0) {
;;;74             OS_SAFETY_CRITICAL_EXCEPTION();
;;;75             return;
;;;76         }
;;;77     #endif
;;;78     
;;;79     #if OS_CFG_ARG_CHK_EN > 0u
;;;80         if (OSCfg_MsgPoolBasePtr == (OS_MSG *)0) {
;;;81            *p_err = OS_ERR_MSG_POOL_NULL_PTR;
;;;82             return;
;;;83         }
;;;84         if (OSCfg_MsgPoolSize == (OS_MSG_QTY)0) {
;;;85            *p_err = OS_ERR_MSG_POOL_EMPTY;
;;;86             return;
;;;87         }
;;;88     #endif
;;;89     
;;;90         p_msg1 = OSCfg_MsgPoolBasePtr;
000004  4d12              LDR      r5,|L1.80|
000006  6828              LDR      r0,[r5,#0]  ; OSCfg_MsgPoolBasePtr
;;;91         p_msg2 = OSCfg_MsgPoolBasePtr;
000008  6829              LDR      r1,[r5,#0]  ; OSCfg_MsgPoolBasePtr
;;;92         p_msg2++;
00000a  3110              ADDS     r1,r1,#0x10
;;;93         loops  = OSCfg_MsgPoolSize - 1u;
00000c  4d11              LDR      r5,|L1.84|
00000e  882d              LDRH     r5,[r5,#0]  ; OSCfg_MsgPoolSize
000010  1e6d              SUBS     r5,r5,#1
000012  b2ac              UXTH     r4,r5
;;;94         for (i = 0u; i < loops; i++) {                          /* Init. list of free OS_MSGs                             */
000014  2300              MOVS     r3,#0
000016  e008              B        |L1.42|
                  |L1.24|
;;;95             p_msg1->NextPtr = p_msg2;
000018  6001              STR      r1,[r0,#0]
;;;96             p_msg1->MsgPtr  = (void      *)0;
00001a  2500              MOVS     r5,#0
00001c  6045              STR      r5,[r0,#4]
;;;97             p_msg1->MsgSize = (OS_MSG_SIZE)0u;
00001e  8105              STRH     r5,[r0,#8]
;;;98             p_msg1->MsgTS   = (CPU_TS     )0u;
000020  60c5              STR      r5,[r0,#0xc]
;;;99             p_msg1++;
000022  3010              ADDS     r0,r0,#0x10
;;;100            p_msg2++;
000024  3110              ADDS     r1,r1,#0x10
000026  1c5d              ADDS     r5,r3,#1              ;94
000028  b2ab              UXTH     r3,r5                 ;94
                  |L1.42|
00002a  42a3              CMP      r3,r4                 ;94
00002c  dbf4              BLT      |L1.24|
;;;101        }
;;;102        p_msg1->NextPtr = (OS_MSG    *)0;                       /* Last OS_MSG                                            */
00002e  2500              MOVS     r5,#0
000030  6005              STR      r5,[r0,#0]
;;;103        p_msg1->MsgPtr  = (void      *)0;
000032  6045              STR      r5,[r0,#4]
;;;104        p_msg1->MsgSize = (OS_MSG_SIZE)0u;
000034  8105              STRH     r5,[r0,#8]
;;;105        p_msg1->MsgTS   = (CPU_TS     )0u;
000036  60c5              STR      r5,[r0,#0xc]
;;;106    
;;;107        OSMsgPool.NextPtr    =  OSCfg_MsgPoolBasePtr;
000038  4d05              LDR      r5,|L1.80|
00003a  682d              LDR      r5,[r5,#0]  ; OSCfg_MsgPoolBasePtr
00003c  4e06              LDR      r6,|L1.88|
00003e  6035              STR      r5,[r6,#0]  ; OSMsgPool
;;;108        OSMsgPool.NbrFree    =  OSCfg_MsgPoolSize;
000040  4d04              LDR      r5,|L1.84|
000042  882d              LDRH     r5,[r5,#0]  ; OSCfg_MsgPoolSize
000044  80b5              STRH     r5,[r6,#4]
;;;109        OSMsgPool.NbrUsed    = (OS_MSG_QTY)0;
000046  2500              MOVS     r5,#0
000048  80f5              STRH     r5,[r6,#6]
;;;110    #if OS_CFG_DBG_EN > 0u
;;;111        OSMsgPool.NbrUsedMax = (OS_MSG_QTY)0;
00004a  8135              STRH     r5,[r6,#8]
;;;112    #endif
;;;113       *p_err                =  OS_ERR_NONE;
00004c  8015              STRH     r5,[r2,#0]
;;;114    }
00004e  bd70              POP      {r4-r6,pc}
;;;115    
                          ENDP

                  |L1.80|
                          DCD      OSCfg_MsgPoolBasePtr
                  |L1.84|
                          DCD      OSCfg_MsgPoolSize
                  |L1.88|
                          DCD      OSMsgPool

                          AREA ||i.OS_MsgQFreeAll||, CODE, READONLY, ALIGN=2

                  OS_MsgQFreeAll PROC
;;;131    
;;;132    OS_MSG_QTY  OS_MsgQFreeAll (OS_MSG_Q  *p_msg_q)
000000  b510              PUSH     {r4,lr}
;;;133    {
000002  4601              MOV      r1,r0
;;;134        OS_MSG      *p_msg;
;;;135        OS_MSG_QTY   qty;
;;;136    
;;;137    
;;;138    
;;;139        qty = p_msg_q->NbrEntries;                              /* Get the number of OS_MSGs being freed                  */
000004  8948              LDRH     r0,[r1,#0xa]
;;;140        if (p_msg_q->NbrEntries > (OS_MSG_QTY)0) {
000006  894b              LDRH     r3,[r1,#0xa]
000008  2b00              CMP      r3,#0
00000a  dd17              BLE      |L2.60|
;;;141            p_msg                   = p_msg_q->InPtr;           /* Point to end of message chain                          */
00000c  680a              LDR      r2,[r1,#0]
;;;142            p_msg->NextPtr          = OSMsgPool.NextPtr;
00000e  4b0c              LDR      r3,|L2.64|
000010  681b              LDR      r3,[r3,#0]  ; OSMsgPool
000012  6013              STR      r3,[r2,#0]
;;;143            OSMsgPool.NextPtr       = p_msg_q->OutPtr;          /* Point to beginning of message chain                    */
000014  4c0a              LDR      r4,|L2.64|
000016  684b              LDR      r3,[r1,#4]
000018  6023              STR      r3,[r4,#0]  ; OSMsgPool
;;;144            OSMsgPool.NbrUsed      -= p_msg_q->NbrEntries;      /* Update statistics for free list of messages            */
00001a  4623              MOV      r3,r4
00001c  88db              LDRH     r3,[r3,#6]  ; OSMsgPool
00001e  894c              LDRH     r4,[r1,#0xa]
000020  1b1b              SUBS     r3,r3,r4
000022  4c07              LDR      r4,|L2.64|
000024  80e3              STRH     r3,[r4,#6]
;;;145            OSMsgPool.NbrFree      += p_msg_q->NbrEntries;
000026  4623              MOV      r3,r4
000028  889b              LDRH     r3,[r3,#4]  ; OSMsgPool
00002a  894c              LDRH     r4,[r1,#0xa]
00002c  4423              ADD      r3,r3,r4
00002e  4c04              LDR      r4,|L2.64|
000030  80a3              STRH     r3,[r4,#4]
;;;146            p_msg_q->NbrEntries     = (OS_MSG_QTY)0;            /* Flush the message queue                                */
000032  2300              MOVS     r3,#0
000034  814b              STRH     r3,[r1,#0xa]
;;;147    #if OS_CFG_DBG_EN > 0u
;;;148            p_msg_q->NbrEntriesMax  = (OS_MSG_QTY)0;
000036  818b              STRH     r3,[r1,#0xc]
;;;149    #endif
;;;150            p_msg_q->InPtr          = (OS_MSG   *)0;
000038  600b              STR      r3,[r1,#0]
;;;151            p_msg_q->OutPtr         = (OS_MSG   *)0;
00003a  604b              STR      r3,[r1,#4]
                  |L2.60|
;;;152        }
;;;153        return (qty);
;;;154    }
00003c  bd10              POP      {r4,pc}
;;;155    
                          ENDP

00003e  0000              DCW      0x0000
                  |L2.64|
                          DCD      OSMsgPool

                          AREA ||i.OS_MsgQGet||, CODE, READONLY, ALIGN=2

                  OS_MsgQGet PROC
;;;210    
;;;211    void  *OS_MsgQGet (OS_MSG_Q     *p_msg_q,
000000  b5f0              PUSH     {r4-r7,lr}
;;;212                       OS_MSG_SIZE  *p_msg_size,
;;;213                       CPU_TS       *p_ts,
;;;214                       OS_ERR       *p_err)
;;;215    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;216        OS_MSG  *p_msg;
;;;217        void    *p_void;
;;;218    
;;;219    
;;;220    
;;;221    #ifdef OS_SAFETY_CRITICAL
;;;222        if (p_err == (OS_ERR *)0) {
;;;223            OS_SAFETY_CRITICAL_EXCEPTION();
;;;224            return ((void *)0);
;;;225        }
;;;226    #endif
;;;227    
;;;228        if (p_msg_q->NbrEntries == (OS_MSG_QTY)0) {             /* Is the queue empty?                                    */
000006  8960              LDRH     r0,[r4,#0xa]
000008  b940              CBNZ     r0,|L3.28|
;;;229           *p_msg_size = (OS_MSG_SIZE)0;                        /* Yes                                                    */
00000a  2000              MOVS     r0,#0
00000c  8028              STRH     r0,[r5,#0]
;;;230            if (p_ts != (CPU_TS *)0) {
00000e  b102              CBZ      r2,|L3.18|
;;;231               *p_ts  = (CPU_TS  )0;
000010  6010              STR      r0,[r2,#0]
                  |L3.18|
;;;232            }
;;;233           *p_err = OS_ERR_Q_EMPTY;
000012  f2465092          MOV      r0,#0x6592
000016  8018              STRH     r0,[r3,#0]
;;;234            return ((void *)0);
000018  2000              MOVS     r0,#0
                  |L3.26|
;;;235        }
;;;236    
;;;237        p_msg           = p_msg_q->OutPtr;                      /* No, get the next message to extract from the queue     */
;;;238        p_void          = p_msg->MsgPtr;
;;;239       *p_msg_size      = p_msg->MsgSize;
;;;240        if (p_ts != (CPU_TS *)0) {
;;;241           *p_ts  = p_msg->MsgTS;
;;;242        }
;;;243    
;;;244        p_msg_q->OutPtr = p_msg->NextPtr;                       /* Point to next message to extract                       */
;;;245    
;;;246        if (p_msg_q->OutPtr == (OS_MSG *)0) {                   /* Are there any more messages in the queue?              */
;;;247            p_msg_q->InPtr      = (OS_MSG   *)0;                /* No                                                     */
;;;248            p_msg_q->NbrEntries = (OS_MSG_QTY)0;
;;;249        } else {
;;;250            p_msg_q->NbrEntries--;                              /* Yes, One less message in the queue                     */
;;;251        }
;;;252    
;;;253        p_msg->NextPtr    = OSMsgPool.NextPtr;                  /* Return message control block to free list              */
;;;254        OSMsgPool.NextPtr = p_msg;
;;;255        OSMsgPool.NbrFree++;
;;;256        OSMsgPool.NbrUsed--;
;;;257    
;;;258       *p_err             = OS_ERR_NONE;
;;;259        return (p_void);
;;;260    }
00001a  bdf0              POP      {r4-r7,pc}
                  |L3.28|
00001c  6861              LDR      r1,[r4,#4]            ;237
00001e  684e              LDR      r6,[r1,#4]            ;238
000020  8908              LDRH     r0,[r1,#8]            ;239
000022  8028              STRH     r0,[r5,#0]            ;239
000024  b10a              CBZ      r2,|L3.42|
000026  68c8              LDR      r0,[r1,#0xc]          ;241
000028  6010              STR      r0,[r2,#0]            ;241
                  |L3.42|
00002a  6808              LDR      r0,[r1,#0]            ;244
00002c  6060              STR      r0,[r4,#4]            ;244
00002e  6860              LDR      r0,[r4,#4]            ;246
000030  b918              CBNZ     r0,|L3.58|
000032  2000              MOVS     r0,#0                 ;247
000034  6020              STR      r0,[r4,#0]            ;247
000036  8160              STRH     r0,[r4,#0xa]          ;248
000038  e002              B        |L3.64|
                  |L3.58|
00003a  8960              LDRH     r0,[r4,#0xa]          ;250
00003c  1e40              SUBS     r0,r0,#1              ;250
00003e  8160              STRH     r0,[r4,#0xa]          ;250
                  |L3.64|
000040  4808              LDR      r0,|L3.100|
000042  6800              LDR      r0,[r0,#0]            ;253  ; OSMsgPool
000044  6008              STR      r0,[r1,#0]            ;253
000046  4807              LDR      r0,|L3.100|
000048  6001              STR      r1,[r0,#0]            ;254  ; OSMsgPool
00004a  8880              LDRH     r0,[r0,#4]            ;255  ; OSMsgPool
00004c  1c40              ADDS     r0,r0,#1              ;255
00004e  4f05              LDR      r7,|L3.100|
000050  80b8              STRH     r0,[r7,#4]            ;255
000052  4638              MOV      r0,r7                 ;256
000054  88c0              LDRH     r0,[r0,#6]            ;256  ; OSMsgPool
000056  1e40              SUBS     r0,r0,#1              ;256
000058  80f8              STRH     r0,[r7,#6]            ;256
00005a  2000              MOVS     r0,#0                 ;258
00005c  8018              STRH     r0,[r3,#0]            ;258
00005e  4630              MOV      r0,r6                 ;259
000060  e7db              B        |L3.26|
;;;261    
                          ENDP

000062  0000              DCW      0x0000
                  |L3.100|
                          DCD      OSMsgPool

                          AREA ||i.OS_MsgQInit||, CODE, READONLY, ALIGN=1

                  OS_MsgQInit PROC
;;;173    
;;;174    void  OS_MsgQInit (OS_MSG_Q    *p_msg_q,
000000  8101              STRH     r1,[r0,#8]
;;;175                       OS_MSG_QTY   size)
;;;176    {
;;;177        p_msg_q->NbrEntriesSize = (OS_MSG_QTY)size;
;;;178        p_msg_q->NbrEntries     = (OS_MSG_QTY)0;
000002  2200              MOVS     r2,#0
000004  8142              STRH     r2,[r0,#0xa]
;;;179    #if OS_CFG_DBG_EN > 0u
;;;180        p_msg_q->NbrEntriesMax  = (OS_MSG_QTY)0;
000006  8182              STRH     r2,[r0,#0xc]
;;;181    #endif
;;;182        p_msg_q->InPtr          = (OS_MSG   *)0;
000008  6002              STR      r2,[r0,#0]
;;;183        p_msg_q->OutPtr         = (OS_MSG   *)0;
00000a  6042              STR      r2,[r0,#4]
;;;184    }
00000c  4770              BX       lr
;;;185    
                          ENDP


                          AREA ||i.OS_MsgQPut||, CODE, READONLY, ALIGN=2

                  OS_MsgQPut PROC
;;;294    
;;;295    void  OS_MsgQPut (OS_MSG_Q     *p_msg_q,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;296                      void         *p_void,
;;;297                      OS_MSG_SIZE   msg_size,
;;;298                      OS_OPT        opt,
;;;299                      CPU_TS        ts,
;;;300                      OS_ERR       *p_err)
;;;301    {
000004  460d              MOV      r5,r1
000006  e9dd7406          LDRD     r7,r4,[sp,#0x18]
;;;302        OS_MSG  *p_msg;
;;;303        OS_MSG  *p_msg_in;
;;;304    
;;;305    
;;;306    
;;;307    #ifdef OS_SAFETY_CRITICAL
;;;308        if (p_err == (OS_ERR *)0) {
;;;309            OS_SAFETY_CRITICAL_EXCEPTION();
;;;310            return;
;;;311        }
;;;312    #endif
;;;313    
;;;314        if (p_msg_q->NbrEntries >= p_msg_q->NbrEntriesSize) {
00000a  f8b0c00a          LDRH     r12,[r0,#0xa]
00000e  f8b08008          LDRH     r8,[r0,#8]
000012  45c4              CMP      r12,r8
000014  db05              BLT      |L5.34|
;;;315           *p_err = OS_ERR_Q_MAX;                               /* Message queue cannot accept any more messages          */
000016  f2465c93          MOV      r12,#0x6593
00001a  f8a4c000          STRH     r12,[r4,#0]
                  |L5.30|
;;;316            return;
;;;317        }
;;;318    
;;;319        if (OSMsgPool.NbrFree == (OS_MSG_QTY)0) {
;;;320           *p_err = OS_ERR_MSG_POOL_EMPTY;                      /* No more OS_MSG to use                                  */
;;;321            return;
;;;322        }
;;;323    
;;;324        p_msg             = OSMsgPool.NextPtr;                  /* Remove message control block from free list            */
;;;325        OSMsgPool.NextPtr = p_msg->NextPtr;
;;;326        OSMsgPool.NbrFree--;
;;;327        OSMsgPool.NbrUsed++;
;;;328    
;;;329    #if OS_CFG_DBG_EN > 0u
;;;330        if (OSMsgPool.NbrUsedMax < OSMsgPool.NbrUsed) {
;;;331            OSMsgPool.NbrUsedMax = OSMsgPool.NbrUsed;
;;;332        }
;;;333    #endif
;;;334    
;;;335        if (p_msg_q->NbrEntries == (OS_MSG_QTY)0) {             /* Is this first message placed in the queue?             */
;;;336            p_msg_q->InPtr         = p_msg;                     /* Yes                                                    */
;;;337            p_msg_q->OutPtr        = p_msg;
;;;338            p_msg_q->NbrEntries    = (OS_MSG_QTY)1;
;;;339            p_msg->NextPtr         = (OS_MSG *)0;
;;;340        } else {                                                /* No                                                     */
;;;341            if ((opt & OS_OPT_POST_LIFO) == OS_OPT_POST_FIFO) { /* Is it FIFO or LIFO?                                    */
;;;342                p_msg_in           = p_msg_q->InPtr;            /* FIFO, add to the head                                  */
;;;343                p_msg_in->NextPtr  = p_msg;
;;;344                p_msg_q->InPtr     = p_msg;
;;;345                p_msg->NextPtr     = (OS_MSG *)0;
;;;346            } else {
;;;347                p_msg->NextPtr     = p_msg_q->OutPtr;           /* LIFO, add to the tail                                  */
;;;348                p_msg_q->OutPtr    = p_msg;
;;;349            }
;;;350            p_msg_q->NbrEntries++;
;;;351        }
;;;352    
;;;353    #if OS_CFG_DBG_EN > 0u
;;;354        if (p_msg_q->NbrEntriesMax < p_msg_q->NbrEntries) {
;;;355            p_msg_q->NbrEntriesMax = p_msg_q->NbrEntries;
;;;356        }
;;;357    #endif
;;;358    
;;;359        p_msg->MsgPtr  = p_void;                                /* Deposit message in the message queue entry             */
;;;360        p_msg->MsgSize = msg_size;
;;;361        p_msg->MsgTS   = ts;
;;;362       *p_err          = OS_ERR_NONE;
;;;363    }
00001e  e8bd81f0          POP      {r4-r8,pc}
                  |L5.34|
000022  f8dfc0dc          LDR      r12,|L5.256|
000026  f8bcc004          LDRH     r12,[r12,#4]          ;319  ; OSMsgPool
00002a  f1bc0f00          CMP      r12,#0                ;319
00002e  d104              BNE      |L5.58|
000030  f2457c1d          MOV      r12,#0x571d           ;320
000034  f8a4c000          STRH     r12,[r4,#0]           ;320
000038  e7f1              B        |L5.30|
                  |L5.58|
00003a  f8dfc0c4          LDR      r12,|L5.256|
00003e  f8dc1000          LDR      r1,[r12,#0]           ;324  ; OSMsgPool
000042  f8df80bc          LDR      r8,|L5.256|
000046  f8d1c000          LDR      r12,[r1,#0]           ;325
00004a  f8c8c000          STR      r12,[r8,#0]           ;325  ; OSMsgPool
00004e  46c4              MOV      r12,r8                ;326
000050  f8bcc004          LDRH     r12,[r12,#4]          ;326  ; OSMsgPool
000054  f1ac0c01          SUB      r12,r12,#1            ;326
000058  f8a8c004          STRH     r12,[r8,#4]           ;326
00005c  46c4              MOV      r12,r8                ;327
00005e  f8bcc006          LDRH     r12,[r12,#6]          ;327  ; OSMsgPool
000062  f10c0c01          ADD      r12,r12,#1            ;327
000066  f8a8c006          STRH     r12,[r8,#6]           ;327
00006a  46c4              MOV      r12,r8                ;330
00006c  f8bcc008          LDRH     r12,[r12,#8]          ;330  ; OSMsgPool
000070  f8b88006          LDRH     r8,[r8,#6]            ;330  ; OSMsgPool
000074  45c4              CMP      r12,r8                ;330
000076  da07              BGE      |L5.136|
000078  f8dfc084          LDR      r12,|L5.256|
00007c  f8bcc006          LDRH     r12,[r12,#6]          ;331  ; OSMsgPool
000080  f8df807c          LDR      r8,|L5.256|
000084  f8a8c008          STRH     r12,[r8,#8]           ;331
                  |L5.136|
000088  f8b0c00a          LDRH     r12,[r0,#0xa]         ;335
00008c  f1bc0f00          CMP      r12,#0                ;335
000090  d10a              BNE      |L5.168|
000092  6001              STR      r1,[r0,#0]            ;336
000094  6041              STR      r1,[r0,#4]            ;337
000096  f04f0c01          MOV      r12,#1                ;338
00009a  f8a0c00a          STRH     r12,[r0,#0xa]         ;338
00009e  f04f0c00          MOV      r12,#0                ;339
0000a2  f8c1c000          STR      r12,[r1,#0]           ;339
0000a6  e017              B        |L5.216|
                  |L5.168|
0000a8  f0030c10          AND      r12,r3,#0x10          ;341
0000ac  f1bc0f00          CMP      r12,#0                ;341
0000b0  d107              BNE      |L5.194|
0000b2  6806              LDR      r6,[r0,#0]            ;342
0000b4  6031              STR      r1,[r6,#0]            ;343
0000b6  6001              STR      r1,[r0,#0]            ;344
0000b8  f04f0c00          MOV      r12,#0                ;345
0000bc  f8c1c000          STR      r12,[r1,#0]           ;345
0000c0  e004              B        |L5.204|
                  |L5.194|
0000c2  f8d0c004          LDR      r12,[r0,#4]           ;347
0000c6  f8c1c000          STR      r12,[r1,#0]           ;347
0000ca  6041              STR      r1,[r0,#4]            ;348
                  |L5.204|
0000cc  f8b0c00a          LDRH     r12,[r0,#0xa]         ;350
0000d0  f10c0c01          ADD      r12,r12,#1            ;350
0000d4  f8a0c00a          STRH     r12,[r0,#0xa]         ;350
                  |L5.216|
0000d8  f8b0c00c          LDRH     r12,[r0,#0xc]         ;354
0000dc  f8b0800a          LDRH     r8,[r0,#0xa]          ;354
0000e0  45c4              CMP      r12,r8                ;354
0000e2  da03              BGE      |L5.236|
0000e4  f8b0c00a          LDRH     r12,[r0,#0xa]         ;355
0000e8  f8a0c00c          STRH     r12,[r0,#0xc]         ;355
                  |L5.236|
0000ec  604d              STR      r5,[r1,#4]            ;359
0000ee  810a              STRH     r2,[r1,#8]            ;360
0000f0  60cf              STR      r7,[r1,#0xc]          ;361
0000f2  f04f0c00          MOV      r12,#0                ;362
0000f6  f8a4c000          STRH     r12,[r4,#0]           ;362
0000fa  bf00              NOP      
0000fc  e78f              B        |L5.30|
;;;364    #endif
                          ENDP

0000fe  0000              DCW      0x0000
                  |L5.256|
                          DCD      OSMsgPool
