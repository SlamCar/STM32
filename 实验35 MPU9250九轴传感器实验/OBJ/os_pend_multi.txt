; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\os_pend_multi.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\os_pend_multi.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\OBJ -I..\USER -I..\HALLIB\STM32F7xx_HAL_Driver\Inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\SDRAM -I..\HARDWARE\IIC -I..\HARDWARE\24CXX -I..\HARDWARE\MPU9250 -I..\HARDWARE\DHT11 -I..\HARDWARE\MPU -I..\USMART -I..\DMP\driver\eMPL -I..\DMP\driver\include -I..\DMP\driver\stm32L -I..\DMP\eMPL-hal -I..\DMP\mllite -I..\DMP\mpl -I..\UCOSIII -I..\UCOSIII\UCOS-BSP -I..\UCOSIII\UCOS-CONFIG -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\uC-CPU\ARM-Cortex-M4\RealView -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-CPU -I..\HARDWARE\MY_FUNCTION -I..\USER -I..\HARDWARE\CRC -I..\HARDWARE\DMA -I..\HARDWARE\HEART_BEAT -I..\HARDWARE\RECEIVE_ANALYZE -I..\HARDWARE\FEED_BACK -I..\HARDWARE\DATA -I"D:\1111111\32F4\Slam car\实验35 MPU9250九轴传感器实验\USER\RTE" -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0 -IF:\Keil_v5\ARM\CMSIS\Include -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__UVISION_VERSION=514 -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=..\obj\os_pend_multi.crf ..\UCOSIII\uCOS-III\Source\os_pend_multi.c]
                          THUMB

                          AREA ||i.OSPendMulti||, CODE, READONLY, ALIGN=2

                  OSPendMulti PROC
;;;122    
;;;123    OS_OBJ_QTY  OSPendMulti (OS_PEND_DATA  *p_pend_data_tbl,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;124                             OS_OBJ_QTY     tbl_size,
;;;125                             OS_TICK        timeout,
;;;126                             OS_OPT         opt,
;;;127                             OS_ERR        *p_err)
;;;128    {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4691              MOV      r9,r2
00000a  461e              MOV      r6,r3
00000c  9c0a              LDR      r4,[sp,#0x28]
;;;129        CPU_BOOLEAN   valid;
;;;130        OS_OBJ_QTY    nbr_obj_rdy;
;;;131        CPU_SR_ALLOC();
00000e  f04f0b00          MOV      r11,#0
;;;132    
;;;133    
;;;134    
;;;135    #ifdef OS_SAFETY_CRITICAL
;;;136        if (p_err == (OS_ERR *)0) {
;;;137            OS_SAFETY_CRITICAL_EXCEPTION();
;;;138            return ((OS_OBJ_QTY)0);
;;;139        }
;;;140    #endif
;;;141    
;;;142    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;143        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Can't pend from an ISR                                 */
;;;144           *p_err = OS_ERR_PEND_ISR;
;;;145            return ((OS_OBJ_QTY)0);
;;;146        }
;;;147    #endif
;;;148    
;;;149    #if OS_CFG_ARG_CHK_EN > 0u
;;;150        if (p_pend_data_tbl == (OS_PEND_DATA *)0) {             /* Validate 'p_pend_data_tbl'                             */
;;;151           *p_err = OS_ERR_PTR_INVALID;
;;;152            return ((OS_OBJ_QTY)0);
;;;153        }
;;;154        if (tbl_size == (OS_OBJ_QTY)0) {                        /* Array size must be > 0                                 */
;;;155           *p_err = OS_ERR_PTR_INVALID;
;;;156            return ((OS_OBJ_QTY)0);
;;;157        }
;;;158        switch (opt) {
;;;159            case OS_OPT_PEND_BLOCKING:
;;;160            case OS_OPT_PEND_NON_BLOCKING:
;;;161                 break;
;;;162    
;;;163            default:
;;;164                *p_err = OS_ERR_OPT_INVALID;
;;;165                 return ((OS_OBJ_QTY)0);
;;;166        }
;;;167    #endif
;;;168    
;;;169        valid = OS_PendMultiValidate(p_pend_data_tbl,           /* -------- Validate objects to be OS_SEM or OS_Q ------- */
000012  4641              MOV      r1,r8
000014  4638              MOV      r0,r7
000016  f7fffffe          BL       OS_PendMultiValidate
00001a  4682              MOV      r10,r0
;;;170                                     tbl_size);
;;;171        if (valid == DEF_FALSE) {
00001c  f1ba0f00          CMP      r10,#0
000020  d105              BNE      |L1.46|
;;;172           *p_err = OS_ERR_OBJ_TYPE;                            /* Invalid, not OS_SEM or OS_Q                            */
000022  f64550c4          MOV      r0,#0x5dc4
000026  8020              STRH     r0,[r4,#0]
;;;173            return ((OS_OBJ_QTY)0);
000028  2000              MOVS     r0,#0
                  |L1.42|
;;;174        }
;;;175    
;;;176    
;;;177        CPU_CRITICAL_ENTER();
;;;178        nbr_obj_rdy = OS_PendMultiGetRdy(p_pend_data_tbl,       /* --------- SEE IF OBJECT(s) HAVE BEEN POSTED ---------- */
;;;179                                         tbl_size);
;;;180        if (nbr_obj_rdy > (OS_OBJ_QTY)0) {
;;;181            CPU_CRITICAL_EXIT();
;;;182           *p_err = OS_ERR_NONE;
;;;183            return ((OS_OBJ_QTY)nbr_obj_rdy);
;;;184        }
;;;185    
;;;186        if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
;;;187            CPU_CRITICAL_EXIT();
;;;188           *p_err = OS_ERR_PEND_WOULD_BLOCK;                    /* No                                                     */
;;;189            return ((OS_OBJ_QTY)0);
;;;190        } else {
;;;191            if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
;;;192                CPU_CRITICAL_EXIT();
;;;193               *p_err = OS_ERR_SCHED_LOCKED;
;;;194                return ((OS_OBJ_QTY)0);
;;;195            }
;;;196        }
;;;197                                                                /* Lock the scheduler/re-enable interrupts                */
;;;198        OS_CRITICAL_ENTER_CPU_EXIT();
;;;199                                                                /* ------ NO OBJECT READY, PEND ON MULTIPLE OBJECTS ----- */
;;;200        OS_PendMultiWait(p_pend_data_tbl,                       /* Suspend task until object posted or timeout occurs     */
;;;201                         tbl_size,
;;;202                         timeout);
;;;203    
;;;204        OS_CRITICAL_EXIT_NO_SCHED();
;;;205    
;;;206        OSSched();                                              /* Find next highest priority task ready                  */
;;;207    
;;;208        CPU_CRITICAL_ENTER();
;;;209        switch (OSTCBCurPtr->PendStatus) {
;;;210            case OS_STATUS_PEND_OK:                             /* We got one of the objects posted to                    */
;;;211                *p_err = OS_ERR_NONE;
;;;212                 break;
;;;213    
;;;214            case OS_STATUS_PEND_ABORT:                          /* Indicate that the multi-pend was aborted               */
;;;215                *p_err = OS_ERR_PEND_ABORT;
;;;216                 break;
;;;217    
;;;218            case OS_STATUS_PEND_TIMEOUT:                        /* Indicate that we didn't get semaphore within timeout   */
;;;219                *p_err = OS_ERR_TIMEOUT;
;;;220                 break;
;;;221    
;;;222            case OS_STATUS_PEND_DEL:                            /* Indicate that an object pended on has been deleted     */
;;;223                *p_err = OS_ERR_OBJ_DEL;
;;;224                break;
;;;225    
;;;226            default:
;;;227                *p_err = OS_ERR_STATUS_INVALID;
;;;228                 break;
;;;229        }
;;;230    
;;;231        OSTCBCurPtr->PendStatus = OS_STATUS_PEND_OK;
;;;232        CPU_CRITICAL_EXIT();
;;;233    
;;;234        return ((OS_OBJ_QTY)1);
;;;235    }
00002a  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.46|
00002e  bf00              NOP                            ;177
000030  bf00              NOP                            ;177
000032  f7fffffe          BL       CPU_SR_Save
000036  4683              MOV      r11,r0                ;177
000038  bf00              NOP                            ;177
00003a  f7fffffe          BL       CPU_IntDisMeasStart
00003e  bf00              NOP                            ;177
000040  4641              MOV      r1,r8                 ;178
000042  4638              MOV      r0,r7                 ;178
000044  f7fffffe          BL       OS_PendMultiGetRdy
000048  4605              MOV      r5,r0                 ;178
00004a  2d00              CMP      r5,#0                 ;180
00004c  dd0c              BLE      |L1.104|
00004e  bf00              NOP                            ;181
000050  f7fffffe          BL       CPU_IntDisMeasStop
000054  bf00              NOP                            ;181
000056  4658              MOV      r0,r11                ;181
000058  f7fffffe          BL       CPU_SR_Restore
00005c  bf00              NOP                            ;181
00005e  bf00              NOP                            ;181
000060  2000              MOVS     r0,#0                 ;182
000062  8020              STRH     r0,[r4,#0]            ;182
000064  4628              MOV      r0,r5                 ;183
000066  e7e0              B        |L1.42|
                  |L1.104|
000068  f4064000          AND      r0,r6,#0x8000         ;186
00006c  b168              CBZ      r0,|L1.138|
00006e  bf00              NOP                            ;187
000070  f7fffffe          BL       CPU_IntDisMeasStop
000074  bf00              NOP                            ;187
000076  4658              MOV      r0,r11                ;187
000078  f7fffffe          BL       CPU_SR_Restore
00007c  bf00              NOP                            ;187
00007e  bf00              NOP                            ;187
000080  f24610b0          MOV      r0,#0x61b0            ;188
000084  8020              STRH     r0,[r4,#0]            ;188
000086  2000              MOVS     r0,#0                 ;189
000088  e7cf              B        |L1.42|
                  |L1.138|
00008a  482d              LDR      r0,|L1.320|
00008c  7800              LDRB     r0,[r0,#0]            ;191  ; OSSchedLockNestingCtr
00008e  2800              CMP      r0,#0                 ;191
000090  dd0d              BLE      |L1.174|
000092  bf00              NOP                            ;192
000094  f7fffffe          BL       CPU_IntDisMeasStop
000098  bf00              NOP                            ;192
00009a  4658              MOV      r0,r11                ;192
00009c  f7fffffe          BL       CPU_SR_Restore
0000a0  bf00              NOP                            ;192
0000a2  bf00              NOP                            ;192
0000a4  f6465063          MOV      r0,#0x6d63            ;193
0000a8  8020              STRH     r0,[r4,#0]            ;193
0000aa  2000              MOVS     r0,#0                 ;194
0000ac  e7bd              B        |L1.42|
                  |L1.174|
0000ae  464a              MOV      r2,r9                 ;200
0000b0  4641              MOV      r1,r8                 ;200
0000b2  4638              MOV      r0,r7                 ;200
0000b4  f7fffffe          BL       OS_PendMultiWait
0000b8  bf00              NOP                            ;204
0000ba  f7fffffe          BL       CPU_IntDisMeasStop
0000be  bf00              NOP                            ;204
0000c0  4658              MOV      r0,r11                ;204
0000c2  f7fffffe          BL       CPU_SR_Restore
0000c6  bf00              NOP                            ;204
0000c8  bf00              NOP                            ;204
0000ca  f7fffffe          BL       OSSched
0000ce  bf00              NOP                            ;208
0000d0  bf00              NOP                            ;208
0000d2  f7fffffe          BL       CPU_SR_Save
0000d6  4683              MOV      r11,r0                ;208
0000d8  bf00              NOP                            ;208
0000da  f7fffffe          BL       CPU_IntDisMeasStart
0000de  bf00              NOP                            ;208
0000e0  4818              LDR      r0,|L1.324|
0000e2  6800              LDR      r0,[r0,#0]            ;209  ; OSTCBCurPtr
0000e4  f8900035          LDRB     r0,[r0,#0x35]         ;209
0000e8  b130              CBZ      r0,|L1.248|
0000ea  2801              CMP      r0,#1                 ;209
0000ec  d007              BEQ      |L1.254|
0000ee  2802              CMP      r0,#2                 ;209
0000f0  d00d              BEQ      |L1.270|
0000f2  2803              CMP      r0,#3                 ;209
0000f4  d10f              BNE      |L1.278|
0000f6  e006              B        |L1.262|
                  |L1.248|
0000f8  2000              MOVS     r0,#0                 ;211
0000fa  8020              STRH     r0,[r4,#0]            ;211
0000fc  e00f              B        |L1.286|
                  |L1.254|
0000fe  f24610a9          MOV      r0,#0x61a9            ;215
000102  8020              STRH     r0,[r4,#0]            ;215
000104  e00b              B        |L1.286|
                  |L1.262|
000106  f24720d9          MOV      r0,#0x72d9            ;219
00010a  8020              STRH     r0,[r4,#0]            ;219
00010c  e007              B        |L1.286|
                  |L1.270|
00010e  f64550c2          MOV      r0,#0x5dc2            ;223
000112  8020              STRH     r0,[r4,#0]            ;223
000114  e003              B        |L1.286|
                  |L1.278|
000116  f646602e          MOV      r0,#0x6e2e            ;227
00011a  8020              STRH     r0,[r4,#0]            ;227
00011c  bf00              NOP                            ;228
                  |L1.286|
00011e  bf00              NOP                            ;212
000120  2000              MOVS     r0,#0                 ;231
000122  4908              LDR      r1,|L1.324|
000124  6809              LDR      r1,[r1,#0]            ;231  ; OSTCBCurPtr
000126  f8810035          STRB     r0,[r1,#0x35]         ;231
00012a  bf00              NOP                            ;232
00012c  f7fffffe          BL       CPU_IntDisMeasStop
000130  bf00              NOP                            ;232
000132  4658              MOV      r0,r11                ;232
000134  f7fffffe          BL       CPU_SR_Restore
000138  bf00              NOP                            ;232
00013a  bf00              NOP                            ;232
00013c  2001              MOVS     r0,#1                 ;234
00013e  e774              B        |L1.42|
;;;236    
                          ENDP

                  |L1.320|
                          DCD      OSSchedLockNestingCtr
                  |L1.324|
                          DCD      OSTCBCurPtr

                          AREA ||i.OS_PendMultiGetRdy||, CODE, READONLY, ALIGN=2

                  OS_PendMultiGetRdy PROC
;;;255    
;;;256    OS_OBJ_QTY  OS_PendMultiGetRdy (OS_PEND_DATA  *p_pend_data_tbl,
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;257                                    OS_OBJ_QTY     tbl_size)
;;;258    {
000004  4604              MOV      r4,r0
000006  4689              MOV      r9,r1
;;;259        OS_OBJ_QTY   i;
;;;260        OS_OBJ_QTY   nbr_obj_rdy;
;;;261    #if OS_CFG_Q_EN > 0u
;;;262        OS_ERR       err;
;;;263        OS_MSG_SIZE  msg_size;
;;;264        OS_Q        *p_q;
;;;265        void        *p_void;
;;;266        CPU_TS       ts;
;;;267    #endif
;;;268    #if OS_CFG_SEM_EN  > 0u
;;;269        OS_SEM      *p_sem;
;;;270    #endif
;;;271    
;;;272    
;;;273    
;;;274        nbr_obj_rdy = (OS_OBJ_QTY)0;
000008  2600              MOVS     r6,#0
;;;275        for (i = 0u; i < tbl_size; i++) {
00000a  46b2              MOV      r10,r6
00000c  e038              B        |L2.128|
                  |L2.14|
;;;276            p_pend_data_tbl->RdyObjPtr  = (OS_PEND_OBJ  *)0;         /* Clear all fields                                  */
00000e  2000              MOVS     r0,#0
000010  6120              STR      r0,[r4,#0x10]
;;;277            p_pend_data_tbl->RdyMsgPtr  = (void         *)0;
000012  6160              STR      r0,[r4,#0x14]
;;;278            p_pend_data_tbl->RdyMsgSize = (OS_MSG_SIZE   )0;
000014  8320              STRH     r0,[r4,#0x18]
;;;279            p_pend_data_tbl->RdyTS      = (CPU_TS        )0;
000016  61e0              STR      r0,[r4,#0x1c]
;;;280            p_pend_data_tbl->NextPtr    = (OS_PEND_DATA *)0;
000018  6060              STR      r0,[r4,#4]
;;;281            p_pend_data_tbl->PrevPtr    = (OS_PEND_DATA *)0;
00001a  6020              STR      r0,[r4,#0]
;;;282            p_pend_data_tbl->TCBPtr     = (OS_TCB       *)0;
00001c  60a0              STR      r0,[r4,#8]
;;;283    #if OS_CFG_Q_EN > 0u
;;;284            p_q = (OS_Q *)((void *)p_pend_data_tbl->PendObjPtr);     /* Assume we are pointing to a message queue object  */
00001e  f8d4800c          LDR      r8,[r4,#0xc]
;;;285            if (p_q->Type == OS_OBJ_TYPE_Q) {                        /* Is it a message queue?                            */
000022  491a              LDR      r1,|L2.140|
000024  f8d80000          LDR      r0,[r8,#0]
000028  4288              CMP      r0,r1
00002a  d114              BNE      |L2.86|
;;;286                p_void = OS_MsgQGet(&p_q->MsgQ,                      /* Yes, Any message waiting in the message queue?    */
00002c  ab02              ADD      r3,sp,#8
00002e  466a              MOV      r2,sp
000030  a901              ADD      r1,sp,#4
000032  f1080020          ADD      r0,r8,#0x20
000036  f7fffffe          BL       OS_MsgQGet
00003a  4607              MOV      r7,r0
;;;287                                    &msg_size,
;;;288                                    &ts,
;;;289                                    &err);
;;;290                if (err == OS_ERR_NONE) {
00003c  f8bd0008          LDRH     r0,[sp,#8]
000040  b948              CBNZ     r0,|L2.86|
;;;291                    p_pend_data_tbl->RdyObjPtr  = p_pend_data_tbl->PendObjPtr;
000042  68e0              LDR      r0,[r4,#0xc]
000044  6120              STR      r0,[r4,#0x10]
;;;292                    p_pend_data_tbl->RdyMsgPtr  = p_void;            /*      Yes, save the message received               */
000046  6167              STR      r7,[r4,#0x14]
;;;293                    p_pend_data_tbl->RdyMsgSize = msg_size;
000048  f8bd0004          LDRH     r0,[sp,#4]
00004c  8320              STRH     r0,[r4,#0x18]
;;;294                    p_pend_data_tbl->RdyTS      = ts;
00004e  9800              LDR      r0,[sp,#0]
000050  61e0              STR      r0,[r4,#0x1c]
;;;295                    nbr_obj_rdy++;
000052  1c70              ADDS     r0,r6,#1
000054  b286              UXTH     r6,r0
                  |L2.86|
;;;296                }
;;;297            }
;;;298    #endif
;;;299    
;;;300    #if OS_CFG_SEM_EN > 0u
;;;301            p_sem = (OS_SEM *)((void *)p_pend_data_tbl->PendObjPtr); /* Assume we are pointing to a semaphore object      */
000056  68e5              LDR      r5,[r4,#0xc]
;;;302            if (p_sem->Type == OS_OBJ_TYPE_SEM) {                    /* Is it a semaphore?                                */
000058  490d              LDR      r1,|L2.144|
00005a  6828              LDR      r0,[r5,#0]
00005c  4288              CMP      r0,r1
00005e  d10a              BNE      |L2.118|
;;;303                if (p_sem->Ctr > 0u) {                               /* Yes, Semaphore has been signaled?                 */
000060  6a28              LDR      r0,[r5,#0x20]
000062  b140              CBZ      r0,|L2.118|
;;;304                    p_sem->Ctr--;                                    /*      Yes, caller may proceed                      */
000064  6a28              LDR      r0,[r5,#0x20]
000066  1e40              SUBS     r0,r0,#1
000068  6228              STR      r0,[r5,#0x20]
;;;305                    p_pend_data_tbl->RdyObjPtr  = p_pend_data_tbl->PendObjPtr;
00006a  68e0              LDR      r0,[r4,#0xc]
00006c  6120              STR      r0,[r4,#0x10]
;;;306                    p_pend_data_tbl->RdyTS      = p_sem->TS;
00006e  6a68              LDR      r0,[r5,#0x24]
000070  61e0              STR      r0,[r4,#0x1c]
;;;307                    nbr_obj_rdy++;
000072  1c70              ADDS     r0,r6,#1
000074  b286              UXTH     r6,r0
                  |L2.118|
;;;308                }
;;;309            }
;;;310    #endif
;;;311    
;;;312            p_pend_data_tbl++;
000076  3420              ADDS     r4,r4,#0x20
000078  f10a0001          ADD      r0,r10,#1             ;275
00007c  fa1ffa80          UXTH     r10,r0                ;275
                  |L2.128|
000080  45ca              CMP      r10,r9                ;275
000082  dbc4              BLT      |L2.14|
;;;313        }
;;;314        return (nbr_obj_rdy);
000084  4630              MOV      r0,r6
;;;315    }
000086  e8bd8ffe          POP      {r1-r11,pc}
;;;316    
                          ENDP

00008a  0000              DCW      0x0000
                  |L2.140|
                          DCD      0x55455551
                  |L2.144|
                          DCD      0x414d4553

                          AREA ||i.OS_PendMultiValidate||, CODE, READONLY, ALIGN=2

                  OS_PendMultiValidate PROC
;;;336    
;;;337    CPU_BOOLEAN  OS_PendMultiValidate (OS_PEND_DATA  *p_pend_data_tbl,
000000  b5f0              PUSH     {r4-r7,lr}
;;;338                                       OS_OBJ_QTY     tbl_size)
;;;339    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;340        OS_OBJ_QTY  i;
;;;341        OS_OBJ_QTY  ctr;
;;;342    #if OS_CFG_SEM_EN  > 0u
;;;343        OS_SEM      *p_sem;
;;;344    #endif
;;;345    #if OS_CFG_Q_EN > 0u
;;;346        OS_Q        *p_q;
;;;347    #endif
;;;348    
;;;349    
;;;350        for (i = 0u; i < tbl_size; i++) {
000006  2400              MOVS     r4,#0
000008  e018              B        |L3.60|
                  |L3.10|
;;;351            if (p_pend_data_tbl->PendObjPtr == (OS_PEND_OBJ *)0) {   /* All .PendObjPtr in the table MUST be non NULL     */
00000a  68d0              LDR      r0,[r2,#0xc]
00000c  b908              CBNZ     r0,|L3.18|
;;;352                return (DEF_FALSE);
00000e  2000              MOVS     r0,#0
                  |L3.16|
;;;353            }
;;;354    
;;;355            ctr = 0u;
;;;356    #if OS_CFG_SEM_EN  > 0u
;;;357            p_sem = (OS_SEM *)((void *)p_pend_data_tbl->PendObjPtr); /* All objects to pend on must be of type OS_SEM ... */
;;;358            if (p_sem->Type == OS_OBJ_TYPE_SEM) {
;;;359                ctr++;
;;;360            }
;;;361    #endif
;;;362    
;;;363    #if OS_CFG_Q_EN > 0u
;;;364            p_q = (OS_Q *)((void *)p_pend_data_tbl->PendObjPtr);     /* ... or of type OS_Q                               */
;;;365            if (p_q->Type == OS_OBJ_TYPE_Q) {
;;;366                ctr++;
;;;367            }
;;;368    #endif
;;;369    
;;;370            if (ctr == (OS_OBJ_QTY)0) {
;;;371                return (DEF_FALSE);                                  /* Found at least one invalid object type            */
;;;372            }
;;;373            p_pend_data_tbl++;
;;;374        }
;;;375        return (DEF_TRUE);
;;;376    }
000010  bdf0              POP      {r4-r7,pc}
                  |L3.18|
000012  2100              MOVS     r1,#0                 ;355
000014  68d6              LDR      r6,[r2,#0xc]          ;357
000016  4f0b              LDR      r7,|L3.68|
000018  6830              LDR      r0,[r6,#0]            ;358
00001a  42b8              CMP      r0,r7                 ;358
00001c  d101              BNE      |L3.34|
00001e  1c48              ADDS     r0,r1,#1              ;359
000020  b281              UXTH     r1,r0                 ;359
                  |L3.34|
000022  68d5              LDR      r5,[r2,#0xc]          ;364
000024  4f08              LDR      r7,|L3.72|
000026  6828              LDR      r0,[r5,#0]            ;365
000028  42b8              CMP      r0,r7                 ;365
00002a  d101              BNE      |L3.48|
00002c  1c48              ADDS     r0,r1,#1              ;366
00002e  b281              UXTH     r1,r0                 ;366
                  |L3.48|
000030  b909              CBNZ     r1,|L3.54|
000032  2000              MOVS     r0,#0                 ;371
000034  e7ec              B        |L3.16|
                  |L3.54|
000036  3220              ADDS     r2,r2,#0x20           ;373
000038  1c60              ADDS     r0,r4,#1              ;350
00003a  b284              UXTH     r4,r0                 ;350
                  |L3.60|
00003c  429c              CMP      r4,r3                 ;350
00003e  dbe4              BLT      |L3.10|
000040  2001              MOVS     r0,#1                 ;375
000042  e7e5              B        |L3.16|
;;;377    
                          ENDP

                  |L3.68|
                          DCD      0x414d4553
                  |L3.72|
                          DCD      0x55455551

                          AREA ||i.OS_PendMultiWait||, CODE, READONLY, ALIGN=2

                  OS_PendMultiWait PROC
;;;398    
;;;399    void  OS_PendMultiWait (OS_PEND_DATA  *p_pend_data_tbl,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;400                            OS_OBJ_QTY     tbl_size,
;;;401                            OS_TICK        timeout)
;;;402    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
;;;403        OS_OBJ_QTY      i;
;;;404        OS_PEND_LIST   *p_pend_list;
;;;405    
;;;406    #if OS_CFG_Q_EN > 0u
;;;407        OS_Q           *p_q;
;;;408    #endif
;;;409    
;;;410    #if OS_CFG_SEM_EN > 0u
;;;411        OS_SEM         *p_sem;
;;;412    #endif
;;;413    
;;;414    
;;;415    
;;;416        OSTCBCurPtr->PendOn             = OS_TASK_PEND_ON_MULTI;   /* Resource not available, wait until it is            */
00000a  2003              MOVS     r0,#3
00000c  491c              LDR      r1,|L4.128|
00000e  6809              LDR      r1,[r1,#0]  ; OSTCBCurPtr
000010  f8810034          STRB     r0,[r1,#0x34]
;;;417        OSTCBCurPtr->PendStatus         = OS_STATUS_PEND_OK;
000014  2000              MOVS     r0,#0
000016  491a              LDR      r1,|L4.128|
000018  6809              LDR      r1,[r1,#0]  ; OSTCBCurPtr
00001a  f8810035          STRB     r0,[r1,#0x35]
;;;418        OSTCBCurPtr->PendDataTblEntries = tbl_size;
00001e  4818              LDR      r0,|L4.128|
000020  6800              LDR      r0,[r0,#0]  ; OSTCBCurPtr
000022  f8a05046          STRH     r5,[r0,#0x46]
;;;419        OSTCBCurPtr->PendDataTblPtr     = p_pend_data_tbl;
000026  4816              LDR      r0,|L4.128|
000028  6800              LDR      r0,[r0,#0]  ; OSTCBCurPtr
00002a  6304              STR      r4,[r0,#0x30]
;;;420    
;;;421        OS_TaskBlock(OSTCBCurPtr,                                  /* Block the task waiting for object to be posted ...  */
00002c  4641              MOV      r1,r8
00002e  4814              LDR      r0,|L4.128|
000030  6800              LDR      r0,[r0,#0]  ; OSTCBCurPtr
000032  f7fffffe          BL       OS_TaskBlock
;;;422                     timeout);                                     /* ... but with a timeout if not                       */
;;;423    
;;;424        for (i = 0u; i < tbl_size; i++) {
000036  f04f0900          MOV      r9,#0
00003a  e01d              B        |L4.120|
                  |L4.60|
;;;425            p_pend_data_tbl->TCBPtr = OSTCBCurPtr;                 /* Every entry points back to the TCB of the task      */
00003c  4810              LDR      r0,|L4.128|
00003e  6800              LDR      r0,[r0,#0]  ; OSTCBCurPtr
000040  60a0              STR      r0,[r4,#8]
;;;426    
;;;427    #if OS_CFG_SEM_EN > 0u
;;;428            p_sem = (OS_SEM *)((void *)p_pend_data_tbl->PendObjPtr);
000042  68e7              LDR      r7,[r4,#0xc]
;;;429            if (p_sem->Type == OS_OBJ_TYPE_SEM) {
000044  490f              LDR      r1,|L4.132|
000046  6838              LDR      r0,[r7,#0]
000048  4288              CMP      r0,r1
00004a  d105              BNE      |L4.88|
;;;430                p_pend_list = &p_sem->PendList;
00004c  f1070a08          ADD      r10,r7,#8
;;;431                OS_PendListInsertPrio(p_pend_list,
000050  4621              MOV      r1,r4
000052  4650              MOV      r0,r10
000054  f7fffffe          BL       OS_PendListInsertPrio
                  |L4.88|
;;;432                                      p_pend_data_tbl);
;;;433            }
;;;434    #endif
;;;435    
;;;436    #if OS_CFG_Q_EN > 0u
;;;437            p_q = (OS_Q *)((void *)p_pend_data_tbl->PendObjPtr);
000058  68e6              LDR      r6,[r4,#0xc]
;;;438            if (p_q->Type == OS_OBJ_TYPE_Q) {
00005a  490b              LDR      r1,|L4.136|
00005c  6830              LDR      r0,[r6,#0]
00005e  4288              CMP      r0,r1
000060  d105              BNE      |L4.110|
;;;439                p_pend_list = &p_q->PendList;
000062  f1060a08          ADD      r10,r6,#8
;;;440                OS_PendListInsertPrio(p_pend_list,
000066  4621              MOV      r1,r4
000068  4650              MOV      r0,r10
00006a  f7fffffe          BL       OS_PendListInsertPrio
                  |L4.110|
;;;441                                      p_pend_data_tbl);
;;;442            }
;;;443    #endif
;;;444    
;;;445            p_pend_data_tbl++;
00006e  3420              ADDS     r4,r4,#0x20
000070  f1090001          ADD      r0,r9,#1              ;424
000074  fa1ff980          UXTH     r9,r0                 ;424
                  |L4.120|
000078  45a9              CMP      r9,r5                 ;424
00007a  dbdf              BLT      |L4.60|
;;;446        }
;;;447    }
00007c  e8bd87f0          POP      {r4-r10,pc}
;;;448    
                          ENDP

                  |L4.128|
                          DCD      OSTCBCurPtr
                  |L4.132|
                          DCD      0x414d4553
                  |L4.136|
                          DCD      0x55455551
