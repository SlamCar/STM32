; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\os_stat.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\os_stat.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\OBJ -I..\USER -I..\HALLIB\STM32F7xx_HAL_Driver\Inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\SDRAM -I..\HARDWARE\IIC -I..\HARDWARE\24CXX -I..\HARDWARE\MPU9250 -I..\HARDWARE\DHT11 -I..\HARDWARE\MPU -I..\USMART -I..\DMP\driver\eMPL -I..\DMP\driver\include -I..\DMP\driver\stm32L -I..\DMP\eMPL-hal -I..\DMP\mllite -I..\DMP\mpl -I..\UCOSIII -I..\UCOSIII\UCOS-BSP -I..\UCOSIII\UCOS-CONFIG -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\uC-CPU\ARM-Cortex-M4\RealView -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-CPU -I..\HARDWARE\MY_FUNCTION -I..\USER -I..\HARDWARE\CRC -I..\HARDWARE\DMA -I..\HARDWARE\HEART_BEAT -I..\HARDWARE\RECEIVE_ANALYZE -I..\HARDWARE\FEED_BACK -I..\HARDWARE\DATA -I"D:\1111111\32F4\Slam car\实验35 MPU9250九轴传感器实验\USER\RTE" -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0 -IF:\Keil_v5\ARM\CMSIS\Include -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__UVISION_VERSION=514 -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=..\obj\os_stat.crf ..\UCOSIII\uCOS-III\Source\os_stat.c]
                          THUMB

                          AREA ||i.OSStatReset||, CODE, READONLY, ALIGN=2

                  OSStatReset PROC
;;;58     
;;;59     void  OSStatReset (OS_ERR  *p_err)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;60     {
000004  4607              MOV      r7,r0
;;;61     #if (OS_CFG_DBG_EN > 0u)
;;;62         OS_TCB      *p_tcb;
;;;63     #if (OS_MSG_EN > 0u)
;;;64         OS_MSG_Q    *p_msg_q;
;;;65     #endif
;;;66     #if (OS_CFG_Q_EN > 0u)
;;;67         OS_Q        *p_q;
;;;68     #endif
;;;69     #endif
;;;70         CPU_SR_ALLOC();
000006  f04f0800          MOV      r8,#0
;;;71     
;;;72     
;;;73     
;;;74     #ifdef OS_SAFETY_CRITICAL
;;;75         if (p_err == (OS_ERR *)0) {
;;;76             OS_SAFETY_CRITICAL_EXCEPTION();
;;;77             return;
;;;78         }
;;;79     #endif
;;;80     
;;;81         CPU_CRITICAL_ENTER();
00000a  bf00              NOP      
00000c  bf00              NOP      
00000e  f7fffffe          BL       CPU_SR_Save
000012  4680              MOV      r8,r0
000014  bf00              NOP      
000016  f7fffffe          BL       CPU_IntDisMeasStart
00001a  bf00              NOP      
;;;82     #if OS_CFG_ISR_POST_DEFERRED_EN > 0u
;;;83         OSIntQTaskTimeMax     = (CPU_TS    )0;                  /* Reset the task execution times                         */
;;;84         OSIntQNbrEntriesMax   = (OS_OBJ_QTY)0;                  /* Reset the queue maximum number of entries              */
;;;85     #endif
;;;86     
;;;87     #if OS_CFG_STAT_TASK_EN > 0u
;;;88         OSStatTaskCPUUsageMax = 0u;
00001c  2000              MOVS     r0,#0
00001e  4942              LDR      r1,|L1.296|
000020  8008              STRH     r0,[r1,#0]
;;;89         OSStatTaskTimeMax     = (CPU_TS)0;
000022  4942              LDR      r1,|L1.300|
000024  6008              STR      r0,[r1,#0]  ; OSStatTaskTimeMax
;;;90     #endif
;;;91     
;;;92         OSTickTaskTimeMax     = (CPU_TS)0;
000026  4942              LDR      r1,|L1.304|
000028  6008              STR      r0,[r1,#0]  ; OSTickTaskTimeMax
;;;93     
;;;94     #if OS_CFG_TMR_EN > 0u
;;;95         OSTmrTaskTimeMax      = (CPU_TS)0;
00002a  4942              LDR      r1,|L1.308|
00002c  6008              STR      r0,[r1,#0]  ; OSTmrTaskTimeMax
;;;96     #endif
;;;97     
;;;98     #ifdef CPU_CFG_INT_DIS_MEAS_EN
;;;99         OSIntDisTimeMax       = (CPU_TS)0;                      /* Reset the maximum interrupt disable time               */
00002e  4942              LDR      r1,|L1.312|
000030  6008              STR      r0,[r1,#0]  ; OSIntDisTimeMax
;;;100    #endif
;;;101    
;;;102    #if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
;;;103        OSSchedLockTimeMax    = (CPU_TS)0;                      /* Reset the maximum scheduler lock time                  */
;;;104    #endif
;;;105    
;;;106    #if ((OS_MSG_EN > 0u) && (OS_CFG_DBG_EN > 0u))
;;;107        OSMsgPool.NbrUsedMax  = 0u;
000032  4942              LDR      r1,|L1.316|
000034  8108              STRH     r0,[r1,#8]
;;;108    #endif
;;;109        CPU_CRITICAL_EXIT();
000036  bf00              NOP      
000038  f7fffffe          BL       CPU_IntDisMeasStop
00003c  bf00              NOP      
00003e  4640              MOV      r0,r8
000040  f7fffffe          BL       CPU_SR_Restore
000044  bf00              NOP      
000046  bf00              NOP      
;;;110    
;;;111    #if OS_CFG_DBG_EN > 0u
;;;112        CPU_CRITICAL_ENTER();
000048  bf00              NOP      
00004a  bf00              NOP      
00004c  f7fffffe          BL       CPU_SR_Save
000050  4680              MOV      r8,r0
000052  bf00              NOP      
000054  f7fffffe          BL       CPU_IntDisMeasStart
000058  bf00              NOP      
;;;113        p_tcb = OSTaskDbgListPtr;
00005a  4839              LDR      r0,|L1.320|
00005c  6804              LDR      r4,[r0,#0]  ; OSTaskDbgListPtr
;;;114        CPU_CRITICAL_EXIT();
00005e  bf00              NOP      
000060  f7fffffe          BL       CPU_IntDisMeasStop
000064  bf00              NOP      
000066  4640              MOV      r0,r8
000068  f7fffffe          BL       CPU_SR_Restore
00006c  bf00              NOP      
00006e  bf00              NOP      
;;;115        while (p_tcb != (OS_TCB *)0) {                          /* Reset per-Task statistics                              */
000070  e025              B        |L1.190|
                  |L1.114|
;;;116            CPU_CRITICAL_ENTER();
000072  bf00              NOP      
000074  bf00              NOP      
000076  f7fffffe          BL       CPU_SR_Save
00007a  4680              MOV      r8,r0
00007c  bf00              NOP      
00007e  f7fffffe          BL       CPU_IntDisMeasStart
000082  bf00              NOP      
;;;117    
;;;118    #ifdef CPU_CFG_INT_DIS_MEAS_EN
;;;119            p_tcb->IntDisTimeMax    = (CPU_TS      )0;
000084  2000              MOVS     r0,#0
000086  3474              ADDS     r4,r4,#0x74
000088  63e0              STR      r0,[r4,#0x3c]
;;;120    #endif
;;;121    
;;;122    #if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
;;;123            p_tcb->SchedLockTimeMax = (CPU_TS      )0;
;;;124    #endif
;;;125    
;;;126    #if OS_CFG_TASK_PROFILE_EN > 0u
;;;127    #if OS_CFG_TASK_Q_EN > 0u
;;;128            p_tcb->MsgQPendTimeMax  = (CPU_TS      )0;
00008a  6020              STR      r0,[r4,#0]
;;;129    #endif
;;;130            p_tcb->SemPendTimeMax   = (CPU_TS      )0;
00008c  6320              STR      r0,[r4,#0x30]
;;;131            p_tcb->CtxSwCtr         = (OS_CTR      )0;
00008e  61a0              STR      r0,[r4,#0x18]
;;;132            p_tcb->CPUUsage         = (OS_CPU_USAGE)0;
000090  82a0              STRH     r0,[r4,#0x14]
;;;133            p_tcb->CPUUsageMax      = (OS_CPU_USAGE)0;
000092  82e0              STRH     r0,[r4,#0x16]
;;;134            p_tcb->CyclesTotal      = (OS_CYCLES   )0;
000094  6260              STR      r0,[r4,#0x24]
;;;135            p_tcb->CyclesTotalPrev  = (OS_CYCLES   )0;
000096  62a0              STR      r0,[r4,#0x28]
;;;136            p_tcb->CyclesStart      =  OS_TS_GET();
000098  f7fffffe          BL       CPU_TS_TmrRd
00009c  6220              STR      r0,[r4,#0x20]
00009e  3c74              SUBS     r4,r4,#0x74
;;;137    #endif
;;;138    
;;;139    #if OS_CFG_TASK_Q_EN > 0u
;;;140            p_msg_q                 = &p_tcb->MsgQ;
0000a0  f1040660          ADD      r6,r4,#0x60
;;;141            p_msg_q->NbrEntriesMax  = (OS_MSG_QTY  )0;
0000a4  2000              MOVS     r0,#0
0000a6  81b0              STRH     r0,[r6,#0xc]
;;;142    #endif
;;;143            p_tcb                   = p_tcb->DbgNextPtr;
0000a8  f8d440b8          LDR      r4,[r4,#0xb8]
;;;144            CPU_CRITICAL_EXIT();
0000ac  bf00              NOP      
0000ae  f7fffffe          BL       CPU_IntDisMeasStop
0000b2  bf00              NOP      
0000b4  4640              MOV      r0,r8
0000b6  f7fffffe          BL       CPU_SR_Restore
0000ba  bf00              NOP      
0000bc  bf00              NOP      
                  |L1.190|
0000be  2c00              CMP      r4,#0                 ;115
0000c0  d1d7              BNE      |L1.114|
;;;145        }
;;;146    #endif
;;;147    
;;;148    #if (OS_CFG_Q_EN > 0u) && (OS_CFG_DBG_EN > 0u)
;;;149        CPU_CRITICAL_ENTER();
0000c2  bf00              NOP      
0000c4  bf00              NOP      
0000c6  f7fffffe          BL       CPU_SR_Save
0000ca  4680              MOV      r8,r0
0000cc  bf00              NOP      
0000ce  f7fffffe          BL       CPU_IntDisMeasStart
0000d2  bf00              NOP      
;;;150        p_q = OSQDbgListPtr;
0000d4  481b              LDR      r0,|L1.324|
0000d6  6805              LDR      r5,[r0,#0]  ; OSQDbgListPtr
;;;151        CPU_CRITICAL_EXIT();
0000d8  bf00              NOP      
0000da  f7fffffe          BL       CPU_IntDisMeasStop
0000de  bf00              NOP      
0000e0  4640              MOV      r0,r8
0000e2  f7fffffe          BL       CPU_SR_Restore
0000e6  bf00              NOP      
0000e8  bf00              NOP      
;;;152        while (p_q != (OS_Q *)0) {                              /* Reset message queues statistics                        */
0000ea  e016              B        |L1.282|
                  |L1.236|
;;;153            CPU_CRITICAL_ENTER();
0000ec  bf00              NOP      
0000ee  bf00              NOP      
0000f0  f7fffffe          BL       CPU_SR_Save
0000f4  4680              MOV      r8,r0
0000f6  bf00              NOP      
0000f8  f7fffffe          BL       CPU_IntDisMeasStart
0000fc  bf00              NOP      
;;;154            p_msg_q                = &p_q->MsgQ;
0000fe  f1050620          ADD      r6,r5,#0x20
;;;155            p_msg_q->NbrEntriesMax = (OS_MSG_QTY)0;
000102  2000              MOVS     r0,#0
000104  81b0              STRH     r0,[r6,#0xc]
;;;156            p_q                    = p_q->DbgNextPtr;
000106  69ad              LDR      r5,[r5,#0x18]
;;;157            CPU_CRITICAL_EXIT();
000108  bf00              NOP      
00010a  f7fffffe          BL       CPU_IntDisMeasStop
00010e  bf00              NOP      
000110  4640              MOV      r0,r8
000112  f7fffffe          BL       CPU_SR_Restore
000116  bf00              NOP      
000118  bf00              NOP      
                  |L1.282|
00011a  2d00              CMP      r5,#0                 ;152
00011c  d1e6              BNE      |L1.236|
;;;158        }
;;;159    #endif
;;;160    
;;;161       *p_err = OS_ERR_NONE;
00011e  2000              MOVS     r0,#0
000120  8038              STRH     r0,[r7,#0]
;;;162    }
000122  e8bd81f0          POP      {r4-r8,pc}
;;;163    
                          ENDP

000126  0000              DCW      0x0000
                  |L1.296|
                          DCD      OSStatTaskCPUUsageMax
                  |L1.300|
                          DCD      OSStatTaskTimeMax
                  |L1.304|
                          DCD      OSTickTaskTimeMax
                  |L1.308|
                          DCD      OSTmrTaskTimeMax
                  |L1.312|
                          DCD      OSIntDisTimeMax
                  |L1.316|
                          DCD      OSMsgPool
                  |L1.320|
                          DCD      OSTaskDbgListPtr
                  |L1.324|
                          DCD      OSQDbgListPtr

                          AREA ||i.OSStatTaskCPUUsageInit||, CODE, READONLY, ALIGN=2

                  OSStatTaskCPUUsageInit PROC
;;;185    
;;;186    void  OSStatTaskCPUUsageInit (OS_ERR  *p_err)
000000  b5f8              PUSH     {r3-r7,lr}
;;;187    {
000002  4604              MOV      r4,r0
;;;188        OS_ERR   err;
;;;189        OS_TICK  dly;
;;;190        CPU_SR_ALLOC();
000004  2600              MOVS     r6,#0
;;;191    
;;;192    
;;;193    
;;;194    #ifdef OS_SAFETY_CRITICAL
;;;195        if (p_err == (OS_ERR *)0) {
;;;196            OS_SAFETY_CRITICAL_EXCEPTION();
;;;197            return;
;;;198        }
;;;199    #endif
;;;200    
;;;201    #if ((OS_CFG_TMR_EN > 0u) && (OS_CFG_TASK_SUSPEND_EN > 0u))
;;;202        OSTaskSuspend(&OSTmrTaskTCB, &err);
000006  4669              MOV      r1,sp
000008  4836              LDR      r0,|L2.228|
00000a  f7fffffe          BL       OSTaskSuspend
;;;203        if (err != OS_ERR_NONE) {
00000e  f8bd0000          LDRH     r0,[sp,#0]
000012  b118              CBZ      r0,|L2.28|
;;;204           *p_err = err;
000014  f8bd0000          LDRH     r0,[sp,#0]
000018  8020              STRH     r0,[r4,#0]
                  |L2.26|
;;;205            return;
;;;206        }
;;;207    #endif
;;;208    
;;;209        OSTimeDly((OS_TICK )2,                                  /* Synchronize with clock tick                            */
;;;210                  (OS_OPT  )OS_OPT_TIME_DLY,
;;;211                  (OS_ERR *)&err);
;;;212        if (err != OS_ERR_NONE) {
;;;213           *p_err = err;
;;;214            return;
;;;215        }
;;;216        CPU_CRITICAL_ENTER();
;;;217        OSStatTaskCtr = (OS_TICK)0;                             /* Clear idle counter                                     */
;;;218        CPU_CRITICAL_EXIT();
;;;219    
;;;220        dly = (OS_TICK)0;
;;;221        if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
;;;222            dly = (OS_TICK)(OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
;;;223        }
;;;224        if (dly == (OS_TICK)0) {
;;;225            dly =  (OS_TICK)(OSCfg_TickRate_Hz / (OS_RATE_HZ)10);
;;;226        }
;;;227    
;;;228        OSTimeDly(dly,                                          /* Determine MAX. idle counter value                      */
;;;229                  OS_OPT_TIME_DLY,
;;;230                  &err);
;;;231    
;;;232    #if ((OS_CFG_TMR_EN > 0u) && (OS_CFG_TASK_SUSPEND_EN > 0u))
;;;233        OSTaskResume(&OSTmrTaskTCB, &err);
;;;234        if (err != OS_ERR_NONE) {
;;;235           *p_err = err;
;;;236            return;
;;;237        }
;;;238    #endif
;;;239    
;;;240        CPU_CRITICAL_ENTER();
;;;241        OSStatTaskTimeMax = (CPU_TS)0;
;;;242    
;;;243        OSStatTaskCtrMax  = OSStatTaskCtr;                      /* Store maximum idle counter count                       */
;;;244        OSStatTaskRdy     = OS_STATE_RDY;
;;;245        CPU_CRITICAL_EXIT();
;;;246       *p_err             = OS_ERR_NONE;
;;;247    }
00001a  bdf8              POP      {r3-r7,pc}
                  |L2.28|
00001c  466a              MOV      r2,sp                 ;209
00001e  2100              MOVS     r1,#0                 ;209
000020  2002              MOVS     r0,#2                 ;209
000022  f7fffffe          BL       OSTimeDly
000026  f8bd0000          LDRH     r0,[sp,#0]            ;212
00002a  b118              CBZ      r0,|L2.52|
00002c  f8bd0000          LDRH     r0,[sp,#0]            ;213
000030  8020              STRH     r0,[r4,#0]            ;213
000032  e7f2              B        |L2.26|
                  |L2.52|
000034  bf00              NOP                            ;216
000036  bf00              NOP                            ;216
000038  f7fffffe          BL       CPU_SR_Save
00003c  4606              MOV      r6,r0                 ;216
00003e  bf00              NOP                            ;216
000040  f7fffffe          BL       CPU_IntDisMeasStart
000044  bf00              NOP                            ;216
000046  2000              MOVS     r0,#0                 ;217
000048  4927              LDR      r1,|L2.232|
00004a  6008              STR      r0,[r1,#0]            ;217  ; OSStatTaskCtr
00004c  bf00              NOP                            ;218
00004e  f7fffffe          BL       CPU_IntDisMeasStop
000052  bf00              NOP                            ;218
000054  4630              MOV      r0,r6                 ;218
000056  f7fffffe          BL       CPU_SR_Restore
00005a  bf00              NOP                            ;218
00005c  bf00              NOP                            ;218
00005e  2500              MOVS     r5,#0                 ;220
000060  4822              LDR      r0,|L2.236|
000062  6800              LDR      r0,[r0,#0]            ;221  ; OSCfg_TickRate_Hz
000064  4922              LDR      r1,|L2.240|
000066  6809              LDR      r1,[r1,#0]            ;221  ; OSCfg_StatTaskRate_Hz
000068  4288              CMP      r0,r1                 ;221
00006a  d905              BLS      |L2.120|
00006c  481f              LDR      r0,|L2.236|
00006e  6800              LDR      r0,[r0,#0]            ;222  ; OSCfg_TickRate_Hz
000070  491f              LDR      r1,|L2.240|
000072  6809              LDR      r1,[r1,#0]            ;222  ; OSCfg_StatTaskRate_Hz
000074  fbb0f5f1          UDIV     r5,r0,r1              ;222
                  |L2.120|
000078  b925              CBNZ     r5,|L2.132|
00007a  481c              LDR      r0,|L2.236|
00007c  6800              LDR      r0,[r0,#0]            ;225  ; OSCfg_TickRate_Hz
00007e  210a              MOVS     r1,#0xa               ;225
000080  fbb0f5f1          UDIV     r5,r0,r1              ;225
                  |L2.132|
000084  466a              MOV      r2,sp                 ;228
000086  2100              MOVS     r1,#0                 ;228
000088  4628              MOV      r0,r5                 ;228
00008a  f7fffffe          BL       OSTimeDly
00008e  4669              MOV      r1,sp                 ;233
000090  4814              LDR      r0,|L2.228|
000092  f7fffffe          BL       OSTaskResume
000096  f8bd0000          LDRH     r0,[sp,#0]            ;234
00009a  b118              CBZ      r0,|L2.164|
00009c  f8bd0000          LDRH     r0,[sp,#0]            ;235
0000a0  8020              STRH     r0,[r4,#0]            ;235
0000a2  e7ba              B        |L2.26|
                  |L2.164|
0000a4  bf00              NOP                            ;240
0000a6  bf00              NOP                            ;240
0000a8  f7fffffe          BL       CPU_SR_Save
0000ac  4606              MOV      r6,r0                 ;240
0000ae  bf00              NOP                            ;240
0000b0  f7fffffe          BL       CPU_IntDisMeasStart
0000b4  bf00              NOP                            ;240
0000b6  2000              MOVS     r0,#0                 ;241
0000b8  490e              LDR      r1,|L2.244|
0000ba  6008              STR      r0,[r1,#0]            ;241  ; OSStatTaskTimeMax
0000bc  480a              LDR      r0,|L2.232|
0000be  6800              LDR      r0,[r0,#0]            ;243  ; OSStatTaskCtr
0000c0  490d              LDR      r1,|L2.248|
0000c2  6008              STR      r0,[r1,#0]            ;243  ; OSStatTaskCtrMax
0000c4  2001              MOVS     r0,#1                 ;244
0000c6  490d              LDR      r1,|L2.252|
0000c8  7008              STRB     r0,[r1,#0]            ;244
0000ca  bf00              NOP                            ;245
0000cc  f7fffffe          BL       CPU_IntDisMeasStop
0000d0  bf00              NOP                            ;245
0000d2  4630              MOV      r0,r6                 ;245
0000d4  f7fffffe          BL       CPU_SR_Restore
0000d8  bf00              NOP                            ;245
0000da  bf00              NOP                            ;245
0000dc  2000              MOVS     r0,#0                 ;246
0000de  8020              STRH     r0,[r4,#0]            ;246
0000e0  bf00              NOP      
0000e2  e79a              B        |L2.26|
;;;248    
                          ENDP

                  |L2.228|
                          DCD      OSTmrTaskTCB
                  |L2.232|
                          DCD      OSStatTaskCtr
                  |L2.236|
                          DCD      OSCfg_TickRate_Hz
                  |L2.240|
                          DCD      OSCfg_StatTaskRate_Hz
                  |L2.244|
                          DCD      OSStatTaskTimeMax
                  |L2.248|
                          DCD      OSStatTaskCtrMax
                  |L2.252|
                          DCD      OSStatTaskRdy

                          AREA ||i.OS_StatTask||, CODE, READONLY, ALIGN=2

                  OS_StatTask PROC
;;;275    
;;;276    void  OS_StatTask (void  *p_arg)
000000  b086              SUB      sp,sp,#0x18
;;;277    {
;;;278    #if OS_CFG_DBG_EN > 0u
;;;279    #if OS_CFG_TASK_PROFILE_EN > 0u
;;;280        OS_CPU_USAGE usage;
;;;281        OS_CYCLES    cycles_total;
;;;282        OS_CYCLES    cycles_div;
;;;283        OS_CYCLES    cycles_mult;
;;;284        OS_CYCLES    cycles_max;
;;;285    #endif
;;;286        OS_TCB      *p_tcb;
;;;287    #endif
;;;288        OS_TICK      ctr_max;
;;;289        OS_TICK      ctr_mult;
;;;290        OS_TICK      ctr_div;
;;;291        OS_ERR       err;
;;;292        OS_TICK      dly;
;;;293        CPU_TS       ts_start;
;;;294        CPU_TS       ts_end;
;;;295        CPU_SR_ALLOC();
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;296    
;;;297    
;;;298    
;;;299        (void)&p_arg;                                           /* Prevent compiler warning for not using 'p_arg'         */
;;;300        while (OSStatTaskRdy != DEF_TRUE) {
000006  e006              B        |L3.22|
                  |L3.8|
;;;301            OSTimeDly(2u * OSCfg_StatTaskRate_Hz,               /* Wait until statistic task is ready                     */
000008  49b6              LDR      r1,|L3.740|
00000a  6809              LDR      r1,[r1,#0]  ; OSCfg_StatTaskRate_Hz
00000c  0048              LSLS     r0,r1,#1
00000e  aa01              ADD      r2,sp,#4
000010  2100              MOVS     r1,#0
000012  f7fffffe          BL       OSTimeDly
                  |L3.22|
000016  48b4              LDR      r0,|L3.744|
000018  7800              LDRB     r0,[r0,#0]            ;300  ; OSStatTaskRdy
00001a  2801              CMP      r0,#1                 ;300
00001c  d1f4              BNE      |L3.8|
;;;302                      OS_OPT_TIME_DLY,
;;;303                      &err);
;;;304        }
;;;305        OSStatReset(&err);                                      /* Reset statistics                                       */
00001e  a801              ADD      r0,sp,#4
000020  f7fffffe          BL       OSStatReset
;;;306    
;;;307        dly = (OS_TICK)0;                                       /* Compute statistic task sleep delay                     */
000024  2700              MOVS     r7,#0
;;;308        if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
000026  48b1              LDR      r0,|L3.748|
000028  6800              LDR      r0,[r0,#0]  ; OSCfg_TickRate_Hz
00002a  49ae              LDR      r1,|L3.740|
00002c  6809              LDR      r1,[r1,#0]  ; OSCfg_StatTaskRate_Hz
00002e  4288              CMP      r0,r1
000030  d905              BLS      |L3.62|
;;;309            dly = (OS_TICK)(OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
000032  48ae              LDR      r0,|L3.748|
000034  6800              LDR      r0,[r0,#0]  ; OSCfg_TickRate_Hz
000036  49ab              LDR      r1,|L3.740|
000038  6809              LDR      r1,[r1,#0]  ; OSCfg_StatTaskRate_Hz
00003a  fbb0f7f1          UDIV     r7,r0,r1
                  |L3.62|
;;;310        }
;;;311        if (dly == (OS_TICK)0) {
00003e  b927              CBNZ     r7,|L3.74|
;;;312            dly =  (OS_TICK)(OSCfg_TickRate_Hz / (OS_RATE_HZ)10);
000040  48aa              LDR      r0,|L3.748|
000042  6800              LDR      r0,[r0,#0]  ; OSCfg_TickRate_Hz
000044  210a              MOVS     r1,#0xa
000046  fbb0f7f1          UDIV     r7,r0,r1
                  |L3.74|
;;;313        }
;;;314    
;;;315        while (DEF_ON) {
00004a  e149              B        |L3.736|
                  |L3.76|
;;;316            ts_start        = OS_TS_GET();
00004c  f7fffffe          BL       CPU_TS_TmrRd
000050  4682              MOV      r10,r0
;;;317    #ifdef  CPU_CFG_INT_DIS_MEAS_EN
;;;318            OSIntDisTimeMax = CPU_IntDisMeasMaxGet();
000052  f7fffffe          BL       CPU_IntDisMeasMaxGet
000056  49a6              LDR      r1,|L3.752|
000058  6008              STR      r0,[r1,#0]  ; OSIntDisTimeMax
;;;319    #endif
;;;320    
;;;321            CPU_CRITICAL_ENTER();                               /* ----------------- OVERALL CPU USAGE ------------------ */
00005a  bf00              NOP      
00005c  bf00              NOP      
00005e  f7fffffe          BL       CPU_SR_Save
000062  9000              STR      r0,[sp,#0]
000064  bf00              NOP      
000066  f7fffffe          BL       CPU_IntDisMeasStart
00006a  bf00              NOP      
;;;322            OSStatTaskCtrRun   = OSStatTaskCtr;                 /* Obtain the of the stat counter for the past .1 second  */
00006c  48a1              LDR      r0,|L3.756|
00006e  6800              LDR      r0,[r0,#0]  ; OSStatTaskCtr
000070  49a1              LDR      r1,|L3.760|
000072  6008              STR      r0,[r1,#0]  ; OSStatTaskCtrRun
;;;323            OSStatTaskCtr      = (OS_TICK)0;                    /* Reset the stat counter for the next .1 second          */
000074  2000              MOVS     r0,#0
000076  499f              LDR      r1,|L3.756|
000078  6008              STR      r0,[r1,#0]  ; OSStatTaskCtr
;;;324            CPU_CRITICAL_EXIT();
00007a  bf00              NOP      
00007c  f7fffffe          BL       CPU_IntDisMeasStop
000080  bf00              NOP      
000082  9800              LDR      r0,[sp,#0]
000084  f7fffffe          BL       CPU_SR_Restore
000088  bf00              NOP      
00008a  bf00              NOP      
;;;325    
;;;326            if (OSStatTaskCtrMax > OSStatTaskCtrRun) {          /* Compute CPU Usage with best resolution                 */
00008c  489b              LDR      r0,|L3.764|
00008e  6800              LDR      r0,[r0,#0]  ; OSStatTaskCtrMax
000090  4999              LDR      r1,|L3.760|
000092  6809              LDR      r1,[r1,#0]  ; OSStatTaskCtrRun
000094  4288              CMP      r0,r1
000096  d948              BLS      |L3.298|
;;;327                if (OSStatTaskCtrMax < 400000u) {                                        /*            1 to       400,000 */
000098  4898              LDR      r0,|L3.764|
00009a  6800              LDR      r0,[r0,#0]  ; OSStatTaskCtrMax
00009c  4998              LDR      r1,|L3.768|
00009e  4288              CMP      r0,r1
0000a0  d205              BCS      |L3.174|
;;;328                    ctr_mult = 10000u;
0000a2  f2427010          MOV      r0,#0x2710
0000a6  9003              STR      r0,[sp,#0xc]
;;;329                    ctr_div  =     1u;
0000a8  2001              MOVS     r0,#1
0000aa  9002              STR      r0,[sp,#8]
0000ac  e023              B        |L3.246|
                  |L3.174|
;;;330                } else if (OSStatTaskCtrMax <   4000000u) {                              /*      400,000 to     4,000,000 */
0000ae  4893              LDR      r0,|L3.764|
0000b0  6800              LDR      r0,[r0,#0]  ; OSStatTaskCtrMax
0000b2  4994              LDR      r1,|L3.772|
0000b4  4288              CMP      r0,r1
0000b6  d205              BCS      |L3.196|
;;;331                    ctr_mult =  1000u;
0000b8  f44f707a          MOV      r0,#0x3e8
0000bc  9003              STR      r0,[sp,#0xc]
;;;332                    ctr_div  =    10u;
0000be  200a              MOVS     r0,#0xa
0000c0  9002              STR      r0,[sp,#8]
0000c2  e018              B        |L3.246|
                  |L3.196|
;;;333                } else if (OSStatTaskCtrMax <  40000000u) {                              /*    4,000,000 to    40,000,000 */
0000c4  488d              LDR      r0,|L3.764|
0000c6  6800              LDR      r0,[r0,#0]  ; OSStatTaskCtrMax
0000c8  498f              LDR      r1,|L3.776|
0000ca  4288              CMP      r0,r1
0000cc  d203              BCS      |L3.214|
;;;334                    ctr_mult =   100u;
0000ce  2064              MOVS     r0,#0x64
0000d0  9003              STR      r0,[sp,#0xc]
;;;335                    ctr_div  =   100u;
0000d2  9002              STR      r0,[sp,#8]
0000d4  e00f              B        |L3.246|
                  |L3.214|
;;;336                } else if (OSStatTaskCtrMax < 400000000u) {                              /*   40,000,000 to   400,000,000 */
0000d6  4889              LDR      r0,|L3.764|
0000d8  6800              LDR      r0,[r0,#0]  ; OSStatTaskCtrMax
0000da  498c              LDR      r1,|L3.780|
0000dc  4288              CMP      r0,r1
0000de  d205              BCS      |L3.236|
;;;337                    ctr_mult =    10u;
0000e0  200a              MOVS     r0,#0xa
0000e2  9003              STR      r0,[sp,#0xc]
;;;338                    ctr_div  =  1000u;
0000e4  f44f707a          MOV      r0,#0x3e8
0000e8  9002              STR      r0,[sp,#8]
0000ea  e004              B        |L3.246|
                  |L3.236|
;;;339                } else {                                                                 /*  400,000,000 and up           */
;;;340                    ctr_mult =     1u;
0000ec  2001              MOVS     r0,#1
0000ee  9003              STR      r0,[sp,#0xc]
;;;341                    ctr_div  = 10000u;
0000f0  f2427010          MOV      r0,#0x2710
0000f4  9002              STR      r0,[sp,#8]
                  |L3.246|
;;;342                }
;;;343                ctr_max            = OSStatTaskCtrMax / ctr_div;
0000f6  4881              LDR      r0,|L3.764|
0000f8  6801              LDR      r1,[r0,#0]  ; OSStatTaskCtrMax
0000fa  9802              LDR      r0,[sp,#8]
0000fc  fbb1f9f0          UDIV     r9,r1,r0
;;;344                OSStatTaskCPUUsage = (OS_CPU_USAGE)((OS_TICK)10000u - ctr_mult * OSStatTaskCtrRun / ctr_max);
000100  497d              LDR      r1,|L3.760|
000102  9803              LDR      r0,[sp,#0xc]
000104  6809              LDR      r1,[r1,#0]  ; OSStatTaskCtrRun
000106  4348              MULS     r0,r1,r0
000108  fbb0f0f9          UDIV     r0,r0,r9
00010c  f2427110          MOV      r1,#0x2710
000110  1a08              SUBS     r0,r1,r0
000112  497f              LDR      r1,|L3.784|
000114  8008              STRH     r0,[r1,#0]
;;;345                if (OSStatTaskCPUUsageMax < OSStatTaskCPUUsage) {
000116  487f              LDR      r0,|L3.788|
000118  8800              LDRH     r0,[r0,#0]  ; OSStatTaskCPUUsageMax
00011a  8809              LDRH     r1,[r1,#0]  ; OSStatTaskCPUUsage
00011c  4288              CMP      r0,r1
00011e  da07              BGE      |L3.304|
;;;346                    OSStatTaskCPUUsageMax = OSStatTaskCPUUsage;
000120  487b              LDR      r0,|L3.784|
000122  8800              LDRH     r0,[r0,#0]  ; OSStatTaskCPUUsage
000124  497b              LDR      r1,|L3.788|
000126  8008              STRH     r0,[r1,#0]
000128  e002              B        |L3.304|
                  |L3.298|
;;;347                }
;;;348            } else {
;;;349                OSStatTaskCPUUsage = (OS_CPU_USAGE)0u;
00012a  2000              MOVS     r0,#0
00012c  4978              LDR      r1,|L3.784|
00012e  8008              STRH     r0,[r1,#0]
                  |L3.304|
;;;350            }
;;;351    
;;;352            OSStatTaskHook();                                   /* Invoke user definable hook                             */
000130  f7fffffe          BL       OSStatTaskHook
;;;353    
;;;354    
;;;355    #if OS_CFG_DBG_EN > 0u
;;;356    #if OS_CFG_TASK_PROFILE_EN > 0u
;;;357            cycles_total = (OS_CYCLES)0;
000134  2500              MOVS     r5,#0
;;;358    
;;;359            CPU_CRITICAL_ENTER();
000136  bf00              NOP      
000138  bf00              NOP      
00013a  f7fffffe          BL       CPU_SR_Save
00013e  9000              STR      r0,[sp,#0]
000140  bf00              NOP      
000142  f7fffffe          BL       CPU_IntDisMeasStart
000146  bf00              NOP      
;;;360            p_tcb = OSTaskDbgListPtr;
000148  4873              LDR      r0,|L3.792|
00014a  6804              LDR      r4,[r0,#0]  ; OSTaskDbgListPtr
;;;361            CPU_CRITICAL_EXIT();
00014c  bf00              NOP      
00014e  f7fffffe          BL       CPU_IntDisMeasStop
000152  bf00              NOP      
000154  9800              LDR      r0,[sp,#0]
000156  f7fffffe          BL       CPU_SR_Restore
00015a  bf00              NOP      
00015c  bf00              NOP      
;;;362            while (p_tcb != (OS_TCB *)0) {                      /* ----------------- TOTAL CYCLES COUNT ----------------- */
00015e  e02e              B        |L3.446|
                  |L3.352|
;;;363                OS_CRITICAL_ENTER();
000160  bf00              NOP      
000162  bf00              NOP      
000164  f7fffffe          BL       CPU_SR_Save
000168  9000              STR      r0,[sp,#0]
00016a  bf00              NOP      
00016c  f7fffffe          BL       CPU_IntDisMeasStart
000170  bf00              NOP      
;;;364                p_tcb->CyclesTotalPrev =  p_tcb->CyclesTotal;   /* Save accumulated # cycles into a temp variable         */
000172  f8540f98          LDR      r0,[r4,#0x98]!
000176  6060              STR      r0,[r4,#4]
;;;365                p_tcb->CyclesTotal     = (OS_CYCLES)0;          /* Reset total cycles for task for next run               */
000178  2000              MOVS     r0,#0
00017a  f8440998          STR      r0,[r4],#-0x98
;;;366                OS_CRITICAL_EXIT();
00017e  bf00              NOP      
000180  f7fffffe          BL       CPU_IntDisMeasStop
000184  bf00              NOP      
000186  9800              LDR      r0,[sp,#0]
000188  f7fffffe          BL       CPU_SR_Restore
00018c  bf00              NOP      
00018e  bf00              NOP      
;;;367    
;;;368                cycles_total          += p_tcb->CyclesTotalPrev;/* Perform sum of all task # cycles                       */
000190  f8d4009c          LDR      r0,[r4,#0x9c]
000194  4405              ADD      r5,r5,r0
;;;369    
;;;370                CPU_CRITICAL_ENTER();
000196  bf00              NOP      
000198  bf00              NOP      
00019a  f7fffffe          BL       CPU_SR_Save
00019e  9000              STR      r0,[sp,#0]
0001a0  bf00              NOP      
0001a2  f7fffffe          BL       CPU_IntDisMeasStart
0001a6  bf00              NOP      
;;;371                p_tcb                  = p_tcb->DbgNextPtr;
0001a8  f8d440b8          LDR      r4,[r4,#0xb8]
;;;372                CPU_CRITICAL_EXIT();
0001ac  bf00              NOP      
0001ae  f7fffffe          BL       CPU_IntDisMeasStop
0001b2  bf00              NOP      
0001b4  9800              LDR      r0,[sp,#0]
0001b6  f7fffffe          BL       CPU_SR_Restore
0001ba  bf00              NOP      
0001bc  bf00              NOP      
                  |L3.446|
0001be  2c00              CMP      r4,#0                 ;362
0001c0  d1ce              BNE      |L3.352|
;;;373            }
;;;374    #endif
;;;375    
;;;376    
;;;377    #if OS_CFG_TASK_PROFILE_EN > 0u
;;;378                                                                /* ------------- INDIVIDUAL TASK CPU USAGE -------------- */
;;;379            if (cycles_total > (OS_CYCLES)0u) {                                          /* 'cycles_total' scaling ...    */
0001c2  b345              CBZ      r5,|L3.534|
;;;380                if (cycles_total < 400000u) {                                            /*            1 to       400,000 */
0001c4  484e              LDR      r0,|L3.768|
0001c6  4285              CMP      r5,r0
0001c8  d205              BCS      |L3.470|
;;;381                    cycles_mult = 10000u;
0001ca  f2427010          MOV      r0,#0x2710
0001ce  9005              STR      r0,[sp,#0x14]
;;;382                    cycles_div  =     1u;
0001d0  f04f0b01          MOV      r11,#1
0001d4  e01b              B        |L3.526|
                  |L3.470|
;;;383                } else if (cycles_total <   4000000u) {                                  /*      400,000 to     4,000,000 */
0001d6  484b              LDR      r0,|L3.772|
0001d8  4285              CMP      r5,r0
0001da  d205              BCS      |L3.488|
;;;384                    cycles_mult =  1000u;
0001dc  f44f707a          MOV      r0,#0x3e8
0001e0  9005              STR      r0,[sp,#0x14]
;;;385                    cycles_div  =    10u;
0001e2  f04f0b0a          MOV      r11,#0xa
0001e6  e012              B        |L3.526|
                  |L3.488|
;;;386                } else if (cycles_total <  40000000u) {                                  /*    4,000,000 to    40,000,000 */
0001e8  4847              LDR      r0,|L3.776|
0001ea  4285              CMP      r5,r0
0001ec  d203              BCS      |L3.502|
;;;387                    cycles_mult =   100u;
0001ee  2064              MOVS     r0,#0x64
0001f0  9005              STR      r0,[sp,#0x14]
;;;388                    cycles_div  =   100u;
0001f2  4683              MOV      r11,r0
0001f4  e00b              B        |L3.526|
                  |L3.502|
;;;389                } else if (cycles_total < 400000000u) {                                  /*   40,000,000 to   400,000,000 */
0001f6  4845              LDR      r0,|L3.780|
0001f8  4285              CMP      r5,r0
0001fa  d204              BCS      |L3.518|
;;;390                    cycles_mult =    10u;
0001fc  200a              MOVS     r0,#0xa
0001fe  9005              STR      r0,[sp,#0x14]
;;;391                    cycles_div  =  1000u;
000200  f44f7b7a          MOV      r11,#0x3e8
000204  e003              B        |L3.526|
                  |L3.518|
;;;392                } else {                                                                 /*  400,000,000 and up           */
;;;393                    cycles_mult =     1u;
000206  2001              MOVS     r0,#1
000208  9005              STR      r0,[sp,#0x14]
;;;394                    cycles_div  = 10000u;
00020a  f2427b10          MOV      r11,#0x2710
                  |L3.526|
;;;395                }
;;;396                cycles_max  = cycles_total / cycles_div;
00020e  fbb5f0fb          UDIV     r0,r5,r11
000212  9004              STR      r0,[sp,#0x10]
000214  e003              B        |L3.542|
                  |L3.534|
;;;397            } else {
;;;398                cycles_mult = 0u;
000216  2000              MOVS     r0,#0
000218  9005              STR      r0,[sp,#0x14]
;;;399                cycles_max  = 1u;
00021a  2001              MOVS     r0,#1
00021c  9004              STR      r0,[sp,#0x10]
                  |L3.542|
;;;400            }
;;;401    #endif
;;;402            CPU_CRITICAL_ENTER();
00021e  bf00              NOP      
000220  bf00              NOP      
000222  f7fffffe          BL       CPU_SR_Save
000226  9000              STR      r0,[sp,#0]
000228  bf00              NOP      
00022a  f7fffffe          BL       CPU_IntDisMeasStart
00022e  bf00              NOP      
;;;403            p_tcb = OSTaskDbgListPtr;
000230  4839              LDR      r0,|L3.792|
000232  6804              LDR      r4,[r0,#0]  ; OSTaskDbgListPtr
;;;404            CPU_CRITICAL_EXIT();
000234  bf00              NOP      
000236  f7fffffe          BL       CPU_IntDisMeasStop
00023a  bf00              NOP      
00023c  9800              LDR      r0,[sp,#0]
00023e  f7fffffe          BL       CPU_SR_Restore
000242  bf00              NOP      
000244  bf00              NOP      
;;;405            while (p_tcb != (OS_TCB *)0) {
000246  e02f              B        |L3.680|
                  |L3.584|
;;;406    #if OS_CFG_TASK_PROFILE_EN > 0u                             /* Compute execution time of each task                    */
;;;407                usage = (OS_CPU_USAGE)(cycles_mult * p_tcb->CyclesTotalPrev / cycles_max);
000248  f8d4009c          LDR      r0,[r4,#0x9c]
00024c  9905              LDR      r1,[sp,#0x14]
00024e  4348              MULS     r0,r1,r0
000250  9904              LDR      r1,[sp,#0x10]
000252  fbb0f0f1          UDIV     r0,r0,r1
000256  b286              UXTH     r6,r0
;;;408                if (usage > 10000u) {
000258  f2427010          MOV      r0,#0x2710
00025c  4286              CMP      r6,r0
00025e  d900              BLS      |L3.610|
;;;409                    usage = 10000u;
000260  4606              MOV      r6,r0
                  |L3.610|
;;;410                }
;;;411                p_tcb->CPUUsage = usage;
000262  f8a46088          STRH     r6,[r4,#0x88]
;;;412                if (p_tcb->CPUUsageMax < usage) {               /* Detect peak CPU usage                                  */
000266  f8b4008a          LDRH     r0,[r4,#0x8a]
00026a  42b0              CMP      r0,r6
00026c  da01              BGE      |L3.626|
;;;413                    p_tcb->CPUUsageMax = usage;
00026e  f8a4608a          STRH     r6,[r4,#0x8a]
                  |L3.626|
;;;414                }
;;;415    #endif
;;;416    
;;;417    #if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
;;;418                OSTaskStkChk( p_tcb,                            /* Compute stack usage of active tasks only               */
000272  ab01              ADD      r3,sp,#4
000274  f10402a8          ADD      r2,r4,#0xa8
000278  1d11              ADDS     r1,r2,#4
00027a  4620              MOV      r0,r4
00027c  f7fffffe          BL       OSTaskStkChk
;;;419                             &p_tcb->StkFree,
;;;420                             &p_tcb->StkUsed,
;;;421                             &err);
;;;422    #endif
;;;423    
;;;424                CPU_CRITICAL_ENTER();
000280  bf00              NOP      
000282  bf00              NOP      
000284  f7fffffe          BL       CPU_SR_Save
000288  9000              STR      r0,[sp,#0]
00028a  bf00              NOP      
00028c  f7fffffe          BL       CPU_IntDisMeasStart
000290  bf00              NOP      
;;;425                p_tcb = p_tcb->DbgNextPtr;
000292  f8d440b8          LDR      r4,[r4,#0xb8]
;;;426                CPU_CRITICAL_EXIT();
000296  bf00              NOP      
000298  f7fffffe          BL       CPU_IntDisMeasStop
00029c  bf00              NOP      
00029e  9800              LDR      r0,[sp,#0]
0002a0  f7fffffe          BL       CPU_SR_Restore
0002a4  bf00              NOP      
0002a6  bf00              NOP      
                  |L3.680|
0002a8  2c00              CMP      r4,#0                 ;405
0002aa  d1cd              BNE      |L3.584|
;;;427            }
;;;428    #endif
;;;429    
;;;430            if (OSStatResetFlag == DEF_TRUE) {                  /* Check if need to reset statistics                      */
0002ac  481b              LDR      r0,|L3.796|
0002ae  7800              LDRB     r0,[r0,#0]  ; OSStatResetFlag
0002b0  2801              CMP      r0,#1
0002b2  d105              BNE      |L3.704|
;;;431                OSStatResetFlag  = DEF_FALSE;
0002b4  2000              MOVS     r0,#0
0002b6  4919              LDR      r1,|L3.796|
0002b8  7008              STRB     r0,[r1,#0]
;;;432                OSStatReset(&err);
0002ba  a801              ADD      r0,sp,#4
0002bc  f7fffffe          BL       OSStatReset
                  |L3.704|
;;;433            }
;;;434    
;;;435            ts_end = OS_TS_GET() - ts_start;                    /* Measure execution time of statistic task               */
0002c0  f7fffffe          BL       CPU_TS_TmrRd
0002c4  eba0080a          SUB      r8,r0,r10
;;;436            if (OSStatTaskTimeMax < ts_end) {
0002c8  4815              LDR      r0,|L3.800|
0002ca  6800              LDR      r0,[r0,#0]  ; OSStatTaskTimeMax
0002cc  4540              CMP      r0,r8
0002ce  d202              BCS      |L3.726|
;;;437                OSStatTaskTimeMax = ts_end;
0002d0  4813              LDR      r0,|L3.800|
0002d2  f8c08000          STR      r8,[r0,#0]  ; OSStatTaskTimeMax
                  |L3.726|
;;;438            }
;;;439    
;;;440            OSTimeDly(dly,
0002d6  aa01              ADD      r2,sp,#4
0002d8  2100              MOVS     r1,#0
0002da  4638              MOV      r0,r7
0002dc  f7fffffe          BL       OSTimeDly
                  |L3.736|
0002e0  e6b4              B        |L3.76|
;;;441                      OS_OPT_TIME_DLY,
;;;442                      &err);
;;;443        }
;;;444    }
;;;445    
                          ENDP

0002e2  0000              DCW      0x0000
                  |L3.740|
                          DCD      OSCfg_StatTaskRate_Hz
                  |L3.744|
                          DCD      OSStatTaskRdy
                  |L3.748|
                          DCD      OSCfg_TickRate_Hz
                  |L3.752|
                          DCD      OSIntDisTimeMax
                  |L3.756|
                          DCD      OSStatTaskCtr
                  |L3.760|
                          DCD      OSStatTaskCtrRun
                  |L3.764|
                          DCD      OSStatTaskCtrMax
                  |L3.768|
                          DCD      0x00061a80
                  |L3.772|
                          DCD      0x003d0900
                  |L3.776|
                          DCD      0x02625a00
                  |L3.780|
                          DCD      0x17d78400
                  |L3.784|
                          DCD      OSStatTaskCPUUsage
                  |L3.788|
                          DCD      OSStatTaskCPUUsageMax
                  |L3.792|
                          DCD      OSTaskDbgListPtr
                  |L3.796|
                          DCD      OSStatResetFlag
                  |L3.800|
                          DCD      OSStatTaskTimeMax

                          AREA ||i.OS_StatTaskInit||, CODE, READONLY, ALIGN=2

                  OS_StatTaskInit PROC
;;;466    
;;;467    void  OS_StatTaskInit (OS_ERR  *p_err)
000000  b510              PUSH     {r4,lr}
;;;468    {
000002  b08a              SUB      sp,sp,#0x28
000004  4604              MOV      r4,r0
;;;469    #ifdef OS_SAFETY_CRITICAL
;;;470        if (p_err == (OS_ERR *)0) {
;;;471            OS_SAFETY_CRITICAL_EXCEPTION();
;;;472            return;
;;;473        }
;;;474    #endif
;;;475    
;;;476        OSStatTaskCtr    = (OS_TICK)0;
000006  2000              MOVS     r0,#0
000008  491f              LDR      r1,|L4.136|
00000a  6008              STR      r0,[r1,#0]  ; OSStatTaskCtr
;;;477        OSStatTaskCtrRun = (OS_TICK)0;
00000c  491f              LDR      r1,|L4.140|
00000e  6008              STR      r0,[r1,#0]  ; OSStatTaskCtrRun
;;;478        OSStatTaskCtrMax = (OS_TICK)0;
000010  491f              LDR      r1,|L4.144|
000012  6008              STR      r0,[r1,#0]  ; OSStatTaskCtrMax
;;;479        OSStatTaskRdy    = OS_STATE_NOT_RDY;                    /* Statistic task is not ready                            */
000014  491f              LDR      r1,|L4.148|
000016  7008              STRB     r0,[r1,#0]
;;;480        OSStatResetFlag  = DEF_FALSE;
000018  491f              LDR      r1,|L4.152|
00001a  7008              STRB     r0,[r1,#0]
;;;481    
;;;482                                                                /* ---------------- CREATE THE STAT TASK ---------------- */
;;;483        if (OSCfg_StatTaskStkBasePtr == (CPU_STK *)0) {
00001c  481f              LDR      r0,|L4.156|
00001e  6800              LDR      r0,[r0,#0]  ; OSCfg_StatTaskStkBasePtr
000020  b920              CBNZ     r0,|L4.44|
;;;484           *p_err = OS_ERR_STAT_STK_INVALID;
000022  f646602b          MOV      r0,#0x6e2b
000026  8020              STRH     r0,[r4,#0]
                  |L4.40|
;;;485            return;
;;;486        }
;;;487    
;;;488        if (OSCfg_StatTaskStkSize < OSCfg_StkSizeMin) {
;;;489           *p_err = OS_ERR_STAT_STK_SIZE_INVALID;
;;;490            return;
;;;491        }
;;;492    
;;;493        if (OSCfg_StatTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
;;;494           *p_err = OS_ERR_STAT_PRIO_INVALID;
;;;495            return;
;;;496        }
;;;497    
;;;498        OSTaskCreate((OS_TCB     *)&OSStatTaskTCB,
;;;499                     (CPU_CHAR   *)((void *)"uC/OS-III Stat Task"),
;;;500                     (OS_TASK_PTR )OS_StatTask,
;;;501                     (void       *)0,
;;;502                     (OS_PRIO     )OSCfg_StatTaskPrio,
;;;503                     (CPU_STK    *)OSCfg_StatTaskStkBasePtr,
;;;504                     (CPU_STK_SIZE)OSCfg_StatTaskStkLimit,
;;;505                     (CPU_STK_SIZE)OSCfg_StatTaskStkSize,
;;;506                     (OS_MSG_QTY  )0,
;;;507                     (OS_TICK     )0,
;;;508                     (void       *)0,
;;;509                     (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
;;;510                     (OS_ERR     *)p_err);
;;;511    }
000028  b00a              ADD      sp,sp,#0x28
00002a  bd10              POP      {r4,pc}
                  |L4.44|
00002c  481c              LDR      r0,|L4.160|
00002e  6800              LDR      r0,[r0,#0]            ;488  ; OSCfg_StatTaskStkSize
000030  491c              LDR      r1,|L4.164|
000032  6809              LDR      r1,[r1,#0]            ;488  ; OSCfg_StkSizeMin
000034  4288              CMP      r0,r1                 ;488
000036  d203              BCS      |L4.64|
000038  f646602c          MOV      r0,#0x6e2c            ;489
00003c  8020              STRH     r0,[r4,#0]            ;489
00003e  e7f3              B        |L4.40|
                  |L4.64|
000040  4819              LDR      r0,|L4.168|
000042  7800              LDRB     r0,[r0,#0]            ;493  ; OSCfg_StatTaskPrio
000044  283f              CMP      r0,#0x3f              ;493
000046  d303              BCC      |L4.80|
000048  f646602a          MOV      r0,#0x6e2a            ;494
00004c  8020              STRH     r0,[r4,#0]            ;494
00004e  e7eb              B        |L4.40|
                  |L4.80|
000050  2003              MOVS     r0,#3                 ;498
000052  2100              MOVS     r1,#0                 ;498
000054  9105              STR      r1,[sp,#0x14]         ;498
000056  e9cd0407          STRD     r0,r4,[sp,#0x1c]      ;498
00005a  9106              STR      r1,[sp,#0x18]         ;498
00005c  4608              MOV      r0,r1                 ;498
00005e  4910              LDR      r1,|L4.160|
000060  6809              LDR      r1,[r1,#0]            ;498  ; OSCfg_StatTaskStkSize
000062  4a12              LDR      r2,|L4.172|
000064  6812              LDR      r2,[r2,#0]            ;498  ; OSCfg_StatTaskStkLimit
000066  4b0d              LDR      r3,|L4.156|
000068  681b              LDR      r3,[r3,#0]            ;498  ; OSCfg_StatTaskStkBasePtr
00006a  e9cd3201          STRD     r3,r2,[sp,#4]         ;498
00006e  e9cd1003          STRD     r1,r0,[sp,#0xc]       ;498
000072  480d              LDR      r0,|L4.168|
000074  7800              LDRB     r0,[r0,#0]            ;498  ; OSCfg_StatTaskPrio
000076  2300              MOVS     r3,#0                 ;498
000078  4a0d              LDR      r2,|L4.176|
00007a  a10e              ADR      r1,|L4.180|
00007c  9000              STR      r0,[sp,#0]            ;498
00007e  4812              LDR      r0,|L4.200|
000080  f7fffffe          BL       OSTaskCreate
000084  bf00              NOP      
000086  e7cf              B        |L4.40|
;;;512    
                          ENDP

                  |L4.136|
                          DCD      OSStatTaskCtr
                  |L4.140|
                          DCD      OSStatTaskCtrRun
                  |L4.144|
                          DCD      OSStatTaskCtrMax
                  |L4.148|
                          DCD      OSStatTaskRdy
                  |L4.152|
                          DCD      OSStatResetFlag
                  |L4.156|
                          DCD      OSCfg_StatTaskStkBasePtr
                  |L4.160|
                          DCD      OSCfg_StatTaskStkSize
                  |L4.164|
                          DCD      OSCfg_StkSizeMin
                  |L4.168|
                          DCD      OSCfg_StatTaskPrio
                  |L4.172|
                          DCD      OSCfg_StatTaskStkLimit
                  |L4.176|
                          DCD      OS_StatTask
                  |L4.180|
0000b4  75432f4f          DCB      "uC/OS-III Stat Task",0
0000b8  532d4949
0000bc  49205374
0000c0  61742054
0000c4  61736b00
                  |L4.200|
                          DCD      OSStatTaskTCB
