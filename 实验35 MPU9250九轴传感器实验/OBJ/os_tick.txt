; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\os_tick.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\os_tick.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\OBJ -I..\USER -I..\HALLIB\STM32F7xx_HAL_Driver\Inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\SDRAM -I..\HARDWARE\IIC -I..\HARDWARE\24CXX -I..\HARDWARE\MPU9250 -I..\HARDWARE\DHT11 -I..\HARDWARE\MPU -I..\USMART -I..\DMP\driver\eMPL -I..\DMP\driver\include -I..\DMP\driver\stm32L -I..\DMP\eMPL-hal -I..\DMP\mllite -I..\DMP\mpl -I..\UCOSIII -I..\UCOSIII\UCOS-BSP -I..\UCOSIII\UCOS-CONFIG -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\uC-CPU\ARM-Cortex-M4\RealView -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-CPU -I..\HARDWARE\MY_FUNCTION -I..\USER -I..\HARDWARE\CRC -I..\HARDWARE\DMA -I..\HARDWARE\HEART_BEAT -I..\HARDWARE\RECEIVE_ANALYZE -I..\HARDWARE\FEED_BACK -I..\HARDWARE\DATA -I"D:\1111111\32F4\Slam car\实验35 MPU9250九轴传感器实验\USER\RTE" -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0 -IF:\Keil_v5\ARM\CMSIS\Include -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__UVISION_VERSION=514 -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=..\obj\os_tick.crf ..\UCOSIII\uCOS-III\Source\os_tick.c]
                          THUMB

                          AREA ||i.OS_TickListInsert||, CODE, READONLY, ALIGN=1

                  OS_TickListInsert PROC
;;;189    
;;;190    void  OS_TickListInsert (OS_TICK_LIST  *p_list,
000000  b570              PUSH     {r4-r6,lr}
;;;191                             OS_TCB        *p_tcb,
;;;192                             OS_TICK        time)
;;;193    {
000002  4615              MOV      r5,r2
;;;194        OS_TCB  *p_tcb1;
;;;195        OS_TCB  *p_tcb2;
;;;196        OS_TICK  remain;
;;;197    
;;;198    
;;;199        if (p_list->TCB_Ptr == (OS_TCB *)0) {                               /* Is the list empty?                                */
000004  6806              LDR      r6,[r0,#0]
000006  b946              CBNZ     r6,|L1.26|
;;;200            p_tcb->TickRemain  = time;                                      /* Yes, Store time in TCB                            */
000008  650d              STR      r5,[r1,#0x50]
;;;201            p_tcb->TickNextPtr = (OS_TCB *)0;
00000a  2600              MOVS     r6,#0
00000c  614e              STR      r6,[r1,#0x14]
;;;202            p_tcb->TickPrevPtr = (OS_TCB *)0;
00000e  618e              STR      r6,[r1,#0x18]
;;;203            p_tcb->TickListPtr = (OS_TICK_LIST *)p_list;                    /*      Link to this list                            */
000010  61c8              STR      r0,[r1,#0x1c]
;;;204            p_list->TCB_Ptr    = p_tcb;                                     /*      Point to TCB of task to place in the list    */
000012  6001              STR      r1,[r0,#0]
;;;205    #if OS_CFG_DBG_EN > 0u
;;;206            p_list->NbrEntries = 1u;                                        /*      List contains 1 entry                        */
000014  2601              MOVS     r6,#1
000016  8086              STRH     r6,[r0,#4]
000018  e033              B        |L1.130|
                  |L1.26|
;;;207    #endif
;;;208        } else {
;;;209            p_tcb1 = p_list->TCB_Ptr;
00001a  6804              LDR      r4,[r0,#0]
;;;210            p_tcb2 = p_list->TCB_Ptr;                                       /* No,  Insert somewhere in the list in delta order  */
00001c  6802              LDR      r2,[r0,#0]
;;;211            remain = time;
00001e  462b              MOV      r3,r5
;;;212            while (p_tcb2 != (OS_TCB *)0) {
000020  e024              B        |L1.108|
                  |L1.34|
;;;213                if (remain <= p_tcb2->TickRemain) {
000022  6d16              LDR      r6,[r2,#0x50]
000024  429e              CMP      r6,r3
000026  d31d              BCC      |L1.100|
;;;214                    if (p_tcb2->TickPrevPtr == (OS_TCB *)0) {               /*      Insert before the first entry in the list?   */
000028  6996              LDR      r6,[r2,#0x18]
00002a  b96e              CBNZ     r6,|L1.72|
;;;215                        p_tcb->TickRemain   = remain;                       /*      Yes, Store remaining time                    */                                          
00002c  650b              STR      r3,[r1,#0x50]
;;;216                        p_tcb->TickPrevPtr  = (OS_TCB *)0;
00002e  2600              MOVS     r6,#0
000030  618e              STR      r6,[r1,#0x18]
;;;217                        p_tcb->TickNextPtr  = p_tcb2;    
000032  614a              STR      r2,[r1,#0x14]
;;;218                        p_tcb->TickListPtr  = (OS_TICK_LIST *)p_list;       /*           Link TCB to this list                   */
000034  61c8              STR      r0,[r1,#0x1c]
;;;219                        p_tcb2->TickRemain -= remain;                       /*           Reduce time of next entry in the list   */
000036  6d16              LDR      r6,[r2,#0x50]
000038  1af6              SUBS     r6,r6,r3
00003a  6516              STR      r6,[r2,#0x50]
;;;220                        p_tcb2->TickPrevPtr = p_tcb;
00003c  6191              STR      r1,[r2,#0x18]
;;;221                        p_list->TCB_Ptr     = p_tcb;                        /*           Add TCB to the list                     */
00003e  6001              STR      r1,[r0,#0]
;;;222    #if OS_CFG_DBG_EN > 0u
;;;223                        p_list->NbrEntries++;                               /*           List contains an extra entry            */
000040  8886              LDRH     r6,[r0,#4]
000042  1c76              ADDS     r6,r6,#1
000044  8086              STRH     r6,[r0,#4]
000046  e00c              B        |L1.98|
                  |L1.72|
;;;224    #endif
;;;225                    } else {                                                /*      No,  Insert somewhere further in the list    */
;;;226                        p_tcb1              = p_tcb2->TickPrevPtr;
000048  6994              LDR      r4,[r2,#0x18]
;;;227                        p_tcb->TickRemain   = remain;                       /*           Store remaining time                    */
00004a  650b              STR      r3,[r1,#0x50]
;;;228                        p_tcb->TickPrevPtr  = p_tcb1;
00004c  618c              STR      r4,[r1,#0x18]
;;;229                        p_tcb->TickNextPtr  = p_tcb2;    
00004e  614a              STR      r2,[r1,#0x14]
;;;230                        p_tcb->TickListPtr  = (OS_TICK_LIST *)p_list;       /*           TCB points to this list                 */
000050  61c8              STR      r0,[r1,#0x1c]
;;;231                        p_tcb2->TickRemain -= remain;                       /*           Reduce time of next entry in the list   */
000052  6d16              LDR      r6,[r2,#0x50]
000054  1af6              SUBS     r6,r6,r3
000056  6516              STR      r6,[r2,#0x50]
;;;232                        p_tcb2->TickPrevPtr = p_tcb;
000058  6191              STR      r1,[r2,#0x18]
;;;233                        p_tcb1->TickNextPtr = p_tcb;
00005a  6161              STR      r1,[r4,#0x14]
;;;234    #if OS_CFG_DBG_EN > 0u
;;;235                        p_list->NbrEntries++;                               /*           List contains an extra entry            */
00005c  8886              LDRH     r6,[r0,#4]
00005e  1c76              ADDS     r6,r6,#1
000060  8086              STRH     r6,[r0,#4]
                  |L1.98|
;;;236    #endif
;;;237                    }
;;;238                    return;
;;;239                } else {
;;;240                    remain -= p_tcb2->TickRemain;                           /*           Point to the next TCB in the list       */
;;;241                    p_tcb1  = p_tcb2;
;;;242                    p_tcb2  = p_tcb2->TickNextPtr;
;;;243                }                 
;;;244            }
;;;245            p_tcb->TickRemain   = remain;                       
;;;246            p_tcb->TickPrevPtr  = p_tcb1;
;;;247            p_tcb->TickNextPtr  = (OS_TCB *)0;    
;;;248            p_tcb->TickListPtr  = (OS_TICK_LIST *)p_list;                   /*           Link the list to the TCB                */
;;;249            p_tcb1->TickNextPtr = p_tcb;
;;;250    #if OS_CFG_DBG_EN > 0u
;;;251            p_list->NbrEntries++;                                           /*           List contains an extra entry            */
;;;252    #endif
;;;253        }
;;;254    }
000062  bd70              POP      {r4-r6,pc}
                  |L1.100|
000064  6d16              LDR      r6,[r2,#0x50]         ;240
000066  1b9b              SUBS     r3,r3,r6              ;240
000068  4614              MOV      r4,r2                 ;241
00006a  6952              LDR      r2,[r2,#0x14]         ;242
                  |L1.108|
00006c  2a00              CMP      r2,#0                 ;212
00006e  d1d8              BNE      |L1.34|
000070  650b              STR      r3,[r1,#0x50]         ;245
000072  618c              STR      r4,[r1,#0x18]         ;246
000074  2600              MOVS     r6,#0                 ;247
000076  614e              STR      r6,[r1,#0x14]         ;247
000078  61c8              STR      r0,[r1,#0x1c]         ;248
00007a  6161              STR      r1,[r4,#0x14]         ;249
00007c  8886              LDRH     r6,[r0,#4]            ;251
00007e  1c76              ADDS     r6,r6,#1              ;251
000080  8086              STRH     r6,[r0,#4]            ;251
                  |L1.130|
000082  bf00              NOP      
000084  e7ed              B        |L1.98|
;;;255    
                          ENDP


                          AREA ||i.OS_TickListInsertDly||, CODE, READONLY, ALIGN=2

                  OS_TickListInsertDly PROC
;;;292    
;;;293    void  OS_TickListInsertDly (OS_TCB   *p_tcb,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;294                                OS_TICK   time,
;;;295                                OS_OPT    opt,
;;;296                                OS_ERR   *p_err)
;;;297    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
00000a  461f              MOV      r7,r3
;;;298        OS_TICK   remain;
;;;299    
;;;300    
;;;301    
;;;302        if (opt == OS_OPT_TIME_MATCH) {                                     /* MATCH to absolute OSTickCtr value mode            */
00000c  f1b80f04          CMP      r8,#4
000010  d10e              BNE      |L2.48|
;;;303            remain = time - OSTickCtr;
000012  4828              LDR      r0,|L2.180|
000014  6800              LDR      r0,[r0,#0]  ; OSTickCtr
000016  1a2e              SUBS     r6,r5,r0
;;;304            if ((remain > OS_TICK_TH_RDY) ||                                /* If delay already occurred, ...                    */
000018  f5163f80          CMN      r6,#0x10000
00001c  d801              BHI      |L2.34|
;;;305                (remain == (OS_TICK)0u)) {
00001e  2e00              CMP      r6,#0
000020  d13c              BNE      |L2.156|
                  |L2.34|
;;;306                p_tcb->TickRemain = (OS_TICK)0u;
000022  2000              MOVS     r0,#0
000024  6520              STR      r0,[r4,#0x50]
;;;307               *p_err             =  OS_ERR_TIME_ZERO_DLY;                  /* ... do NOT delay.                                 */
000026  f247207e          MOV      r0,#0x727e
00002a  8038              STRH     r0,[r7,#0]
                  |L2.44|
;;;308                return;
;;;309            }
;;;310    
;;;311        } else if (opt == OS_OPT_TIME_PERIODIC) {                           /* PERIODIC mode.                                    */
;;;312            if ((OSTickCtr - p_tcb->TickCtrPrev) > time) {
;;;313                remain             = time;                                  /* ... first time we load .TickCtrPrev               */
;;;314                p_tcb->TickCtrPrev = OSTickCtr + time;
;;;315            } else {
;;;316                remain = time - (OSTickCtr - p_tcb->TickCtrPrev);
;;;317                if ((remain > OS_TICK_TH_RDY) ||                            /* If delay time has already passed, ...             */
;;;318                    (remain == (OS_TICK)0u)) {
;;;319                    p_tcb->TickCtrPrev += time + time * ((OSTickCtr - p_tcb->TickCtrPrev) / time); /* Try to recover the period  */
;;;320                    p_tcb->TickRemain   = (OS_TICK)0u;
;;;321                   *p_err               =  OS_ERR_TIME_ZERO_DLY;            /* ... do NOT delay.                                 */
;;;322                    return;
;;;323                }
;;;324                p_tcb->TickCtrPrev += time;
;;;325            }
;;;326    
;;;327        } else if (time > (OS_TICK)0u) {                                    /* RELATIVE time delay mode                          */
;;;328            remain = time;
;;;329    
;;;330        } else {                                                            /* Zero time delay; ...                              */
;;;331            p_tcb->TickRemain = (OS_TICK)0u;
;;;332           *p_err             =  OS_ERR_TIME_ZERO_DLY;                      /* ... do NOT delay.                                 */
;;;333            return;
;;;334        }
;;;335    
;;;336        p_tcb->TaskState = OS_TASK_STATE_DLY;
;;;337        OS_TickListInsert(&OSTickListDly, p_tcb, remain);
;;;338    
;;;339       *p_err = OS_ERR_NONE;
;;;340    }
00002c  e8bd81f0          POP      {r4-r8,pc}
                  |L2.48|
000030  f1b80f08          CMP      r8,#8                 ;311
000034  d129              BNE      |L2.138|
000036  491f              LDR      r1,|L2.180|
000038  6d60              LDR      r0,[r4,#0x54]         ;312
00003a  6809              LDR      r1,[r1,#0]            ;312  ; OSTickCtr
00003c  1a08              SUBS     r0,r1,r0              ;312
00003e  42a8              CMP      r0,r5                 ;312
000040  d905              BLS      |L2.78|
000042  462e              MOV      r6,r5                 ;313
000044  481b              LDR      r0,|L2.180|
000046  6800              LDR      r0,[r0,#0]            ;314  ; OSTickCtr
000048  4428              ADD      r0,r0,r5              ;314
00004a  6560              STR      r0,[r4,#0x54]         ;314
00004c  e026              B        |L2.156|
                  |L2.78|
00004e  4919              LDR      r1,|L2.180|
000050  6d60              LDR      r0,[r4,#0x54]         ;316
000052  6809              LDR      r1,[r1,#0]            ;316  ; OSTickCtr
000054  1a08              SUBS     r0,r1,r0              ;316
000056  1a2e              SUBS     r6,r5,r0              ;316
000058  f5163f80          CMN      r6,#0x10000           ;317
00005c  d800              BHI      |L2.96|
00005e  b986              CBNZ     r6,|L2.130|
                  |L2.96|
000060  4914              LDR      r1,|L2.180|
000062  6d60              LDR      r0,[r4,#0x54]         ;319
000064  6809              LDR      r1,[r1,#0]            ;319  ; OSTickCtr
000066  1a08              SUBS     r0,r1,r0              ;319
000068  fbb0f0f5          UDIV     r0,r0,r5              ;319
00006c  fb055000          MLA      r0,r5,r0,r5           ;319
000070  6d61              LDR      r1,[r4,#0x54]         ;319
000072  4408              ADD      r0,r0,r1              ;319
000074  6560              STR      r0,[r4,#0x54]         ;319
000076  2000              MOVS     r0,#0                 ;320
000078  6520              STR      r0,[r4,#0x50]         ;320
00007a  f247207e          MOV      r0,#0x727e            ;321
00007e  8038              STRH     r0,[r7,#0]            ;321
000080  e7d4              B        |L2.44|
                  |L2.130|
000082  6d60              LDR      r0,[r4,#0x54]         ;324
000084  4428              ADD      r0,r0,r5              ;324
000086  6560              STR      r0,[r4,#0x54]         ;324
000088  e008              B        |L2.156|
                  |L2.138|
00008a  b10d              CBZ      r5,|L2.144|
00008c  462e              MOV      r6,r5                 ;328
00008e  e005              B        |L2.156|
                  |L2.144|
000090  2000              MOVS     r0,#0                 ;331
000092  6520              STR      r0,[r4,#0x50]         ;331
000094  f247207e          MOV      r0,#0x727e            ;332
000098  8038              STRH     r0,[r7,#0]            ;332
00009a  e7c7              B        |L2.44|
                  |L2.156|
00009c  2001              MOVS     r0,#1                 ;336
00009e  f8840036          STRB     r0,[r4,#0x36]         ;336
0000a2  4632              MOV      r2,r6                 ;337
0000a4  4621              MOV      r1,r4                 ;337
0000a6  4804              LDR      r0,|L2.184|
0000a8  f7fffffe          BL       OS_TickListInsert
0000ac  2000              MOVS     r0,#0                 ;339
0000ae  8038              STRH     r0,[r7,#0]            ;339
0000b0  bf00              NOP      
0000b2  e7bb              B        |L2.44|
;;;341    
                          ENDP

                  |L2.180|
                          DCD      OSTickCtr
                  |L2.184|
                          DCD      OSTickListDly

                          AREA ||i.OS_TickListRemove||, CODE, READONLY, ALIGN=1

                  OS_TickListRemove PROC
;;;358    
;;;359    void  OS_TickListRemove (OS_TCB  *p_tcb)
000000  b530              PUSH     {r4,r5,lr}
;;;360    {
;;;361        OS_TICK_LIST  *p_list;
;;;362        OS_TCB        *p_tcb1;
;;;363        OS_TCB        *p_tcb2;
;;;364    
;;;365    
;;;366        p_list = (OS_TICK_LIST *)p_tcb->TickListPtr;
000002  69c2              LDR      r2,[r0,#0x1c]
;;;367        p_tcb1  = p_tcb->TickPrevPtr;
000004  6983              LDR      r3,[r0,#0x18]
;;;368        p_tcb2  = p_tcb->TickNextPtr;
000006  6941              LDR      r1,[r0,#0x14]
;;;369        if (p_tcb1 == (OS_TCB *)0) {
000008  b9ab              CBNZ     r3,|L3.54|
;;;370            if (p_tcb2 == (OS_TCB *)0) {                                    /* Remove ONLY entry in the list?                    */
00000a  b929              CBNZ     r1,|L3.24|
;;;371                p_list->TCB_Ptr    = (OS_TCB        *)0;
00000c  2400              MOVS     r4,#0
00000e  6014              STR      r4,[r2,#0]
;;;372    #if OS_CFG_DBG_EN > 0u
;;;373                p_list->NbrEntries = (OS_OBJ_QTY    )0u;
000010  8094              STRH     r4,[r2,#4]
;;;374    #endif
;;;375                p_tcb->TickRemain   = (OS_TICK       )0u;
000012  6504              STR      r4,[r0,#0x50]
;;;376                p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
000014  61c4              STR      r4,[r0,#0x1c]
000016  e01e              B        |L3.86|
                  |L3.24|
;;;377            } else {
;;;378                p_tcb2->TickPrevPtr = (OS_TCB       *)0;
000018  2400              MOVS     r4,#0
00001a  618c              STR      r4,[r1,#0x18]
;;;379                p_tcb2->TickRemain += p_tcb->TickRemain;                    /* Add back the ticks to the delta                   */
00001c  6d0c              LDR      r4,[r1,#0x50]
00001e  6d05              LDR      r5,[r0,#0x50]
000020  442c              ADD      r4,r4,r5
000022  650c              STR      r4,[r1,#0x50]
;;;380                p_list->TCB_Ptr    = p_tcb2;
000024  6011              STR      r1,[r2,#0]
;;;381    #if OS_CFG_DBG_EN > 0u
;;;382                p_list->NbrEntries--;
000026  8894              LDRH     r4,[r2,#4]
000028  1e64              SUBS     r4,r4,#1
00002a  8094              STRH     r4,[r2,#4]
;;;383    #endif
;;;384                p_tcb->TickNextPtr  = (OS_TCB       *)0;
00002c  2400              MOVS     r4,#0
00002e  6144              STR      r4,[r0,#0x14]
;;;385                p_tcb->TickRemain   = (OS_TICK       )0u;
000030  6504              STR      r4,[r0,#0x50]
;;;386                p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
000032  61c4              STR      r4,[r0,#0x1c]
000034  e00f              B        |L3.86|
                  |L3.54|
;;;387            }
;;;388        } else {
;;;389            p_tcb1->TickNextPtr = p_tcb2;    
000036  6159              STR      r1,[r3,#0x14]
;;;390            if (p_tcb2 != (OS_TCB *)0) {
000038  b121              CBZ      r1,|L3.68|
;;;391                p_tcb2->TickPrevPtr = p_tcb1;
00003a  618b              STR      r3,[r1,#0x18]
;;;392                p_tcb2->TickRemain += p_tcb->TickRemain;                    /* Add back the ticks to the delta list              */
00003c  6d0c              LDR      r4,[r1,#0x50]
00003e  6d05              LDR      r5,[r0,#0x50]
000040  442c              ADD      r4,r4,r5
000042  650c              STR      r4,[r1,#0x50]
                  |L3.68|
;;;393            }
;;;394            p_tcb->TickPrevPtr  = (OS_TCB       *)0;
000044  2400              MOVS     r4,#0
000046  6184              STR      r4,[r0,#0x18]
;;;395    #if OS_CFG_DBG_EN > 0u
;;;396            p_list->NbrEntries--;
000048  8894              LDRH     r4,[r2,#4]
00004a  1e64              SUBS     r4,r4,#1
00004c  8094              STRH     r4,[r2,#4]
;;;397    #endif
;;;398            p_tcb->TickNextPtr  = (OS_TCB       *)0;
00004e  2400              MOVS     r4,#0
000050  6144              STR      r4,[r0,#0x14]
;;;399            p_tcb->TickRemain   = (OS_TICK       )0u;
000052  6504              STR      r4,[r0,#0x50]
;;;400            p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
000054  61c4              STR      r4,[r0,#0x1c]
                  |L3.86|
;;;401        }
;;;402    }
000056  bd30              POP      {r4,r5,pc}
;;;403    
                          ENDP


                          AREA ||i.OS_TickListUpdateDly||, CODE, READONLY, ALIGN=2

                  OS_TickListUpdateDly PROC
;;;418    
;;;419    static  CPU_TS  OS_TickListUpdateDly (void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;420    {
;;;421        OS_TCB       *p_tcb;
;;;422        OS_TICK_LIST *p_list;
;;;423        CPU_TS        ts_start;
;;;424        CPU_TS        ts_delta_dly;
;;;425    #if OS_CFG_DBG_EN > 0u
;;;426        OS_OBJ_QTY    nbr_updated;
;;;427    #endif
;;;428        CPU_SR_ALLOC();
000004  f04f0900          MOV      r9,#0
;;;429    
;;;430                                                                  
;;;431                                                                            
;;;432        OS_CRITICAL_ENTER();
000008  bf00              NOP      
00000a  bf00              NOP      
00000c  f7fffffe          BL       CPU_SR_Save
000010  4681              MOV      r9,r0
000012  bf00              NOP      
000014  f7fffffe          BL       CPU_IntDisMeasStart
000018  bf00              NOP      
;;;433        ts_start    = OS_TS_GET();
00001a  f7fffffe          BL       CPU_TS_TmrRd
00001e  4606              MOV      r6,r0
;;;434    #if OS_CFG_DBG_EN > 0u
;;;435        nbr_updated = (OS_OBJ_QTY)0u;
000020  2700              MOVS     r7,#0
;;;436    #endif
;;;437        p_list      = &OSTickListDly;
000022  4d1e              LDR      r5,|L4.156|
;;;438        p_tcb       = p_list->TCB_Ptr;                                      
000024  682c              LDR      r4,[r5,#0]
;;;439        if (p_tcb != (OS_TCB *)0) {
000026  b33c              CBZ      r4,|L4.120|
;;;440            p_tcb->TickRemain--;
000028  6d20              LDR      r0,[r4,#0x50]
00002a  1e40              SUBS     r0,r0,#1
00002c  6520              STR      r0,[r4,#0x50]
;;;441            while (p_tcb->TickRemain == 0u) {
00002e  e01f              B        |L4.112|
                  |L4.48|
;;;442    #if OS_CFG_DBG_EN > 0u
;;;443                nbr_updated++;											    /* Keep track of the number of TCBs updated          */
000030  1c78              ADDS     r0,r7,#1
000032  b287              UXTH     r7,r0
;;;444    #endif
;;;445                if (p_tcb->TaskState == OS_TASK_STATE_DLY) {
000034  f8940036          LDRB     r0,[r4,#0x36]
000038  2801              CMP      r0,#1
00003a  d106              BNE      |L4.74|
;;;446                    p_tcb->TaskState = OS_TASK_STATE_RDY;
00003c  2000              MOVS     r0,#0
00003e  f8840036          STRB     r0,[r4,#0x36]
;;;447                    OS_RdyListInsert(p_tcb);                                /* Insert the task in the ready list                 */
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       OS_RdyListInsert
000048  e006              B        |L4.88|
                  |L4.74|
;;;448                } else if (p_tcb->TaskState == OS_TASK_STATE_DLY_SUSPENDED) {
00004a  f8940036          LDRB     r0,[r4,#0x36]
00004e  2805              CMP      r0,#5
000050  d102              BNE      |L4.88|
;;;449                    p_tcb->TaskState = OS_TASK_STATE_SUSPENDED;
000052  2004              MOVS     r0,#4
000054  f8840036          STRB     r0,[r4,#0x36]
                  |L4.88|
;;;450                }
;;;451    
;;;452                p_list->TCB_Ptr = p_tcb->TickNextPtr;
000058  6960              LDR      r0,[r4,#0x14]
00005a  6028              STR      r0,[r5,#0]
;;;453                p_tcb           = p_list->TCB_Ptr;                          /* Get 'p_tcb' again for loop                        */
00005c  682c              LDR      r4,[r5,#0]
;;;454                if (p_tcb == (OS_TCB *)0) {
00005e  b914              CBNZ     r4,|L4.102|
;;;455    #if OS_CFG_DBG_EN > 0u
;;;456                    p_list->NbrEntries = (OS_OBJ_QTY)0u;
000060  2000              MOVS     r0,#0
000062  80a8              STRH     r0,[r5,#4]
;;;457    #endif
;;;458                    break;
000064  e007              B        |L4.118|
                  |L4.102|
;;;459                } else {
;;;460    #if OS_CFG_DBG_EN > 0u
;;;461                    p_list->NbrEntries--;
000066  88a8              LDRH     r0,[r5,#4]
000068  1e40              SUBS     r0,r0,#1
00006a  80a8              STRH     r0,[r5,#4]
;;;462    #endif
;;;463                    p_tcb->TickPrevPtr = (OS_TCB *)0;
00006c  2000              MOVS     r0,#0
00006e  61a0              STR      r0,[r4,#0x18]
                  |L4.112|
000070  6d20              LDR      r0,[r4,#0x50]         ;441
000072  2800              CMP      r0,#0                 ;441
000074  d0dc              BEQ      |L4.48|
                  |L4.118|
000076  bf00              NOP                            ;458
                  |L4.120|
;;;464                }
;;;465            }
;;;466        }
;;;467    #if OS_CFG_DBG_EN > 0u
;;;468        p_list->NbrUpdated = nbr_updated;
000078  80ef              STRH     r7,[r5,#6]
;;;469    #endif
;;;470        ts_delta_dly       = OS_TS_GET() - ts_start;                        /* Measure execution time of the update              */
00007a  f7fffffe          BL       CPU_TS_TmrRd
00007e  eba00806          SUB      r8,r0,r6
;;;471        OS_CRITICAL_EXIT();
000082  bf00              NOP      
000084  f7fffffe          BL       CPU_IntDisMeasStop
000088  bf00              NOP      
00008a  4648              MOV      r0,r9
00008c  f7fffffe          BL       CPU_SR_Restore
000090  bf00              NOP      
000092  bf00              NOP      
;;;472    
;;;473        return (ts_delta_dly);
000094  4640              MOV      r0,r8
;;;474    }
000096  e8bd87f0          POP      {r4-r10,pc}
;;;475    
                          ENDP

00009a  0000              DCW      0x0000
                  |L4.156|
                          DCD      OSTickListDly

                          AREA ||i.OS_TickListUpdateTimeout||, CODE, READONLY, ALIGN=2

                  OS_TickListUpdateTimeout PROC
;;;490    
;;;491    static  CPU_TS  OS_TickListUpdateTimeout (void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;492    {
;;;493        OS_TCB       *p_tcb;
;;;494        OS_TICK_LIST *p_list;
;;;495        CPU_TS        ts_start;
;;;496        CPU_TS        ts_delta_timeout;
;;;497    #if OS_CFG_DBG_EN > 0u
;;;498        OS_OBJ_QTY    nbr_updated;
;;;499    #endif
;;;500    #if OS_CFG_MUTEX_EN > 0u
;;;501        OS_TCB       *p_tcb_owner;
;;;502        OS_PRIO       prio_new;
;;;503    #endif
;;;504        CPU_SR_ALLOC();
000004  f04f0b00          MOV      r11,#0
;;;505    
;;;506                                                                  
;;;507                                                                            
;;;508        OS_CRITICAL_ENTER();                                                /* ======= UPDATE TASKS WAITING WITH TIMEOUT ======= */
000008  bf00              NOP      
00000a  bf00              NOP      
00000c  f7fffffe          BL       CPU_SR_Save
000010  4683              MOV      r11,r0
000012  bf00              NOP      
000014  f7fffffe          BL       CPU_IntDisMeasStart
000018  bf00              NOP      
;;;509        ts_start    = OS_TS_GET();
00001a  f7fffffe          BL       CPU_TS_TmrRd
00001e  4607              MOV      r7,r0
;;;510    #if OS_CFG_DBG_EN > 0u
;;;511        nbr_updated = (OS_OBJ_QTY)0u;
000020  f04f0800          MOV      r8,#0
;;;512    #endif
;;;513        p_list      = &OSTickListTimeout;
000024  4d3c              LDR      r5,|L5.280|
;;;514        p_tcb       = p_list->TCB_Ptr;                                  
000026  682c              LDR      r4,[r5,#0]
;;;515        if (p_tcb != (OS_TCB *)0) {
000028  2c00              CMP      r4,#0
00002a  d063              BEQ      |L5.244|
;;;516            p_tcb->TickRemain--;
00002c  6d20              LDR      r0,[r4,#0x50]
00002e  1e40              SUBS     r0,r0,#1
000030  6520              STR      r0,[r4,#0x50]
;;;517            while (p_tcb->TickRemain == 0u) {
000032  e05b              B        |L5.236|
                  |L5.52|
;;;518    #if OS_CFG_DBG_EN > 0u
;;;519                nbr_updated++;
000034  f1080001          ADD      r0,r8,#1
000038  fa1ff880          UXTH     r8,r0
;;;520    #endif
;;;521    
;;;522    #if OS_CFG_MUTEX_EN > 0u
;;;523                p_tcb_owner = (OS_TCB *)0;
00003c  2600              MOVS     r6,#0
;;;524                if (p_tcb->PendOn == OS_TASK_PEND_ON_MUTEX) {
00003e  f8940034          LDRB     r0,[r4,#0x34]
000042  2804              CMP      r0,#4
000044  d102              BNE      |L5.76|
;;;525                    p_tcb_owner = ((OS_MUTEX *)p_tcb->PendDataTblPtr->PendObjPtr)->OwnerTCBPtr;
000046  6b20              LDR      r0,[r4,#0x30]
000048  68c0              LDR      r0,[r0,#0xc]
00004a  6a46              LDR      r6,[r0,#0x24]
                  |L5.76|
;;;526                }
;;;527    #endif
;;;528    
;;;529    #if (OS_MSG_EN > 0u)
;;;530                p_tcb->MsgPtr  = (void      *)0;
00004c  2000              MOVS     r0,#0
00004e  65a0              STR      r0,[r4,#0x58]
;;;531                p_tcb->MsgSize = (OS_MSG_SIZE)0u;
000050  f8a4005c          STRH     r0,[r4,#0x5c]
;;;532    #endif
;;;533                p_tcb->TS      = OS_TS_GET();
000054  f7fffffe          BL       CPU_TS_TmrRd
000058  64a0              STR      r0,[r4,#0x48]
;;;534                OS_PendListRemove(p_tcb);                                   /* Remove from wait list                             */
00005a  4620              MOV      r0,r4
00005c  f7fffffe          BL       OS_PendListRemove
;;;535                if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
000060  f8940036          LDRB     r0,[r4,#0x36]
000064  2803              CMP      r0,#3
000066  d106              BNE      |L5.118|
;;;536                    OS_RdyListInsert(p_tcb);                                /* Insert the task in the ready list                 */
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       OS_RdyListInsert
;;;537                    p_tcb->TaskState  = OS_TASK_STATE_RDY;
00006e  2000              MOVS     r0,#0
000070  f8840036          STRB     r0,[r4,#0x36]
000074  e006              B        |L5.132|
                  |L5.118|
;;;538                } else if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {
000076  f8940036          LDRB     r0,[r4,#0x36]
00007a  2807              CMP      r0,#7
00007c  d102              BNE      |L5.132|
;;;539    
;;;540                    p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
00007e  2004              MOVS     r0,#4
000080  f8840036          STRB     r0,[r4,#0x36]
                  |L5.132|
;;;541                }
;;;542                p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;                 /* Indicate pend timed out                           */
000084  2003              MOVS     r0,#3
000086  f8840035          STRB     r0,[r4,#0x35]
;;;543                p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;                /* Indicate no longer pending                        */
00008a  2000              MOVS     r0,#0
00008c  f8840034          STRB     r0,[r4,#0x34]
;;;544    
;;;545    #if OS_CFG_MUTEX_EN > 0u
;;;546                if(p_tcb_owner != (OS_TCB *)0) {
000090  b306              CBZ      r6,|L5.212|
;;;547                    if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
000092  f8960037          LDRB     r0,[r6,#0x37]
000096  f8961038          LDRB     r1,[r6,#0x38]
00009a  4288              CMP      r0,r1
00009c  d01a              BEQ      |L5.212|
;;;548                        (p_tcb_owner->Prio == p_tcb->Prio)) {               /* Has the owner inherited a priority?               */
00009e  f8960037          LDRB     r0,[r6,#0x37]
0000a2  f8941037          LDRB     r1,[r4,#0x37]
0000a6  4288              CMP      r0,r1
0000a8  d114              BNE      |L5.212|
;;;549                        prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
0000aa  4630              MOV      r0,r6
0000ac  f7fffffe          BL       OS_MutexGrpPrioFindHighest
0000b0  4681              MOV      r9,r0
;;;550                        prio_new = prio_new > p_tcb_owner->BasePrio ? p_tcb_owner->BasePrio : prio_new;
0000b2  f8960038          LDRB     r0,[r6,#0x38]
0000b6  4548              CMP      r0,r9
0000b8  da02              BGE      |L5.192|
0000ba  f8960038          LDRB     r0,[r6,#0x38]
0000be  e000              B        |L5.194|
                  |L5.192|
0000c0  4648              MOV      r0,r9
                  |L5.194|
0000c2  4681              MOV      r9,r0
;;;551                        if(prio_new != p_tcb_owner->Prio) {
0000c4  f8960037          LDRB     r0,[r6,#0x37]
0000c8  4548              CMP      r0,r9
0000ca  d003              BEQ      |L5.212|
;;;552                            OS_TaskChangePrio(p_tcb_owner, prio_new);
0000cc  4649              MOV      r1,r9
0000ce  4630              MOV      r0,r6
0000d0  f7fffffe          BL       OS_TaskChangePrio
                  |L5.212|
;;;553                #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;554                                          TRACE_OS_MUTEX_TASK_PRIO_DISINHERIT(p_tcb_owner, p_tcb_owner->Prio)
;;;555                #endif
;;;556                        }
;;;557                    }
;;;558                }
;;;559    #endif
;;;560    
;;;561                p_list->TCB_Ptr = p_tcb->TickNextPtr;
0000d4  6960              LDR      r0,[r4,#0x14]
0000d6  6028              STR      r0,[r5,#0]
;;;562                p_tcb           = p_list->TCB_Ptr;                          /* Get 'p_tcb' again for loop                        */
0000d8  682c              LDR      r4,[r5,#0]
;;;563                if (p_tcb == (OS_TCB *)0) {
0000da  b914              CBNZ     r4,|L5.226|
;;;564    #if OS_CFG_DBG_EN > 0u
;;;565                    p_list->NbrEntries = (OS_OBJ_QTY)0u;
0000dc  2000              MOVS     r0,#0
0000de  80a8              STRH     r0,[r5,#4]
;;;566    #endif
;;;567                    break;
0000e0  e007              B        |L5.242|
                  |L5.226|
;;;568                } else {
;;;569    #if OS_CFG_DBG_EN > 0u
;;;570                    p_list->NbrEntries--;
0000e2  88a8              LDRH     r0,[r5,#4]
0000e4  1e40              SUBS     r0,r0,#1
0000e6  80a8              STRH     r0,[r5,#4]
;;;571    #endif
;;;572                    p_tcb->TickPrevPtr = (OS_TCB *)0;
0000e8  2000              MOVS     r0,#0
0000ea  61a0              STR      r0,[r4,#0x18]
                  |L5.236|
0000ec  6d20              LDR      r0,[r4,#0x50]         ;517
0000ee  2800              CMP      r0,#0                 ;517
0000f0  d0a0              BEQ      |L5.52|
                  |L5.242|
0000f2  bf00              NOP                            ;567
                  |L5.244|
;;;573                }
;;;574            }
;;;575        }
;;;576    #if OS_CFG_DBG_EN > 0u
;;;577        p_list->NbrUpdated = nbr_updated;
0000f4  f8a58006          STRH     r8,[r5,#6]
;;;578    #endif
;;;579        ts_delta_timeout   = OS_TS_GET() - ts_start;                        /* Measure execution time of the update              */
0000f8  f7fffffe          BL       CPU_TS_TmrRd
0000fc  eba00a07          SUB      r10,r0,r7
;;;580        OS_CRITICAL_EXIT();                                                 /* ------------------------------------------------- */
000100  bf00              NOP      
000102  f7fffffe          BL       CPU_IntDisMeasStop
000106  bf00              NOP      
000108  4658              MOV      r0,r11
00010a  f7fffffe          BL       CPU_SR_Restore
00010e  bf00              NOP      
000110  bf00              NOP      
;;;581    
;;;582        return (ts_delta_timeout);
000112  4650              MOV      r0,r10
;;;583    }
000114  e8bd9ff0          POP      {r4-r12,pc}
                          ENDP

                  |L5.280|
                          DCD      OSTickListTimeout

                          AREA ||i.OS_TickTask||, CODE, READONLY, ALIGN=2

                  OS_TickTask PROC
;;;64     
;;;65     void  OS_TickTask (void  *p_arg)
000000  b508              PUSH     {r3,lr}
;;;66     {
;;;67         OS_ERR  err;
;;;68         CPU_TS  ts_delta;
;;;69         CPU_TS  ts_delta_dly;
;;;70         CPU_TS  ts_delta_timeout;
;;;71         CPU_SR_ALLOC();
000002  2700              MOVS     r7,#0
;;;72     
;;;73     
;;;74         (void)&p_arg;                                               /* Prevent compiler warning                             */
;;;75     
;;;76         while (DEF_ON) {
000004  e02c              B        |L6.96|
                  |L6.6|
;;;77             (void)OSTaskSemPend((OS_TICK  )0,
000006  466b              MOV      r3,sp
000008  2200              MOVS     r2,#0
00000a  4611              MOV      r1,r2
00000c  4610              MOV      r0,r2
00000e  f7fffffe          BL       OSTaskSemPend
;;;78                                 (OS_OPT   )OS_OPT_PEND_BLOCKING,
;;;79                                 (CPU_TS  *)0,
;;;80                                 (OS_ERR  *)&err);                   /* Wait for signal from tick interrupt                  */
;;;81             if (err == OS_ERR_NONE) {
000012  f8bd0000          LDRH     r0,[sp,#0]
000016  bb18              CBNZ     r0,|L6.96|
;;;82                 OS_CRITICAL_ENTER();
000018  bf00              NOP      
00001a  bf00              NOP      
00001c  f7fffffe          BL       CPU_SR_Save
000020  4607              MOV      r7,r0
000022  bf00              NOP      
000024  f7fffffe          BL       CPU_IntDisMeasStart
000028  bf00              NOP      
;;;83                 OSTickCtr++;                                        /* Keep track of the number of ticks                    */
00002a  480e              LDR      r0,|L6.100|
00002c  6800              LDR      r0,[r0,#0]  ; OSTickCtr
00002e  1c40              ADDS     r0,r0,#1
000030  490c              LDR      r1,|L6.100|
000032  6008              STR      r0,[r1,#0]  ; OSTickCtr
;;;84     #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;85                 TRACE_OS_TICK_INCREMENT(OSTickCtr);                 /* Record the event.                                    */
;;;86     #endif
;;;87                 OS_CRITICAL_EXIT();
000034  bf00              NOP      
000036  f7fffffe          BL       CPU_IntDisMeasStop
00003a  bf00              NOP      
00003c  4638              MOV      r0,r7
00003e  f7fffffe          BL       CPU_SR_Restore
000042  bf00              NOP      
000044  bf00              NOP      
;;;88                 ts_delta_dly     = OS_TickListUpdateDly();
000046  f7fffffe          BL       OS_TickListUpdateDly
00004a  4606              MOV      r6,r0
;;;89                 ts_delta_timeout = OS_TickListUpdateTimeout();
00004c  f7fffffe          BL       OS_TickListUpdateTimeout
000050  4605              MOV      r5,r0
;;;90                 ts_delta         = ts_delta_dly + ts_delta_timeout; /* Compute total execution time of list updates         */
000052  1974              ADDS     r4,r6,r5
;;;91                 if (OSTickTaskTimeMax < ts_delta) {
000054  4804              LDR      r0,|L6.104|
000056  6800              LDR      r0,[r0,#0]  ; OSTickTaskTimeMax
000058  42a0              CMP      r0,r4
00005a  d201              BCS      |L6.96|
;;;92                     OSTickTaskTimeMax = ts_delta;
00005c  4802              LDR      r0,|L6.104|
00005e  6004              STR      r4,[r0,#0]  ; OSTickTaskTimeMax
                  |L6.96|
000060  e7d1              B        |L6.6|
;;;93                 }
;;;94             }
;;;95         }
;;;96     }
;;;97     
                          ENDP

000062  0000              DCW      0x0000
                  |L6.100|
                          DCD      OSTickCtr
                  |L6.104|
                          DCD      OSTickTaskTimeMax

                          AREA ||i.OS_TickTaskInit||, CODE, READONLY, ALIGN=2

                  OS_TickTaskInit PROC
;;;118    
;;;119    void  OS_TickTaskInit (OS_ERR  *p_err)
000000  b510              PUSH     {r4,lr}
;;;120    {
000002  b08a              SUB      sp,sp,#0x28
000004  4604              MOV      r4,r0
;;;121    #ifdef OS_SAFETY_CRITICAL
;;;122        if (p_err == (OS_ERR *)0) {
;;;123            OS_SAFETY_CRITICAL_EXCEPTION();
;;;124            return;
;;;125        }
;;;126    #endif
;;;127    
;;;128        OSTickCtr                    = (OS_TICK)0u;                         /* Clear the tick counter                            */
000006  2000              MOVS     r0,#0
000008  4920              LDR      r1,|L7.140|
00000a  6008              STR      r0,[r1,#0]  ; OSTickCtr
;;;129    
;;;130        OSTickListDly.TCB_Ptr        = (OS_TCB   *)0;
00000c  4920              LDR      r1,|L7.144|
00000e  6008              STR      r0,[r1,#0]  ; OSTickListDly
;;;131        OSTickListTimeout.TCB_Ptr    = (OS_TCB   *)0;
000010  4920              LDR      r1,|L7.148|
000012  6008              STR      r0,[r1,#0]  ; OSTickListTimeout
;;;132    
;;;133    #if OS_CFG_DBG_EN > 0u
;;;134        OSTickListDly.NbrEntries     = (OS_OBJ_QTY)0;
000014  491e              LDR      r1,|L7.144|
000016  8088              STRH     r0,[r1,#4]
;;;135        OSTickListDly.NbrUpdated     = (OS_OBJ_QTY)0;
000018  80c8              STRH     r0,[r1,#6]
;;;136    
;;;137        OSTickListTimeout.NbrEntries = (OS_OBJ_QTY)0;
00001a  491e              LDR      r1,|L7.148|
00001c  8088              STRH     r0,[r1,#4]
;;;138        OSTickListTimeout.NbrUpdated = (OS_OBJ_QTY)0;
00001e  80c8              STRH     r0,[r1,#6]
;;;139    #endif
;;;140    
;;;141                                                                            /* ---------------- CREATE THE TICK TASK ----------- */
;;;142        if (OSCfg_TickTaskStkBasePtr == (CPU_STK *)0) {
000020  481d              LDR      r0,|L7.152|
000022  6800              LDR      r0,[r0,#0]  ; OSCfg_TickTaskStkBasePtr
000024  b920              CBNZ     r0,|L7.48|
;;;143           *p_err = OS_ERR_TICK_STK_INVALID;
000026  f2472012          MOV      r0,#0x7212
00002a  8020              STRH     r0,[r4,#0]
                  |L7.44|
;;;144            return;
;;;145        }
;;;146    
;;;147        if (OSCfg_TickTaskStkSize < OSCfg_StkSizeMin) {
;;;148           *p_err = OS_ERR_TICK_STK_SIZE_INVALID;
;;;149            return;
;;;150        }
;;;151    
;;;152        if (OSCfg_TickTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {                 /* Only one task at the 'Idle Task' priority         */
;;;153           *p_err = OS_ERR_TICK_PRIO_INVALID;
;;;154            return;
;;;155        }
;;;156    
;;;157        OSTaskCreate((OS_TCB     *)&OSTickTaskTCB,
;;;158                     (CPU_CHAR   *)((void *)"uC/OS-III Tick Task"),
;;;159                     (OS_TASK_PTR )OS_TickTask,
;;;160                     (void       *)0,
;;;161                     (OS_PRIO     )OSCfg_TickTaskPrio,
;;;162                     (CPU_STK    *)OSCfg_TickTaskStkBasePtr,
;;;163                     (CPU_STK_SIZE)OSCfg_TickTaskStkLimit,
;;;164                     (CPU_STK_SIZE)OSCfg_TickTaskStkSize,
;;;165                     (OS_MSG_QTY  )0u,
;;;166                     (OS_TICK     )0u,
;;;167                     (void       *)0,
;;;168                     (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS),
;;;169                     (OS_ERR     *)p_err);
;;;170    }
00002c  b00a              ADD      sp,sp,#0x28
00002e  bd10              POP      {r4,pc}
                  |L7.48|
000030  481a              LDR      r0,|L7.156|
000032  6800              LDR      r0,[r0,#0]            ;147  ; OSCfg_TickTaskStkSize
000034  491a              LDR      r1,|L7.160|
000036  6809              LDR      r1,[r1,#0]            ;147  ; OSCfg_StkSizeMin
000038  4288              CMP      r0,r1                 ;147
00003a  d203              BCS      |L7.68|
00003c  f2472013          MOV      r0,#0x7213            ;148
000040  8020              STRH     r0,[r4,#0]            ;148
000042  e7f3              B        |L7.44|
                  |L7.68|
000044  4817              LDR      r0,|L7.164|
000046  7800              LDRB     r0,[r0,#0]            ;152  ; OSCfg_TickTaskPrio
000048  283f              CMP      r0,#0x3f              ;152
00004a  d303              BCC      |L7.84|
00004c  f2472011          MOV      r0,#0x7211            ;153
000050  8020              STRH     r0,[r4,#0]            ;153
000052  e7eb              B        |L7.44|
                  |L7.84|
000054  200b              MOVS     r0,#0xb               ;157
000056  2100              MOVS     r1,#0                 ;157
000058  9105              STR      r1,[sp,#0x14]         ;157
00005a  e9cd0407          STRD     r0,r4,[sp,#0x1c]      ;157
00005e  9106              STR      r1,[sp,#0x18]         ;157
000060  4608              MOV      r0,r1                 ;157
000062  490e              LDR      r1,|L7.156|
000064  680a              LDR      r2,[r1,#0]            ;157  ; OSCfg_TickTaskStkSize
000066  4910              LDR      r1,|L7.168|
000068  6809              LDR      r1,[r1,#0]            ;157  ; OSCfg_TickTaskStkLimit
00006a  4b0b              LDR      r3,|L7.152|
00006c  681b              LDR      r3,[r3,#0]            ;157  ; OSCfg_TickTaskStkBasePtr
00006e  e9cd3101          STRD     r3,r1,[sp,#4]         ;157
000072  e9cd2003          STRD     r2,r0,[sp,#0xc]       ;157
000076  480b              LDR      r0,|L7.164|
000078  7800              LDRB     r0,[r0,#0]            ;157  ; OSCfg_TickTaskPrio
00007a  2300              MOVS     r3,#0                 ;157
00007c  4a0b              LDR      r2,|L7.172|
00007e  a10c              ADR      r1,|L7.176|
000080  9000              STR      r0,[sp,#0]            ;157
000082  4810              LDR      r0,|L7.196|
000084  f7fffffe          BL       OSTaskCreate
000088  bf00              NOP      
00008a  e7cf              B        |L7.44|
;;;171    
                          ENDP

                  |L7.140|
                          DCD      OSTickCtr
                  |L7.144|
                          DCD      OSTickListDly
                  |L7.148|
                          DCD      OSTickListTimeout
                  |L7.152|
                          DCD      OSCfg_TickTaskStkBasePtr
                  |L7.156|
                          DCD      OSCfg_TickTaskStkSize
                  |L7.160|
                          DCD      OSCfg_StkSizeMin
                  |L7.164|
                          DCD      OSCfg_TickTaskPrio
                  |L7.168|
                          DCD      OSCfg_TickTaskStkLimit
                  |L7.172|
                          DCD      OS_TickTask
                  |L7.176|
0000b0  75432f4f          DCB      "uC/OS-III Tick Task",0
0000b4  532d4949
0000b8  49205469
0000bc  636b2054
0000c0  61736b00
                  |L7.196|
                          DCD      OSTickTaskTCB
