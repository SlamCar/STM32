; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\os_time.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\os_time.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\OBJ -I..\USER -I..\HALLIB\STM32F7xx_HAL_Driver\Inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\SDRAM -I..\HARDWARE\IIC -I..\HARDWARE\24CXX -I..\HARDWARE\MPU9250 -I..\HARDWARE\DHT11 -I..\HARDWARE\MPU -I..\USMART -I..\DMP\driver\eMPL -I..\DMP\driver\include -I..\DMP\driver\stm32L -I..\DMP\eMPL-hal -I..\DMP\mllite -I..\DMP\mpl -I..\UCOSIII -I..\UCOSIII\UCOS-BSP -I..\UCOSIII\UCOS-CONFIG -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\uC-CPU\ARM-Cortex-M4\RealView -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-CPU -I..\HARDWARE\MY_FUNCTION -I..\USER -I..\HARDWARE\CRC -I..\HARDWARE\DMA -I..\HARDWARE\HEART_BEAT -I..\HARDWARE\RECEIVE_ANALYZE -I..\HARDWARE\FEED_BACK -I..\HARDWARE\DATA -I"D:\1111111\32F4\Slam car\实验35 MPU9250九轴传感器实验\USER\RTE" -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0 -IF:\Keil_v5\ARM\CMSIS\Include -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__UVISION_VERSION=514 -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=..\obj\os_time.crf ..\UCOSIII\uCOS-III\Source\os_time.c]
                          THUMB

                          AREA ||i.OSTimeDly||, CODE, READONLY, ALIGN=2

                  OSTimeDly PROC
;;;81     
;;;82     void  OSTimeDly (OS_TICK   dly,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;83                      OS_OPT    opt,
;;;84                      OS_ERR   *p_err)
;;;85     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;86         CPU_SR_ALLOC();
00000a  2700              MOVS     r7,#0
;;;87     
;;;88     
;;;89     
;;;90     #ifdef OS_SAFETY_CRITICAL
;;;91         if (p_err == (OS_ERR *)0) {
;;;92             OS_SAFETY_CRITICAL_EXCEPTION();
;;;93             return;
;;;94         }
;;;95     #endif
;;;96     
;;;97     #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;98         if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to call from an ISR                        */
;;;99            *p_err = OS_ERR_TIME_DLY_ISR;
;;;100            return;
;;;101        }
;;;102    #endif
;;;103    
;;;104        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0u) {       /* Can't delay when the scheduler is locked               */
00000c  4826              LDR      r0,|L1.168|
00000e  7800              LDRB     r0,[r0,#0]  ; OSSchedLockNestingCtr
000010  2800              CMP      r0,#0
000012  dd04              BLE      |L1.30|
;;;105           *p_err = OS_ERR_SCHED_LOCKED;
000014  f6465063          MOV      r0,#0x6d63
000018  8020              STRH     r0,[r4,#0]
                  |L1.26|
;;;106            return;
;;;107        }
;;;108    
;;;109        switch (opt) {
;;;110            case OS_OPT_TIME_DLY:
;;;111            case OS_OPT_TIME_TIMEOUT:
;;;112            case OS_OPT_TIME_PERIODIC:
;;;113                 if (dly == (OS_TICK)0u) {                      /* 0 means no delay!                                      */
;;;114                    *p_err = OS_ERR_TIME_ZERO_DLY;
;;;115                     return;
;;;116                 }
;;;117                 break;
;;;118    
;;;119            case OS_OPT_TIME_MATCH:
;;;120                 break;
;;;121    
;;;122            default:
;;;123                *p_err = OS_ERR_OPT_INVALID;
;;;124                 return;
;;;125        }
;;;126    
;;;127        OS_CRITICAL_ENTER();
;;;128        OS_TickListInsertDly(OSTCBCurPtr,
;;;129                             dly,
;;;130                             opt,
;;;131                             p_err);
;;;132        if (*p_err != OS_ERR_NONE) {
;;;133             OS_CRITICAL_EXIT_NO_SCHED();
;;;134             return;
;;;135        }
;;;136    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;137        TRACE_OS_TASK_DLY(dly);                                 /* Record the event.                                      */
;;;138    #endif
;;;139        OS_RdyListRemove(OSTCBCurPtr);                          /* Remove current task from ready list                    */
;;;140        OS_CRITICAL_EXIT_NO_SCHED();
;;;141        OSSched();                                              /* Find next task to run!                                 */
;;;142       *p_err = OS_ERR_NONE;
;;;143    }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.30|
00001e  b136              CBZ      r6,|L1.46|
000020  2e02              CMP      r6,#2                 ;109
000022  d005              BEQ      |L1.48|
000024  2e04              CMP      r6,#4                 ;109
000026  d00a              BEQ      |L1.62|
000028  2e08              CMP      r6,#8                 ;109
00002a  d109              BNE      |L1.64|
00002c  e001              B        |L1.50|
                  |L1.46|
00002e  bf00              NOP                            ;111
                  |L1.48|
000030  bf00              NOP                            ;112
                  |L1.50|
000032  b91d              CBNZ     r5,|L1.60|
000034  f247207e          MOV      r0,#0x727e            ;114
000038  8020              STRH     r0,[r4,#0]            ;114
00003a  e7ee              B        |L1.26|
                  |L1.60|
00003c  e004              B        |L1.72|
                  |L1.62|
00003e  e003              B        |L1.72|
                  |L1.64|
000040  f6456025          MOV      r0,#0x5e25            ;123
000044  8020              STRH     r0,[r4,#0]            ;123
000046  e7e8              B        |L1.26|
                  |L1.72|
000048  bf00              NOP                            ;117
00004a  bf00              NOP                            ;127
00004c  bf00              NOP                            ;127
00004e  f7fffffe          BL       CPU_SR_Save
000052  4607              MOV      r7,r0                 ;127
000054  bf00              NOP                            ;127
000056  f7fffffe          BL       CPU_IntDisMeasStart
00005a  bf00              NOP                            ;127
00005c  4623              MOV      r3,r4                 ;128
00005e  4632              MOV      r2,r6                 ;128
000060  4629              MOV      r1,r5                 ;128
000062  4812              LDR      r0,|L1.172|
000064  6800              LDR      r0,[r0,#0]            ;128  ; OSTCBCurPtr
000066  f7fffffe          BL       OS_TickListInsertDly
00006a  8820              LDRH     r0,[r4,#0]            ;132
00006c  b148              CBZ      r0,|L1.130|
00006e  bf00              NOP                            ;133
000070  f7fffffe          BL       CPU_IntDisMeasStop
000074  bf00              NOP                            ;133
000076  4638              MOV      r0,r7                 ;133
000078  f7fffffe          BL       CPU_SR_Restore
00007c  bf00              NOP                            ;133
00007e  bf00              NOP                            ;133
000080  e7cb              B        |L1.26|
                  |L1.130|
000082  480a              LDR      r0,|L1.172|
000084  6800              LDR      r0,[r0,#0]            ;139  ; OSTCBCurPtr
000086  f7fffffe          BL       OS_RdyListRemove
00008a  bf00              NOP                            ;140
00008c  f7fffffe          BL       CPU_IntDisMeasStop
000090  bf00              NOP                            ;140
000092  4638              MOV      r0,r7                 ;140
000094  f7fffffe          BL       CPU_SR_Restore
000098  bf00              NOP                            ;140
00009a  bf00              NOP                            ;140
00009c  f7fffffe          BL       OSSched
0000a0  2000              MOVS     r0,#0                 ;142
0000a2  8020              STRH     r0,[r4,#0]            ;142
0000a4  bf00              NOP      
0000a6  e7b8              B        |L1.26|
;;;144    
                          ENDP

                  |L1.168|
                          DCD      OSSchedLockNestingCtr
                  |L1.172|
                          DCD      OSTCBCurPtr

                          AREA ||i.OSTimeDlyHMSM||, CODE, READONLY, ALIGN=2

                  OSTimeDlyHMSM PROC
;;;203    #if OS_CFG_TIME_DLY_HMSM_EN > 0u
;;;204    void  OSTimeDlyHMSM (CPU_INT16U   hours,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;205                         CPU_INT16U   minutes,
;;;206                         CPU_INT16U   seconds,
;;;207                         CPU_INT32U   milli,
;;;208                         OS_OPT       opt,
;;;209                         OS_ERR      *p_err)
;;;210    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
00000c  9c0b              LDR      r4,[sp,#0x2c]
;;;211    #if OS_CFG_ARG_CHK_EN > 0u
;;;212        CPU_BOOLEAN  opt_invalid;
;;;213        CPU_BOOLEAN  opt_non_strict;
;;;214    #endif
;;;215        OS_OPT       opt_time;
;;;216        OS_RATE_HZ   tick_rate;
;;;217        OS_TICK      ticks;
;;;218        CPU_SR_ALLOC();
00000e  2000              MOVS     r0,#0
000010  9000              STR      r0,[sp,#0]
;;;219    
;;;220    
;;;221    
;;;222    #ifdef OS_SAFETY_CRITICAL
;;;223        if (p_err == (OS_ERR *)0) {
;;;224            OS_SAFETY_CRITICAL_EXCEPTION();
;;;225            return;
;;;226        }
;;;227    #endif
;;;228    
;;;229    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;230        if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to call from an ISR                        */
;;;231           *p_err = OS_ERR_TIME_DLY_ISR;
;;;232            return;
;;;233        }
;;;234    #endif
;;;235    
;;;236        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0u) {       /* Can't delay when the scheduler is locked               */
000012  483d              LDR      r0,|L2.264|
000014  7800              LDRB     r0,[r0,#0]  ; OSSchedLockNestingCtr
000016  2800              CMP      r0,#0
000018  dd04              BLE      |L2.36|
;;;237           *p_err = OS_ERR_SCHED_LOCKED;
00001a  f6465063          MOV      r0,#0x6d63
00001e  8020              STRH     r0,[r4,#0]
                  |L2.32|
;;;238            return;
;;;239        }
;;;240    
;;;241        opt_time = opt & OS_OPT_TIME_MASK;                      /* Retrieve time options only.                            */
;;;242        switch (opt_time) {
;;;243            case OS_OPT_TIME_DLY:
;;;244            case OS_OPT_TIME_TIMEOUT:
;;;245            case OS_OPT_TIME_PERIODIC:
;;;246                 if (milli == (CPU_INT32U)0u) {                 /* Make sure we didn't specify a 0 delay                  */
;;;247                     if (seconds == (CPU_INT16U)0u) {
;;;248                         if (minutes == (CPU_INT16U)0u) {
;;;249                             if (hours == (CPU_INT16U)0u) {
;;;250                                *p_err = OS_ERR_TIME_ZERO_DLY;
;;;251                                 return;
;;;252                             }
;;;253                         }
;;;254                     }
;;;255                 }
;;;256                 break;
;;;257    
;;;258            case OS_OPT_TIME_MATCH:
;;;259                 break;
;;;260    
;;;261            default:
;;;262                *p_err = OS_ERR_OPT_INVALID;
;;;263                 return;
;;;264        }
;;;265    
;;;266    #if OS_CFG_ARG_CHK_EN > 0u                                  /* Validate arguments to be within range                  */
;;;267        opt_invalid = DEF_BIT_IS_SET_ANY(opt, ~OS_OPT_TIME_OPTS_MASK);
;;;268        if (opt_invalid == DEF_YES) {
;;;269           *p_err = OS_ERR_OPT_INVALID;
;;;270            return;
;;;271        }
;;;272    
;;;273        opt_non_strict = DEF_BIT_IS_SET(opt, OS_OPT_TIME_HMSM_NON_STRICT);
;;;274        if (opt_non_strict != DEF_YES) {
;;;275             if (milli   > (CPU_INT32U)999u) {
;;;276                *p_err = OS_ERR_TIME_INVALID_MILLISECONDS;
;;;277                 return;
;;;278             }
;;;279             if (seconds > (CPU_INT16U)59u) {
;;;280                *p_err = OS_ERR_TIME_INVALID_SECONDS;
;;;281                 return;
;;;282             }
;;;283             if (minutes > (CPU_INT16U)59u) {
;;;284                *p_err = OS_ERR_TIME_INVALID_MINUTES;
;;;285                 return;
;;;286             }
;;;287             if (hours   > (CPU_INT16U)99u) {
;;;288                *p_err = OS_ERR_TIME_INVALID_HOURS;
;;;289                 return;
;;;290             }
;;;291        } else {
;;;292             if (minutes > (CPU_INT16U)9999u) {
;;;293                *p_err = OS_ERR_TIME_INVALID_MINUTES;
;;;294                 return;
;;;295             }
;;;296             if (hours   > (CPU_INT16U)999u) {
;;;297                *p_err = OS_ERR_TIME_INVALID_HOURS;
;;;298                 return;
;;;299             }
;;;300        }
;;;301    #endif
;;;302    
;;;303                                                                /* Compute the total number of clock ticks required..     */
;;;304                                                                /* .. (rounded to the nearest tick)                       */
;;;305        tick_rate = OSCfg_TickRate_Hz;
;;;306        ticks     = ((OS_TICK)hours * (OS_TICK)3600u + (OS_TICK)minutes * (OS_TICK)60u + (OS_TICK)seconds) * tick_rate
;;;307                  + (tick_rate * ((OS_TICK)milli + (OS_TICK)500u / tick_rate)) / (OS_TICK)1000u;
;;;308    
;;;309        if (ticks > (OS_TICK)0u) {
;;;310            OS_CRITICAL_ENTER();
;;;311            OS_TickListInsertDly(OSTCBCurPtr,
;;;312                                 ticks,
;;;313                                 opt_time,
;;;314                                 p_err);
;;;315            if (*p_err != OS_ERR_NONE) {
;;;316                 OS_CRITICAL_EXIT_NO_SCHED();
;;;317                 return;
;;;318            }
;;;319    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;320            TRACE_OS_TASK_DLY(ticks);                           /* Record the event.                                      */
;;;321    #endif
;;;322            OS_RdyListRemove(OSTCBCurPtr);                      /* Remove current task from ready list                    */
;;;323            OS_CRITICAL_EXIT_NO_SCHED();
;;;324            OSSched();                                          /* Find next task to run!                                 */
;;;325           *p_err = OS_ERR_NONE;
;;;326        } else {
;;;327           *p_err = OS_ERR_TIME_ZERO_DLY;
;;;328        }
;;;329    }
000020  e8bd8ff8          POP      {r3-r11,pc}
                  |L2.36|
000024  980a              LDR      r0,[sp,#0x28]         ;241
000026  f0000a0e          AND      r10,r0,#0xe           ;241
00002a  f1ba0f00          CMP      r10,#0                ;242
00002e  d009              BEQ      |L2.68|
000030  f1ba0f02          CMP      r10,#2                ;242
000034  d007              BEQ      |L2.70|
000036  f1ba0f04          CMP      r10,#4                ;242
00003a  d012              BEQ      |L2.98|
00003c  f1ba0f08          CMP      r10,#8                ;242
000040  d110              BNE      |L2.100|
000042  e001              B        |L2.72|
                  |L2.68|
000044  bf00              NOP                            ;244
                  |L2.70|
000046  bf00              NOP                            ;245
                  |L2.72|
000048  f1b90f00          CMP      r9,#0                 ;246
00004c  d108              BNE      |L2.96|
00004e  f1b80f00          CMP      r8,#0                 ;247
000052  d105              BNE      |L2.96|
000054  b927              CBNZ     r7,|L2.96|
000056  b91e              CBNZ     r6,|L2.96|
000058  f247207e          MOV      r0,#0x727e            ;250
00005c  8020              STRH     r0,[r4,#0]            ;250
00005e  e7df              B        |L2.32|
                  |L2.96|
000060  e004              B        |L2.108|
                  |L2.98|
000062  e003              B        |L2.108|
                  |L2.100|
000064  f6456025          MOV      r0,#0x5e25            ;262
000068  8020              STRH     r0,[r4,#0]            ;262
00006a  e7d9              B        |L2.32|
                  |L2.108|
00006c  bf00              NOP                            ;256
00006e  4827              LDR      r0,|L2.268|
000070  6805              LDR      r5,[r0,#0]            ;305  ; OSCfg_TickRate_Hz
000072  f44f70fa          MOV      r0,#0x1f4             ;306
000076  fbb0f0f5          UDIV     r0,r0,r5              ;306
00007a  4448              ADD      r0,r0,r9              ;306
00007c  4368              MULS     r0,r5,r0              ;306
00007e  f44f717a          MOV      r1,#0x3e8             ;306
000082  fbb0f1f1          UDIV     r1,r0,r1              ;306
000086  f44f6061          MOV      r0,#0xe10             ;306
00008a  4370              MULS     r0,r6,r0              ;306
00008c  ebc71207          RSB      r2,r7,r7,LSL #4       ;306
000090  eb000082          ADD      r0,r0,r2,LSL #2       ;306
000094  4440              ADD      r0,r0,r8              ;306
000096  fb001b05          MLA      r11,r0,r5,r1          ;306
00009a  f1bb0f00          CMP      r11,#0                ;309
00009e  d02d              BEQ      |L2.252|
0000a0  bf00              NOP                            ;310
0000a2  bf00              NOP                            ;310
0000a4  f7fffffe          BL       CPU_SR_Save
0000a8  9000              STR      r0,[sp,#0]            ;310
0000aa  bf00              NOP                            ;310
0000ac  f7fffffe          BL       CPU_IntDisMeasStart
0000b0  bf00              NOP                            ;310
0000b2  4623              MOV      r3,r4                 ;311
0000b4  4652              MOV      r2,r10                ;311
0000b6  4659              MOV      r1,r11                ;311
0000b8  4815              LDR      r0,|L2.272|
0000ba  6800              LDR      r0,[r0,#0]            ;311  ; OSTCBCurPtr
0000bc  f7fffffe          BL       OS_TickListInsertDly
0000c0  8820              LDRH     r0,[r4,#0]            ;315
0000c2  b148              CBZ      r0,|L2.216|
0000c4  bf00              NOP                            ;316
0000c6  f7fffffe          BL       CPU_IntDisMeasStop
0000ca  bf00              NOP                            ;316
0000cc  9800              LDR      r0,[sp,#0]            ;316
0000ce  f7fffffe          BL       CPU_SR_Restore
0000d2  bf00              NOP                            ;316
0000d4  bf00              NOP                            ;316
0000d6  e7a3              B        |L2.32|
                  |L2.216|
0000d8  480d              LDR      r0,|L2.272|
0000da  6800              LDR      r0,[r0,#0]            ;322  ; OSTCBCurPtr
0000dc  f7fffffe          BL       OS_RdyListRemove
0000e0  bf00              NOP                            ;323
0000e2  f7fffffe          BL       CPU_IntDisMeasStop
0000e6  bf00              NOP                            ;323
0000e8  9800              LDR      r0,[sp,#0]            ;323
0000ea  f7fffffe          BL       CPU_SR_Restore
0000ee  bf00              NOP                            ;323
0000f0  bf00              NOP                            ;323
0000f2  f7fffffe          BL       OSSched
0000f6  2000              MOVS     r0,#0                 ;325
0000f8  8020              STRH     r0,[r4,#0]            ;325
0000fa  e002              B        |L2.258|
                  |L2.252|
0000fc  f247207e          MOV      r0,#0x727e            ;327
000100  8020              STRH     r0,[r4,#0]            ;327
                  |L2.258|
000102  bf00              NOP      
000104  e78c              B        |L2.32|
;;;330    #endif
                          ENDP

000106  0000              DCW      0x0000
                  |L2.264|
                          DCD      OSSchedLockNestingCtr
                  |L2.268|
                          DCD      OSCfg_TickRate_Hz
                  |L2.272|
                          DCD      OSTCBCurPtr

                          AREA ||i.OSTimeGet||, CODE, READONLY, ALIGN=2

                  OSTimeGet PROC
;;;462    
;;;463    OS_TICK  OSTimeGet (OS_ERR  *p_err)
000000  b570              PUSH     {r4-r6,lr}
;;;464    {
000002  4604              MOV      r4,r0
;;;465        OS_TICK  ticks;
;;;466        CPU_SR_ALLOC();
000004  2600              MOVS     r6,#0
;;;467    
;;;468    
;;;469    
;;;470    #ifdef OS_SAFETY_CRITICAL
;;;471        if (p_err == (OS_ERR *)0) {
;;;472            OS_SAFETY_CRITICAL_EXCEPTION();
;;;473            return ((OS_TICK)0);
;;;474        }
;;;475    #endif
;;;476    
;;;477        CPU_CRITICAL_ENTER();
000006  bf00              NOP      
000008  bf00              NOP      
00000a  f7fffffe          BL       CPU_SR_Save
00000e  4606              MOV      r6,r0
000010  bf00              NOP      
000012  f7fffffe          BL       CPU_IntDisMeasStart
000016  bf00              NOP      
;;;478        ticks = OSTickCtr;
000018  4807              LDR      r0,|L3.56|
00001a  6805              LDR      r5,[r0,#0]  ; OSTickCtr
;;;479        CPU_CRITICAL_EXIT();
00001c  bf00              NOP      
00001e  f7fffffe          BL       CPU_IntDisMeasStop
000022  bf00              NOP      
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       CPU_SR_Restore
00002a  bf00              NOP      
00002c  bf00              NOP      
;;;480       *p_err = OS_ERR_NONE;
00002e  2000              MOVS     r0,#0
000030  8020              STRH     r0,[r4,#0]
;;;481        return (ticks);
000032  4628              MOV      r0,r5
;;;482    }
000034  bd70              POP      {r4-r6,pc}
;;;483    
                          ENDP

000036  0000              DCW      0x0000
                  |L3.56|
                          DCD      OSTickCtr

                          AREA ||i.OSTimeSet||, CODE, READONLY, ALIGN=2

                  OSTimeSet PROC
;;;499    
;;;500    void  OSTimeSet (OS_TICK   ticks,
000000  b570              PUSH     {r4-r6,lr}
;;;501                     OS_ERR   *p_err)
;;;502    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;503        CPU_SR_ALLOC();
000006  2600              MOVS     r6,#0
;;;504    
;;;505    
;;;506    
;;;507    #ifdef OS_SAFETY_CRITICAL
;;;508        if (p_err == (OS_ERR *)0) {
;;;509            OS_SAFETY_CRITICAL_EXCEPTION();
;;;510            return;
;;;511        }
;;;512    #endif
;;;513    
;;;514        CPU_CRITICAL_ENTER();
000008  bf00              NOP      
00000a  bf00              NOP      
00000c  f7fffffe          BL       CPU_SR_Save
000010  4606              MOV      r6,r0
000012  bf00              NOP      
000014  f7fffffe          BL       CPU_IntDisMeasStart
000018  bf00              NOP      
;;;515        OSTickCtr = ticks;
00001a  4807              LDR      r0,|L4.56|
00001c  6004              STR      r4,[r0,#0]  ; OSTickCtr
;;;516        CPU_CRITICAL_EXIT();
00001e  bf00              NOP      
000020  f7fffffe          BL       CPU_IntDisMeasStop
000024  bf00              NOP      
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       CPU_SR_Restore
00002c  bf00              NOP      
00002e  bf00              NOP      
;;;517       *p_err     = OS_ERR_NONE;
000030  2000              MOVS     r0,#0
000032  8028              STRH     r0,[r5,#0]
;;;518    }
000034  bd70              POP      {r4-r6,pc}
;;;519    
                          ENDP

000036  0000              DCW      0x0000
                  |L4.56|
                          DCD      OSTickCtr

                          AREA ||i.OSTimeTick||, CODE, READONLY, ALIGN=2

                  OSTimeTick PROC
;;;533    
;;;534    void  OSTimeTick (void)
000000  b508              PUSH     {r3,lr}
;;;535    {
;;;536        OS_ERR  err;
;;;537    #if OS_CFG_ISR_POST_DEFERRED_EN > 0u
;;;538        CPU_TS  ts;
;;;539    #endif
;;;540    
;;;541    
;;;542        OSTimeTickHook();                                       /* Call user definable hook                               */
000002  f7fffffe          BL       OSTimeTickHook
;;;543    
;;;544    #if OS_CFG_ISR_POST_DEFERRED_EN > 0u
;;;545    
;;;546        ts = OS_TS_GET();                                       /* Get timestamp                                          */
;;;547        OS_IntQPost((OS_OBJ_TYPE) OS_OBJ_TYPE_TICK,             /* Post to ISR queue                                      */
;;;548                    (void      *)&OSRdyList[OSPrioCur],
;;;549                    (void      *) 0,
;;;550                    (OS_MSG_SIZE) 0u,
;;;551                    (OS_FLAGS   ) 0u,
;;;552                    (OS_OPT     ) 0u,
;;;553                    (CPU_TS     ) ts,
;;;554                    (OS_ERR    *)&err);
;;;555    
;;;556    #else
;;;557    
;;;558       (void)OSTaskSemPost((OS_TCB *)&OSTickTaskTCB,            /* Signal tick task                                       */
000006  466a              MOV      r2,sp
000008  2100              MOVS     r1,#0
00000a  480a              LDR      r0,|L5.52|
00000c  f7fffffe          BL       OSTaskSemPost
;;;559                           (OS_OPT  ) OS_OPT_POST_NONE,
;;;560                           (OS_ERR *)&err);
;;;561    
;;;562       (void)err;
;;;563    
;;;564    #if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
;;;565        OS_SchedRoundRobin(&OSRdyList[OSPrioCur]);
;;;566    #endif
;;;567    
;;;568    #if OS_CFG_TMR_EN > 0u
;;;569        OSTmrUpdateCtr--;
000010  4809              LDR      r0,|L5.56|
000012  6800              LDR      r0,[r0,#0]  ; OSTmrUpdateCtr
000014  1e40              SUBS     r0,r0,#1
000016  4908              LDR      r1,|L5.56|
000018  6008              STR      r0,[r1,#0]  ; OSTmrUpdateCtr
;;;570        if (OSTmrUpdateCtr == (OS_CTR)0u) {
00001a  4608              MOV      r0,r1
00001c  6800              LDR      r0,[r0,#0]  ; OSTmrUpdateCtr
00001e  b938              CBNZ     r0,|L5.48|
;;;571            OSTmrUpdateCtr = OSTmrUpdateCnt;
000020  4806              LDR      r0,|L5.60|
000022  6800              LDR      r0,[r0,#0]  ; OSTmrUpdateCnt
000024  6008              STR      r0,[r1,#0]  ; OSTmrUpdateCtr
;;;572            OSTaskSemPost((OS_TCB *)&OSTmrTaskTCB,              /* Signal timer task                                      */
000026  466a              MOV      r2,sp
000028  2100              MOVS     r1,#0
00002a  4805              LDR      r0,|L5.64|
00002c  f7fffffe          BL       OSTaskSemPost
                  |L5.48|
;;;573                          (OS_OPT  ) OS_OPT_POST_NONE,
;;;574                          (OS_ERR *)&err);
;;;575        }
;;;576    #endif
;;;577    
;;;578    #endif
;;;579    }
000030  bd08              POP      {r3,pc}
                          ENDP

000032  0000              DCW      0x0000
                  |L5.52|
                          DCD      OSTickTaskTCB
                  |L5.56|
                          DCD      OSTmrUpdateCtr
                  |L5.60|
                          DCD      OSTmrUpdateCnt
                  |L5.64|
                          DCD      OSTmrTaskTCB
