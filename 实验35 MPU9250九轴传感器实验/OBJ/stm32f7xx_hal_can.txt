; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\stm32f7xx_hal_can.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\stm32f7xx_hal_can.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\OBJ -I..\USER -I..\HALLIB\STM32F7xx_HAL_Driver\Inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\SDRAM -I..\HARDWARE\IIC -I..\HARDWARE\24CXX -I..\HARDWARE\MPU9250 -I..\HARDWARE\DHT11 -I..\HARDWARE\MPU -I..\USMART -I..\DMP\driver\eMPL -I..\DMP\driver\include -I..\DMP\driver\stm32L -I..\DMP\eMPL-hal -I..\DMP\mllite -I..\DMP\mpl -I..\UCOSIII -I..\UCOSIII\UCOS-BSP -I..\UCOSIII\UCOS-CONFIG -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\uC-CPU\ARM-Cortex-M4\RealView -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-CPU -I..\HARDWARE\MY_FUNCTION -I..\USER -I..\HARDWARE\CRC -I..\HARDWARE\DMA -I..\HARDWARE\HEART_BEAT -I..\HARDWARE\RECEIVE_ANALYZE -I..\HARDWARE\FEED_BACK -I..\HARDWARE\DATA -I"D:\1111111\32F4\Slam car\实验35 MPU9250九轴传感器实验\USER\RTE" -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0 -IF:\Keil_v5\ARM\CMSIS\Include -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__UVISION_VERSION=514 -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=..\obj\stm32f7xx_hal_can.crf ..\HALLIB\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_can.c]
                          THUMB

                          AREA ||i.CAN_Receive_IT||, CODE, READONLY, ALIGN=1

                  CAN_Receive_IT PROC
;;;1322     */
;;;1323   static HAL_StatusTypeDef CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
000000  b570              PUSH     {r4-r6,lr}
;;;1324   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1325     /* Get the Id */
;;;1326     hcan->pRxMsg->IDE = (uint8_t)0x04 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
000006  6820              LDR      r0,[r4,#0]
000008  f50070d8          ADD      r0,r0,#0x1b0
00000c  eb001005          ADD      r0,r0,r5,LSL #4
000010  6800              LDR      r0,[r0,#0]
000012  f0000004          AND      r0,r0,#4
000016  6b61              LDR      r1,[r4,#0x34]
000018  6088              STR      r0,[r1,#8]
;;;1327     if (hcan->pRxMsg->IDE == CAN_ID_STD)
00001a  6b60              LDR      r0,[r4,#0x34]
00001c  6880              LDR      r0,[r0,#8]
00001e  b960              CBNZ     r0,|L1.58|
;;;1328     {
;;;1329       hcan->pRxMsg->StdId = (uint32_t)0x000007FF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 21);
000020  6820              LDR      r0,[r4,#0]
000022  f50070d8          ADD      r0,r0,#0x1b0
000026  eb001005          ADD      r0,r0,r5,LSL #4
00002a  6800              LDR      r0,[r0,#0]
00002c  f24071ff          MOV      r1,#0x7ff
000030  ea015050          AND      r0,r1,r0,LSR #21
000034  6b61              LDR      r1,[r4,#0x34]
000036  6008              STR      r0,[r1,#0]
000038  e00b              B        |L1.82|
                  |L1.58|
;;;1330     }
;;;1331     else
;;;1332     {
;;;1333       hcan->pRxMsg->ExtId = (uint32_t)0x1FFFFFFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3);
00003a  6820              LDR      r0,[r4,#0]
00003c  f50070d8          ADD      r0,r0,#0x1b0
000040  eb001005          ADD      r0,r0,r5,LSL #4
000044  6800              LDR      r0,[r0,#0]
000046  f06f4160          MVN      r1,#0xe0000000
00004a  ea0100d0          AND      r0,r1,r0,LSR #3
00004e  6b61              LDR      r1,[r4,#0x34]
000050  6048              STR      r0,[r1,#4]
                  |L1.82|
;;;1334     }
;;;1335     
;;;1336     hcan->pRxMsg->RTR = (uint8_t)0x02 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
000052  6820              LDR      r0,[r4,#0]
000054  f50070d8          ADD      r0,r0,#0x1b0
000058  eb001005          ADD      r0,r0,r5,LSL #4
00005c  6800              LDR      r0,[r0,#0]
00005e  f0000002          AND      r0,r0,#2
000062  6b61              LDR      r1,[r4,#0x34]
000064  60c8              STR      r0,[r1,#0xc]
;;;1337     /* Get the DLC */
;;;1338     hcan->pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
000066  6820              LDR      r0,[r4,#0]
000068  f50070d8          ADD      r0,r0,#0x1b0
00006c  eb001005          ADD      r0,r0,r5,LSL #4
000070  6840              LDR      r0,[r0,#4]
000072  f000000f          AND      r0,r0,#0xf
000076  6b61              LDR      r1,[r4,#0x34]
000078  6108              STR      r0,[r1,#0x10]
;;;1339     /* Get the FMI */
;;;1340     hcan->pRxMsg->FMI = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8);
00007a  6820              LDR      r0,[r4,#0]
00007c  f50070d8          ADD      r0,r0,#0x1b0
000080  eb001005          ADD      r0,r0,r5,LSL #4
000084  6840              LDR      r0,[r0,#4]
000086  f3c02007          UBFX     r0,r0,#8,#8
00008a  6b61              LDR      r1,[r4,#0x34]
00008c  61c8              STR      r0,[r1,#0x1c]
;;;1341     /* Get the data field */
;;;1342     hcan->pRxMsg->Data[0] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
00008e  6820              LDR      r0,[r4,#0]
000090  f50070d8          ADD      r0,r0,#0x1b0
000094  eb001005          ADD      r0,r0,r5,LSL #4
000098  6880              LDR      r0,[r0,#8]
00009a  6b61              LDR      r1,[r4,#0x34]
00009c  7508              STRB     r0,[r1,#0x14]
;;;1343     hcan->pRxMsg->Data[1] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 8);
00009e  6820              LDR      r0,[r4,#0]
0000a0  f50070d8          ADD      r0,r0,#0x1b0
0000a4  eb001005          ADD      r0,r0,r5,LSL #4
0000a8  6880              LDR      r0,[r0,#8]
0000aa  0a01              LSRS     r1,r0,#8
0000ac  6b60              LDR      r0,[r4,#0x34]
0000ae  7541              STRB     r1,[r0,#0x15]
;;;1344     hcan->pRxMsg->Data[2] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 16);
0000b0  6820              LDR      r0,[r4,#0]
0000b2  f50070d8          ADD      r0,r0,#0x1b0
0000b6  eb001005          ADD      r0,r0,r5,LSL #4
0000ba  6880              LDR      r0,[r0,#8]
0000bc  0c01              LSRS     r1,r0,#16
0000be  6b60              LDR      r0,[r4,#0x34]
0000c0  7581              STRB     r1,[r0,#0x16]
;;;1345     hcan->pRxMsg->Data[3] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 24);
0000c2  6820              LDR      r0,[r4,#0]
0000c4  f50070d8          ADD      r0,r0,#0x1b0
0000c8  eb001005          ADD      r0,r0,r5,LSL #4
0000cc  6880              LDR      r0,[r0,#8]
0000ce  0e00              LSRS     r0,r0,#24
0000d0  6b61              LDR      r1,[r4,#0x34]
0000d2  75c8              STRB     r0,[r1,#0x17]
;;;1346     hcan->pRxMsg->Data[4] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR;
0000d4  6820              LDR      r0,[r4,#0]
0000d6  f50070d8          ADD      r0,r0,#0x1b0
0000da  eb001005          ADD      r0,r0,r5,LSL #4
0000de  68c0              LDR      r0,[r0,#0xc]
0000e0  b2c1              UXTB     r1,r0
0000e2  6b60              LDR      r0,[r4,#0x34]
0000e4  7601              STRB     r1,[r0,#0x18]
;;;1347     hcan->pRxMsg->Data[5] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 8);
0000e6  6820              LDR      r0,[r4,#0]
0000e8  f50070d8          ADD      r0,r0,#0x1b0
0000ec  eb001005          ADD      r0,r0,r5,LSL #4
0000f0  68c0              LDR      r0,[r0,#0xc]
0000f2  0a01              LSRS     r1,r0,#8
0000f4  6b60              LDR      r0,[r4,#0x34]
0000f6  7641              STRB     r1,[r0,#0x19]
;;;1348     hcan->pRxMsg->Data[6] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 16);
0000f8  6820              LDR      r0,[r4,#0]
0000fa  f50070d8          ADD      r0,r0,#0x1b0
0000fe  eb001005          ADD      r0,r0,r5,LSL #4
000102  68c0              LDR      r0,[r0,#0xc]
000104  0c01              LSRS     r1,r0,#16
000106  6b60              LDR      r0,[r4,#0x34]
000108  7681              STRB     r1,[r0,#0x1a]
;;;1349     hcan->pRxMsg->Data[7] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 24);
00010a  6820              LDR      r0,[r4,#0]
00010c  f50070d8          ADD      r0,r0,#0x1b0
000110  eb001005          ADD      r0,r0,r5,LSL #4
000114  68c0              LDR      r0,[r0,#0xc]
000116  0e00              LSRS     r0,r0,#24
000118  6b61              LDR      r1,[r4,#0x34]
00011a  76c8              STRB     r0,[r1,#0x1b]
;;;1350     /* Release the FIFO */
;;;1351     /* Release FIFO0 */
;;;1352     if (FIFONumber == CAN_FIFO0)
00011c  b94d              CBNZ     r5,|L1.306|
;;;1353     {
;;;1354       __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
00011e  2020              MOVS     r0,#0x20
000120  6821              LDR      r1,[r4,#0]
000122  60c8              STR      r0,[r1,#0xc]
;;;1355       
;;;1356       /* Disable FIFO 0 message pending Interrupt */
;;;1357       __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP0);
000124  6820              LDR      r0,[r4,#0]
000126  6940              LDR      r0,[r0,#0x14]
000128  f0200002          BIC      r0,r0,#2
00012c  6821              LDR      r1,[r4,#0]
00012e  6148              STR      r0,[r1,#0x14]
000130  e008              B        |L1.324|
                  |L1.306|
;;;1358     }
;;;1359     /* Release FIFO1 */
;;;1360     else /* FIFONumber == CAN_FIFO1 */
;;;1361     {
;;;1362       __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
000132  2020              MOVS     r0,#0x20
000134  6821              LDR      r1,[r4,#0]
000136  6108              STR      r0,[r1,#0x10]
;;;1363       
;;;1364       /* Disable FIFO 1 message pending Interrupt */
;;;1365       __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP1);
000138  6820              LDR      r0,[r4,#0]
00013a  6940              LDR      r0,[r0,#0x14]
00013c  f0200010          BIC      r0,r0,#0x10
000140  6821              LDR      r1,[r4,#0]
000142  6148              STR      r0,[r1,#0x14]
                  |L1.324|
;;;1366     }
;;;1367     
;;;1368     if(hcan->State == HAL_CAN_STATE_BUSY_RX)
000144  f8940038          LDRB     r0,[r4,#0x38]
000148  2822              CMP      r0,#0x22
00014a  d105              BNE      |L1.344|
;;;1369     {   
;;;1370       /* Disable Error warning, Error passive, Bus-off, Last error code
;;;1371          and Error Interrupts */
;;;1372   	__HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
00014c  6820              LDR      r0,[r4,#0]
00014e  6940              LDR      r0,[r0,#0x14]
000150  f420400f          BIC      r0,r0,#0x8f00
000154  6821              LDR      r1,[r4,#0]
000156  6148              STR      r0,[r1,#0x14]
                  |L1.344|
;;;1373                                  CAN_IT_EPV |
;;;1374                                  CAN_IT_BOF |
;;;1375                                  CAN_IT_LEC |
;;;1376                                  CAN_IT_ERR);
;;;1377     }
;;;1378     
;;;1379     if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
000158  f8940038          LDRB     r0,[r4,#0x38]
00015c  2832              CMP      r0,#0x32
00015e  d103              BNE      |L1.360|
;;;1380     {
;;;1381       /* Disable CAN state */
;;;1382       hcan->State = HAL_CAN_STATE_BUSY_TX;
000160  2012              MOVS     r0,#0x12
000162  f8840038          STRB     r0,[r4,#0x38]
000166  e002              B        |L1.366|
                  |L1.360|
;;;1383     }
;;;1384     else
;;;1385     {
;;;1386       /* Change CAN state */
;;;1387       hcan->State = HAL_CAN_STATE_READY;
000168  2001              MOVS     r0,#1
00016a  f8840038          STRB     r0,[r4,#0x38]
                  |L1.366|
;;;1388     }
;;;1389   
;;;1390     /* Receive complete callback */ 
;;;1391     HAL_CAN_RxCpltCallback(hcan);
00016e  4620              MOV      r0,r4
000170  f7fffffe          BL       HAL_CAN_RxCpltCallback
;;;1392   
;;;1393     /* Return function status */
;;;1394     return HAL_OK;
000174  2000              MOVS     r0,#0
;;;1395   }
000176  bd70              POP      {r4-r6,pc}
;;;1396   
                          ENDP


                          AREA ||i.CAN_Transmit_IT||, CODE, READONLY, ALIGN=1

                  CAN_Transmit_IT PROC
;;;1281     */
;;;1282   static HAL_StatusTypeDef CAN_Transmit_IT(CAN_HandleTypeDef* hcan)
000000  b510              PUSH     {r4,lr}
;;;1283   {
000002  4604              MOV      r4,r0
;;;1284     /* Disable Transmit mailbox empty Interrupt */
;;;1285     __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
000004  6820              LDR      r0,[r4,#0]
000006  6940              LDR      r0,[r0,#0x14]
000008  f0200001          BIC      r0,r0,#1
00000c  6821              LDR      r1,[r4,#0]
00000e  6148              STR      r0,[r1,#0x14]
;;;1286     
;;;1287     if(hcan->State == HAL_CAN_STATE_BUSY_TX)
000010  f8940038          LDRB     r0,[r4,#0x38]
000014  2812              CMP      r0,#0x12
000016  d105              BNE      |L2.36|
;;;1288     {   
;;;1289       /* Disable Error warning, Error passive, Bus-off, Last error code
;;;1290          and Error Interrupts */	
;;;1291   	__HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
000018  6820              LDR      r0,[r4,#0]
00001a  6940              LDR      r0,[r0,#0x14]
00001c  f420400f          BIC      r0,r0,#0x8f00
000020  6821              LDR      r1,[r4,#0]
000022  6148              STR      r0,[r1,#0x14]
                  |L2.36|
;;;1292                                  CAN_IT_EPV |
;;;1293                                  CAN_IT_BOF |
;;;1294                                  CAN_IT_LEC |
;;;1295                                  CAN_IT_ERR );
;;;1296     }
;;;1297     
;;;1298     if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
000024  f8940038          LDRB     r0,[r4,#0x38]
000028  2832              CMP      r0,#0x32
00002a  d103              BNE      |L2.52|
;;;1299     {
;;;1300       /* Change CAN state */
;;;1301       hcan->State = HAL_CAN_STATE_BUSY_RX;
00002c  2022              MOVS     r0,#0x22
00002e  f8840038          STRB     r0,[r4,#0x38]
000032  e002              B        |L2.58|
                  |L2.52|
;;;1302     }
;;;1303     else
;;;1304     {
;;;1305       /* Change CAN state */
;;;1306       hcan->State = HAL_CAN_STATE_READY;
000034  2001              MOVS     r0,#1
000036  f8840038          STRB     r0,[r4,#0x38]
                  |L2.58|
;;;1307     }
;;;1308     
;;;1309     /* Transmission complete callback */ 
;;;1310     HAL_CAN_TxCpltCallback(hcan);
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       HAL_CAN_TxCpltCallback
;;;1311     
;;;1312     return HAL_OK;
000040  2000              MOVS     r0,#0
;;;1313   }
000042  bd10              POP      {r4,pc}
;;;1314   
                          ENDP


                          AREA ||i.HAL_CAN_ConfigFilter||, CODE, READONLY, ALIGN=2

                  HAL_CAN_ConfigFilter PROC
;;;353      */
;;;354    HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef* hcan, CAN_FilterConfTypeDef* sFilterConfig)
000000  b570              PUSH     {r4-r6,lr}
;;;355    {
000002  4604              MOV      r4,r0
000004  460a              MOV      r2,r1
;;;356      uint32_t filternbrbitpos = 0;
000006  2300              MOVS     r3,#0
;;;357      CAN_TypeDef *can_ip;
;;;358      
;;;359      /* Check the parameters */
;;;360      assert_param(IS_CAN_FILTER_NUMBER(sFilterConfig->FilterNumber));
;;;361      assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
;;;362      assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
;;;363      assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
;;;364      assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
;;;365      assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));
;;;366      
;;;367      filternbrbitpos = ((uint32_t)1) << sFilterConfig->FilterNumber;
000008  7d15              LDRB     r5,[r2,#0x14]
00000a  2001              MOVS     r0,#1
00000c  fa00f305          LSL      r3,r0,r5
;;;368    #if defined (CAN3)
;;;369      /* Check the CAN instance */
;;;370      if(hcan->Instance == CAN3)
000010  4d3f              LDR      r5,|L3.272|
000012  6820              LDR      r0,[r4,#0]
000014  42a8              CMP      r0,r5
000016  d101              BNE      |L3.28|
;;;371      {	
;;;372        can_ip = CAN3;
000018  4601              MOV      r1,r0
00001a  e000              B        |L3.30|
                  |L3.28|
;;;373      }
;;;374      else
;;;375      {
;;;376        can_ip = CAN1;    
00001c  493d              LDR      r1,|L3.276|
                  |L3.30|
;;;377      }
;;;378    #else
;;;379      can_ip = CAN1;
;;;380    #endif
;;;381    
;;;382      /* Initialisation mode for the filter */
;;;383      can_ip->FMR |= (uint32_t)CAN_FMR_FINIT;
00001e  f5017100          ADD      r1,r1,#0x200
000022  6808              LDR      r0,[r1,#0]
000024  f0400001          ORR      r0,r0,#1
000028  6008              STR      r0,[r1,#0]
;;;384      
;;;385      /* Select the start slave bank */
;;;386      can_ip->FMR &= ~((uint32_t)CAN_FMR_CAN2SB);
00002a  6808              LDR      r0,[r1,#0]
00002c  f420507c          BIC      r0,r0,#0x3f00
000030  6008              STR      r0,[r1,#0]
;;;387      can_ip->FMR |= (uint32_t)(sFilterConfig->BankNumber << 8);
000032  6808              LDR      r0,[r1,#0]
000034  6a55              LDR      r5,[r2,#0x24]
000036  ea402005          ORR      r0,r0,r5,LSL #8
00003a  6008              STR      r0,[r1,#0]
;;;388         
;;;389      /* Filter Deactivation */
;;;390      can_ip->FA1R &= ~(uint32_t)filternbrbitpos;
00003c  69c8              LDR      r0,[r1,#0x1c]
00003e  4398              BICS     r0,r0,r3
000040  61c8              STR      r0,[r1,#0x1c]
000042  f5a17100          SUB      r1,r1,#0x200
;;;391    
;;;392      /* Filter Scale */
;;;393      if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
000046  69d0              LDR      r0,[r2,#0x1c]
000048  b9c8              CBNZ     r0,|L3.126|
;;;394      {
;;;395        /* 16-bit scale for the filter */
;;;396        can_ip->FS1R &= ~(uint32_t)filternbrbitpos;
00004a  f8d1020c          LDR      r0,[r1,#0x20c]
00004e  4398              BICS     r0,r0,r3
000050  f8c1020c          STR      r0,[r1,#0x20c]
;;;397    
;;;398        /* First 16-bit identifier and First 16-bit mask */
;;;399        /* Or First 16-bit identifier and Second 16-bit identifier */
;;;400        can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
000054  8890              LDRH     r0,[r2,#4]
000056  b280              UXTH     r0,r0
000058  8995              LDRH     r5,[r2,#0xc]
00005a  ea404505          ORR      r5,r0,r5,LSL #16
00005e  f5017010          ADD      r0,r1,#0x240
000062  6956              LDR      r6,[r2,#0x14]
000064  f8405036          STR      r5,[r0,r6,LSL #3]
;;;401         ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
;;;402          (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
;;;403    
;;;404        /* Second 16-bit identifier and Second 16-bit mask */
;;;405        /* Or Third 16-bit identifier and Fourth 16-bit identifier */
;;;406        can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
000068  8810              LDRH     r0,[r2,#0]
00006a  b280              UXTH     r0,r0
00006c  8915              LDRH     r5,[r2,#8]
00006e  ea404505          ORR      r5,r0,r5,LSL #16
000072  f5017010          ADD      r0,r1,#0x240
000076  6956              LDR      r6,[r2,#0x14]
000078  eb0000c6          ADD      r0,r0,r6,LSL #3
00007c  6045              STR      r5,[r0,#4]
                  |L3.126|
;;;407         ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
;;;408          (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh);
;;;409      }
;;;410    
;;;411      if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
00007e  69d0              LDR      r0,[r2,#0x1c]
000080  2801              CMP      r0,#1
000082  d119              BNE      |L3.184|
;;;412      {
;;;413        /* 32-bit scale for the filter */
;;;414        can_ip->FS1R |= filternbrbitpos;
000084  f8d1020c          LDR      r0,[r1,#0x20c]
000088  4318              ORRS     r0,r0,r3
00008a  f8c1020c          STR      r0,[r1,#0x20c]
;;;415        
;;;416        /* 32-bit identifier or First 32-bit identifier */
;;;417        can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
00008e  8890              LDRH     r0,[r2,#4]
000090  b280              UXTH     r0,r0
000092  8815              LDRH     r5,[r2,#0]
000094  ea404505          ORR      r5,r0,r5,LSL #16
000098  f5017010          ADD      r0,r1,#0x240
00009c  6956              LDR      r6,[r2,#0x14]
00009e  f8405036          STR      r5,[r0,r6,LSL #3]
;;;418         ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
;;;419          (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
;;;420        
;;;421        /* 32-bit mask or Second 32-bit identifier */
;;;422        can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
0000a2  8990              LDRH     r0,[r2,#0xc]
0000a4  b280              UXTH     r0,r0
0000a6  8915              LDRH     r5,[r2,#8]
0000a8  ea404505          ORR      r5,r0,r5,LSL #16
0000ac  f5017010          ADD      r0,r1,#0x240
0000b0  6956              LDR      r6,[r2,#0x14]
0000b2  eb0000c6          ADD      r0,r0,r6,LSL #3
0000b6  6045              STR      r5,[r0,#4]
                  |L3.184|
;;;423         ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
;;;424          (0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow);
;;;425      }
;;;426    
;;;427      /* Filter Mode */
;;;428      if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
0000b8  6990              LDR      r0,[r2,#0x18]
0000ba  b928              CBNZ     r0,|L3.200|
;;;429      {
;;;430        /*Id/Mask mode for the filter*/
;;;431        can_ip->FM1R &= ~(uint32_t)filternbrbitpos;
0000bc  f8d10204          LDR      r0,[r1,#0x204]
0000c0  4398              BICS     r0,r0,r3
0000c2  f8c10204          STR      r0,[r1,#0x204]
0000c6  e004              B        |L3.210|
                  |L3.200|
;;;432      }
;;;433      else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
;;;434      {
;;;435        /*Identifier list mode for the filter*/
;;;436        can_ip->FM1R |= (uint32_t)filternbrbitpos;
0000c8  f8d10204          LDR      r0,[r1,#0x204]
0000cc  4318              ORRS     r0,r0,r3
0000ce  f8c10204          STR      r0,[r1,#0x204]
                  |L3.210|
;;;437      }
;;;438    
;;;439      /* Filter FIFO assignment */
;;;440      if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
0000d2  6910              LDR      r0,[r2,#0x10]
0000d4  b920              CBNZ     r0,|L3.224|
;;;441      {
;;;442        /* FIFO 0 assignation for the filter */
;;;443        can_ip->FFA1R &= ~(uint32_t)filternbrbitpos;
0000d6  f8d10214          LDR      r0,[r1,#0x214]
0000da  4398              BICS     r0,r0,r3
0000dc  f8c10214          STR      r0,[r1,#0x214]
                  |L3.224|
;;;444      }
;;;445    
;;;446      if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO1)
0000e0  6910              LDR      r0,[r2,#0x10]
0000e2  2801              CMP      r0,#1
0000e4  d104              BNE      |L3.240|
;;;447      {
;;;448        /* FIFO 1 assignation for the filter */
;;;449        can_ip->FFA1R |= (uint32_t)filternbrbitpos;
0000e6  f8d10214          LDR      r0,[r1,#0x214]
0000ea  4318              ORRS     r0,r0,r3
0000ec  f8c10214          STR      r0,[r1,#0x214]
                  |L3.240|
;;;450      }
;;;451      
;;;452      /* Filter activation */
;;;453      if (sFilterConfig->FilterActivation == ENABLE)
0000f0  6a10              LDR      r0,[r2,#0x20]
0000f2  2801              CMP      r0,#1
0000f4  d104              BNE      |L3.256|
;;;454      {
;;;455        can_ip->FA1R |= filternbrbitpos;
0000f6  f8d1021c          LDR      r0,[r1,#0x21c]
0000fa  4318              ORRS     r0,r0,r3
0000fc  f8c1021c          STR      r0,[r1,#0x21c]
                  |L3.256|
;;;456      }
;;;457    
;;;458      /* Leave the initialisation mode for the filter */
;;;459      can_ip->FMR &= ~((uint32_t)CAN_FMR_FINIT);
000100  f8d10200          LDR      r0,[r1,#0x200]
000104  f0200001          BIC      r0,r0,#1
000108  f8c10200          STR      r0,[r1,#0x200]
;;;460       
;;;461      /* Return function status */
;;;462      return HAL_OK;
00010c  2000              MOVS     r0,#0
;;;463    }
00010e  bd70              POP      {r4-r6,pc}
;;;464    
                          ENDP

                  |L3.272|
                          DCD      0x40003400
                  |L3.276|
                          DCD      0x40006400

                          AREA ||i.HAL_CAN_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_CAN_DeInit PROC
;;;470      */
;;;471    HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef* hcan)
000000  b510              PUSH     {r4,lr}
;;;472    {
000002  4604              MOV      r4,r0
;;;473      /* Check CAN handle */
;;;474      if(hcan == NULL)
000004  b90c              CBNZ     r4,|L4.10|
;;;475      {
;;;476         return HAL_ERROR;
000006  2001              MOVS     r0,#1
                  |L4.8|
;;;477      }
;;;478      
;;;479      /* Check the parameters */
;;;480      assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
;;;481      
;;;482      /* Change CAN state */
;;;483      hcan->State = HAL_CAN_STATE_BUSY;
;;;484      
;;;485      /* DeInit the low level hardware */
;;;486      HAL_CAN_MspDeInit(hcan);
;;;487      
;;;488      /* Change CAN state */
;;;489      hcan->State = HAL_CAN_STATE_RESET;
;;;490    
;;;491      /* Release Lock */
;;;492      __HAL_UNLOCK(hcan);
;;;493    
;;;494      /* Return function status */
;;;495      return HAL_OK;
;;;496    }
000008  bd10              POP      {r4,pc}
                  |L4.10|
00000a  2002              MOVS     r0,#2                 ;483
00000c  f8840038          STRB     r0,[r4,#0x38]         ;483
000010  4620              MOV      r0,r4                 ;486
000012  f7fffffe          BL       HAL_CAN_MspDeInit
000016  2000              MOVS     r0,#0                 ;489
000018  f8840038          STRB     r0,[r4,#0x38]         ;489
00001c  bf00              NOP                            ;492
00001e  f8840039          STRB     r0,[r4,#0x39]         ;492
000022  bf00              NOP                            ;492
000024  bf00              NOP                            ;495
000026  e7ef              B        |L4.8|
;;;497    
                          ENDP


                          AREA ||i.HAL_CAN_ErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_CAN_ErrorCallback PROC
;;;1220     */
;;;1221   __weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
000000  4770              BX       lr
;;;1222   {
;;;1223     /* Prevent unused argument(s) compilation warning */
;;;1224     UNUSED(hcan);
;;;1225     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1226               the HAL_CAN_ErrorCallback could be implemented in the user file
;;;1227      */
;;;1228   }
;;;1229   
                          ENDP


                          AREA ||i.HAL_CAN_GetError||, CODE, READONLY, ALIGN=1

                  HAL_CAN_GetError PROC
;;;1267     */
;;;1268   uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
000000  4601              MOV      r1,r0
;;;1269   {
;;;1270     return hcan->ErrorCode;
000002  6bc8              LDR      r0,[r1,#0x3c]
;;;1271   }
000004  4770              BX       lr
;;;1272   
                          ENDP


                          AREA ||i.HAL_CAN_GetState||, CODE, READONLY, ALIGN=1

                  HAL_CAN_GetState PROC
;;;1255     */
;;;1256   HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef* hcan)
000000  4601              MOV      r1,r0
;;;1257   {
;;;1258     /* Return CAN state */
;;;1259     return hcan->State;
000002  f8910038          LDRB     r0,[r1,#0x38]
;;;1260   }
000006  4770              BX       lr
;;;1261   
                          ENDP


                          AREA ||i.HAL_CAN_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_CAN_IRQHandler PROC
;;;1066     */
;;;1067   void HAL_CAN_IRQHandler(CAN_HandleTypeDef* hcan)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1068   {
000004  4604              MOV      r4,r0
;;;1069     uint32_t tmp1 = 0, tmp2 = 0, tmp3 = 0;
000006  2500              MOVS     r5,#0
000008  2600              MOVS     r6,#0
00000a  2700              MOVS     r7,#0
;;;1070     
;;;1071     /* Check End of transmission flag */
;;;1072     if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
00000c  6820              LDR      r0,[r4,#0]
00000e  6940              LDR      r0,[r0,#0x14]
000010  f0000001          AND      r0,r0,#1
000014  b318              CBZ      r0,|L8.94|
;;;1073     {
;;;1074       tmp1 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0);
000016  6820              LDR      r0,[r4,#0]
000018  6880              LDR      r0,[r0,#8]
00001a  4969              LDR      r1,|L8.448|
00001c  4008              ANDS     r0,r0,r1
00001e  4288              CMP      r0,r1
000020  d101              BNE      |L8.38|
000022  2001              MOVS     r0,#1
000024  e000              B        |L8.40|
                  |L8.38|
000026  2000              MOVS     r0,#0
                  |L8.40|
000028  4605              MOV      r5,r0
;;;1075       tmp2 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1);
00002a  6820              LDR      r0,[r4,#0]
00002c  6880              LDR      r0,[r0,#8]
00002e  4965              LDR      r1,|L8.452|
000030  4008              ANDS     r0,r0,r1
000032  4288              CMP      r0,r1
000034  d101              BNE      |L8.58|
000036  2001              MOVS     r0,#1
000038  e000              B        |L8.60|
                  |L8.58|
00003a  2000              MOVS     r0,#0
                  |L8.60|
00003c  4606              MOV      r6,r0
;;;1076       tmp3 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2);
00003e  6820              LDR      r0,[r4,#0]
000040  6880              LDR      r0,[r0,#8]
000042  4961              LDR      r1,|L8.456|
000044  4008              ANDS     r0,r0,r1
000046  4288              CMP      r0,r1
000048  d101              BNE      |L8.78|
00004a  2001              MOVS     r0,#1
00004c  e000              B        |L8.80|
                  |L8.78|
00004e  2000              MOVS     r0,#0
                  |L8.80|
000050  4607              MOV      r7,r0
;;;1077       if(tmp1 || tmp2 || tmp3)  
000052  b90d              CBNZ     r5,|L8.88|
000054  b906              CBNZ     r6,|L8.88|
000056  b117              CBZ      r7,|L8.94|
                  |L8.88|
;;;1078       {
;;;1079         /* Call transmit function */
;;;1080         CAN_Transmit_IT(hcan);
000058  4620              MOV      r0,r4
00005a  f7fffffe          BL       CAN_Transmit_IT
                  |L8.94|
;;;1081       }
;;;1082     }
;;;1083     
;;;1084     tmp1 = __HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0);
00005e  6820              LDR      r0,[r4,#0]
000060  68c0              LDR      r0,[r0,#0xc]
000062  f0000503          AND      r5,r0,#3
;;;1085     tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0);
000066  6820              LDR      r0,[r4,#0]
000068  6940              LDR      r0,[r0,#0x14]
00006a  f3c00640          UBFX     r6,r0,#1,#1
;;;1086     /* Check End of reception flag for FIFO0 */
;;;1087     if((tmp1 != 0) && tmp2)
00006e  b125              CBZ      r5,|L8.122|
000070  b11e              CBZ      r6,|L8.122|
;;;1088     {
;;;1089       /* Call receive function */
;;;1090       CAN_Receive_IT(hcan, CAN_FIFO0);
000072  2100              MOVS     r1,#0
000074  4620              MOV      r0,r4
000076  f7fffffe          BL       CAN_Receive_IT
                  |L8.122|
;;;1091     }
;;;1092     
;;;1093     tmp1 = __HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1);
00007a  6820              LDR      r0,[r4,#0]
00007c  6900              LDR      r0,[r0,#0x10]
00007e  f0000503          AND      r5,r0,#3
;;;1094     tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1);
000082  6820              LDR      r0,[r4,#0]
000084  6940              LDR      r0,[r0,#0x14]
000086  f3c01600          UBFX     r6,r0,#4,#1
;;;1095     /* Check End of reception flag for FIFO1 */
;;;1096     if((tmp1 != 0) && tmp2)
00008a  b125              CBZ      r5,|L8.150|
00008c  b11e              CBZ      r6,|L8.150|
;;;1097     {
;;;1098       /* Call receive function */
;;;1099       CAN_Receive_IT(hcan, CAN_FIFO1);
00008e  2101              MOVS     r1,#1
000090  4620              MOV      r0,r4
000092  f7fffffe          BL       CAN_Receive_IT
                  |L8.150|
;;;1100     }
;;;1101     
;;;1102     tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG);
000096  6820              LDR      r0,[r4,#0]
000098  6980              LDR      r0,[r0,#0x18]
00009a  f0000501          AND      r5,r0,#1
;;;1103     tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG);
00009e  6820              LDR      r0,[r4,#0]
0000a0  6940              LDR      r0,[r0,#0x14]
0000a2  f3c02600          UBFX     r6,r0,#8,#1
;;;1104     tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
0000a6  6820              LDR      r0,[r4,#0]
0000a8  6940              LDR      r0,[r0,#0x14]
0000aa  f3c037c0          UBFX     r7,r0,#15,#1
;;;1105     /* Check Error Warning Flag */
;;;1106     if(tmp1 && tmp2 && tmp3)
0000ae  b12d              CBZ      r5,|L8.188|
0000b0  b126              CBZ      r6,|L8.188|
0000b2  b11f              CBZ      r7,|L8.188|
;;;1107     {
;;;1108       /* Set CAN error code to EWG error */
;;;1109       hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
0000b4  6be0              LDR      r0,[r4,#0x3c]
0000b6  f0400001          ORR      r0,r0,#1
0000ba  63e0              STR      r0,[r4,#0x3c]
                  |L8.188|
;;;1110     }
;;;1111     
;;;1112     tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV);
0000bc  6820              LDR      r0,[r4,#0]
0000be  6980              LDR      r0,[r0,#0x18]
0000c0  f3c00540          UBFX     r5,r0,#1,#1
;;;1113     tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV);
0000c4  6820              LDR      r0,[r4,#0]
0000c6  6940              LDR      r0,[r0,#0x14]
0000c8  f3c02640          UBFX     r6,r0,#9,#1
;;;1114     tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR); 
0000cc  6820              LDR      r0,[r4,#0]
0000ce  6940              LDR      r0,[r0,#0x14]
0000d0  f3c037c0          UBFX     r7,r0,#15,#1
;;;1115     /* Check Error Passive Flag */
;;;1116     if(tmp1 && tmp2 && tmp3)
0000d4  b12d              CBZ      r5,|L8.226|
0000d6  b126              CBZ      r6,|L8.226|
0000d8  b11f              CBZ      r7,|L8.226|
;;;1117     {
;;;1118       /* Set CAN error code to EPV error */
;;;1119       hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
0000da  6be0              LDR      r0,[r4,#0x3c]
0000dc  f0400002          ORR      r0,r0,#2
0000e0  63e0              STR      r0,[r4,#0x3c]
                  |L8.226|
;;;1120     }
;;;1121     
;;;1122     tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF);
0000e2  6820              LDR      r0,[r4,#0]
0000e4  6980              LDR      r0,[r0,#0x18]
0000e6  f3c00580          UBFX     r5,r0,#2,#1
;;;1123     tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF);
0000ea  6820              LDR      r0,[r4,#0]
0000ec  6940              LDR      r0,[r0,#0x14]
0000ee  f3c02680          UBFX     r6,r0,#10,#1
;;;1124     tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);  
0000f2  6820              LDR      r0,[r4,#0]
0000f4  6940              LDR      r0,[r0,#0x14]
0000f6  f3c037c0          UBFX     r7,r0,#15,#1
;;;1125     /* Check Bus-Off Flag */
;;;1126     if(tmp1 && tmp2 && tmp3)
0000fa  b12d              CBZ      r5,|L8.264|
0000fc  b126              CBZ      r6,|L8.264|
0000fe  b11f              CBZ      r7,|L8.264|
;;;1127     {
;;;1128       /* Set CAN error code to BOF error */
;;;1129       hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
000100  6be0              LDR      r0,[r4,#0x3c]
000102  f0400004          ORR      r0,r0,#4
000106  63e0              STR      r0,[r4,#0x3c]
                  |L8.264|
;;;1130     }
;;;1131     
;;;1132     tmp1 = HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC);
000108  6820              LDR      r0,[r4,#0]
00010a  6980              LDR      r0,[r0,#0x18]
00010c  f0000070          AND      r0,r0,#0x70
000110  b908              CBNZ     r0,|L8.278|
000112  2001              MOVS     r0,#1
000114  e000              B        |L8.280|
                  |L8.278|
000116  2000              MOVS     r0,#0
                  |L8.280|
000118  4605              MOV      r5,r0
;;;1133     tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC);
00011a  6820              LDR      r0,[r4,#0]
00011c  6940              LDR      r0,[r0,#0x14]
00011e  f3c026c0          UBFX     r6,r0,#11,#1
;;;1134     tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
000122  6820              LDR      r0,[r4,#0]
000124  6940              LDR      r0,[r0,#0x14]
000126  f3c037c0          UBFX     r7,r0,#15,#1
;;;1135     /* Check Last error code Flag */
;;;1136     if((!tmp1) && tmp2 && tmp3)
00012a  bb95              CBNZ     r5,|L8.402|
00012c  b38e              CBZ      r6,|L8.402|
00012e  b387              CBZ      r7,|L8.402|
;;;1137     {
;;;1138       tmp1 = (hcan->Instance->ESR) & CAN_ESR_LEC;
000130  6820              LDR      r0,[r4,#0]
000132  6980              LDR      r0,[r0,#0x18]
000134  f0000570          AND      r5,r0,#0x70
;;;1139       switch(tmp1)
000138  2d40              CMP      r5,#0x40
00013a  d01b              BEQ      |L8.372|
00013c  dc06              BGT      |L8.332|
00013e  2d10              CMP      r5,#0x10
000140  d009              BEQ      |L8.342|
000142  2d20              CMP      r5,#0x20
000144  d00c              BEQ      |L8.352|
000146  2d30              CMP      r5,#0x30
000148  d124              BNE      |L8.404|
00014a  e00e              B        |L8.362|
                  |L8.332|
00014c  2d50              CMP      r5,#0x50
00014e  d016              BEQ      |L8.382|
000150  2d60              CMP      r5,#0x60
000152  d11f              BNE      |L8.404|
000154  e018              B        |L8.392|
                  |L8.342|
;;;1140       {
;;;1141         case(CAN_ESR_LEC_0):
;;;1142             /* Set CAN error code to STF error */
;;;1143             hcan->ErrorCode |= HAL_CAN_ERROR_STF;
000156  6be0              LDR      r0,[r4,#0x3c]
000158  f0400008          ORR      r0,r0,#8
00015c  63e0              STR      r0,[r4,#0x3c]
;;;1144             break;
00015e  e01a              B        |L8.406|
                  |L8.352|
;;;1145         case(CAN_ESR_LEC_1):
;;;1146             /* Set CAN error code to FOR error */
;;;1147             hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
000160  6be0              LDR      r0,[r4,#0x3c]
000162  f0400010          ORR      r0,r0,#0x10
000166  63e0              STR      r0,[r4,#0x3c]
;;;1148             break;
000168  e015              B        |L8.406|
                  |L8.362|
;;;1149         case(CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
;;;1150             /* Set CAN error code to ACK error */
;;;1151             hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
00016a  6be0              LDR      r0,[r4,#0x3c]
00016c  f0400020          ORR      r0,r0,#0x20
000170  63e0              STR      r0,[r4,#0x3c]
;;;1152             break;
000172  e010              B        |L8.406|
                  |L8.372|
;;;1153         case(CAN_ESR_LEC_2):
;;;1154             /* Set CAN error code to BR error */
;;;1155             hcan->ErrorCode |= HAL_CAN_ERROR_BR;
000174  6be0              LDR      r0,[r4,#0x3c]
000176  f0400040          ORR      r0,r0,#0x40
00017a  63e0              STR      r0,[r4,#0x3c]
;;;1156             break;
00017c  e00b              B        |L8.406|
                  |L8.382|
;;;1157         case(CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
;;;1158             /* Set CAN error code to BD error */
;;;1159             hcan->ErrorCode |= HAL_CAN_ERROR_BD;
00017e  6be0              LDR      r0,[r4,#0x3c]
000180  f0400080          ORR      r0,r0,#0x80
000184  63e0              STR      r0,[r4,#0x3c]
;;;1160             break;
000186  e006              B        |L8.406|
                  |L8.392|
;;;1161         case(CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
;;;1162             /* Set CAN error code to CRC error */
;;;1163             hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
000188  6be0              LDR      r0,[r4,#0x3c]
00018a  f4407080          ORR      r0,r0,#0x100
00018e  63e0              STR      r0,[r4,#0x3c]
;;;1164             break;
000190  e001              B        |L8.406|
                  |L8.402|
000192  e007              B        |L8.420|
                  |L8.404|
;;;1165         default:
;;;1166             break;
000194  bf00              NOP      
                  |L8.406|
000196  bf00              NOP                            ;1144
;;;1167       }
;;;1168   
;;;1169       /* Clear Last error code Flag */ 
;;;1170       hcan->Instance->ESR &= ~(CAN_ESR_LEC);
000198  6820              LDR      r0,[r4,#0]
00019a  6980              LDR      r0,[r0,#0x18]
00019c  f0200070          BIC      r0,r0,#0x70
0001a0  6821              LDR      r1,[r4,#0]
0001a2  6188              STR      r0,[r1,#0x18]
                  |L8.420|
;;;1171     }
;;;1172   
;;;1173     /* Call the Error call Back in case of Errors */
;;;1174     if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
0001a4  6be0              LDR      r0,[r4,#0x3c]
0001a6  b140              CBZ      r0,|L8.442|
;;;1175     {
;;;1176       /* Clear ERRI Flag */ 
;;;1177       hcan->Instance->MSR = CAN_MSR_ERRI; 
0001a8  2004              MOVS     r0,#4
0001aa  6821              LDR      r1,[r4,#0]
0001ac  6048              STR      r0,[r1,#4]
;;;1178       /* Set the CAN state ready to be able to start again the process */
;;;1179       hcan->State = HAL_CAN_STATE_READY;
0001ae  2001              MOVS     r0,#1
0001b0  f8840038          STRB     r0,[r4,#0x38]
;;;1180       /* Call Error callback function */
;;;1181       HAL_CAN_ErrorCallback(hcan);
0001b4  4620              MOV      r0,r4
0001b6  f7fffffe          BL       HAL_CAN_ErrorCallback
                  |L8.442|
;;;1182     }  
;;;1183   }
0001ba  e8bd81f0          POP      {r4-r8,pc}
;;;1184   
                          ENDP

0001be  0000              DCW      0x0000
                  |L8.448|
                          DCD      0x04000003
                  |L8.452|
                          DCD      0x08000300
                  |L8.456|
                          DCD      0x10030000

                          AREA ||i.HAL_CAN_Init||, CODE, READONLY, ALIGN=1

                  HAL_CAN_Init PROC
;;;170      */
;;;171    HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
000000  b570              PUSH     {r4-r6,lr}
;;;172    {
000002  4604              MOV      r4,r0
;;;173      uint32_t InitStatus = CAN_INITSTATUS_FAILED;
000004  2600              MOVS     r6,#0
;;;174      uint32_t tickstart = 0;
000006  2500              MOVS     r5,#0
;;;175      
;;;176      /* Check CAN handle */
;;;177      if(hcan == NULL)
000008  b90c              CBNZ     r4,|L9.14|
;;;178      {
;;;179         return HAL_ERROR;
00000a  2001              MOVS     r0,#1
                  |L9.12|
;;;180      }
;;;181      
;;;182      /* Check the parameters */
;;;183      assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
;;;184      assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TTCM));
;;;185      assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ABOM));
;;;186      assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AWUM));
;;;187      assert_param(IS_FUNCTIONAL_STATE(hcan->Init.NART));
;;;188      assert_param(IS_FUNCTIONAL_STATE(hcan->Init.RFLM));
;;;189      assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TXFP));
;;;190      assert_param(IS_CAN_MODE(hcan->Init.Mode));
;;;191      assert_param(IS_CAN_SJW(hcan->Init.SJW));
;;;192      assert_param(IS_CAN_BS1(hcan->Init.BS1));
;;;193      assert_param(IS_CAN_BS2(hcan->Init.BS2));
;;;194      assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
;;;195      
;;;196    
;;;197      if(hcan->State == HAL_CAN_STATE_RESET)
;;;198      {
;;;199        /* Allocate lock resource and initialize it */
;;;200        hcan->Lock = HAL_UNLOCKED;
;;;201        /* Init the low level hardware */
;;;202        HAL_CAN_MspInit(hcan);
;;;203      }
;;;204      
;;;205      /* Initialize the CAN state*/
;;;206      hcan->State = HAL_CAN_STATE_BUSY;
;;;207      
;;;208      /* Exit from sleep mode */
;;;209      hcan->Instance->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
;;;210    
;;;211      /* Request initialisation */
;;;212      hcan->Instance->MCR |= CAN_MCR_INRQ ;
;;;213      
;;;214      /* Get tick */
;;;215      tickstart = HAL_GetTick();
;;;216    
;;;217      /* Wait the acknowledge */
;;;218      while((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
;;;219      {
;;;220        if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
;;;221        {
;;;222          hcan->State= HAL_CAN_STATE_TIMEOUT;
;;;223          /* Process unlocked */
;;;224          __HAL_UNLOCK(hcan);
;;;225          return HAL_TIMEOUT;
;;;226        }
;;;227      }
;;;228    
;;;229      /* Check acknowledge */
;;;230      if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
;;;231      {
;;;232        /* Set the time triggered communication mode */
;;;233        if (hcan->Init.TTCM == ENABLE)
;;;234        {
;;;235          hcan->Instance->MCR |= CAN_MCR_TTCM;
;;;236        }
;;;237        else
;;;238        {
;;;239          hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TTCM;
;;;240        }
;;;241    
;;;242        /* Set the automatic bus-off management */
;;;243        if (hcan->Init.ABOM == ENABLE)
;;;244        {
;;;245          hcan->Instance->MCR |= CAN_MCR_ABOM;
;;;246        }
;;;247        else
;;;248        {
;;;249          hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_ABOM;
;;;250        }
;;;251    
;;;252        /* Set the automatic wake-up mode */
;;;253        if (hcan->Init.AWUM == ENABLE)
;;;254        {
;;;255          hcan->Instance->MCR |= CAN_MCR_AWUM;
;;;256        }
;;;257        else
;;;258        {
;;;259          hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_AWUM;
;;;260        }
;;;261    
;;;262        /* Set the no automatic retransmission */
;;;263        if (hcan->Init.NART == ENABLE)
;;;264        {
;;;265          hcan->Instance->MCR |= CAN_MCR_NART;
;;;266        }
;;;267        else
;;;268        {
;;;269          hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_NART;
;;;270        }
;;;271    
;;;272        /* Set the receive FIFO locked mode */
;;;273        if (hcan->Init.RFLM == ENABLE)
;;;274        {
;;;275          hcan->Instance->MCR |= CAN_MCR_RFLM;
;;;276        }
;;;277        else
;;;278        {
;;;279          hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_RFLM;
;;;280        }
;;;281    
;;;282        /* Set the transmit FIFO priority */
;;;283        if (hcan->Init.TXFP == ENABLE)
;;;284        {
;;;285          hcan->Instance->MCR |= CAN_MCR_TXFP;
;;;286        }
;;;287        else
;;;288        {
;;;289          hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TXFP;
;;;290        }
;;;291    
;;;292        /* Set the bit timing register */
;;;293        hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
;;;294                    ((uint32_t)hcan->Init.SJW) | \
;;;295                    ((uint32_t)hcan->Init.BS1) | \
;;;296                    ((uint32_t)hcan->Init.BS2) | \
;;;297                    ((uint32_t)hcan->Init.Prescaler - 1);
;;;298    
;;;299        /* Request leave initialisation */
;;;300        hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_INRQ;
;;;301    
;;;302        /* Get tick */
;;;303        tickstart = HAL_GetTick();
;;;304    
;;;305        /* Wait the acknowledge */
;;;306        while((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
;;;307        {
;;;308          if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
;;;309          {
;;;310            hcan->State= HAL_CAN_STATE_TIMEOUT;
;;;311            /* Process unlocked */
;;;312            __HAL_UNLOCK(hcan);
;;;313            return HAL_TIMEOUT;
;;;314          }
;;;315        }
;;;316    
;;;317        /* Check acknowledged */
;;;318        if ((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
;;;319        {
;;;320          InitStatus = CAN_INITSTATUS_SUCCESS;
;;;321        }
;;;322      }
;;;323     
;;;324      if(InitStatus == CAN_INITSTATUS_SUCCESS)
;;;325      {
;;;326        /* Set CAN error code to none */
;;;327        hcan->ErrorCode = HAL_CAN_ERROR_NONE;
;;;328        
;;;329        /* Initialize the CAN state */
;;;330        hcan->State = HAL_CAN_STATE_READY;
;;;331      
;;;332        /* Return function status */
;;;333        return HAL_OK;
;;;334      }
;;;335      else
;;;336      {
;;;337        /* Initialize the CAN state */
;;;338        hcan->State = HAL_CAN_STATE_ERROR;
;;;339        
;;;340        /* Return function status */
;;;341        return HAL_ERROR;
;;;342      }
;;;343    }
00000c  bd70              POP      {r4-r6,pc}
                  |L9.14|
00000e  f8940038          LDRB     r0,[r4,#0x38]         ;197
000012  b928              CBNZ     r0,|L9.32|
000014  2000              MOVS     r0,#0                 ;200
000016  f8840039          STRB     r0,[r4,#0x39]         ;200
00001a  4620              MOV      r0,r4                 ;202
00001c  f7fffffe          BL       HAL_CAN_MspInit
                  |L9.32|
000020  2002              MOVS     r0,#2                 ;206
000022  f8840038          STRB     r0,[r4,#0x38]         ;206
000026  6820              LDR      r0,[r4,#0]            ;209
000028  6800              LDR      r0,[r0,#0]            ;209
00002a  f0200002          BIC      r0,r0,#2              ;209
00002e  6821              LDR      r1,[r4,#0]            ;209
000030  6008              STR      r0,[r1,#0]            ;209
000032  6820              LDR      r0,[r4,#0]            ;212
000034  6800              LDR      r0,[r0,#0]            ;212
000036  f0400001          ORR      r0,r0,#1              ;212
00003a  6821              LDR      r1,[r4,#0]            ;212
00003c  6008              STR      r0,[r1,#0]            ;212
00003e  f7fffffe          BL       HAL_GetTick
000042  4605              MOV      r5,r0                 ;215
000044  e00e              B        |L9.100|
                  |L9.70|
000046  f7fffffe          BL       HAL_GetTick
00004a  1b40              SUBS     r0,r0,r5              ;220
00004c  280a              CMP      r0,#0xa               ;220
00004e  d909              BLS      |L9.100|
000050  2003              MOVS     r0,#3                 ;222
000052  f8840038          STRB     r0,[r4,#0x38]         ;222
000056  bf00              NOP                            ;224
000058  2000              MOVS     r0,#0                 ;224
00005a  f8840039          STRB     r0,[r4,#0x39]         ;224
00005e  bf00              NOP                            ;224
000060  2003              MOVS     r0,#3                 ;225
000062  e7d3              B        |L9.12|
                  |L9.100|
000064  6820              LDR      r0,[r4,#0]            ;218
000066  6840              LDR      r0,[r0,#4]            ;218
000068  f0000001          AND      r0,r0,#1              ;218
00006c  2800              CMP      r0,#0                 ;218
00006e  d0ea              BEQ      |L9.70|
000070  6820              LDR      r0,[r4,#0]            ;230
000072  6840              LDR      r0,[r0,#4]            ;230
000074  f0000001          AND      r0,r0,#1              ;230
000078  2800              CMP      r0,#0                 ;230
00007a  d075              BEQ      |L9.360|
00007c  69a0              LDR      r0,[r4,#0x18]         ;233
00007e  2801              CMP      r0,#1                 ;233
000080  d106              BNE      |L9.144|
000082  6820              LDR      r0,[r4,#0]            ;235
000084  6800              LDR      r0,[r0,#0]            ;235
000086  f0400080          ORR      r0,r0,#0x80           ;235
00008a  6821              LDR      r1,[r4,#0]            ;235
00008c  6008              STR      r0,[r1,#0]            ;235
00008e  e005              B        |L9.156|
                  |L9.144|
000090  6820              LDR      r0,[r4,#0]            ;239
000092  6800              LDR      r0,[r0,#0]            ;239
000094  f0200080          BIC      r0,r0,#0x80           ;239
000098  6821              LDR      r1,[r4,#0]            ;239
00009a  6008              STR      r0,[r1,#0]            ;239
                  |L9.156|
00009c  69e0              LDR      r0,[r4,#0x1c]         ;243
00009e  2801              CMP      r0,#1                 ;243
0000a0  d106              BNE      |L9.176|
0000a2  6820              LDR      r0,[r4,#0]            ;245
0000a4  6800              LDR      r0,[r0,#0]            ;245
0000a6  f0400040          ORR      r0,r0,#0x40           ;245
0000aa  6821              LDR      r1,[r4,#0]            ;245
0000ac  6008              STR      r0,[r1,#0]            ;245
0000ae  e005              B        |L9.188|
                  |L9.176|
0000b0  6820              LDR      r0,[r4,#0]            ;249
0000b2  6800              LDR      r0,[r0,#0]            ;249
0000b4  f0200040          BIC      r0,r0,#0x40           ;249
0000b8  6821              LDR      r1,[r4,#0]            ;249
0000ba  6008              STR      r0,[r1,#0]            ;249
                  |L9.188|
0000bc  6a20              LDR      r0,[r4,#0x20]         ;253
0000be  2801              CMP      r0,#1                 ;253
0000c0  d106              BNE      |L9.208|
0000c2  6820              LDR      r0,[r4,#0]            ;255
0000c4  6800              LDR      r0,[r0,#0]            ;255
0000c6  f0400020          ORR      r0,r0,#0x20           ;255
0000ca  6821              LDR      r1,[r4,#0]            ;255
0000cc  6008              STR      r0,[r1,#0]            ;255
0000ce  e005              B        |L9.220|
                  |L9.208|
0000d0  6820              LDR      r0,[r4,#0]            ;259
0000d2  6800              LDR      r0,[r0,#0]            ;259
0000d4  f0200020          BIC      r0,r0,#0x20           ;259
0000d8  6821              LDR      r1,[r4,#0]            ;259
0000da  6008              STR      r0,[r1,#0]            ;259
                  |L9.220|
0000dc  6a60              LDR      r0,[r4,#0x24]         ;263
0000de  2801              CMP      r0,#1                 ;263
0000e0  d106              BNE      |L9.240|
0000e2  6820              LDR      r0,[r4,#0]            ;265
0000e4  6800              LDR      r0,[r0,#0]            ;265
0000e6  f0400010          ORR      r0,r0,#0x10           ;265
0000ea  6821              LDR      r1,[r4,#0]            ;265
0000ec  6008              STR      r0,[r1,#0]            ;265
0000ee  e005              B        |L9.252|
                  |L9.240|
0000f0  6820              LDR      r0,[r4,#0]            ;269
0000f2  6800              LDR      r0,[r0,#0]            ;269
0000f4  f0200010          BIC      r0,r0,#0x10           ;269
0000f8  6821              LDR      r1,[r4,#0]            ;269
0000fa  6008              STR      r0,[r1,#0]            ;269
                  |L9.252|
0000fc  6aa0              LDR      r0,[r4,#0x28]         ;273
0000fe  2801              CMP      r0,#1                 ;273
000100  d106              BNE      |L9.272|
000102  6820              LDR      r0,[r4,#0]            ;275
000104  6800              LDR      r0,[r0,#0]            ;275
000106  f0400008          ORR      r0,r0,#8              ;275
00010a  6821              LDR      r1,[r4,#0]            ;275
00010c  6008              STR      r0,[r1,#0]            ;275
00010e  e005              B        |L9.284|
                  |L9.272|
000110  6820              LDR      r0,[r4,#0]            ;279
000112  6800              LDR      r0,[r0,#0]            ;279
000114  f0200008          BIC      r0,r0,#8              ;279
000118  6821              LDR      r1,[r4,#0]            ;279
00011a  6008              STR      r0,[r1,#0]            ;279
                  |L9.284|
00011c  6ae0              LDR      r0,[r4,#0x2c]         ;283
00011e  2801              CMP      r0,#1                 ;283
000120  d106              BNE      |L9.304|
000122  6820              LDR      r0,[r4,#0]            ;285
000124  6800              LDR      r0,[r0,#0]            ;285
000126  f0400004          ORR      r0,r0,#4              ;285
00012a  6821              LDR      r1,[r4,#0]            ;285
00012c  6008              STR      r0,[r1,#0]            ;285
00012e  e005              B        |L9.316|
                  |L9.304|
000130  6820              LDR      r0,[r4,#0]            ;289
000132  6800              LDR      r0,[r0,#0]            ;289
000134  f0200004          BIC      r0,r0,#4              ;289
000138  6821              LDR      r1,[r4,#0]            ;289
00013a  6008              STR      r0,[r1,#0]            ;289
                  |L9.316|
00013c  e9d40102          LDRD     r0,r1,[r4,#8]         ;293
000140  4308              ORRS     r0,r0,r1              ;293
000142  6921              LDR      r1,[r4,#0x10]         ;293
000144  4308              ORRS     r0,r0,r1              ;293
000146  6961              LDR      r1,[r4,#0x14]         ;293
000148  4308              ORRS     r0,r0,r1              ;293
00014a  6861              LDR      r1,[r4,#4]            ;293
00014c  1e49              SUBS     r1,r1,#1              ;293
00014e  4308              ORRS     r0,r0,r1              ;293
000150  6821              LDR      r1,[r4,#0]            ;293
000152  61c8              STR      r0,[r1,#0x1c]         ;293
000154  6820              LDR      r0,[r4,#0]            ;300
000156  6800              LDR      r0,[r0,#0]            ;300
000158  f0200001          BIC      r0,r0,#1              ;300
00015c  6821              LDR      r1,[r4,#0]            ;300
00015e  6008              STR      r0,[r1,#0]            ;300
000160  f7fffffe          BL       HAL_GetTick
000164  4605              MOV      r5,r0                 ;303
000166  e00f              B        |L9.392|
                  |L9.360|
000168  e01a              B        |L9.416|
                  |L9.362|
00016a  f7fffffe          BL       HAL_GetTick
00016e  1b40              SUBS     r0,r0,r5              ;308
000170  280a              CMP      r0,#0xa               ;308
000172  d909              BLS      |L9.392|
000174  2003              MOVS     r0,#3                 ;310
000176  f8840038          STRB     r0,[r4,#0x38]         ;310
00017a  bf00              NOP                            ;312
00017c  2000              MOVS     r0,#0                 ;312
00017e  f8840039          STRB     r0,[r4,#0x39]         ;312
000182  bf00              NOP                            ;312
000184  2003              MOVS     r0,#3                 ;313
000186  e741              B        |L9.12|
                  |L9.392|
000188  6820              LDR      r0,[r4,#0]            ;306
00018a  6840              LDR      r0,[r0,#4]            ;306
00018c  f0000001          AND      r0,r0,#1              ;306
000190  2800              CMP      r0,#0                 ;306
000192  d1ea              BNE      |L9.362|
000194  6820              LDR      r0,[r4,#0]            ;318
000196  6840              LDR      r0,[r0,#4]            ;318
000198  f0000001          AND      r0,r0,#1              ;318
00019c  b900              CBNZ     r0,|L9.416|
00019e  2601              MOVS     r6,#1                 ;320
                  |L9.416|
0001a0  2e01              CMP      r6,#1                 ;324
0001a2  d106              BNE      |L9.434|
0001a4  2000              MOVS     r0,#0                 ;327
0001a6  63e0              STR      r0,[r4,#0x3c]         ;327
0001a8  2001              MOVS     r0,#1                 ;330
0001aa  f8840038          STRB     r0,[r4,#0x38]         ;330
0001ae  2000              MOVS     r0,#0                 ;333
0001b0  e72c              B        |L9.12|
                  |L9.434|
0001b2  2004              MOVS     r0,#4                 ;338
0001b4  f8840038          STRB     r0,[r4,#0x38]         ;338
0001b8  2001              MOVS     r0,#1                 ;341
0001ba  e727              B        |L9.12|
;;;344    
                          ENDP


                          AREA ||i.HAL_CAN_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_CAN_MspDeInit PROC
;;;518      */
;;;519    __weak void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
000000  4770              BX       lr
;;;520    {
;;;521      /* Prevent unused argument(s) compilation warning */
;;;522      UNUSED(hcan);
;;;523      /* NOTE : This function Should not be modified, when the callback is needed,
;;;524                the HAL_CAN_MspDeInit could be implemented in the user file
;;;525       */ 
;;;526    }
;;;527    
                          ENDP


                          AREA ||i.HAL_CAN_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_CAN_MspInit PROC
;;;503      */
;;;504    __weak void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
000000  4770              BX       lr
;;;505    {
;;;506      /* Prevent unused argument(s) compilation warning */
;;;507      UNUSED(hcan);
;;;508      /* NOTE : This function Should not be modified, when the callback is needed,
;;;509                the HAL_CAN_MspInit could be implemented in the user file
;;;510       */ 
;;;511    }
;;;512    
                          ENDP


                          AREA ||i.HAL_CAN_Receive||, CODE, READONLY, ALIGN=1

                  HAL_CAN_Receive PROC
;;;791      */
;;;792    HAL_StatusTypeDef HAL_CAN_Receive(CAN_HandleTypeDef* hcan, uint8_t FIFONumber, uint32_t Timeout)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;793    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;794      uint32_t tickstart = 0;
00000a  2700              MOVS     r7,#0
;;;795       
;;;796      /* Check the parameters */
;;;797      assert_param(IS_CAN_FIFO(FIFONumber));
;;;798      
;;;799      /* Process locked */
;;;800      __HAL_LOCK(hcan);
00000c  bf00              NOP      
00000e  f8940039          LDRB     r0,[r4,#0x39]
000012  2801              CMP      r0,#1
000014  d102              BNE      |L12.28|
000016  2002              MOVS     r0,#2
                  |L12.24|
;;;801      
;;;802      if(hcan->State == HAL_CAN_STATE_BUSY_TX) 
;;;803      {
;;;804        /* Change CAN state */
;;;805        hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
;;;806      }
;;;807      else
;;;808      {
;;;809        /* Change CAN state */
;;;810        hcan->State = HAL_CAN_STATE_BUSY_RX;
;;;811      }
;;;812        
;;;813      /* Get tick */ 
;;;814      tickstart = HAL_GetTick();
;;;815      
;;;816      /* Check pending message */
;;;817      while(__HAL_CAN_MSG_PENDING(hcan, FIFONumber) == 0)
;;;818      {
;;;819        /* Check for the Timeout */
;;;820        if(Timeout != HAL_MAX_DELAY)
;;;821        {
;;;822          if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
;;;823          {
;;;824            hcan->State = HAL_CAN_STATE_TIMEOUT;
;;;825            /* Process unlocked */
;;;826            __HAL_UNLOCK(hcan);
;;;827            return HAL_TIMEOUT;
;;;828          }
;;;829        }
;;;830      }
;;;831      
;;;832      /* Get the Id */
;;;833      hcan->pRxMsg->IDE = (uint8_t)0x04 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
;;;834      if (hcan->pRxMsg->IDE == CAN_ID_STD)
;;;835      {
;;;836        hcan->pRxMsg->StdId = (uint32_t)0x000007FF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 21);
;;;837      }
;;;838      else
;;;839      {
;;;840        hcan->pRxMsg->ExtId = (uint32_t)0x1FFFFFFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3);
;;;841      }
;;;842      
;;;843      hcan->pRxMsg->RTR = (uint8_t)0x02 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
;;;844      /* Get the DLC */
;;;845      hcan->pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
;;;846      /* Get the FMI */
;;;847      hcan->pRxMsg->FMI = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8);
;;;848      /* Get the data field */
;;;849      hcan->pRxMsg->Data[0] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
;;;850      hcan->pRxMsg->Data[1] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 8);
;;;851      hcan->pRxMsg->Data[2] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 16);
;;;852      hcan->pRxMsg->Data[3] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 24);
;;;853      hcan->pRxMsg->Data[4] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR;
;;;854      hcan->pRxMsg->Data[5] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 8);
;;;855      hcan->pRxMsg->Data[6] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 16);
;;;856      hcan->pRxMsg->Data[7] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 24);
;;;857      
;;;858      /* Release the FIFO */
;;;859      if(FIFONumber == CAN_FIFO0)
;;;860      {
;;;861        /* Release FIFO0 */
;;;862        __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
;;;863      }
;;;864      else /* FIFONumber == CAN_FIFO1 */
;;;865      {
;;;866        /* Release FIFO1 */
;;;867        __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
;;;868      }
;;;869      
;;;870      if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
;;;871      {
;;;872        /* Change CAN state */
;;;873        hcan->State = HAL_CAN_STATE_BUSY_TX;
;;;874      }
;;;875      else
;;;876      {
;;;877        /* Change CAN state */
;;;878        hcan->State = HAL_CAN_STATE_READY;
;;;879      }
;;;880      
;;;881      /* Process unlocked */
;;;882      __HAL_UNLOCK(hcan);
;;;883      
;;;884      /* Return function status */
;;;885      return HAL_OK;
;;;886    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L12.28|
00001c  2001              MOVS     r0,#1                 ;800
00001e  f8840039          STRB     r0,[r4,#0x39]         ;800
000022  bf00              NOP                            ;800
000024  f8940038          LDRB     r0,[r4,#0x38]         ;802
000028  2812              CMP      r0,#0x12              ;802
00002a  d103              BNE      |L12.52|
00002c  2032              MOVS     r0,#0x32              ;805
00002e  f8840038          STRB     r0,[r4,#0x38]         ;805
000032  e002              B        |L12.58|
                  |L12.52|
000034  2022              MOVS     r0,#0x22              ;810
000036  f8840038          STRB     r0,[r4,#0x38]         ;810
                  |L12.58|
00003a  f7fffffe          BL       HAL_GetTick
00003e  4607              MOV      r7,r0                 ;814
000040  e011              B        |L12.102|
                  |L12.66|
000042  1c70              ADDS     r0,r6,#1              ;820
000044  b178              CBZ      r0,|L12.102|
000046  b126              CBZ      r6,|L12.82|
000048  f7fffffe          BL       HAL_GetTick
00004c  1bc0              SUBS     r0,r0,r7              ;822
00004e  42b0              CMP      r0,r6                 ;822
000050  d909              BLS      |L12.102|
                  |L12.82|
000052  2003              MOVS     r0,#3                 ;824
000054  f8840038          STRB     r0,[r4,#0x38]         ;824
000058  bf00              NOP                            ;826
00005a  2000              MOVS     r0,#0                 ;826
00005c  f8840039          STRB     r0,[r4,#0x39]         ;826
000060  bf00              NOP                            ;826
000062  2003              MOVS     r0,#3                 ;827
000064  e7d8              B        |L12.24|
                  |L12.102|
000066  b925              CBNZ     r5,|L12.114|
000068  6820              LDR      r0,[r4,#0]            ;817
00006a  68c0              LDR      r0,[r0,#0xc]          ;817
00006c  f0000003          AND      r0,r0,#3              ;817
000070  e003              B        |L12.122|
                  |L12.114|
000072  6820              LDR      r0,[r4,#0]            ;817
000074  6900              LDR      r0,[r0,#0x10]         ;817
000076  f0000003          AND      r0,r0,#3              ;817
                  |L12.122|
00007a  2800              CMP      r0,#0                 ;817
00007c  d0e1              BEQ      |L12.66|
00007e  6820              LDR      r0,[r4,#0]            ;833
000080  f50070d8          ADD      r0,r0,#0x1b0          ;833
000084  eb001005          ADD      r0,r0,r5,LSL #4       ;833
000088  6800              LDR      r0,[r0,#0]            ;833
00008a  f0000004          AND      r0,r0,#4              ;833
00008e  6b61              LDR      r1,[r4,#0x34]         ;833
000090  6088              STR      r0,[r1,#8]            ;833
000092  6b60              LDR      r0,[r4,#0x34]         ;834
000094  6880              LDR      r0,[r0,#8]            ;834
000096  b960              CBNZ     r0,|L12.178|
000098  6820              LDR      r0,[r4,#0]            ;836
00009a  f50070d8          ADD      r0,r0,#0x1b0          ;836
00009e  eb001005          ADD      r0,r0,r5,LSL #4       ;836
0000a2  6800              LDR      r0,[r0,#0]            ;836
0000a4  f24071ff          MOV      r1,#0x7ff             ;836
0000a8  ea015050          AND      r0,r1,r0,LSR #21      ;836
0000ac  6b61              LDR      r1,[r4,#0x34]         ;836
0000ae  6008              STR      r0,[r1,#0]            ;836
0000b0  e00b              B        |L12.202|
                  |L12.178|
0000b2  6820              LDR      r0,[r4,#0]            ;840
0000b4  f50070d8          ADD      r0,r0,#0x1b0          ;840
0000b8  eb001005          ADD      r0,r0,r5,LSL #4       ;840
0000bc  6800              LDR      r0,[r0,#0]            ;840
0000be  f06f4160          MVN      r1,#0xe0000000        ;840
0000c2  ea0100d0          AND      r0,r1,r0,LSR #3       ;840
0000c6  6b61              LDR      r1,[r4,#0x34]         ;840
0000c8  6048              STR      r0,[r1,#4]            ;840
                  |L12.202|
0000ca  6820              LDR      r0,[r4,#0]            ;843
0000cc  f50070d8          ADD      r0,r0,#0x1b0          ;843
0000d0  eb001005          ADD      r0,r0,r5,LSL #4       ;843
0000d4  6800              LDR      r0,[r0,#0]            ;843
0000d6  f0000002          AND      r0,r0,#2              ;843
0000da  6b61              LDR      r1,[r4,#0x34]         ;843
0000dc  60c8              STR      r0,[r1,#0xc]          ;843
0000de  6820              LDR      r0,[r4,#0]            ;845
0000e0  f50070d8          ADD      r0,r0,#0x1b0          ;845
0000e4  eb001005          ADD      r0,r0,r5,LSL #4       ;845
0000e8  6840              LDR      r0,[r0,#4]            ;845
0000ea  f000000f          AND      r0,r0,#0xf            ;845
0000ee  6b61              LDR      r1,[r4,#0x34]         ;845
0000f0  6108              STR      r0,[r1,#0x10]         ;845
0000f2  6820              LDR      r0,[r4,#0]            ;847
0000f4  f50070d8          ADD      r0,r0,#0x1b0          ;847
0000f8  eb001005          ADD      r0,r0,r5,LSL #4       ;847
0000fc  6840              LDR      r0,[r0,#4]            ;847
0000fe  f3c02007          UBFX     r0,r0,#8,#8           ;847
000102  6b61              LDR      r1,[r4,#0x34]         ;847
000104  61c8              STR      r0,[r1,#0x1c]         ;847
000106  6820              LDR      r0,[r4,#0]            ;849
000108  f50070d8          ADD      r0,r0,#0x1b0          ;849
00010c  eb001005          ADD      r0,r0,r5,LSL #4       ;849
000110  6880              LDR      r0,[r0,#8]            ;849
000112  6b61              LDR      r1,[r4,#0x34]         ;849
000114  7508              STRB     r0,[r1,#0x14]         ;849
000116  6820              LDR      r0,[r4,#0]            ;850
000118  f50070d8          ADD      r0,r0,#0x1b0          ;850
00011c  eb001005          ADD      r0,r0,r5,LSL #4       ;850
000120  6880              LDR      r0,[r0,#8]            ;850
000122  0a01              LSRS     r1,r0,#8              ;850
000124  6b60              LDR      r0,[r4,#0x34]         ;850
000126  7541              STRB     r1,[r0,#0x15]         ;850
000128  6820              LDR      r0,[r4,#0]            ;851
00012a  f50070d8          ADD      r0,r0,#0x1b0          ;851
00012e  eb001005          ADD      r0,r0,r5,LSL #4       ;851
000132  6880              LDR      r0,[r0,#8]            ;851
000134  0c01              LSRS     r1,r0,#16             ;851
000136  6b60              LDR      r0,[r4,#0x34]         ;851
000138  7581              STRB     r1,[r0,#0x16]         ;851
00013a  6820              LDR      r0,[r4,#0]            ;852
00013c  f50070d8          ADD      r0,r0,#0x1b0          ;852
000140  eb001005          ADD      r0,r0,r5,LSL #4       ;852
000144  6880              LDR      r0,[r0,#8]            ;852
000146  0e00              LSRS     r0,r0,#24             ;852
000148  6b61              LDR      r1,[r4,#0x34]         ;852
00014a  75c8              STRB     r0,[r1,#0x17]         ;852
00014c  6820              LDR      r0,[r4,#0]            ;853
00014e  f50070d8          ADD      r0,r0,#0x1b0          ;853
000152  eb001005          ADD      r0,r0,r5,LSL #4       ;853
000156  68c0              LDR      r0,[r0,#0xc]          ;853
000158  b2c1              UXTB     r1,r0                 ;853
00015a  6b60              LDR      r0,[r4,#0x34]         ;853
00015c  7601              STRB     r1,[r0,#0x18]         ;853
00015e  6820              LDR      r0,[r4,#0]            ;854
000160  f50070d8          ADD      r0,r0,#0x1b0          ;854
000164  eb001005          ADD      r0,r0,r5,LSL #4       ;854
000168  68c0              LDR      r0,[r0,#0xc]          ;854
00016a  0a01              LSRS     r1,r0,#8              ;854
00016c  6b60              LDR      r0,[r4,#0x34]         ;854
00016e  7641              STRB     r1,[r0,#0x19]         ;854
000170  6820              LDR      r0,[r4,#0]            ;855
000172  f50070d8          ADD      r0,r0,#0x1b0          ;855
000176  eb001005          ADD      r0,r0,r5,LSL #4       ;855
00017a  68c0              LDR      r0,[r0,#0xc]          ;855
00017c  0c01              LSRS     r1,r0,#16             ;855
00017e  6b60              LDR      r0,[r4,#0x34]         ;855
000180  7681              STRB     r1,[r0,#0x1a]         ;855
000182  6820              LDR      r0,[r4,#0]            ;856
000184  f50070d8          ADD      r0,r0,#0x1b0          ;856
000188  eb001005          ADD      r0,r0,r5,LSL #4       ;856
00018c  68c0              LDR      r0,[r0,#0xc]          ;856
00018e  0e00              LSRS     r0,r0,#24             ;856
000190  6b61              LDR      r1,[r4,#0x34]         ;856
000192  76c8              STRB     r0,[r1,#0x1b]         ;856
000194  b91d              CBNZ     r5,|L12.414|
000196  2020              MOVS     r0,#0x20              ;862
000198  6821              LDR      r1,[r4,#0]            ;862
00019a  60c8              STR      r0,[r1,#0xc]          ;862
00019c  e002              B        |L12.420|
                  |L12.414|
00019e  2020              MOVS     r0,#0x20              ;867
0001a0  6821              LDR      r1,[r4,#0]            ;867
0001a2  6108              STR      r0,[r1,#0x10]         ;867
                  |L12.420|
0001a4  f8940038          LDRB     r0,[r4,#0x38]         ;870
0001a8  2832              CMP      r0,#0x32              ;870
0001aa  d103              BNE      |L12.436|
0001ac  2012              MOVS     r0,#0x12              ;873
0001ae  f8840038          STRB     r0,[r4,#0x38]         ;873
0001b2  e002              B        |L12.442|
                  |L12.436|
0001b4  2001              MOVS     r0,#1                 ;878
0001b6  f8840038          STRB     r0,[r4,#0x38]         ;878
                  |L12.442|
0001ba  bf00              NOP                            ;882
0001bc  2000              MOVS     r0,#0                 ;882
0001be  f8840039          STRB     r0,[r4,#0x39]         ;882
0001c2  bf00              NOP                            ;882
0001c4  bf00              NOP                            ;885
0001c6  e727              B        |L12.24|
;;;887    
                          ENDP


                          AREA ||i.HAL_CAN_Receive_IT||, CODE, READONLY, ALIGN=1

                  HAL_CAN_Receive_IT PROC
;;;894      */
;;;895    HAL_StatusTypeDef HAL_CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
000000  b510              PUSH     {r4,lr}
;;;896    {
000002  4602              MOV      r2,r0
;;;897      uint32_t tmp = 0;
000004  2300              MOVS     r3,#0
;;;898      
;;;899      /* Check the parameters */
;;;900      assert_param(IS_CAN_FIFO(FIFONumber));
;;;901      
;;;902      tmp = hcan->State;
000006  f8923038          LDRB     r3,[r2,#0x38]
;;;903      if((tmp == HAL_CAN_STATE_READY) || (tmp == HAL_CAN_STATE_BUSY_TX))
00000a  2b01              CMP      r3,#1
00000c  d001              BEQ      |L13.18|
00000e  2b12              CMP      r3,#0x12
000010  d131              BNE      |L13.118|
                  |L13.18|
;;;904      {
;;;905        /* Process locked */
;;;906        __HAL_LOCK(hcan);
000012  bf00              NOP      
000014  f8920039          LDRB     r0,[r2,#0x39]
000018  2801              CMP      r0,#1
00001a  d101              BNE      |L13.32|
00001c  2002              MOVS     r0,#2
                  |L13.30|
;;;907      
;;;908        if(hcan->State == HAL_CAN_STATE_BUSY_TX) 
;;;909        {
;;;910          /* Change CAN state */
;;;911          hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
;;;912        }
;;;913        else
;;;914        {
;;;915          /* Change CAN state */
;;;916          hcan->State = HAL_CAN_STATE_BUSY_RX;
;;;917        }
;;;918        
;;;919        /* Set CAN error code to none */
;;;920        hcan->ErrorCode = HAL_CAN_ERROR_NONE;
;;;921    
;;;922        /* Enable Error warning, Error passive, Bus-off,
;;;923           Last error and Error Interrupts */	
;;;924        __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
;;;925                                  CAN_IT_EPV |
;;;926                                  CAN_IT_BOF |
;;;927                                  CAN_IT_LEC |
;;;928                                  CAN_IT_ERR);
;;;929    
;;;930        /* Process unlocked */
;;;931        __HAL_UNLOCK(hcan);
;;;932    
;;;933        if(FIFONumber == CAN_FIFO0)
;;;934        {
;;;935          /* Enable FIFO 0 message pending Interrupt */
;;;936          __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP0);
;;;937        }
;;;938        else
;;;939        {
;;;940          /* Enable FIFO 1 message pending Interrupt */
;;;941          __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP1);
;;;942        }
;;;943        
;;;944      }
;;;945      else
;;;946      {
;;;947        return HAL_BUSY;
;;;948      }
;;;949      
;;;950      /* Return function status */
;;;951      return HAL_OK;
;;;952    }
00001e  bd10              POP      {r4,pc}
                  |L13.32|
000020  2001              MOVS     r0,#1                 ;906
000022  f8820039          STRB     r0,[r2,#0x39]         ;906
000026  bf00              NOP                            ;906
000028  f8920038          LDRB     r0,[r2,#0x38]         ;908
00002c  2812              CMP      r0,#0x12              ;908
00002e  d103              BNE      |L13.56|
000030  2032              MOVS     r0,#0x32              ;911
000032  f8820038          STRB     r0,[r2,#0x38]         ;911
000036  e002              B        |L13.62|
                  |L13.56|
000038  2022              MOVS     r0,#0x22              ;916
00003a  f8820038          STRB     r0,[r2,#0x38]         ;916
                  |L13.62|
00003e  2000              MOVS     r0,#0                 ;920
000040  63d0              STR      r0,[r2,#0x3c]         ;920
000042  6810              LDR      r0,[r2,#0]            ;924
000044  6940              LDR      r0,[r0,#0x14]         ;924
000046  f440400f          ORR      r0,r0,#0x8f00         ;924
00004a  6814              LDR      r4,[r2,#0]            ;924
00004c  6160              STR      r0,[r4,#0x14]         ;924
00004e  bf00              NOP                            ;931
000050  2000              MOVS     r0,#0                 ;931
000052  f8820039          STRB     r0,[r2,#0x39]         ;931
000056  bf00              NOP                            ;931
000058  b931              CBNZ     r1,|L13.104|
00005a  6810              LDR      r0,[r2,#0]            ;936
00005c  6940              LDR      r0,[r0,#0x14]         ;936
00005e  f0400002          ORR      r0,r0,#2              ;936
000062  6814              LDR      r4,[r2,#0]            ;936
000064  6160              STR      r0,[r4,#0x14]         ;936
000066  e008              B        |L13.122|
                  |L13.104|
000068  6810              LDR      r0,[r2,#0]            ;941
00006a  6940              LDR      r0,[r0,#0x14]         ;941
00006c  f0400010          ORR      r0,r0,#0x10           ;941
000070  6814              LDR      r4,[r2,#0]            ;941
000072  6160              STR      r0,[r4,#0x14]         ;941
000074  e001              B        |L13.122|
                  |L13.118|
000076  2002              MOVS     r0,#2                 ;947
000078  e7d1              B        |L13.30|
                  |L13.122|
00007a  2000              MOVS     r0,#0                 ;951
00007c  e7cf              B        |L13.30|
;;;953    
                          ENDP


                          AREA ||i.HAL_CAN_RxCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_CAN_RxCpltCallback PROC
;;;1205     */
;;;1206   __weak void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef* hcan)
000000  4770              BX       lr
;;;1207   {
;;;1208     /* Prevent unused argument(s) compilation warning */
;;;1209     UNUSED(hcan);
;;;1210     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1211               the HAL_CAN_RxCpltCallback could be implemented in the user file
;;;1212      */
;;;1213   }
;;;1214   
                          ENDP


                          AREA ||i.HAL_CAN_Sleep||, CODE, READONLY, ALIGN=1

                  HAL_CAN_Sleep PROC
;;;959      */
;;;960    HAL_StatusTypeDef HAL_CAN_Sleep(CAN_HandleTypeDef* hcan)
000000  b570              PUSH     {r4-r6,lr}
;;;961    {
000002  4604              MOV      r4,r0
;;;962      uint32_t tickstart = 0;
000004  2500              MOVS     r5,#0
;;;963       
;;;964      /* Process locked */
;;;965      __HAL_LOCK(hcan);
000006  bf00              NOP      
000008  f8940039          LDRB     r0,[r4,#0x39]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L15.20|
000010  2002              MOVS     r0,#2
                  |L15.18|
;;;966      
;;;967      /* Change CAN state */
;;;968      hcan->State = HAL_CAN_STATE_BUSY; 
;;;969        
;;;970      /* Request Sleep mode */
;;;971       hcan->Instance->MCR = (((hcan->Instance->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
;;;972       
;;;973      /* Sleep mode status */
;;;974      if ((hcan->Instance->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) != CAN_MSR_SLAK)
;;;975      {
;;;976        /* Process unlocked */
;;;977        __HAL_UNLOCK(hcan);
;;;978    
;;;979        /* Return function status */
;;;980        return HAL_ERROR;
;;;981      }
;;;982      
;;;983      /* Get tick */ 
;;;984      tickstart = HAL_GetTick();
;;;985      
;;;986      /* Wait the acknowledge */
;;;987      while((hcan->Instance->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) != CAN_MSR_SLAK)
;;;988      {
;;;989        if((HAL_GetTick()  - tickstart) > CAN_TIMEOUT_VALUE)
;;;990        {
;;;991          hcan->State = HAL_CAN_STATE_TIMEOUT;
;;;992          /* Process unlocked */
;;;993          __HAL_UNLOCK(hcan);
;;;994          return HAL_TIMEOUT;
;;;995        }
;;;996      }
;;;997      
;;;998      /* Change CAN state */
;;;999      hcan->State = HAL_CAN_STATE_READY;
;;;1000     
;;;1001     /* Process unlocked */
;;;1002     __HAL_UNLOCK(hcan);
;;;1003     
;;;1004     /* Return function status */
;;;1005     return HAL_OK;
;;;1006   }
000012  bd70              POP      {r4-r6,pc}
                  |L15.20|
000014  2001              MOVS     r0,#1                 ;965
000016  f8840039          STRB     r0,[r4,#0x39]         ;965
00001a  bf00              NOP                            ;965
00001c  2002              MOVS     r0,#2                 ;968
00001e  f8840038          STRB     r0,[r4,#0x38]         ;968
000022  6820              LDR      r0,[r4,#0]            ;971
000024  6800              LDR      r0,[r0,#0]            ;971
000026  f0200001          BIC      r0,r0,#1              ;971
00002a  f0400002          ORR      r0,r0,#2              ;971
00002e  6821              LDR      r1,[r4,#0]            ;971
000030  6008              STR      r0,[r1,#0]            ;971
000032  6820              LDR      r0,[r4,#0]            ;974
000034  6840              LDR      r0,[r0,#4]            ;974
000036  f0000003          AND      r0,r0,#3              ;974
00003a  2802              CMP      r0,#2                 ;974
00003c  d006              BEQ      |L15.76|
00003e  bf00              NOP                            ;977
000040  2000              MOVS     r0,#0                 ;977
000042  f8840039          STRB     r0,[r4,#0x39]         ;977
000046  bf00              NOP                            ;977
000048  2001              MOVS     r0,#1                 ;980
00004a  e7e2              B        |L15.18|
                  |L15.76|
00004c  f7fffffe          BL       HAL_GetTick
000050  4605              MOV      r5,r0                 ;984
000052  e00e              B        |L15.114|
                  |L15.84|
000054  f7fffffe          BL       HAL_GetTick
000058  1b40              SUBS     r0,r0,r5              ;989
00005a  280a              CMP      r0,#0xa               ;989
00005c  d909              BLS      |L15.114|
00005e  2003              MOVS     r0,#3                 ;991
000060  f8840038          STRB     r0,[r4,#0x38]         ;991
000064  bf00              NOP                            ;993
000066  2000              MOVS     r0,#0                 ;993
000068  f8840039          STRB     r0,[r4,#0x39]         ;993
00006c  bf00              NOP                            ;993
00006e  2003              MOVS     r0,#3                 ;994
000070  e7cf              B        |L15.18|
                  |L15.114|
000072  6820              LDR      r0,[r4,#0]            ;987
000074  6840              LDR      r0,[r0,#4]            ;987
000076  f0000003          AND      r0,r0,#3              ;987
00007a  2802              CMP      r0,#2                 ;987
00007c  d1ea              BNE      |L15.84|
00007e  2001              MOVS     r0,#1                 ;999
000080  f8840038          STRB     r0,[r4,#0x38]         ;999
000084  bf00              NOP                            ;1002
000086  2000              MOVS     r0,#0                 ;1002
000088  f8840039          STRB     r0,[r4,#0x39]         ;1002
00008c  bf00              NOP                            ;1002
00008e  bf00              NOP                            ;1005
000090  e7bf              B        |L15.18|
;;;1007   
                          ENDP


                          AREA ||i.HAL_CAN_Transmit||, CODE, READONLY, ALIGN=2

                  HAL_CAN_Transmit PROC
;;;555      */
;;;556    HAL_StatusTypeDef HAL_CAN_Transmit(CAN_HandleTypeDef* hcan, uint32_t Timeout)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;557    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;558      uint32_t  transmitmailbox = CAN_TXSTATUS_NOMAILBOX;
000008  2504              MOVS     r5,#4
;;;559      uint32_t tickstart = 0;
00000a  2700              MOVS     r7,#0
;;;560    
;;;561      /* Check the parameters */
;;;562      assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
;;;563      assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
;;;564      assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));
;;;565    
;;;566      if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
00000c  6820              LDR      r0,[r4,#0]
00000e  6880              LDR      r0,[r0,#8]
000010  f0006080          AND      r0,r0,#0x4000000
000014  f1b06f80          CMP      r0,#0x4000000
000018  d00d              BEQ      |L16.54|
;;;567         ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
00001a  6820              LDR      r0,[r4,#0]
00001c  6880              LDR      r0,[r0,#8]
00001e  f0006000          AND      r0,r0,#0x8000000
000022  f1b06f00          CMP      r0,#0x8000000
000026  d006              BEQ      |L16.54|
;;;568         ((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2))
000028  6820              LDR      r0,[r4,#0]
00002a  6880              LDR      r0,[r0,#8]
00002c  f0005080          AND      r0,r0,#0x10000000
000030  f1b05f80          CMP      r0,#0x10000000
000034  d17e              BNE      |L16.308|
                  |L16.54|
;;;569      {  
;;;570        /* Process locked */
;;;571        __HAL_LOCK(hcan);
000036  bf00              NOP      
000038  f8940039          LDRB     r0,[r4,#0x39]
00003c  2801              CMP      r0,#1
00003e  d102              BNE      |L16.70|
000040  2002              MOVS     r0,#2
                  |L16.66|
;;;572      
;;;573        if(hcan->State == HAL_CAN_STATE_BUSY_RX) 
;;;574        {
;;;575          /* Change CAN state */
;;;576          hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
;;;577        }
;;;578        else
;;;579        {
;;;580          /* Change CAN state */
;;;581          hcan->State = HAL_CAN_STATE_BUSY_TX;
;;;582        }
;;;583      
;;;584        /* Select one empty transmit mailbox */
;;;585        if ((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
;;;586        {
;;;587          transmitmailbox = CAN_TXMAILBOX_0;
;;;588        }
;;;589        else if ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
;;;590        {
;;;591          transmitmailbox = CAN_TXMAILBOX_1;
;;;592        }
;;;593        else
;;;594        {
;;;595          transmitmailbox = CAN_TXMAILBOX_2;
;;;596        }
;;;597    	
;;;598        /* Set up the Id */
;;;599        hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
;;;600        if (hcan->pTxMsg->IDE == CAN_ID_STD)
;;;601        {
;;;602          assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));  
;;;603          hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << 21) | \
;;;604                                                      hcan->pTxMsg->RTR);
;;;605        }
;;;606        else
;;;607        {
;;;608          assert_param(IS_CAN_EXTID(hcan->pTxMsg->ExtId));
;;;609          hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << 3) | \
;;;610                                                      hcan->pTxMsg->IDE | \
;;;611                                                      hcan->pTxMsg->RTR);
;;;612        }
;;;613        
;;;614        /* Set up the DLC */
;;;615        hcan->pTxMsg->DLC &= (uint8_t)0x0000000FU;
;;;616        hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0U;
;;;617        hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
;;;618    
;;;619        /* Set up the data field */
;;;620        hcan->Instance->sTxMailBox[transmitmailbox].TDLR = (((uint32_t)hcan->pTxMsg->Data[3] << 24) | 
;;;621                                                 ((uint32_t)hcan->pTxMsg->Data[2] << 16) |
;;;622                                                 ((uint32_t)hcan->pTxMsg->Data[1] << 8) | 
;;;623                                                 ((uint32_t)hcan->pTxMsg->Data[0]));
;;;624        hcan->Instance->sTxMailBox[transmitmailbox].TDHR = (((uint32_t)hcan->pTxMsg->Data[7] << 24) | 
;;;625                                                 ((uint32_t)hcan->pTxMsg->Data[6] << 16) |
;;;626                                                 ((uint32_t)hcan->pTxMsg->Data[5] << 8) |
;;;627                                                 ((uint32_t)hcan->pTxMsg->Data[4]));
;;;628        /* Request transmission */
;;;629        hcan->Instance->sTxMailBox[transmitmailbox].TIR |= CAN_TI0R_TXRQ;
;;;630      
;;;631        /* Get tick */ 
;;;632        tickstart = HAL_GetTick();
;;;633      
;;;634        /* Check End of transmission flag */
;;;635        while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
;;;636        {
;;;637          /* Check for the Timeout */
;;;638          if(Timeout != HAL_MAX_DELAY)
;;;639          {
;;;640           if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
;;;641           {
;;;642             hcan->State = HAL_CAN_STATE_TIMEOUT;
;;;643             /* Process unlocked */
;;;644             __HAL_UNLOCK(hcan);
;;;645             return HAL_TIMEOUT;
;;;646            }
;;;647          }
;;;648        }
;;;649        if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
;;;650        {
;;;651          /* Change CAN state */
;;;652          hcan->State = HAL_CAN_STATE_BUSY_RX;
;;;653        }
;;;654        else
;;;655        {
;;;656          /* Change CAN state */
;;;657          hcan->State = HAL_CAN_STATE_READY;
;;;658        }
;;;659        
;;;660        /* Process unlocked */
;;;661        __HAL_UNLOCK(hcan);
;;;662        
;;;663        /* Return function status */
;;;664        return HAL_OK;
;;;665      }
;;;666      else
;;;667      {
;;;668        /* Change CAN state */
;;;669        hcan->State = HAL_CAN_STATE_ERROR; 
;;;670    
;;;671        /* Return function status */
;;;672        return HAL_ERROR;
;;;673      }
;;;674    }
000042  e8bd81f0          POP      {r4-r8,pc}
                  |L16.70|
000046  2001              MOVS     r0,#1                 ;571
000048  f8840039          STRB     r0,[r4,#0x39]         ;571
00004c  bf00              NOP                            ;571
00004e  f8940038          LDRB     r0,[r4,#0x38]         ;573
000052  2822              CMP      r0,#0x22              ;573
000054  d103              BNE      |L16.94|
000056  2032              MOVS     r0,#0x32              ;576
000058  f8840038          STRB     r0,[r4,#0x38]         ;576
00005c  e002              B        |L16.100|
                  |L16.94|
00005e  2012              MOVS     r0,#0x12              ;581
000060  f8840038          STRB     r0,[r4,#0x38]         ;581
                  |L16.100|
000064  6820              LDR      r0,[r4,#0]            ;585
000066  6880              LDR      r0,[r0,#8]            ;585
000068  f0006080          AND      r0,r0,#0x4000000      ;585
00006c  f1b06f80          CMP      r0,#0x4000000         ;585
000070  d101              BNE      |L16.118|
000072  2500              MOVS     r5,#0                 ;587
000074  e009              B        |L16.138|
                  |L16.118|
000076  6820              LDR      r0,[r4,#0]            ;589
000078  6880              LDR      r0,[r0,#8]            ;589
00007a  f0006000          AND      r0,r0,#0x8000000      ;589
00007e  f1b06f00          CMP      r0,#0x8000000         ;589
000082  d101              BNE      |L16.136|
000084  2501              MOVS     r5,#1                 ;591
000086  e000              B        |L16.138|
                  |L16.136|
000088  2502              MOVS     r5,#2                 ;595
                  |L16.138|
00008a  6820              LDR      r0,[r4,#0]            ;599
00008c  f50070c0          ADD      r0,r0,#0x180          ;599
000090  eb001005          ADD      r0,r0,r5,LSL #4       ;599
000094  6800              LDR      r0,[r0,#0]            ;599
000096  f0000101          AND      r1,r0,#1              ;599
00009a  6820              LDR      r0,[r4,#0]            ;599
00009c  f50070c0          ADD      r0,r0,#0x180          ;599
0000a0  eb001005          ADD      r0,r0,r5,LSL #4       ;599
0000a4  6001              STR      r1,[r0,#0]            ;599
0000a6  6b20              LDR      r0,[r4,#0x30]         ;600
0000a8  6880              LDR      r0,[r0,#8]            ;600
0000aa  b998              CBNZ     r0,|L16.212|
0000ac  6820              LDR      r0,[r4,#0]            ;603
0000ae  f50070c0          ADD      r0,r0,#0x180          ;603
0000b2  eb001005          ADD      r0,r0,r5,LSL #4       ;603
0000b6  6800              LDR      r0,[r0,#0]            ;603
0000b8  6b21              LDR      r1,[r4,#0x30]         ;603
0000ba  68c9              LDR      r1,[r1,#0xc]          ;603
0000bc  6b22              LDR      r2,[r4,#0x30]         ;603
0000be  8812              LDRH     r2,[r2,#0]            ;603
0000c0  ea415142          ORR      r1,r1,r2,LSL #21      ;603
0000c4  4308              ORRS     r0,r0,r1              ;603
0000c6  6821              LDR      r1,[r4,#0]            ;603
0000c8  f50171c0          ADD      r1,r1,#0x180          ;603
0000cc  eb011105          ADD      r1,r1,r5,LSL #4       ;603
0000d0  6008              STR      r0,[r1,#0]            ;603
0000d2  e015              B        |L16.256|
                  |L16.212|
0000d4  6820              LDR      r0,[r4,#0]            ;609
0000d6  f50070c0          ADD      r0,r0,#0x180          ;609
0000da  eb001005          ADD      r0,r0,r5,LSL #4       ;609
0000de  6800              LDR      r0,[r0,#0]            ;609
0000e0  6b21              LDR      r1,[r4,#0x30]         ;609
0000e2  6889              LDR      r1,[r1,#8]            ;609
0000e4  6b22              LDR      r2,[r4,#0x30]         ;609
0000e6  6852              LDR      r2,[r2,#4]            ;609
0000e8  ea4101c2          ORR      r1,r1,r2,LSL #3       ;609
0000ec  6b22              LDR      r2,[r4,#0x30]         ;609
0000ee  68d2              LDR      r2,[r2,#0xc]          ;609
0000f0  4311              ORRS     r1,r1,r2              ;609
0000f2  4308              ORRS     r0,r0,r1              ;609
0000f4  6821              LDR      r1,[r4,#0]            ;609
0000f6  f50171c0          ADD      r1,r1,#0x180          ;609
0000fa  eb011105          ADD      r1,r1,r5,LSL #4       ;609
0000fe  6008              STR      r0,[r1,#0]            ;609
                  |L16.256|
000100  6b20              LDR      r0,[r4,#0x30]         ;615
000102  7c00              LDRB     r0,[r0,#0x10]         ;615
000104  f000000f          AND      r0,r0,#0xf            ;615
000108  6b21              LDR      r1,[r4,#0x30]         ;615
00010a  6108              STR      r0,[r1,#0x10]         ;615
00010c  6820              LDR      r0,[r4,#0]            ;616
00010e  f50070c0          ADD      r0,r0,#0x180          ;616
000112  eb001005          ADD      r0,r0,r5,LSL #4       ;616
000116  6840              LDR      r0,[r0,#4]            ;616
000118  f020010f          BIC      r1,r0,#0xf            ;616
00011c  6820              LDR      r0,[r4,#0]            ;616
00011e  f50070c0          ADD      r0,r0,#0x180          ;616
000122  eb001005          ADD      r0,r0,r5,LSL #4       ;616
000126  6041              STR      r1,[r0,#4]            ;616
000128  6820              LDR      r0,[r4,#0]            ;617
00012a  f50070c0          ADD      r0,r0,#0x180          ;617
00012e  eb001005          ADD      r0,r0,r5,LSL #4       ;617
000132  e000              B        |L16.310|
                  |L16.308|
000134  e088              B        |L16.584|
                  |L16.310|
000136  6840              LDR      r0,[r0,#4]            ;617
000138  6b21              LDR      r1,[r4,#0x30]         ;617
00013a  6909              LDR      r1,[r1,#0x10]         ;617
00013c  4308              ORRS     r0,r0,r1              ;617
00013e  6821              LDR      r1,[r4,#0]            ;617
000140  f50171c0          ADD      r1,r1,#0x180          ;617
000144  eb011105          ADD      r1,r1,r5,LSL #4       ;617
000148  6048              STR      r0,[r1,#4]            ;617
00014a  6b20              LDR      r0,[r4,#0x30]         ;620
00014c  7dc0              LDRB     r0,[r0,#0x17]         ;620
00014e  0601              LSLS     r1,r0,#24             ;620
000150  6b20              LDR      r0,[r4,#0x30]         ;620
000152  7d80              LDRB     r0,[r0,#0x16]         ;620
000154  ea414100          ORR      r1,r1,r0,LSL #16      ;620
000158  6b20              LDR      r0,[r4,#0x30]         ;620
00015a  7d40              LDRB     r0,[r0,#0x15]         ;620
00015c  ea412000          ORR      r0,r1,r0,LSL #8       ;620
000160  6b21              LDR      r1,[r4,#0x30]         ;620
000162  7d09              LDRB     r1,[r1,#0x14]         ;620
000164  4308              ORRS     r0,r0,r1              ;620
000166  6821              LDR      r1,[r4,#0]            ;620
000168  f50171c0          ADD      r1,r1,#0x180          ;620
00016c  eb011105          ADD      r1,r1,r5,LSL #4       ;620
000170  6088              STR      r0,[r1,#8]            ;620
000172  6b20              LDR      r0,[r4,#0x30]         ;624
000174  7ec0              LDRB     r0,[r0,#0x1b]         ;624
000176  0601              LSLS     r1,r0,#24             ;624
000178  6b20              LDR      r0,[r4,#0x30]         ;624
00017a  7e80              LDRB     r0,[r0,#0x1a]         ;624
00017c  ea414100          ORR      r1,r1,r0,LSL #16      ;624
000180  6b20              LDR      r0,[r4,#0x30]         ;624
000182  7e40              LDRB     r0,[r0,#0x19]         ;624
000184  ea412000          ORR      r0,r1,r0,LSL #8       ;624
000188  6b21              LDR      r1,[r4,#0x30]         ;624
00018a  7e09              LDRB     r1,[r1,#0x18]         ;624
00018c  4308              ORRS     r0,r0,r1              ;624
00018e  6821              LDR      r1,[r4,#0]            ;624
000190  f50171c0          ADD      r1,r1,#0x180          ;624
000194  eb011105          ADD      r1,r1,r5,LSL #4       ;624
000198  60c8              STR      r0,[r1,#0xc]          ;624
00019a  6820              LDR      r0,[r4,#0]            ;629
00019c  f50070c0          ADD      r0,r0,#0x180          ;629
0001a0  eb001005          ADD      r0,r0,r5,LSL #4       ;629
0001a4  6800              LDR      r0,[r0,#0]            ;629
0001a6  f0400101          ORR      r1,r0,#1              ;629
0001aa  6820              LDR      r0,[r4,#0]            ;629
0001ac  f50070c0          ADD      r0,r0,#0x180          ;629
0001b0  eb001005          ADD      r0,r0,r5,LSL #4       ;629
0001b4  6001              STR      r1,[r0,#0]            ;629
0001b6  f7fffffe          BL       HAL_GetTick
0001ba  4607              MOV      r7,r0                 ;632
0001bc  e011              B        |L16.482|
                  |L16.446|
0001be  1c70              ADDS     r0,r6,#1              ;638
0001c0  b178              CBZ      r0,|L16.482|
0001c2  b126              CBZ      r6,|L16.462|
0001c4  f7fffffe          BL       HAL_GetTick
0001c8  1bc0              SUBS     r0,r0,r7              ;640
0001ca  42b0              CMP      r0,r6                 ;640
0001cc  d909              BLS      |L16.482|
                  |L16.462|
0001ce  2003              MOVS     r0,#3                 ;642
0001d0  f8840038          STRB     r0,[r4,#0x38]         ;642
0001d4  bf00              NOP                            ;644
0001d6  2000              MOVS     r0,#0                 ;644
0001d8  f8840039          STRB     r0,[r4,#0x39]         ;644
0001dc  bf00              NOP                            ;644
0001de  2003              MOVS     r0,#3                 ;645
0001e0  e72f              B        |L16.66|
                  |L16.482|
0001e2  b94d              CBNZ     r5,|L16.504|
0001e4  6820              LDR      r0,[r4,#0]            ;635
0001e6  6880              LDR      r0,[r0,#8]            ;635
0001e8  491a              LDR      r1,|L16.596|
0001ea  4008              ANDS     r0,r0,r1              ;635
0001ec  4288              CMP      r0,r1                 ;635
0001ee  d101              BNE      |L16.500|
0001f0  2001              MOVS     r0,#1                 ;635
0001f2  e016              B        |L16.546|
                  |L16.500|
0001f4  2000              MOVS     r0,#0                 ;635
0001f6  e014              B        |L16.546|
                  |L16.504|
0001f8  2d01              CMP      r5,#1                 ;635
0001fa  d109              BNE      |L16.528|
0001fc  6820              LDR      r0,[r4,#0]            ;635
0001fe  6880              LDR      r0,[r0,#8]            ;635
000200  4915              LDR      r1,|L16.600|
000202  4008              ANDS     r0,r0,r1              ;635
000204  4288              CMP      r0,r1                 ;635
000206  d101              BNE      |L16.524|
000208  2001              MOVS     r0,#1                 ;635
00020a  e00a              B        |L16.546|
                  |L16.524|
00020c  2000              MOVS     r0,#0                 ;635
00020e  e008              B        |L16.546|
                  |L16.528|
000210  6820              LDR      r0,[r4,#0]            ;635
000212  6880              LDR      r0,[r0,#8]            ;635
000214  4911              LDR      r1,|L16.604|
000216  4008              ANDS     r0,r0,r1              ;635
000218  4288              CMP      r0,r1                 ;635
00021a  d101              BNE      |L16.544|
00021c  2001              MOVS     r0,#1                 ;635
00021e  e000              B        |L16.546|
                  |L16.544|
000220  2000              MOVS     r0,#0                 ;635
                  |L16.546|
000222  2800              CMP      r0,#0                 ;635
000224  d0cb              BEQ      |L16.446|
000226  f8940038          LDRB     r0,[r4,#0x38]         ;649
00022a  2832              CMP      r0,#0x32              ;649
00022c  d103              BNE      |L16.566|
00022e  2022              MOVS     r0,#0x22              ;652
000230  f8840038          STRB     r0,[r4,#0x38]         ;652
000234  e002              B        |L16.572|
                  |L16.566|
000236  2001              MOVS     r0,#1                 ;657
000238  f8840038          STRB     r0,[r4,#0x38]         ;657
                  |L16.572|
00023c  bf00              NOP                            ;661
00023e  2000              MOVS     r0,#0                 ;661
000240  f8840039          STRB     r0,[r4,#0x39]         ;661
000244  bf00              NOP                            ;661
000246  e6fc              B        |L16.66|
                  |L16.584|
000248  2004              MOVS     r0,#4                 ;669
00024a  f8840038          STRB     r0,[r4,#0x38]         ;669
00024e  2001              MOVS     r0,#1                 ;672
000250  e6f7              B        |L16.66|
;;;675    
                          ENDP

000252  0000              DCW      0x0000
                  |L16.596|
                          DCD      0x04000003
                  |L16.600|
                          DCD      0x08000300
                  |L16.604|
                          DCD      0x10030000

                          AREA ||i.HAL_CAN_Transmit_IT||, CODE, READONLY, ALIGN=1

                  HAL_CAN_Transmit_IT PROC
;;;681      */
;;;682    HAL_StatusTypeDef HAL_CAN_Transmit_IT(CAN_HandleTypeDef* hcan)
000000  b510              PUSH     {r4,lr}
;;;683    {
000002  4601              MOV      r1,r0
;;;684      uint32_t  transmitmailbox = CAN_TXSTATUS_NOMAILBOX;
000004  2204              MOVS     r2,#4
;;;685      
;;;686      /* Check the parameters */
;;;687      assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
;;;688      assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
;;;689      assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));
;;;690      
;;;691      if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
000006  6808              LDR      r0,[r1,#0]
000008  6880              LDR      r0,[r0,#8]
00000a  f0006080          AND      r0,r0,#0x4000000
00000e  f1b06f80          CMP      r0,#0x4000000
000012  d00d              BEQ      |L17.48|
;;;692         ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
000014  6808              LDR      r0,[r1,#0]
000016  6880              LDR      r0,[r0,#8]
000018  f0006000          AND      r0,r0,#0x8000000
00001c  f1b06f00          CMP      r0,#0x8000000
000020  d006              BEQ      |L17.48|
;;;693         ((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2))
000022  6808              LDR      r0,[r1,#0]
000024  6880              LDR      r0,[r0,#8]
000026  f0005080          AND      r0,r0,#0x10000000
00002a  f1b05f80          CMP      r0,#0x10000000
00002e  d17d              BNE      |L17.300|
                  |L17.48|
;;;694      {
;;;695        /* Process Locked */
;;;696        __HAL_LOCK(hcan);
000030  bf00              NOP      
000032  f8910039          LDRB     r0,[r1,#0x39]
000036  2801              CMP      r0,#1
000038  d101              BNE      |L17.62|
00003a  2002              MOVS     r0,#2
                  |L17.60|
;;;697        
;;;698        /* Select one empty transmit mailbox */
;;;699        if((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
;;;700        {
;;;701          transmitmailbox = CAN_TXMAILBOX_0;
;;;702        }
;;;703        else if((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
;;;704        {
;;;705          transmitmailbox = CAN_TXMAILBOX_1;
;;;706        }
;;;707        else
;;;708        {
;;;709          transmitmailbox = CAN_TXMAILBOX_2;
;;;710        }
;;;711    	
;;;712        /* Set up the Id */
;;;713        hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
;;;714        if(hcan->pTxMsg->IDE == CAN_ID_STD)
;;;715        {
;;;716          assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));  
;;;717          hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << 21) | \
;;;718                                                    hcan->pTxMsg->RTR);
;;;719        }
;;;720        else
;;;721        {
;;;722          assert_param(IS_CAN_EXTID(hcan->pTxMsg->ExtId));
;;;723          hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << 3) | \
;;;724                                                    hcan->pTxMsg->IDE | \
;;;725                                                    hcan->pTxMsg->RTR);
;;;726        }
;;;727        
;;;728        /* Set up the DLC */
;;;729        hcan->pTxMsg->DLC &= (uint8_t)0x0000000FU;
;;;730        hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0U;
;;;731        hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
;;;732    
;;;733        /* Set up the data field */
;;;734        hcan->Instance->sTxMailBox[transmitmailbox].TDLR = (((uint32_t)hcan->pTxMsg->Data[3] << 24) | 
;;;735                                               ((uint32_t)hcan->pTxMsg->Data[2] << 16) |
;;;736                                               ((uint32_t)hcan->pTxMsg->Data[1] << 8) | 
;;;737                                               ((uint32_t)hcan->pTxMsg->Data[0]));
;;;738        hcan->Instance->sTxMailBox[transmitmailbox].TDHR = (((uint32_t)hcan->pTxMsg->Data[7] << 24) | 
;;;739                                               ((uint32_t)hcan->pTxMsg->Data[6] << 16) |
;;;740                                               ((uint32_t)hcan->pTxMsg->Data[5] << 8) |
;;;741                                               ((uint32_t)hcan->pTxMsg->Data[4]));
;;;742        
;;;743        if(hcan->State == HAL_CAN_STATE_BUSY_RX) 
;;;744        {
;;;745          /* Change CAN state */
;;;746          hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
;;;747        }
;;;748        else
;;;749        {
;;;750          /* Change CAN state */
;;;751          hcan->State = HAL_CAN_STATE_BUSY_TX;
;;;752        }
;;;753          
;;;754        /* Set CAN error code to none */
;;;755        hcan->ErrorCode = HAL_CAN_ERROR_NONE;
;;;756          
;;;757        /* Process Unlocked */
;;;758        __HAL_UNLOCK(hcan);
;;;759    	
;;;760        /* Enable Error warning, Error passive, Bus-off,
;;;761           Last error and Error Interrupts */	
;;;762        __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
;;;763                                  CAN_IT_EPV |
;;;764                                  CAN_IT_BOF |
;;;765                                  CAN_IT_LEC |
;;;766                                  CAN_IT_ERR |
;;;767    							  CAN_IT_TME);
;;;768          
;;;769        /* Request transmission */
;;;770        hcan->Instance->sTxMailBox[transmitmailbox].TIR |= CAN_TI0R_TXRQ;
;;;771      }
;;;772      else
;;;773      {
;;;774        /* Change CAN state */
;;;775        hcan->State = HAL_CAN_STATE_ERROR; 
;;;776    
;;;777        /* Return function status */
;;;778        return HAL_ERROR;
;;;779      }
;;;780      
;;;781      return HAL_OK;
;;;782    }
00003c  bd10              POP      {r4,pc}
                  |L17.62|
00003e  2001              MOVS     r0,#1                 ;696
000040  f8810039          STRB     r0,[r1,#0x39]         ;696
000044  bf00              NOP                            ;696
000046  6808              LDR      r0,[r1,#0]            ;699
000048  6880              LDR      r0,[r0,#8]            ;699
00004a  f0006080          AND      r0,r0,#0x4000000      ;699
00004e  f1b06f80          CMP      r0,#0x4000000         ;699
000052  d101              BNE      |L17.88|
000054  2200              MOVS     r2,#0                 ;701
000056  e009              B        |L17.108|
                  |L17.88|
000058  6808              LDR      r0,[r1,#0]            ;703
00005a  6880              LDR      r0,[r0,#8]            ;703
00005c  f0006000          AND      r0,r0,#0x8000000      ;703
000060  f1b06f00          CMP      r0,#0x8000000         ;703
000064  d101              BNE      |L17.106|
000066  2201              MOVS     r2,#1                 ;705
000068  e000              B        |L17.108|
                  |L17.106|
00006a  2202              MOVS     r2,#2                 ;709
                  |L17.108|
00006c  6808              LDR      r0,[r1,#0]            ;713
00006e  f50070c0          ADD      r0,r0,#0x180          ;713
000072  eb001002          ADD      r0,r0,r2,LSL #4       ;713
000076  6800              LDR      r0,[r0,#0]            ;713
000078  f0000301          AND      r3,r0,#1              ;713
00007c  6808              LDR      r0,[r1,#0]            ;713
00007e  f50070c0          ADD      r0,r0,#0x180          ;713
000082  eb001002          ADD      r0,r0,r2,LSL #4       ;713
000086  6003              STR      r3,[r0,#0]            ;713
000088  6b08              LDR      r0,[r1,#0x30]         ;714
00008a  6880              LDR      r0,[r0,#8]            ;714
00008c  b998              CBNZ     r0,|L17.182|
00008e  6808              LDR      r0,[r1,#0]            ;717
000090  f50070c0          ADD      r0,r0,#0x180          ;717
000094  eb001002          ADD      r0,r0,r2,LSL #4       ;717
000098  6800              LDR      r0,[r0,#0]            ;717
00009a  6b0b              LDR      r3,[r1,#0x30]         ;717
00009c  68db              LDR      r3,[r3,#0xc]          ;717
00009e  6b0c              LDR      r4,[r1,#0x30]         ;717
0000a0  8824              LDRH     r4,[r4,#0]            ;717
0000a2  ea435344          ORR      r3,r3,r4,LSL #21      ;717
0000a6  4318              ORRS     r0,r0,r3              ;717
0000a8  680b              LDR      r3,[r1,#0]            ;717
0000aa  f50373c0          ADD      r3,r3,#0x180          ;717
0000ae  eb031302          ADD      r3,r3,r2,LSL #4       ;717
0000b2  6018              STR      r0,[r3,#0]            ;717
0000b4  e015              B        |L17.226|
                  |L17.182|
0000b6  6808              LDR      r0,[r1,#0]            ;723
0000b8  f50070c0          ADD      r0,r0,#0x180          ;723
0000bc  eb001002          ADD      r0,r0,r2,LSL #4       ;723
0000c0  6803              LDR      r3,[r0,#0]            ;723
0000c2  6b08              LDR      r0,[r1,#0x30]         ;723
0000c4  6880              LDR      r0,[r0,#8]            ;723
0000c6  6b0c              LDR      r4,[r1,#0x30]         ;723
0000c8  6864              LDR      r4,[r4,#4]            ;723
0000ca  ea4000c4          ORR      r0,r0,r4,LSL #3       ;723
0000ce  6b0c              LDR      r4,[r1,#0x30]         ;723
0000d0  68e4              LDR      r4,[r4,#0xc]          ;723
0000d2  4320              ORRS     r0,r0,r4              ;723
0000d4  4303              ORRS     r3,r3,r0              ;723
0000d6  6808              LDR      r0,[r1,#0]            ;723
0000d8  f50070c0          ADD      r0,r0,#0x180          ;723
0000dc  eb001002          ADD      r0,r0,r2,LSL #4       ;723
0000e0  6003              STR      r3,[r0,#0]            ;723
                  |L17.226|
0000e2  6b08              LDR      r0,[r1,#0x30]         ;729
0000e4  7c00              LDRB     r0,[r0,#0x10]         ;729
0000e6  f000000f          AND      r0,r0,#0xf            ;729
0000ea  6b0b              LDR      r3,[r1,#0x30]         ;729
0000ec  6118              STR      r0,[r3,#0x10]         ;729
0000ee  6808              LDR      r0,[r1,#0]            ;730
0000f0  f50070c0          ADD      r0,r0,#0x180          ;730
0000f4  eb001002          ADD      r0,r0,r2,LSL #4       ;730
0000f8  6840              LDR      r0,[r0,#4]            ;730
0000fa  f020030f          BIC      r3,r0,#0xf            ;730
0000fe  6808              LDR      r0,[r1,#0]            ;730
000100  f50070c0          ADD      r0,r0,#0x180          ;730
000104  eb001002          ADD      r0,r0,r2,LSL #4       ;730
000108  6043              STR      r3,[r0,#4]            ;730
00010a  6808              LDR      r0,[r1,#0]            ;731
00010c  f50070c0          ADD      r0,r0,#0x180          ;731
000110  eb001002          ADD      r0,r0,r2,LSL #4       ;731
000114  6840              LDR      r0,[r0,#4]            ;731
000116  6b0b              LDR      r3,[r1,#0x30]         ;731
000118  691b              LDR      r3,[r3,#0x10]         ;731
00011a  4318              ORRS     r0,r0,r3              ;731
00011c  680b              LDR      r3,[r1,#0]            ;731
00011e  f50373c0          ADD      r3,r3,#0x180          ;731
000122  eb031302          ADD      r3,r3,r2,LSL #4       ;731
000126  6058              STR      r0,[r3,#4]            ;731
000128  6b08              LDR      r0,[r1,#0x30]         ;734
00012a  e000              B        |L17.302|
                  |L17.300|
00012c  e04d              B        |L17.458|
                  |L17.302|
00012e  7dc0              LDRB     r0,[r0,#0x17]         ;734
000130  0603              LSLS     r3,r0,#24             ;734
000132  6b08              LDR      r0,[r1,#0x30]         ;734
000134  7d80              LDRB     r0,[r0,#0x16]         ;734
000136  ea434300          ORR      r3,r3,r0,LSL #16      ;734
00013a  6b08              LDR      r0,[r1,#0x30]         ;734
00013c  7d40              LDRB     r0,[r0,#0x15]         ;734
00013e  ea432300          ORR      r3,r3,r0,LSL #8       ;734
000142  6b08              LDR      r0,[r1,#0x30]         ;734
000144  7d00              LDRB     r0,[r0,#0x14]         ;734
000146  4303              ORRS     r3,r3,r0              ;734
000148  6808              LDR      r0,[r1,#0]            ;734
00014a  f50070c0          ADD      r0,r0,#0x180          ;734
00014e  eb001002          ADD      r0,r0,r2,LSL #4       ;734
000152  6083              STR      r3,[r0,#8]            ;734
000154  6b08              LDR      r0,[r1,#0x30]         ;738
000156  7ec0              LDRB     r0,[r0,#0x1b]         ;738
000158  0603              LSLS     r3,r0,#24             ;738
00015a  6b08              LDR      r0,[r1,#0x30]         ;738
00015c  7e80              LDRB     r0,[r0,#0x1a]         ;738
00015e  ea434300          ORR      r3,r3,r0,LSL #16      ;738
000162  6b08              LDR      r0,[r1,#0x30]         ;738
000164  7e40              LDRB     r0,[r0,#0x19]         ;738
000166  ea432000          ORR      r0,r3,r0,LSL #8       ;738
00016a  6b0b              LDR      r3,[r1,#0x30]         ;738
00016c  7e1b              LDRB     r3,[r3,#0x18]         ;738
00016e  4318              ORRS     r0,r0,r3              ;738
000170  680b              LDR      r3,[r1,#0]            ;738
000172  f50373c0          ADD      r3,r3,#0x180          ;738
000176  eb031302          ADD      r3,r3,r2,LSL #4       ;738
00017a  60d8              STR      r0,[r3,#0xc]          ;738
00017c  f8910038          LDRB     r0,[r1,#0x38]         ;743
000180  2822              CMP      r0,#0x22              ;743
000182  d103              BNE      |L17.396|
000184  2032              MOVS     r0,#0x32              ;746
000186  f8810038          STRB     r0,[r1,#0x38]         ;746
00018a  e002              B        |L17.402|
                  |L17.396|
00018c  2012              MOVS     r0,#0x12              ;751
00018e  f8810038          STRB     r0,[r1,#0x38]         ;751
                  |L17.402|
000192  2000              MOVS     r0,#0                 ;755
000194  63c8              STR      r0,[r1,#0x3c]         ;755
000196  bf00              NOP                            ;758
000198  f8810039          STRB     r0,[r1,#0x39]         ;758
00019c  bf00              NOP                            ;758
00019e  6808              LDR      r0,[r1,#0]            ;762
0001a0  6940              LDR      r0,[r0,#0x14]         ;762
0001a2  f6487301          MOV      r3,#0x8f01            ;762
0001a6  4318              ORRS     r0,r0,r3              ;762
0001a8  680b              LDR      r3,[r1,#0]            ;762
0001aa  6158              STR      r0,[r3,#0x14]         ;762
0001ac  6808              LDR      r0,[r1,#0]            ;770
0001ae  f50070c0          ADD      r0,r0,#0x180          ;770
0001b2  eb001002          ADD      r0,r0,r2,LSL #4       ;770
0001b6  6800              LDR      r0,[r0,#0]            ;770
0001b8  f0400301          ORR      r3,r0,#1              ;770
0001bc  6808              LDR      r0,[r1,#0]            ;770
0001be  f50070c0          ADD      r0,r0,#0x180          ;770
0001c2  eb001002          ADD      r0,r0,r2,LSL #4       ;770
0001c6  6003              STR      r3,[r0,#0]            ;770
0001c8  e004              B        |L17.468|
                  |L17.458|
0001ca  2004              MOVS     r0,#4                 ;775
0001cc  f8810038          STRB     r0,[r1,#0x38]         ;775
0001d0  2001              MOVS     r0,#1                 ;778
0001d2  e733              B        |L17.60|
                  |L17.468|
0001d4  2000              MOVS     r0,#0                 ;781
0001d6  e731              B        |L17.60|
;;;783    
                          ENDP


                          AREA ||i.HAL_CAN_TxCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_CAN_TxCpltCallback PROC
;;;1190     */
;;;1191   __weak void HAL_CAN_TxCpltCallback(CAN_HandleTypeDef* hcan)
000000  4770              BX       lr
;;;1192   {
;;;1193     /* Prevent unused argument(s) compilation warning */
;;;1194     UNUSED(hcan);
;;;1195     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1196               the HAL_CAN_TxCpltCallback could be implemented in the user file
;;;1197      */
;;;1198   }
;;;1199   
                          ENDP


                          AREA ||i.HAL_CAN_WakeUp||, CODE, READONLY, ALIGN=1

                  HAL_CAN_WakeUp PROC
;;;1014     */
;;;1015   HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef* hcan)
000000  b570              PUSH     {r4-r6,lr}
;;;1016   {
000002  4604              MOV      r4,r0
;;;1017     uint32_t tickstart = 0;
000004  2500              MOVS     r5,#0
;;;1018       
;;;1019     /* Process locked */
;;;1020     __HAL_LOCK(hcan);
000006  bf00              NOP      
000008  f8940039          LDRB     r0,[r4,#0x39]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L19.20|
000010  2002              MOVS     r0,#2
                  |L19.18|
;;;1021     
;;;1022     /* Change CAN state */
;;;1023     hcan->State = HAL_CAN_STATE_BUSY;  
;;;1024    
;;;1025     /* Wake up request */
;;;1026     hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
;;;1027   
;;;1028     /* Get tick */
;;;1029     tickstart = HAL_GetTick();
;;;1030   
;;;1031     /* Sleep mode status */
;;;1032     while((hcan->Instance->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)
;;;1033     {
;;;1034       if((HAL_GetTick()  - tickstart) > CAN_TIMEOUT_VALUE)
;;;1035       {
;;;1036         hcan->State= HAL_CAN_STATE_TIMEOUT;
;;;1037         /* Process unlocked */
;;;1038         __HAL_UNLOCK(hcan);
;;;1039         return HAL_TIMEOUT;
;;;1040       }
;;;1041     }
;;;1042     if((hcan->Instance->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)
;;;1043     {
;;;1044       /* Process unlocked */
;;;1045       __HAL_UNLOCK(hcan);
;;;1046   
;;;1047       /* Return function status */
;;;1048       return HAL_ERROR;
;;;1049     }
;;;1050     
;;;1051     /* Change CAN state */
;;;1052     hcan->State = HAL_CAN_STATE_READY;
;;;1053     
;;;1054     /* Process unlocked */
;;;1055     __HAL_UNLOCK(hcan);
;;;1056     
;;;1057     /* Return function status */
;;;1058     return HAL_OK;
;;;1059   }
000012  bd70              POP      {r4-r6,pc}
                  |L19.20|
000014  2001              MOVS     r0,#1                 ;1020
000016  f8840039          STRB     r0,[r4,#0x39]         ;1020
00001a  bf00              NOP                            ;1020
00001c  2002              MOVS     r0,#2                 ;1023
00001e  f8840038          STRB     r0,[r4,#0x38]         ;1023
000022  6820              LDR      r0,[r4,#0]            ;1026
000024  6800              LDR      r0,[r0,#0]            ;1026
000026  f0200002          BIC      r0,r0,#2              ;1026
00002a  6821              LDR      r1,[r4,#0]            ;1026
00002c  6008              STR      r0,[r1,#0]            ;1026
00002e  f7fffffe          BL       HAL_GetTick
000032  4605              MOV      r5,r0                 ;1029
000034  e00e              B        |L19.84|
                  |L19.54|
000036  f7fffffe          BL       HAL_GetTick
00003a  1b40              SUBS     r0,r0,r5              ;1034
00003c  280a              CMP      r0,#0xa               ;1034
00003e  d909              BLS      |L19.84|
000040  2003              MOVS     r0,#3                 ;1036
000042  f8840038          STRB     r0,[r4,#0x38]         ;1036
000046  bf00              NOP                            ;1038
000048  2000              MOVS     r0,#0                 ;1038
00004a  f8840039          STRB     r0,[r4,#0x39]         ;1038
00004e  bf00              NOP                            ;1038
000050  2003              MOVS     r0,#3                 ;1039
000052  e7de              B        |L19.18|
                  |L19.84|
000054  6820              LDR      r0,[r4,#0]            ;1032
000056  6840              LDR      r0,[r0,#4]            ;1032
000058  f0000002          AND      r0,r0,#2              ;1032
00005c  2802              CMP      r0,#2                 ;1032
00005e  d0ea              BEQ      |L19.54|
000060  6820              LDR      r0,[r4,#0]            ;1042
000062  6840              LDR      r0,[r0,#4]            ;1042
000064  f0000002          AND      r0,r0,#2              ;1042
000068  2802              CMP      r0,#2                 ;1042
00006a  d106              BNE      |L19.122|
00006c  bf00              NOP                            ;1045
00006e  2000              MOVS     r0,#0                 ;1045
000070  f8840039          STRB     r0,[r4,#0x39]         ;1045
000074  bf00              NOP                            ;1045
000076  2001              MOVS     r0,#1                 ;1048
000078  e7cb              B        |L19.18|
                  |L19.122|
00007a  2001              MOVS     r0,#1                 ;1052
00007c  f8840038          STRB     r0,[r4,#0x38]         ;1052
000080  bf00              NOP                            ;1055
000082  2000              MOVS     r0,#0                 ;1055
000084  f8840039          STRB     r0,[r4,#0x39]         ;1055
000088  bf00              NOP                            ;1055
00008a  bf00              NOP                            ;1058
00008c  e7c1              B        |L19.18|
;;;1060   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\HALLIB\\STM32F7xx_HAL_Driver\\Src\\stm32f7xx_hal_can.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f7xx_hal_can_c_fe6cb454____REV16|
#line 388 "..\\CORE\\cmsis_armcc.h"
|__asm___19_stm32f7xx_hal_can_c_fe6cb454____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f7xx_hal_can_c_fe6cb454____REVSH|
#line 402
|__asm___19_stm32f7xx_hal_can_c_fe6cb454____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f7xx_hal_can_c_fe6cb454____RRX|
#line 587
|__asm___19_stm32f7xx_hal_can_c_fe6cb454____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
