; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\stm32f7xx_hal_ltdc.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\stm32f7xx_hal_ltdc.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\OBJ -I..\USER -I..\HALLIB\STM32F7xx_HAL_Driver\Inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\SDRAM -I..\HARDWARE\IIC -I..\HARDWARE\24CXX -I..\HARDWARE\MPU9250 -I..\HARDWARE\DHT11 -I..\HARDWARE\MPU -I..\USMART -I..\DMP\driver\eMPL -I..\DMP\driver\include -I..\DMP\driver\stm32L -I..\DMP\eMPL-hal -I..\DMP\mllite -I..\DMP\mpl -I..\UCOSIII -I..\UCOSIII\UCOS-BSP -I..\UCOSIII\UCOS-CONFIG -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\uC-CPU\ARM-Cortex-M4\RealView -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-CPU -I..\HARDWARE\MY_FUNCTION -I..\USER -I..\HARDWARE\CRC -I..\HARDWARE\DMA -I..\HARDWARE\HEART_BEAT -I..\HARDWARE\RECEIVE_ANALYZE -I..\HARDWARE\FEED_BACK -I..\HARDWARE\DATA -I"D:\1111111\32F4\Slam car\实验35 MPU9250九轴传感器实验\USER\RTE" -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0 -IF:\Keil_v5\ARM\CMSIS\Include -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__UVISION_VERSION=514 -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=..\obj\stm32f7xx_hal_ltdc.crf ..\HALLIB\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_ltdc.c]
                          THUMB

                          AREA ||i.HAL_LTDC_ConfigCLUT||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_ConfigCLUT PROC
;;;594      */
;;;595    HAL_StatusTypeDef HAL_LTDC_ConfigCLUT(LTDC_HandleTypeDef *hltdc, uint32_t *pCLUT, uint32_t CLUTSize, uint32_t LayerIdx)
000000  b5f0              PUSH     {r4-r7,lr}
;;;596    {
000002  4604              MOV      r4,r0
000004  4615              MOV      r5,r2
;;;597      uint32_t tmp = 0;
000006  2600              MOVS     r6,#0
;;;598      uint32_t counter = 0;
000008  2200              MOVS     r2,#0
;;;599      uint32_t pcounter = 0;
00000a  2700              MOVS     r7,#0
;;;600    
;;;601      /* Process locked */
;;;602      __HAL_LOCK(hltdc);
00000c  bf00              NOP      
00000e  f89400a0          LDRB     r0,[r4,#0xa0]
000012  2801              CMP      r0,#1
000014  d101              BNE      |L1.26|
000016  2002              MOVS     r0,#2
                  |L1.24|
;;;603    
;;;604      /* Change LTDC peripheral state */
;;;605      hltdc->State = HAL_LTDC_STATE_BUSY;  
;;;606    
;;;607      /* Check the parameters */
;;;608      assert_param(IS_LTDC_LAYER(LayerIdx)); 
;;;609    
;;;610      for(counter = 0; (counter < CLUTSize); counter++)
;;;611      {
;;;612        if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
;;;613        {
;;;614          tmp  = (((counter + 16*counter) << 24) | ((uint32_t)(*pCLUT) & 0xFF) | ((uint32_t)(*pCLUT) & 0xFF00) | ((uint32_t)(*pCLUT) & 0xFF0000));
;;;615        }
;;;616        else
;;;617        { 
;;;618          tmp  = ((counter << 24) | ((uint32_t)(*pCLUT) & 0xFF) | ((uint32_t)(*pCLUT) & 0xFF00) | ((uint32_t)(*pCLUT) & 0xFF0000));
;;;619        }
;;;620        pcounter = (uint32_t)pCLUT + sizeof(*pCLUT);
;;;621        pCLUT = (uint32_t *)pcounter;
;;;622    
;;;623        /* Specifies the C-LUT address and RGB value */
;;;624        LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
;;;625      }
;;;626      
;;;627      /* Change the LTDC state*/
;;;628      hltdc->State = HAL_LTDC_STATE_READY; 
;;;629    
;;;630      /* Process unlocked */
;;;631      __HAL_UNLOCK(hltdc);  
;;;632    
;;;633      return HAL_OK;
;;;634    }
000018  bdf0              POP      {r4-r7,pc}
                  |L1.26|
00001a  2001              MOVS     r0,#1                 ;602
00001c  f88400a0          STRB     r0,[r4,#0xa0]         ;602
000020  bf00              NOP                            ;602
000022  2002              MOVS     r0,#2                 ;605
000024  f88400a1          STRB     r0,[r4,#0xa1]         ;605
000028  2200              MOVS     r2,#0                 ;610
00002a  e037              B        |L1.156|
                  |L1.44|
00002c  eb030083          ADD      r0,r3,r3,LSL #2       ;612
000030  eb000cc3          ADD      r12,r0,r3,LSL #3      ;612
000034  f1040038          ADD      r0,r4,#0x38           ;612
000038  eb00008c          ADD      r0,r0,r12,LSL #2      ;612
00003c  6900              LDR      r0,[r0,#0x10]         ;612
00003e  2806              CMP      r0,#6                 ;612
000040  d113              BNE      |L1.106|
000042  7808              LDRB     r0,[r1,#0]            ;614
000044  f04f0c10          MOV      r12,#0x10             ;614
000048  fb0c2c02          MLA      r12,r12,r2,r2         ;614
00004c  ea40600c          ORR      r0,r0,r12,LSL #24     ;614
000050  f8b1c000          LDRH     r12,[r1,#0]           ;614
000054  f40c4c7f          AND      r12,r12,#0xff00       ;614
000058  ea40000c          ORR      r0,r0,r12             ;614
00005c  f8d1c000          LDR      r12,[r1,#0]           ;614
000060  f40c0c7f          AND      r12,r12,#0xff0000     ;614
000064  ea40060c          ORR      r6,r0,r12             ;614
000068  e00e              B        |L1.136|
                  |L1.106|
00006a  7808              LDRB     r0,[r1,#0]            ;618
00006c  ea406002          ORR      r0,r0,r2,LSL #24      ;618
000070  f8b1c000          LDRH     r12,[r1,#0]           ;618
000074  f40c4c7f          AND      r12,r12,#0xff00       ;618
000078  ea40000c          ORR      r0,r0,r12             ;618
00007c  f8d1c000          LDR      r12,[r1,#0]           ;618
000080  f40c0c7f          AND      r12,r12,#0xff0000     ;618
000084  ea40060c          ORR      r6,r0,r12             ;618
                  |L1.136|
000088  1d0f              ADDS     r7,r1,#4              ;620
00008a  4639              MOV      r1,r7                 ;621
00008c  6820              LDR      r0,[r4,#0]            ;624
00008e  3084              ADDS     r0,r0,#0x84           ;624
000090  f04f0c80          MOV      r12,#0x80             ;624
000094  fb0c0003          MLA      r0,r12,r3,r0          ;624
000098  6406              STR      r6,[r0,#0x40]         ;624
00009a  1c52              ADDS     r2,r2,#1              ;610
                  |L1.156|
00009c  42aa              CMP      r2,r5                 ;610
00009e  d3c5              BCC      |L1.44|
0000a0  2001              MOVS     r0,#1                 ;628
0000a2  f88400a1          STRB     r0,[r4,#0xa1]         ;628
0000a6  bf00              NOP                            ;631
0000a8  2000              MOVS     r0,#0                 ;631
0000aa  f88400a0          STRB     r0,[r4,#0xa0]         ;631
0000ae  bf00              NOP                            ;631
0000b0  bf00              NOP                            ;633
0000b2  e7b1              B        |L1.24|
;;;635    
                          ENDP


                          AREA ||i.HAL_LTDC_ConfigColorKeying||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_ConfigColorKeying PROC
;;;556      */
;;;557    HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
000000  b530              PUSH     {r4,r5,lr}
;;;558    {
000002  4603              MOV      r3,r0
;;;559      /* Process locked */
;;;560      __HAL_LOCK(hltdc);
000004  bf00              NOP      
000006  f89300a0          LDRB     r0,[r3,#0xa0]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L2.18|
00000e  2002              MOVS     r0,#2
                  |L2.16|
;;;561    
;;;562      /* Change LTDC peripheral state */
;;;563      hltdc->State = HAL_LTDC_STATE_BUSY;
;;;564    
;;;565      /* Check the parameters */
;;;566      assert_param(IS_LTDC_LAYER(LayerIdx));
;;;567    
;;;568      /* Configures the default color values */
;;;569      LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
;;;570      LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
;;;571    
;;;572      /* Sets the Reload type */
;;;573      hltdc->Instance->SRCR = LTDC_SRCR_IMR;
;;;574    
;;;575      /* Change the LTDC state*/
;;;576      hltdc->State = HAL_LTDC_STATE_READY;
;;;577    
;;;578      /* Process unlocked */
;;;579      __HAL_UNLOCK(hltdc);
;;;580    
;;;581      return HAL_OK;
;;;582    }
000010  bd30              POP      {r4,r5,pc}
                  |L2.18|
000012  2001              MOVS     r0,#1                 ;560
000014  f88300a0          STRB     r0,[r3,#0xa0]         ;560
000018  bf00              NOP                            ;560
00001a  2002              MOVS     r0,#2                 ;563
00001c  f88300a1          STRB     r0,[r3,#0xa1]         ;563
000020  6818              LDR      r0,[r3,#0]            ;569
000022  3084              ADDS     r0,r0,#0x84           ;569
000024  2480              MOVS     r4,#0x80              ;569
000026  fb040002          MLA      r0,r4,r2,r0           ;569
00002a  68c0              LDR      r0,[r0,#0xc]          ;569
00002c  f000447f          AND      r4,r0,#0xff000000     ;569
000030  6818              LDR      r0,[r3,#0]            ;569
000032  3084              ADDS     r0,r0,#0x84           ;569
000034  2580              MOVS     r5,#0x80              ;569
000036  fb050002          MLA      r0,r5,r2,r0           ;569
00003a  60c4              STR      r4,[r0,#0xc]          ;569
00003c  6818              LDR      r0,[r3,#0]            ;570
00003e  3084              ADDS     r0,r0,#0x84           ;570
000040  2480              MOVS     r4,#0x80              ;570
000042  fb040002          MLA      r0,r4,r2,r0           ;570
000046  60c1              STR      r1,[r0,#0xc]          ;570
000048  2001              MOVS     r0,#1                 ;573
00004a  681c              LDR      r4,[r3,#0]            ;573
00004c  6260              STR      r0,[r4,#0x24]         ;573
00004e  f88300a1          STRB     r0,[r3,#0xa1]         ;576
000052  bf00              NOP                            ;579
000054  2000              MOVS     r0,#0                 ;579
000056  f88300a0          STRB     r0,[r3,#0xa0]         ;579
00005a  bf00              NOP                            ;579
00005c  bf00              NOP                            ;581
00005e  e7d7              B        |L2.16|
;;;583    
                          ENDP


                          AREA ||i.HAL_LTDC_ConfigColorKeying_NoReload||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_ConfigColorKeying_NoReload PROC
;;;1605     */
;;;1606   HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
000000  b530              PUSH     {r4,r5,lr}
;;;1607   {
000002  4603              MOV      r3,r0
;;;1608     /* Process locked */
;;;1609     __HAL_LOCK(hltdc);
000004  bf00              NOP      
000006  f89300a0          LDRB     r0,[r3,#0xa0]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L3.18|
00000e  2002              MOVS     r0,#2
                  |L3.16|
;;;1610   
;;;1611     /* Change LTDC peripheral state */
;;;1612     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1613   
;;;1614     /* Check the parameters */
;;;1615     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1616   
;;;1617     /* Configures the default color values */
;;;1618     LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
;;;1619     LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
;;;1620   
;;;1621     /* Do not Sets the Reload  */
;;;1622   
;;;1623     /* Change the LTDC state*/
;;;1624     hltdc->State = HAL_LTDC_STATE_READY;
;;;1625   
;;;1626     /* Process unlocked */
;;;1627     __HAL_UNLOCK(hltdc);
;;;1628   
;;;1629     return HAL_OK;
;;;1630   }
000010  bd30              POP      {r4,r5,pc}
                  |L3.18|
000012  2001              MOVS     r0,#1                 ;1609
000014  f88300a0          STRB     r0,[r3,#0xa0]         ;1609
000018  bf00              NOP                            ;1609
00001a  2002              MOVS     r0,#2                 ;1612
00001c  f88300a1          STRB     r0,[r3,#0xa1]         ;1612
000020  6818              LDR      r0,[r3,#0]            ;1618
000022  3084              ADDS     r0,r0,#0x84           ;1618
000024  2480              MOVS     r4,#0x80              ;1618
000026  fb040002          MLA      r0,r4,r2,r0           ;1618
00002a  68c0              LDR      r0,[r0,#0xc]          ;1618
00002c  f000447f          AND      r4,r0,#0xff000000     ;1618
000030  6818              LDR      r0,[r3,#0]            ;1618
000032  3084              ADDS     r0,r0,#0x84           ;1618
000034  2580              MOVS     r5,#0x80              ;1618
000036  fb050002          MLA      r0,r5,r2,r0           ;1618
00003a  60c4              STR      r4,[r0,#0xc]          ;1618
00003c  6818              LDR      r0,[r3,#0]            ;1619
00003e  3084              ADDS     r0,r0,#0x84           ;1619
000040  2480              MOVS     r4,#0x80              ;1619
000042  fb040002          MLA      r0,r4,r2,r0           ;1619
000046  60c1              STR      r1,[r0,#0xc]          ;1619
000048  2001              MOVS     r0,#1                 ;1624
00004a  f88300a1          STRB     r0,[r3,#0xa1]         ;1624
00004e  bf00              NOP                            ;1627
000050  2000              MOVS     r0,#0                 ;1627
000052  f88300a0          STRB     r0,[r3,#0xa0]         ;1627
000056  bf00              NOP                            ;1627
000058  bf00              NOP                            ;1629
00005a  e7d9              B        |L3.16|
;;;1631   
                          ENDP


                          AREA ||i.HAL_LTDC_ConfigLayer||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_ConfigLayer PROC
;;;507      */
;;;508    HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
000000  b570              PUSH     {r4-r6,lr}
;;;509    {   
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;510      /* Process locked */
;;;511      __HAL_LOCK(hltdc);
000008  bf00              NOP      
00000a  f89400a0          LDRB     r0,[r4,#0xa0]
00000e  2801              CMP      r0,#1
000010  d101              BNE      |L4.22|
000012  2002              MOVS     r0,#2
                  |L4.20|
;;;512      
;;;513      /* Change LTDC peripheral state */
;;;514      hltdc->State = HAL_LTDC_STATE_BUSY;
;;;515    
;;;516      /* Check the parameters */
;;;517      assert_param(IS_LTDC_LAYER(LayerIdx));
;;;518      assert_param(IS_LTDC_PIXEL_FORMAT(pLayerCfg->PixelFormat));
;;;519      assert_param(IS_LTDC_BLENDING_FACTOR1(pLayerCfg->BlendingFactor1));
;;;520      assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
;;;521      assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
;;;522      assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
;;;523      assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
;;;524      assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
;;;525      assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
;;;526      assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
;;;527      assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));
;;;528    
;;;529      /* Copy new layer configuration into handle structure */
;;;530      hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
;;;531    
;;;532      /* Configure the LTDC Layer */  
;;;533      LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
;;;534    
;;;535      /* Sets the Reload type */
;;;536      hltdc->Instance->SRCR = LTDC_SRCR_IMR;
;;;537    
;;;538      /* Initialize the LTDC state*/
;;;539      hltdc->State  = HAL_LTDC_STATE_READY;
;;;540    
;;;541      /* Process unlocked */
;;;542      __HAL_UNLOCK(hltdc);
;;;543    
;;;544      return HAL_OK;
;;;545    }
000014  bd70              POP      {r4-r6,pc}
                  |L4.22|
000016  2001              MOVS     r0,#1                 ;511
000018  f88400a0          STRB     r0,[r4,#0xa0]         ;511
00001c  bf00              NOP                            ;511
00001e  2002              MOVS     r0,#2                 ;514
000020  f88400a1          STRB     r0,[r4,#0xa1]         ;514
000024  eb050185          ADD      r1,r5,r5,LSL #2       ;530
000028  eb0102c5          ADD      r2,r1,r5,LSL #3       ;530
00002c  f1040138          ADD      r1,r4,#0x38           ;530
000030  eb010082          ADD      r0,r1,r2,LSL #2       ;530
000034  2234              MOVS     r2,#0x34              ;530
000036  4631              MOV      r1,r6                 ;530
000038  f7fffffe          BL       __aeabi_memcpy4
00003c  462a              MOV      r2,r5                 ;533
00003e  4631              MOV      r1,r6                 ;533
000040  4620              MOV      r0,r4                 ;533
000042  f7fffffe          BL       LTDC_SetConfig
000046  2001              MOVS     r0,#1                 ;536
000048  6821              LDR      r1,[r4,#0]            ;536
00004a  6248              STR      r0,[r1,#0x24]         ;536
00004c  f88400a1          STRB     r0,[r4,#0xa1]         ;539
000050  bf00              NOP                            ;542
000052  2000              MOVS     r0,#0                 ;542
000054  f88400a0          STRB     r0,[r4,#0xa0]         ;542
000058  bf00              NOP                            ;542
00005a  bf00              NOP                            ;544
00005c  e7da              B        |L4.20|
;;;546    
                          ENDP


                          AREA ||i.HAL_LTDC_ConfigLayer_NoReload||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_ConfigLayer_NoReload PROC
;;;1234     */
;;;1235   HAL_StatusTypeDef HAL_LTDC_ConfigLayer_NoReload(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
000000  b570              PUSH     {r4-r6,lr}
;;;1236   {   
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;1237     /* Process locked */
;;;1238     __HAL_LOCK(hltdc);
000008  bf00              NOP      
00000a  f89400a0          LDRB     r0,[r4,#0xa0]
00000e  2801              CMP      r0,#1
000010  d101              BNE      |L5.22|
000012  2002              MOVS     r0,#2
                  |L5.20|
;;;1239     
;;;1240     /* Change LTDC peripheral state */
;;;1241     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1242   
;;;1243     /* Check the parameters */
;;;1244     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1245     assert_param(IS_LTDC_PIXEL_FORMAT(pLayerCfg->PixelFormat));
;;;1246     assert_param(IS_LTDC_BLENDING_FACTOR1(pLayerCfg->BlendingFactor1));
;;;1247     assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
;;;1248     assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
;;;1249     assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
;;;1250     assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
;;;1251     assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
;;;1252     assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
;;;1253     assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
;;;1254     assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));
;;;1255   
;;;1256     /* Copy new layer configuration into handle structure */
;;;1257     hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
;;;1258   
;;;1259     /* Configure the LTDC Layer */  
;;;1260     LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
;;;1261   
;;;1262     /* Do not Sets the Reload  */
;;;1263   
;;;1264     /* Initialize the LTDC state*/
;;;1265     hltdc->State  = HAL_LTDC_STATE_READY;
;;;1266   
;;;1267     /* Process unlocked */
;;;1268     __HAL_UNLOCK(hltdc);
;;;1269   
;;;1270     return HAL_OK;
;;;1271   }
000014  bd70              POP      {r4-r6,pc}
                  |L5.22|
000016  2001              MOVS     r0,#1                 ;1238
000018  f88400a0          STRB     r0,[r4,#0xa0]         ;1238
00001c  bf00              NOP                            ;1238
00001e  2002              MOVS     r0,#2                 ;1241
000020  f88400a1          STRB     r0,[r4,#0xa1]         ;1241
000024  eb050185          ADD      r1,r5,r5,LSL #2       ;1257
000028  eb0102c5          ADD      r2,r1,r5,LSL #3       ;1257
00002c  f1040138          ADD      r1,r4,#0x38           ;1257
000030  eb010082          ADD      r0,r1,r2,LSL #2       ;1257
000034  2234              MOVS     r2,#0x34              ;1257
000036  4631              MOV      r1,r6                 ;1257
000038  f7fffffe          BL       __aeabi_memcpy4
00003c  462a              MOV      r2,r5                 ;1260
00003e  4631              MOV      r1,r6                 ;1260
000040  4620              MOV      r0,r4                 ;1260
000042  f7fffffe          BL       LTDC_SetConfig
000046  2001              MOVS     r0,#1                 ;1265
000048  f88400a1          STRB     r0,[r4,#0xa1]         ;1265
00004c  bf00              NOP                            ;1268
00004e  2000              MOVS     r0,#0                 ;1268
000050  f88400a0          STRB     r0,[r4,#0xa0]         ;1268
000054  bf00              NOP                            ;1268
000056  bf00              NOP                            ;1270
000058  e7dc              B        |L5.20|
;;;1272   
                          ENDP


                          AREA ||i.HAL_LTDC_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_DeInit PROC
;;;253    
;;;254    HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
000000  b510              PUSH     {r4,lr}
;;;255    {
000002  4604              MOV      r4,r0
;;;256      /* DeInit the low level hardware */
;;;257      HAL_LTDC_MspDeInit(hltdc); 
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       HAL_LTDC_MspDeInit
;;;258    
;;;259      /* Initialize the error code */
;;;260      hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
00000a  2000              MOVS     r0,#0
00000c  f8c400a4          STR      r0,[r4,#0xa4]
;;;261    
;;;262      /* Initialize the LTDC state*/
;;;263      hltdc->State = HAL_LTDC_STATE_RESET;
000010  f88400a1          STRB     r0,[r4,#0xa1]
;;;264    
;;;265      /* Release Lock */
;;;266      __HAL_UNLOCK(hltdc);
000014  bf00              NOP      
000016  f88400a0          STRB     r0,[r4,#0xa0]
00001a  bf00              NOP      
;;;267    
;;;268      return HAL_OK;
;;;269    }
00001c  bd10              POP      {r4,pc}
;;;270    
                          ENDP


                          AREA ||i.HAL_LTDC_DisableCLUT||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_DisableCLUT PROC
;;;750      */
;;;751    HAL_StatusTypeDef HAL_LTDC_DisableCLUT(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
000000  b510              PUSH     {r4,lr}
;;;752    {
000002  4602              MOV      r2,r0
;;;753     
;;;754      /* Process locked */
;;;755      __HAL_LOCK(hltdc);
000004  bf00              NOP      
000006  f89200a0          LDRB     r0,[r2,#0xa0]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L7.18|
00000e  2002              MOVS     r0,#2
                  |L7.16|
;;;756    
;;;757      /* Change LTDC peripheral state */
;;;758      hltdc->State = HAL_LTDC_STATE_BUSY;
;;;759    
;;;760      /* Check the parameters */
;;;761      assert_param(IS_LTDC_LAYER(LayerIdx));
;;;762    
;;;763      /* Disable LTDC color lookup table by setting CLUTEN bit */
;;;764      LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_CLUTEN;
;;;765    
;;;766      /* Sets the Reload type */
;;;767      hltdc->Instance->SRCR = LTDC_SRCR_IMR;
;;;768    
;;;769      /* Change the LTDC state*/
;;;770      hltdc->State = HAL_LTDC_STATE_READY; 
;;;771    
;;;772      /* Process unlocked */
;;;773      __HAL_UNLOCK(hltdc);
;;;774    
;;;775      return HAL_OK;
;;;776    }
000010  bd10              POP      {r4,pc}
                  |L7.18|
000012  2001              MOVS     r0,#1                 ;755
000014  f88200a0          STRB     r0,[r2,#0xa0]         ;755
000018  bf00              NOP                            ;755
00001a  2002              MOVS     r0,#2                 ;758
00001c  f88200a1          STRB     r0,[r2,#0xa1]         ;758
000020  6810              LDR      r0,[r2,#0]            ;764
000022  3084              ADDS     r0,r0,#0x84           ;764
000024  01cb              LSLS     r3,r1,#7              ;764
000026  58c0              LDR      r0,[r0,r3]            ;764
000028  f0200310          BIC      r3,r0,#0x10           ;764
00002c  6810              LDR      r0,[r2,#0]            ;764
00002e  3084              ADDS     r0,r0,#0x84           ;764
000030  01cc              LSLS     r4,r1,#7              ;764
000032  5103              STR      r3,[r0,r4]            ;764
000034  2001              MOVS     r0,#1                 ;767
000036  6813              LDR      r3,[r2,#0]            ;767
000038  6258              STR      r0,[r3,#0x24]         ;767
00003a  f88200a1          STRB     r0,[r2,#0xa1]         ;770
00003e  bf00              NOP                            ;773
000040  2000              MOVS     r0,#0                 ;773
000042  f88200a0          STRB     r0,[r2,#0xa0]         ;773
000046  bf00              NOP                            ;773
000048  bf00              NOP                            ;775
00004a  e7e1              B        |L7.16|
;;;777    
                          ENDP


                          AREA ||i.HAL_LTDC_DisableCLUT_NoReload||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_DisableCLUT_NoReload PROC
;;;1747     */
;;;1748   HAL_StatusTypeDef HAL_LTDC_DisableCLUT_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
000000  b510              PUSH     {r4,lr}
;;;1749   {
000002  4602              MOV      r2,r0
;;;1750    
;;;1751     /* Process locked */
;;;1752     __HAL_LOCK(hltdc);
000004  bf00              NOP      
000006  f89200a0          LDRB     r0,[r2,#0xa0]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L8.18|
00000e  2002              MOVS     r0,#2
                  |L8.16|
;;;1753   
;;;1754     /* Change LTDC peripheral state */
;;;1755     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1756   
;;;1757     /* Check the parameters */
;;;1758     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1759   
;;;1760     /* Disable LTDC color lookup table by setting CLUTEN bit */
;;;1761     LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_CLUTEN;
;;;1762   
;;;1763     /* Do not Sets the Reload  */
;;;1764   
;;;1765     /* Change the LTDC state*/
;;;1766     hltdc->State = HAL_LTDC_STATE_READY; 
;;;1767   
;;;1768     /* Process unlocked */
;;;1769     __HAL_UNLOCK(hltdc);
;;;1770   
;;;1771     return HAL_OK;
;;;1772   }
000010  bd10              POP      {r4,pc}
                  |L8.18|
000012  2001              MOVS     r0,#1                 ;1752
000014  f88200a0          STRB     r0,[r2,#0xa0]         ;1752
000018  bf00              NOP                            ;1752
00001a  2002              MOVS     r0,#2                 ;1755
00001c  f88200a1          STRB     r0,[r2,#0xa1]         ;1755
000020  6810              LDR      r0,[r2,#0]            ;1761
000022  3084              ADDS     r0,r0,#0x84           ;1761
000024  01cb              LSLS     r3,r1,#7              ;1761
000026  58c0              LDR      r0,[r0,r3]            ;1761
000028  f0200310          BIC      r3,r0,#0x10           ;1761
00002c  6810              LDR      r0,[r2,#0]            ;1761
00002e  3084              ADDS     r0,r0,#0x84           ;1761
000030  01cc              LSLS     r4,r1,#7              ;1761
000032  5103              STR      r3,[r0,r4]            ;1761
000034  2001              MOVS     r0,#1                 ;1766
000036  f88200a1          STRB     r0,[r2,#0xa1]         ;1766
00003a  bf00              NOP                            ;1769
00003c  2000              MOVS     r0,#0                 ;1769
00003e  f88200a0          STRB     r0,[r2,#0xa0]         ;1769
000042  bf00              NOP                            ;1769
000044  bf00              NOP                            ;1771
000046  e7e3              B        |L8.16|
;;;1773   
                          ENDP


                          AREA ||i.HAL_LTDC_DisableColorKeying||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_DisableColorKeying PROC
;;;679      */
;;;680    HAL_StatusTypeDef HAL_LTDC_DisableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
000000  b510              PUSH     {r4,lr}
;;;681    {
000002  4602              MOV      r2,r0
;;;682      /* Process locked */
;;;683      __HAL_LOCK(hltdc);
000004  bf00              NOP      
000006  f89200a0          LDRB     r0,[r2,#0xa0]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L9.18|
00000e  2002              MOVS     r0,#2
                  |L9.16|
;;;684    
;;;685      /* Change LTDC peripheral state */
;;;686      hltdc->State = HAL_LTDC_STATE_BUSY;
;;;687    
;;;688      /* Check the parameters */
;;;689      assert_param(IS_LTDC_LAYER(LayerIdx));
;;;690    
;;;691      /* Disable LTDC color keying by setting COLKEN bit */
;;;692      LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
;;;693    
;;;694      /* Sets the Reload type */
;;;695      hltdc->Instance->SRCR = LTDC_SRCR_IMR;
;;;696    
;;;697      /* Change the LTDC state*/
;;;698      hltdc->State = HAL_LTDC_STATE_READY; 
;;;699    
;;;700      /* Process unlocked */
;;;701      __HAL_UNLOCK(hltdc);
;;;702    
;;;703      return HAL_OK;
;;;704    }
000010  bd10              POP      {r4,pc}
                  |L9.18|
000012  2001              MOVS     r0,#1                 ;683
000014  f88200a0          STRB     r0,[r2,#0xa0]         ;683
000018  bf00              NOP                            ;683
00001a  2002              MOVS     r0,#2                 ;686
00001c  f88200a1          STRB     r0,[r2,#0xa1]         ;686
000020  6810              LDR      r0,[r2,#0]            ;692
000022  3084              ADDS     r0,r0,#0x84           ;692
000024  01cb              LSLS     r3,r1,#7              ;692
000026  58c0              LDR      r0,[r0,r3]            ;692
000028  f0200302          BIC      r3,r0,#2              ;692
00002c  6810              LDR      r0,[r2,#0]            ;692
00002e  3084              ADDS     r0,r0,#0x84           ;692
000030  01cc              LSLS     r4,r1,#7              ;692
000032  5103              STR      r3,[r0,r4]            ;692
000034  2001              MOVS     r0,#1                 ;695
000036  6813              LDR      r3,[r2,#0]            ;695
000038  6258              STR      r0,[r3,#0x24]         ;695
00003a  f88200a1          STRB     r0,[r2,#0xa1]         ;698
00003e  bf00              NOP                            ;701
000040  2000              MOVS     r0,#0                 ;701
000042  f88200a0          STRB     r0,[r2,#0xa0]         ;701
000046  bf00              NOP                            ;701
000048  bf00              NOP                            ;703
00004a  e7e1              B        |L9.16|
;;;705    
                          ENDP


                          AREA ||i.HAL_LTDC_DisableColorKeying_NoReload||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_DisableColorKeying_NoReload PROC
;;;1676     */
;;;1677   HAL_StatusTypeDef HAL_LTDC_DisableColorKeying_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
000000  b510              PUSH     {r4,lr}
;;;1678   {
000002  4602              MOV      r2,r0
;;;1679     /* Process locked */
;;;1680     __HAL_LOCK(hltdc);
000004  bf00              NOP      
000006  f89200a0          LDRB     r0,[r2,#0xa0]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L10.18|
00000e  2002              MOVS     r0,#2
                  |L10.16|
;;;1681   
;;;1682     /* Change LTDC peripheral state */
;;;1683     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1684   
;;;1685     /* Check the parameters */
;;;1686     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1687   
;;;1688     /* Disable LTDC color keying by setting COLKEN bit */
;;;1689     LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
;;;1690   
;;;1691     /* Do not Sets the Reload  */
;;;1692   
;;;1693     /* Change the LTDC state*/
;;;1694     hltdc->State = HAL_LTDC_STATE_READY; 
;;;1695   
;;;1696     /* Process unlocked */
;;;1697     __HAL_UNLOCK(hltdc);
;;;1698   
;;;1699     return HAL_OK;
;;;1700   }
000010  bd10              POP      {r4,pc}
                  |L10.18|
000012  2001              MOVS     r0,#1                 ;1680
000014  f88200a0          STRB     r0,[r2,#0xa0]         ;1680
000018  bf00              NOP                            ;1680
00001a  2002              MOVS     r0,#2                 ;1683
00001c  f88200a1          STRB     r0,[r2,#0xa1]         ;1683
000020  6810              LDR      r0,[r2,#0]            ;1689
000022  3084              ADDS     r0,r0,#0x84           ;1689
000024  01cb              LSLS     r3,r1,#7              ;1689
000026  58c0              LDR      r0,[r0,r3]            ;1689
000028  f0200302          BIC      r3,r0,#2              ;1689
00002c  6810              LDR      r0,[r2,#0]            ;1689
00002e  3084              ADDS     r0,r0,#0x84           ;1689
000030  01cc              LSLS     r4,r1,#7              ;1689
000032  5103              STR      r3,[r0,r4]            ;1689
000034  2001              MOVS     r0,#1                 ;1694
000036  f88200a1          STRB     r0,[r2,#0xa1]         ;1694
00003a  bf00              NOP                            ;1697
00003c  2000              MOVS     r0,#0                 ;1697
00003e  f88200a0          STRB     r0,[r2,#0xa0]         ;1697
000042  bf00              NOP                            ;1697
000044  bf00              NOP                            ;1699
000046  e7e3              B        |L10.16|
;;;1701   
                          ENDP


                          AREA ||i.HAL_LTDC_DisableDither||, CODE, READONLY, ALIGN=2

                  HAL_LTDC_DisableDither PROC
;;;811    
;;;812    HAL_StatusTypeDef HAL_LTDC_DisableDither(LTDC_HandleTypeDef *hltdc)
000000  4601              MOV      r1,r0
;;;813    {
;;;814      /* Process locked */
;;;815      __HAL_LOCK(hltdc);
000002  bf00              NOP      
000004  f89100a0          LDRB     r0,[r1,#0xa0]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L11.16|
00000c  2002              MOVS     r0,#2
                  |L11.14|
;;;816    
;;;817      /* Change LTDC peripheral state */
;;;818      hltdc->State = HAL_LTDC_STATE_BUSY;
;;;819    
;;;820      /* Disable Dither by setting DTEN bit */
;;;821      LTDC->GCR &= ~(uint32_t)LTDC_GCR_DEN;
;;;822    
;;;823      /* Change the LTDC state*/
;;;824      hltdc->State = HAL_LTDC_STATE_READY;
;;;825    
;;;826      /* Process unlocked */
;;;827      __HAL_UNLOCK(hltdc);
;;;828    
;;;829      return HAL_OK;
;;;830    }
00000e  4770              BX       lr
                  |L11.16|
000010  2001              MOVS     r0,#1                 ;815
000012  f88100a0          STRB     r0,[r1,#0xa0]         ;815
000016  bf00              NOP                            ;815
000018  2002              MOVS     r0,#2                 ;818
00001a  f88100a1          STRB     r0,[r1,#0xa1]         ;818
00001e  4808              LDR      r0,|L11.64|
000020  6800              LDR      r0,[r0,#0]            ;821
000022  f4203080          BIC      r0,r0,#0x10000        ;821
000026  4a06              LDR      r2,|L11.64|
000028  6010              STR      r0,[r2,#0]            ;821
00002a  2001              MOVS     r0,#1                 ;824
00002c  f88100a1          STRB     r0,[r1,#0xa1]         ;824
000030  bf00              NOP                            ;827
000032  2000              MOVS     r0,#0                 ;827
000034  f88100a0          STRB     r0,[r1,#0xa0]         ;827
000038  bf00              NOP                            ;827
00003a  bf00              NOP                            ;829
00003c  e7e7              B        |L11.14|
;;;831    
                          ENDP

00003e  0000              DCW      0x0000
                  |L11.64|
                          DCD      0x40016818

                          AREA ||i.HAL_LTDC_EnableCLUT||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_EnableCLUT PROC
;;;714      */
;;;715    HAL_StatusTypeDef HAL_LTDC_EnableCLUT(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
000000  b510              PUSH     {r4,lr}
;;;716    {
000002  4602              MOV      r2,r0
;;;717    
;;;718      /* Process locked */
;;;719      __HAL_LOCK(hltdc);
000004  bf00              NOP      
000006  f89200a0          LDRB     r0,[r2,#0xa0]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L12.18|
00000e  2002              MOVS     r0,#2
                  |L12.16|
;;;720    
;;;721      /* Change LTDC peripheral state */
;;;722      hltdc->State = HAL_LTDC_STATE_BUSY;
;;;723    
;;;724      /* Check the parameters */
;;;725      assert_param(IS_LTDC_LAYER(LayerIdx));
;;;726    
;;;727      /* Disable LTDC color lookup table by setting CLUTEN bit */
;;;728      LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
;;;729    
;;;730      /* Sets the Reload type */
;;;731      hltdc->Instance->SRCR = LTDC_SRCR_IMR;
;;;732    
;;;733      /* Change the LTDC state*/
;;;734      hltdc->State = HAL_LTDC_STATE_READY; 
;;;735    
;;;736      /* Process unlocked */
;;;737      __HAL_UNLOCK(hltdc);
;;;738    
;;;739      return HAL_OK;
;;;740    }
000010  bd10              POP      {r4,pc}
                  |L12.18|
000012  2001              MOVS     r0,#1                 ;719
000014  f88200a0          STRB     r0,[r2,#0xa0]         ;719
000018  bf00              NOP                            ;719
00001a  2002              MOVS     r0,#2                 ;722
00001c  f88200a1          STRB     r0,[r2,#0xa1]         ;722
000020  6810              LDR      r0,[r2,#0]            ;728
000022  3084              ADDS     r0,r0,#0x84           ;728
000024  01cb              LSLS     r3,r1,#7              ;728
000026  58c0              LDR      r0,[r0,r3]            ;728
000028  f0400310          ORR      r3,r0,#0x10           ;728
00002c  6810              LDR      r0,[r2,#0]            ;728
00002e  3084              ADDS     r0,r0,#0x84           ;728
000030  01cc              LSLS     r4,r1,#7              ;728
000032  5103              STR      r3,[r0,r4]            ;728
000034  2001              MOVS     r0,#1                 ;731
000036  6813              LDR      r3,[r2,#0]            ;731
000038  6258              STR      r0,[r3,#0x24]         ;731
00003a  f88200a1          STRB     r0,[r2,#0xa1]         ;734
00003e  bf00              NOP                            ;737
000040  2000              MOVS     r0,#0                 ;737
000042  f88200a0          STRB     r0,[r2,#0xa0]         ;737
000046  bf00              NOP                            ;737
000048  bf00              NOP                            ;739
00004a  e7e1              B        |L12.16|
;;;741    
                          ENDP


                          AREA ||i.HAL_LTDC_EnableCLUT_NoReload||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_EnableCLUT_NoReload PROC
;;;1711     */
;;;1712   HAL_StatusTypeDef HAL_LTDC_EnableCLUT_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
000000  b510              PUSH     {r4,lr}
;;;1713   {
000002  4602              MOV      r2,r0
;;;1714   
;;;1715     /* Process locked */
;;;1716     __HAL_LOCK(hltdc);
000004  bf00              NOP      
000006  f89200a0          LDRB     r0,[r2,#0xa0]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L13.18|
00000e  2002              MOVS     r0,#2
                  |L13.16|
;;;1717   
;;;1718     /* Change LTDC peripheral state */
;;;1719     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1720   
;;;1721     /* Check the parameters */
;;;1722     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1723   
;;;1724     /* Disable LTDC color lookup table by setting CLUTEN bit */
;;;1725     LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
;;;1726   
;;;1727     /* Do not Sets the Reload  */
;;;1728   
;;;1729     /* Change the LTDC state*/
;;;1730     hltdc->State = HAL_LTDC_STATE_READY; 
;;;1731   
;;;1732     /* Process unlocked */
;;;1733     __HAL_UNLOCK(hltdc);
;;;1734   
;;;1735     return HAL_OK;
;;;1736   }
000010  bd10              POP      {r4,pc}
                  |L13.18|
000012  2001              MOVS     r0,#1                 ;1716
000014  f88200a0          STRB     r0,[r2,#0xa0]         ;1716
000018  bf00              NOP                            ;1716
00001a  2002              MOVS     r0,#2                 ;1719
00001c  f88200a1          STRB     r0,[r2,#0xa1]         ;1719
000020  6810              LDR      r0,[r2,#0]            ;1725
000022  3084              ADDS     r0,r0,#0x84           ;1725
000024  01cb              LSLS     r3,r1,#7              ;1725
000026  58c0              LDR      r0,[r0,r3]            ;1725
000028  f0400310          ORR      r3,r0,#0x10           ;1725
00002c  6810              LDR      r0,[r2,#0]            ;1725
00002e  3084              ADDS     r0,r0,#0x84           ;1725
000030  01cc              LSLS     r4,r1,#7              ;1725
000032  5103              STR      r3,[r0,r4]            ;1725
000034  2001              MOVS     r0,#1                 ;1730
000036  f88200a1          STRB     r0,[r2,#0xa1]         ;1730
00003a  bf00              NOP                            ;1733
00003c  2000              MOVS     r0,#0                 ;1733
00003e  f88200a0          STRB     r0,[r2,#0xa0]         ;1733
000042  bf00              NOP                            ;1733
000044  bf00              NOP                            ;1735
000046  e7e3              B        |L13.16|
;;;1737   
                          ENDP


                          AREA ||i.HAL_LTDC_EnableColorKeying||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_EnableColorKeying PROC
;;;644      */
;;;645    HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
000000  b510              PUSH     {r4,lr}
;;;646    {  
000002  4602              MOV      r2,r0
;;;647      /* Process locked */
;;;648      __HAL_LOCK(hltdc);
000004  bf00              NOP      
000006  f89200a0          LDRB     r0,[r2,#0xa0]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L14.18|
00000e  2002              MOVS     r0,#2
                  |L14.16|
;;;649    
;;;650      /* Change LTDC peripheral state */
;;;651      hltdc->State = HAL_LTDC_STATE_BUSY;
;;;652    
;;;653      /* Check the parameters */
;;;654      assert_param(IS_LTDC_LAYER(LayerIdx));
;;;655    
;;;656      /* Enable LTDC color keying by setting COLKEN bit */
;;;657      LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
;;;658    
;;;659      /* Sets the Reload type */
;;;660      hltdc->Instance->SRCR = LTDC_SRCR_IMR;
;;;661    
;;;662      /* Change the LTDC state*/
;;;663      hltdc->State = HAL_LTDC_STATE_READY; 
;;;664    
;;;665      /* Process unlocked */
;;;666      __HAL_UNLOCK(hltdc);
;;;667    
;;;668      return HAL_OK;  
;;;669    }
000010  bd10              POP      {r4,pc}
                  |L14.18|
000012  2001              MOVS     r0,#1                 ;648
000014  f88200a0          STRB     r0,[r2,#0xa0]         ;648
000018  bf00              NOP                            ;648
00001a  2002              MOVS     r0,#2                 ;651
00001c  f88200a1          STRB     r0,[r2,#0xa1]         ;651
000020  6810              LDR      r0,[r2,#0]            ;657
000022  3084              ADDS     r0,r0,#0x84           ;657
000024  01cb              LSLS     r3,r1,#7              ;657
000026  58c0              LDR      r0,[r0,r3]            ;657
000028  f0400302          ORR      r3,r0,#2              ;657
00002c  6810              LDR      r0,[r2,#0]            ;657
00002e  3084              ADDS     r0,r0,#0x84           ;657
000030  01cc              LSLS     r4,r1,#7              ;657
000032  5103              STR      r3,[r0,r4]            ;657
000034  2001              MOVS     r0,#1                 ;660
000036  6813              LDR      r3,[r2,#0]            ;660
000038  6258              STR      r0,[r3,#0x24]         ;660
00003a  f88200a1          STRB     r0,[r2,#0xa1]         ;663
00003e  bf00              NOP                            ;666
000040  2000              MOVS     r0,#0                 ;666
000042  f88200a0          STRB     r0,[r2,#0xa0]         ;666
000046  bf00              NOP                            ;666
000048  bf00              NOP                            ;668
00004a  e7e1              B        |L14.16|
;;;670      
                          ENDP


                          AREA ||i.HAL_LTDC_EnableColorKeying_NoReload||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_EnableColorKeying_NoReload PROC
;;;1641     */
;;;1642   HAL_StatusTypeDef HAL_LTDC_EnableColorKeying_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
000000  b510              PUSH     {r4,lr}
;;;1643   {  
000002  4602              MOV      r2,r0
;;;1644     /* Process locked */
;;;1645     __HAL_LOCK(hltdc);
000004  bf00              NOP      
000006  f89200a0          LDRB     r0,[r2,#0xa0]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L15.18|
00000e  2002              MOVS     r0,#2
                  |L15.16|
;;;1646   
;;;1647     /* Change LTDC peripheral state */
;;;1648     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1649   
;;;1650     /* Check the parameters */
;;;1651     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1652   
;;;1653     /* Enable LTDC color keying by setting COLKEN bit */
;;;1654     LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
;;;1655   
;;;1656     /* Do not Sets the Reload  */
;;;1657   
;;;1658     /* Change the LTDC state*/
;;;1659     hltdc->State = HAL_LTDC_STATE_READY; 
;;;1660   
;;;1661     /* Process unlocked */
;;;1662     __HAL_UNLOCK(hltdc);
;;;1663   
;;;1664     return HAL_OK;  
;;;1665   }
000010  bd10              POP      {r4,pc}
                  |L15.18|
000012  2001              MOVS     r0,#1                 ;1645
000014  f88200a0          STRB     r0,[r2,#0xa0]         ;1645
000018  bf00              NOP                            ;1645
00001a  2002              MOVS     r0,#2                 ;1648
00001c  f88200a1          STRB     r0,[r2,#0xa1]         ;1648
000020  6810              LDR      r0,[r2,#0]            ;1654
000022  3084              ADDS     r0,r0,#0x84           ;1654
000024  01cb              LSLS     r3,r1,#7              ;1654
000026  58c0              LDR      r0,[r0,r3]            ;1654
000028  f0400302          ORR      r3,r0,#2              ;1654
00002c  6810              LDR      r0,[r2,#0]            ;1654
00002e  3084              ADDS     r0,r0,#0x84           ;1654
000030  01cc              LSLS     r4,r1,#7              ;1654
000032  5103              STR      r3,[r0,r4]            ;1654
000034  2001              MOVS     r0,#1                 ;1659
000036  f88200a1          STRB     r0,[r2,#0xa1]         ;1659
00003a  bf00              NOP                            ;1662
00003c  2000              MOVS     r0,#0                 ;1662
00003e  f88200a0          STRB     r0,[r2,#0xa0]         ;1662
000042  bf00              NOP                            ;1662
000044  bf00              NOP                            ;1664
000046  e7e3              B        |L15.16|
;;;1666   
                          ENDP


                          AREA ||i.HAL_LTDC_EnableDither||, CODE, READONLY, ALIGN=2

                  HAL_LTDC_EnableDither PROC
;;;784    
;;;785    HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
000000  4601              MOV      r1,r0
;;;786    {
;;;787      /* Process locked */
;;;788      __HAL_LOCK(hltdc);
000002  bf00              NOP      
000004  f89100a0          LDRB     r0,[r1,#0xa0]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L16.16|
00000c  2002              MOVS     r0,#2
                  |L16.14|
;;;789    
;;;790      /* Change LTDC peripheral state */
;;;791      hltdc->State = HAL_LTDC_STATE_BUSY;
;;;792    
;;;793      /* Enable Dither by setting DTEN bit */
;;;794      LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
;;;795    
;;;796      /* Change the LTDC state*/
;;;797      hltdc->State = HAL_LTDC_STATE_READY; 
;;;798    
;;;799      /* Process unlocked */
;;;800      __HAL_UNLOCK(hltdc);
;;;801    
;;;802      return HAL_OK;
;;;803    }
00000e  4770              BX       lr
                  |L16.16|
000010  2001              MOVS     r0,#1                 ;788
000012  f88100a0          STRB     r0,[r1,#0xa0]         ;788
000016  bf00              NOP                            ;788
000018  2002              MOVS     r0,#2                 ;791
00001a  f88100a1          STRB     r0,[r1,#0xa1]         ;791
00001e  4808              LDR      r0,|L16.64|
000020  6800              LDR      r0,[r0,#0]            ;794
000022  f4403080          ORR      r0,r0,#0x10000        ;794
000026  4a06              LDR      r2,|L16.64|
000028  6010              STR      r0,[r2,#0]            ;794
00002a  2001              MOVS     r0,#1                 ;797
00002c  f88100a1          STRB     r0,[r1,#0xa1]         ;797
000030  bf00              NOP                            ;800
000032  2000              MOVS     r0,#0                 ;800
000034  f88100a0          STRB     r0,[r1,#0xa0]         ;800
000038  bf00              NOP                            ;800
00003a  bf00              NOP                            ;802
00003c  e7e7              B        |L16.14|
;;;804    
                          ENDP

00003e  0000              DCW      0x0000
                  |L16.64|
                          DCD      0x40016818

                          AREA ||i.HAL_LTDC_ErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_ErrorCallback PROC
;;;425      */
;;;426    __weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
000000  4770              BX       lr
;;;427    {
;;;428      /* Prevent unused argument(s) compilation warning */
;;;429      UNUSED(hltdc);
;;;430      
;;;431      /* NOTE : This function Should not be modified, when the callback is needed,
;;;432                the HAL_LTDC_ErrorCallback could be implemented in the user file
;;;433       */
;;;434    }
;;;435    
                          ENDP


                          AREA ||i.HAL_LTDC_GetError||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_GetError PROC
;;;1810   */
;;;1811   uint32_t HAL_LTDC_GetError(LTDC_HandleTypeDef *hltdc)
000000  4601              MOV      r1,r0
;;;1812   {
;;;1813     return hltdc->ErrorCode;
000002  f8d100a4          LDR      r0,[r1,#0xa4]
;;;1814   }
000006  4770              BX       lr
;;;1815   
                          ENDP


                          AREA ||i.HAL_LTDC_GetState||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_GetState PROC
;;;1799     */
;;;1800   HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
000000  4601              MOV      r1,r0
;;;1801   {
;;;1802     return hltdc->State;
000002  f89100a1          LDRB     r0,[r1,#0xa1]
;;;1803   }
000006  4770              BX       lr
;;;1804   
                          ENDP


                          AREA ||i.HAL_LTDC_IRQHandler||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_IRQHandler PROC
;;;325      */
;;;326    void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
000000  b510              PUSH     {r4,lr}
;;;327    {
000002  4604              MOV      r4,r0
;;;328      /* Transfer Error Interrupt management ***************************************/
;;;329      if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
000004  6820              LDR      r0,[r4,#0]
000006  6b80              LDR      r0,[r0,#0x38]
000008  f0000004          AND      r0,r0,#4
00000c  b1f0              CBZ      r0,|L20.76|
;;;330      {
;;;331        if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_TE) != RESET)
00000e  6820              LDR      r0,[r4,#0]
000010  6b80              LDR      r0,[r0,#0x38]
000012  f0000004          AND      r0,r0,#4
000016  b1c8              CBZ      r0,|L20.76|
;;;332        {
;;;333          /* Disable the transfer Error interrupt */
;;;334          __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
000018  6820              LDR      r0,[r4,#0]
00001a  6b40              LDR      r0,[r0,#0x34]
00001c  f0200004          BIC      r0,r0,#4
000020  6821              LDR      r1,[r4,#0]
000022  6348              STR      r0,[r1,#0x34]
;;;335    
;;;336          /* Clear the transfer error flag */
;;;337          __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
000024  2004              MOVS     r0,#4
000026  6821              LDR      r1,[r4,#0]
000028  63c8              STR      r0,[r1,#0x3c]
;;;338    
;;;339          /* Update error code */
;;;340          hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
00002a  f8d400a4          LDR      r0,[r4,#0xa4]
00002e  f0400001          ORR      r0,r0,#1
000032  f8c400a4          STR      r0,[r4,#0xa4]
;;;341    
;;;342          /* Change LTDC state */
;;;343          hltdc->State = HAL_LTDC_STATE_ERROR;
000036  2004              MOVS     r0,#4
000038  f88400a1          STRB     r0,[r4,#0xa1]
;;;344    
;;;345          /* Process unlocked */
;;;346          __HAL_UNLOCK(hltdc);
00003c  bf00              NOP      
00003e  2000              MOVS     r0,#0
000040  f88400a0          STRB     r0,[r4,#0xa0]
000044  bf00              NOP      
;;;347    
;;;348          /* Transfer error Callback */
;;;349          HAL_LTDC_ErrorCallback(hltdc);
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       HAL_LTDC_ErrorCallback
                  |L20.76|
;;;350        }
;;;351      }
;;;352      /* FIFO underrun Interrupt management ***************************************/
;;;353      if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_FU) != RESET)
00004c  6820              LDR      r0,[r4,#0]
00004e  6b80              LDR      r0,[r0,#0x38]
000050  f0000002          AND      r0,r0,#2
000054  b1f0              CBZ      r0,|L20.148|
;;;354      {
;;;355        if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_FU) != RESET)
000056  6820              LDR      r0,[r4,#0]
000058  6b80              LDR      r0,[r0,#0x38]
00005a  f0000002          AND      r0,r0,#2
00005e  b1c8              CBZ      r0,|L20.148|
;;;356        {
;;;357          /* Disable the FIFO underrun interrupt */
;;;358          __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
000060  6820              LDR      r0,[r4,#0]
000062  6b40              LDR      r0,[r0,#0x34]
000064  f0200002          BIC      r0,r0,#2
000068  6821              LDR      r1,[r4,#0]
00006a  6348              STR      r0,[r1,#0x34]
;;;359    
;;;360          /* Clear the FIFO underrun flag */
;;;361          __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
00006c  2002              MOVS     r0,#2
00006e  6821              LDR      r1,[r4,#0]
000070  63c8              STR      r0,[r1,#0x3c]
;;;362    
;;;363          /* Update error code */
;;;364          hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
000072  f8d400a4          LDR      r0,[r4,#0xa4]
000076  f0400002          ORR      r0,r0,#2
00007a  f8c400a4          STR      r0,[r4,#0xa4]
;;;365    
;;;366          /* Change LTDC state */
;;;367          hltdc->State = HAL_LTDC_STATE_ERROR;
00007e  2004              MOVS     r0,#4
000080  f88400a1          STRB     r0,[r4,#0xa1]
;;;368    
;;;369          /* Process unlocked */
;;;370          __HAL_UNLOCK(hltdc);
000084  bf00              NOP      
000086  2000              MOVS     r0,#0
000088  f88400a0          STRB     r0,[r4,#0xa0]
00008c  bf00              NOP      
;;;371          
;;;372          /* Transfer error Callback */
;;;373          HAL_LTDC_ErrorCallback(hltdc);
00008e  4620              MOV      r0,r4
000090  f7fffffe          BL       HAL_LTDC_ErrorCallback
                  |L20.148|
;;;374        }
;;;375      }
;;;376      /* Line Interrupt management ************************************************/
;;;377      if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_LI) != RESET)
000094  6820              LDR      r0,[r4,#0]
000096  6b80              LDR      r0,[r0,#0x38]
000098  f0000001          AND      r0,r0,#1
00009c  b1b8              CBZ      r0,|L20.206|
;;;378      {
;;;379        if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_LI) != RESET)
00009e  6820              LDR      r0,[r4,#0]
0000a0  6b80              LDR      r0,[r0,#0x38]
0000a2  f0000001          AND      r0,r0,#1
0000a6  b190              CBZ      r0,|L20.206|
;;;380        {
;;;381          /* Disable the Line interrupt */
;;;382          __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
0000a8  6820              LDR      r0,[r4,#0]
0000aa  6b40              LDR      r0,[r0,#0x34]
0000ac  f0200001          BIC      r0,r0,#1
0000b0  6821              LDR      r1,[r4,#0]
0000b2  6348              STR      r0,[r1,#0x34]
;;;383    
;;;384          /* Clear the Line interrupt flag */  
;;;385          __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
0000b4  2001              MOVS     r0,#1
0000b6  6821              LDR      r1,[r4,#0]
0000b8  63c8              STR      r0,[r1,#0x3c]
;;;386    
;;;387          /* Change LTDC state */
;;;388          hltdc->State = HAL_LTDC_STATE_READY;
0000ba  f88400a1          STRB     r0,[r4,#0xa1]
;;;389    
;;;390          /* Process unlocked */
;;;391          __HAL_UNLOCK(hltdc);
0000be  bf00              NOP      
0000c0  2000              MOVS     r0,#0
0000c2  f88400a0          STRB     r0,[r4,#0xa0]
0000c6  bf00              NOP      
;;;392    
;;;393          /* Line interrupt Callback */
;;;394          HAL_LTDC_LineEvenCallback(hltdc);
0000c8  4620              MOV      r0,r4
0000ca  f7fffffe          BL       HAL_LTDC_LineEventCallback
                  |L20.206|
;;;395        }
;;;396      }
;;;397      /* Register reload Interrupt management ***************************************/
;;;398      if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_RR) != RESET)
0000ce  6820              LDR      r0,[r4,#0]
0000d0  6b80              LDR      r0,[r0,#0x38]
0000d2  f0000008          AND      r0,r0,#8
0000d6  b1c0              CBZ      r0,|L20.266|
;;;399      {
;;;400        if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_RR) != RESET)
0000d8  6820              LDR      r0,[r4,#0]
0000da  6b80              LDR      r0,[r0,#0x38]
0000dc  f0000008          AND      r0,r0,#8
0000e0  b198              CBZ      r0,|L20.266|
;;;401        {
;;;402          /* Disable the register reload interrupt */
;;;403          __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
0000e2  6820              LDR      r0,[r4,#0]
0000e4  6b40              LDR      r0,[r0,#0x34]
0000e6  f0200008          BIC      r0,r0,#8
0000ea  6821              LDR      r1,[r4,#0]
0000ec  6348              STR      r0,[r1,#0x34]
;;;404          
;;;405          /* Clear the register reload flag */
;;;406          __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
0000ee  2008              MOVS     r0,#8
0000f0  6821              LDR      r1,[r4,#0]
0000f2  63c8              STR      r0,[r1,#0x3c]
;;;407          
;;;408          /* Change LTDC state */
;;;409          hltdc->State = HAL_LTDC_STATE_READY;
0000f4  2001              MOVS     r0,#1
0000f6  f88400a1          STRB     r0,[r4,#0xa1]
;;;410          
;;;411          /* Process unlocked */
;;;412          __HAL_UNLOCK(hltdc);
0000fa  bf00              NOP      
0000fc  2000              MOVS     r0,#0
0000fe  f88400a0          STRB     r0,[r4,#0xa0]
000102  bf00              NOP      
;;;413          
;;;414          /* Register reload interrupt Callback */
;;;415          HAL_LTDC_ReloadEventCallback(hltdc);
000104  4620              MOV      r0,r4
000106  f7fffffe          BL       HAL_LTDC_ReloadEventCallback
                  |L20.266|
;;;416        }
;;;417      }  
;;;418    }
00010a  bd10              POP      {r4,pc}
;;;419    
                          ENDP


                          AREA ||i.HAL_LTDC_Init||, CODE, READONLY, ALIGN=2

                  HAL_LTDC_Init PROC
;;;160      */
;;;161    HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
000000  b570              PUSH     {r4-r6,lr}
;;;162    {
000002  4604              MOV      r4,r0
;;;163      uint32_t tmp = 0, tmp1 = 0;
000004  2500              MOVS     r5,#0
000006  2600              MOVS     r6,#0
;;;164    
;;;165      /* Check the LTDC peripheral state */
;;;166      if(hltdc == NULL)
000008  b90c              CBNZ     r4,|L21.14|
;;;167      {
;;;168        return HAL_ERROR;
00000a  2001              MOVS     r0,#1
                  |L21.12|
;;;169      }
;;;170    
;;;171      /* Check function parameters */
;;;172      assert_param(IS_LTDC_ALL_INSTANCE(hltdc->Instance));
;;;173      assert_param(IS_LTDC_HSYNC(hltdc->Init.HorizontalSync));
;;;174      assert_param(IS_LTDC_VSYNC(hltdc->Init.VerticalSync));
;;;175      assert_param(IS_LTDC_AHBP(hltdc->Init.AccumulatedHBP));
;;;176      assert_param(IS_LTDC_AVBP(hltdc->Init.AccumulatedVBP));
;;;177      assert_param(IS_LTDC_AAH(hltdc->Init.AccumulatedActiveH));
;;;178      assert_param(IS_LTDC_AAW(hltdc->Init.AccumulatedActiveW));
;;;179      assert_param(IS_LTDC_TOTALH(hltdc->Init.TotalHeigh));
;;;180      assert_param(IS_LTDC_TOTALW(hltdc->Init.TotalWidth));
;;;181      assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
;;;182      assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
;;;183      assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
;;;184      assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));
;;;185    
;;;186      if(hltdc->State == HAL_LTDC_STATE_RESET)
;;;187      {
;;;188        /* Allocate lock resource and initialize it */
;;;189        hltdc->Lock = HAL_UNLOCKED;
;;;190        /* Init the low level hardware */
;;;191        HAL_LTDC_MspInit(hltdc);
;;;192      }
;;;193      
;;;194      /* Change LTDC peripheral state */
;;;195      hltdc->State = HAL_LTDC_STATE_BUSY;
;;;196    
;;;197      /* Configures the HS, VS, DE and PC polarity */
;;;198      hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
;;;199      hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
;;;200      hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
;;;201    
;;;202      /* Sets Synchronization size */
;;;203      hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
;;;204      tmp = (hltdc->Init.HorizontalSync << 16);
;;;205      hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
;;;206    
;;;207      /* Sets Accumulated Back porch */
;;;208      hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
;;;209      tmp = (hltdc->Init.AccumulatedHBP << 16);
;;;210      hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
;;;211    
;;;212      /* Sets Accumulated Active Width */
;;;213      hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
;;;214      tmp = (hltdc->Init.AccumulatedActiveW << 16);
;;;215      hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
;;;216    
;;;217      /* Sets Total Width */
;;;218      hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
;;;219      tmp = (hltdc->Init.TotalWidth << 16);
;;;220      hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
;;;221    
;;;222      /* Sets the background color value */
;;;223      tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
;;;224      tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
;;;225      hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
;;;226      hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
;;;227    
;;;228      /* Enable the transfer Error interrupt */
;;;229      __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
;;;230    
;;;231      /* Enable the FIFO underrun interrupt */
;;;232      __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
;;;233    
;;;234      /* Enable LTDC by setting LTDCEN bit */
;;;235      __HAL_LTDC_ENABLE(hltdc);
;;;236    
;;;237      /* Initialize the error code */
;;;238      hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
;;;239    
;;;240      /* Initialize the LTDC state*/
;;;241      hltdc->State = HAL_LTDC_STATE_READY;
;;;242    
;;;243      return HAL_OK;
;;;244    }
00000c  bd70              POP      {r4-r6,pc}
                  |L21.14|
00000e  f89400a1          LDRB     r0,[r4,#0xa1]         ;186
000012  b928              CBNZ     r0,|L21.32|
000014  2000              MOVS     r0,#0                 ;189
000016  f88400a0          STRB     r0,[r4,#0xa0]         ;189
00001a  4620              MOV      r0,r4                 ;191
00001c  f7fffffe          BL       HAL_LTDC_MspInit
                  |L21.32|
000020  2002              MOVS     r0,#2                 ;195
000022  f88400a1          STRB     r0,[r4,#0xa1]         ;195
000026  6820              LDR      r0,[r4,#0]            ;198
000028  6980              LDR      r0,[r0,#0x18]         ;198
00002a  f0204070          BIC      r0,r0,#0xf0000000     ;198
00002e  6821              LDR      r1,[r4,#0]            ;198
000030  6188              STR      r0,[r1,#0x18]         ;198
000032  e9d40101          LDRD     r0,r1,[r4,#4]         ;199
000036  4308              ORRS     r0,r0,r1              ;199
000038  68e1              LDR      r1,[r4,#0xc]          ;199
00003a  4308              ORRS     r0,r0,r1              ;199
00003c  6921              LDR      r1,[r4,#0x10]         ;199
00003e  4308              ORRS     r0,r0,r1              ;199
000040  6821              LDR      r1,[r4,#0]            ;199
000042  6989              LDR      r1,[r1,#0x18]         ;199
000044  4308              ORRS     r0,r0,r1              ;199
000046  6821              LDR      r1,[r4,#0]            ;199
000048  6188              STR      r0,[r1,#0x18]         ;199
00004a  6820              LDR      r0,[r4,#0]            ;203
00004c  6880              LDR      r0,[r0,#8]            ;203
00004e  4935              LDR      r1,|L21.292|
000050  4008              ANDS     r0,r0,r1              ;203
000052  6821              LDR      r1,[r4,#0]            ;203
000054  6088              STR      r0,[r1,#8]            ;203
000056  8aa0              LDRH     r0,[r4,#0x14]         ;204
000058  0405              LSLS     r5,r0,#16             ;204
00005a  6820              LDR      r0,[r4,#0]            ;205
00005c  6880              LDR      r0,[r0,#8]            ;205
00005e  69a1              LDR      r1,[r4,#0x18]         ;205
000060  4329              ORRS     r1,r1,r5              ;205
000062  4308              ORRS     r0,r0,r1              ;205
000064  6821              LDR      r1,[r4,#0]            ;205
000066  6088              STR      r0,[r1,#8]            ;205
000068  6820              LDR      r0,[r4,#0]            ;208
00006a  68c0              LDR      r0,[r0,#0xc]          ;208
00006c  492d              LDR      r1,|L21.292|
00006e  4008              ANDS     r0,r0,r1              ;208
000070  6821              LDR      r1,[r4,#0]            ;208
000072  60c8              STR      r0,[r1,#0xc]          ;208
000074  8ba0              LDRH     r0,[r4,#0x1c]         ;209
000076  0405              LSLS     r5,r0,#16             ;209
000078  6820              LDR      r0,[r4,#0]            ;210
00007a  68c0              LDR      r0,[r0,#0xc]          ;210
00007c  6a21              LDR      r1,[r4,#0x20]         ;210
00007e  4329              ORRS     r1,r1,r5              ;210
000080  4308              ORRS     r0,r0,r1              ;210
000082  6821              LDR      r1,[r4,#0]            ;210
000084  60c8              STR      r0,[r1,#0xc]          ;210
000086  6820              LDR      r0,[r4,#0]            ;213
000088  6900              LDR      r0,[r0,#0x10]         ;213
00008a  4926              LDR      r1,|L21.292|
00008c  4008              ANDS     r0,r0,r1              ;213
00008e  6821              LDR      r1,[r4,#0]            ;213
000090  6108              STR      r0,[r1,#0x10]         ;213
000092  8ca0              LDRH     r0,[r4,#0x24]         ;214
000094  0405              LSLS     r5,r0,#16             ;214
000096  6820              LDR      r0,[r4,#0]            ;215
000098  6900              LDR      r0,[r0,#0x10]         ;215
00009a  6aa1              LDR      r1,[r4,#0x28]         ;215
00009c  4329              ORRS     r1,r1,r5              ;215
00009e  4308              ORRS     r0,r0,r1              ;215
0000a0  6821              LDR      r1,[r4,#0]            ;215
0000a2  6108              STR      r0,[r1,#0x10]         ;215
0000a4  6820              LDR      r0,[r4,#0]            ;218
0000a6  6940              LDR      r0,[r0,#0x14]         ;218
0000a8  491e              LDR      r1,|L21.292|
0000aa  4008              ANDS     r0,r0,r1              ;218
0000ac  6821              LDR      r1,[r4,#0]            ;218
0000ae  6148              STR      r0,[r1,#0x14]         ;218
0000b0  8da0              LDRH     r0,[r4,#0x2c]         ;219
0000b2  0405              LSLS     r5,r0,#16             ;219
0000b4  6820              LDR      r0,[r4,#0]            ;220
0000b6  6940              LDR      r0,[r0,#0x14]         ;220
0000b8  6b21              LDR      r1,[r4,#0x30]         ;220
0000ba  4329              ORRS     r1,r1,r5              ;220
0000bc  4308              ORRS     r0,r0,r1              ;220
0000be  6821              LDR      r1,[r4,#0]            ;220
0000c0  6148              STR      r0,[r1,#0x14]         ;220
0000c2  f8940035          LDRB     r0,[r4,#0x35]         ;223
0000c6  0205              LSLS     r5,r0,#8              ;223
0000c8  f8940036          LDRB     r0,[r4,#0x36]         ;224
0000cc  0406              LSLS     r6,r0,#16             ;224
0000ce  6820              LDR      r0,[r4,#0]            ;225
0000d0  6ac0              LDR      r0,[r0,#0x2c]         ;225
0000d2  f000407f          AND      r0,r0,#0xff000000     ;225
0000d6  6821              LDR      r1,[r4,#0]            ;225
0000d8  62c8              STR      r0,[r1,#0x2c]         ;225
0000da  ea460005          ORR      r0,r6,r5              ;226
0000de  f8941034          LDRB     r1,[r4,#0x34]         ;226
0000e2  4308              ORRS     r0,r0,r1              ;226
0000e4  6821              LDR      r1,[r4,#0]            ;226
0000e6  6ac9              LDR      r1,[r1,#0x2c]         ;226
0000e8  4308              ORRS     r0,r0,r1              ;226
0000ea  6821              LDR      r1,[r4,#0]            ;226
0000ec  62c8              STR      r0,[r1,#0x2c]         ;226
0000ee  6820              LDR      r0,[r4,#0]            ;229
0000f0  6b40              LDR      r0,[r0,#0x34]         ;229
0000f2  f0400004          ORR      r0,r0,#4              ;229
0000f6  6821              LDR      r1,[r4,#0]            ;229
0000f8  6348              STR      r0,[r1,#0x34]         ;229
0000fa  6820              LDR      r0,[r4,#0]            ;232
0000fc  6b40              LDR      r0,[r0,#0x34]         ;232
0000fe  f0400002          ORR      r0,r0,#2              ;232
000102  6821              LDR      r1,[r4,#0]            ;232
000104  6348              STR      r0,[r1,#0x34]         ;232
000106  6820              LDR      r0,[r4,#0]            ;235
000108  6980              LDR      r0,[r0,#0x18]         ;235
00010a  f0400001          ORR      r0,r0,#1              ;235
00010e  6821              LDR      r1,[r4,#0]            ;235
000110  6188              STR      r0,[r1,#0x18]         ;235
000112  2000              MOVS     r0,#0                 ;238
000114  f8c400a4          STR      r0,[r4,#0xa4]         ;238
000118  2001              MOVS     r0,#1                 ;241
00011a  f88400a1          STRB     r0,[r4,#0xa1]         ;241
00011e  2000              MOVS     r0,#0                 ;243
000120  e774              B        |L21.12|
;;;245    
                          ENDP

000122  0000              DCW      0x0000
                  |L21.292|
                          DCD      0xf000f800

                          AREA ||i.HAL_LTDC_LineEventCallback||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_LineEventCallback PROC
;;;441      */
;;;442    __weak void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc)
000000  4770              BX       lr
;;;443    {
;;;444      /* Prevent unused argument(s) compilation warning */
;;;445      UNUSED(hltdc);
;;;446      
;;;447      /* NOTE : This function Should not be modified, when the callback is needed,
;;;448                the HAL_LTDC_LineEvenCallback could be implemented in the user file
;;;449       */
;;;450    }
;;;451    
                          ENDP


                          AREA ||i.HAL_LTDC_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_MspDeInit PROC
;;;292      */
;;;293    __weak void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef* hltdc)
000000  4770              BX       lr
;;;294    {
;;;295      /* Prevent unused argument(s) compilation warning */
;;;296      UNUSED(hltdc);
;;;297      
;;;298      /* NOTE : This function Should not be modified, when the callback is needed,
;;;299                the HAL_LTDC_MspDeInit could be implemented in the user file
;;;300       */
;;;301    }
;;;302    
                          ENDP


                          AREA ||i.HAL_LTDC_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_MspInit PROC
;;;276      */
;;;277    __weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
000000  4770              BX       lr
;;;278    {
;;;279      /* Prevent unused argument(s) compilation warning */
;;;280      UNUSED(hltdc);
;;;281      
;;;282      /* NOTE : This function Should not be modified, when the callback is needed,
;;;283                the HAL_LTDC_MspInit could be implemented in the user file
;;;284       */ 
;;;285    }
;;;286    
                          ENDP


                          AREA ||i.HAL_LTDC_ProgramLineEvent||, CODE, READONLY, ALIGN=2

                  HAL_LTDC_ProgramLineEvent PROC
;;;1161     */
;;;1162   HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
000000  4602              MOV      r2,r0
;;;1163   {
;;;1164     /* Process locked */
;;;1165     __HAL_LOCK(hltdc);
000002  bf00              NOP      
000004  f89200a0          LDRB     r0,[r2,#0xa0]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L25.16|
00000c  2002              MOVS     r0,#2
                  |L25.14|
;;;1166   
;;;1167     /* Change LTDC peripheral state */
;;;1168     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1169   
;;;1170     /* Check the parameters */
;;;1171     assert_param(IS_LTDC_LIPOS(Line));
;;;1172   
;;;1173     /* Enable the Line interrupt */
;;;1174     __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
;;;1175   
;;;1176     /* Sets the Line Interrupt position */
;;;1177     LTDC->LIPCR = (uint32_t)Line;
;;;1178   
;;;1179     /* Change the LTDC state*/
;;;1180     hltdc->State = HAL_LTDC_STATE_READY;
;;;1181   
;;;1182     /* Process unlocked */
;;;1183     __HAL_UNLOCK(hltdc);
;;;1184   
;;;1185     return HAL_OK;
;;;1186   }
00000e  4770              BX       lr
                  |L25.16|
000010  2001              MOVS     r0,#1                 ;1165
000012  f88200a0          STRB     r0,[r2,#0xa0]         ;1165
000016  bf00              NOP                            ;1165
000018  2002              MOVS     r0,#2                 ;1168
00001a  f88200a1          STRB     r0,[r2,#0xa1]         ;1168
00001e  6810              LDR      r0,[r2,#0]            ;1174
000020  6b40              LDR      r0,[r0,#0x34]         ;1174
000022  f0400001          ORR      r0,r0,#1              ;1174
000026  6813              LDR      r3,[r2,#0]            ;1174
000028  6358              STR      r0,[r3,#0x34]         ;1174
00002a  4806              LDR      r0,|L25.68|
00002c  6001              STR      r1,[r0,#0]            ;1177
00002e  2001              MOVS     r0,#1                 ;1180
000030  f88200a1          STRB     r0,[r2,#0xa1]         ;1180
000034  bf00              NOP                            ;1183
000036  2000              MOVS     r0,#0                 ;1183
000038  f88200a0          STRB     r0,[r2,#0xa0]         ;1183
00003c  bf00              NOP                            ;1183
00003e  bf00              NOP                            ;1185
000040  e7e5              B        |L25.14|
;;;1187   
                          ENDP

000042  0000              DCW      0x0000
                  |L25.68|
                          DCD      0x40016840

                          AREA ||i.HAL_LTDC_Reload||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_Reload PROC
;;;1196     */
;;;1197   HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
000000  4602              MOV      r2,r0
;;;1198   {
;;;1199     assert_param(IS_LTDC_RELAOD(ReloadType));
;;;1200   
;;;1201     /* Process locked */
;;;1202     __HAL_LOCK(hltdc);
000002  bf00              NOP      
000004  f89200a0          LDRB     r0,[r2,#0xa0]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L26.16|
00000c  2002              MOVS     r0,#2
                  |L26.14|
;;;1203   
;;;1204     /* Change LTDC peripheral state */
;;;1205     hltdc->State = HAL_LTDC_STATE_BUSY;  
;;;1206     
;;;1207     /* Enable the Reload interrupt */  
;;;1208     __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
;;;1209          
;;;1210     /* Apply Reload type */
;;;1211     hltdc->Instance->SRCR = ReloadType;        
;;;1212   
;;;1213     /* Change the LTDC state*/
;;;1214     hltdc->State = HAL_LTDC_STATE_READY;
;;;1215     
;;;1216     /* Process unlocked */
;;;1217     __HAL_UNLOCK(hltdc);
;;;1218     
;;;1219     return HAL_OK;
;;;1220   }
00000e  4770              BX       lr
                  |L26.16|
000010  2001              MOVS     r0,#1                 ;1202
000012  f88200a0          STRB     r0,[r2,#0xa0]         ;1202
000016  bf00              NOP                            ;1202
000018  2002              MOVS     r0,#2                 ;1205
00001a  f88200a1          STRB     r0,[r2,#0xa1]         ;1205
00001e  6810              LDR      r0,[r2,#0]            ;1208
000020  6b40              LDR      r0,[r0,#0x34]         ;1208
000022  f0400008          ORR      r0,r0,#8              ;1208
000026  6813              LDR      r3,[r2,#0]            ;1208
000028  6358              STR      r0,[r3,#0x34]         ;1208
00002a  6810              LDR      r0,[r2,#0]            ;1211
00002c  6241              STR      r1,[r0,#0x24]         ;1211
00002e  2001              MOVS     r0,#1                 ;1214
000030  f88200a1          STRB     r0,[r2,#0xa1]         ;1214
000034  bf00              NOP                            ;1217
000036  2000              MOVS     r0,#0                 ;1217
000038  f88200a0          STRB     r0,[r2,#0xa0]         ;1217
00003c  bf00              NOP                            ;1217
00003e  bf00              NOP                            ;1219
000040  e7e5              B        |L26.14|
;;;1221   
                          ENDP


                          AREA ||i.HAL_LTDC_ReloadEventCallback||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_ReloadEventCallback PROC
;;;457      */
;;;458    __weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
000000  4770              BX       lr
;;;459    {
;;;460      /* Prevent unused argument(s) compilation warning */
;;;461      UNUSED(hltdc);
;;;462      
;;;463      /* NOTE : This function Should not be modified, when the callback is needed,
;;;464                the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
;;;465       */
;;;466    }
;;;467    
                          ENDP


                          AREA ||i.HAL_LTDC_SetAddress||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_SetAddress PROC
;;;1046     */
;;;1047   HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1048   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;1049     LTDC_LayerCfgTypeDef *pLayerCfg;
;;;1050   
;;;1051     /* Process locked */
;;;1052     __HAL_LOCK(hltdc);
00000a  bf00              NOP      
00000c  f89400a0          LDRB     r0,[r4,#0xa0]
000010  2801              CMP      r0,#1
000012  d102              BNE      |L28.26|
000014  2002              MOVS     r0,#2
                  |L28.22|
;;;1053   
;;;1054     /* Change LTDC peripheral state */
;;;1055     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1056   
;;;1057     /* Check the parameters */
;;;1058     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1059   
;;;1060     /* Get layer configuration from handle structure */
;;;1061     pLayerCfg = &hltdc->LayerCfg[LayerIdx];
;;;1062   
;;;1063     /* Reconfigure the Address */
;;;1064     pLayerCfg->FBStartAdress = Address;
;;;1065   
;;;1066     /* Set LTDC parameters */
;;;1067     LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
;;;1068   
;;;1069     /* Sets the Reload type */
;;;1070     hltdc->Instance->SRCR = LTDC_SRCR_IMR;
;;;1071   
;;;1072     /* Change the LTDC state*/
;;;1073     hltdc->State = HAL_LTDC_STATE_READY;
;;;1074   
;;;1075     /* Process unlocked */
;;;1076     __HAL_UNLOCK(hltdc);
;;;1077   
;;;1078     return HAL_OK;
;;;1079   }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L28.26|
00001a  2001              MOVS     r0,#1                 ;1052
00001c  f88400a0          STRB     r0,[r4,#0xa0]         ;1052
000020  bf00              NOP                            ;1052
000022  2002              MOVS     r0,#2                 ;1055
000024  f88400a1          STRB     r0,[r4,#0xa1]         ;1055
000028  eb070087          ADD      r0,r7,r7,LSL #2       ;1061
00002c  eb0001c7          ADD      r1,r0,r7,LSL #3       ;1061
000030  f1040038          ADD      r0,r4,#0x38           ;1061
000034  eb000581          ADD      r5,r0,r1,LSL #2       ;1061
000038  626e              STR      r6,[r5,#0x24]         ;1064
00003a  463a              MOV      r2,r7                 ;1067
00003c  4629              MOV      r1,r5                 ;1067
00003e  4620              MOV      r0,r4                 ;1067
000040  f7fffffe          BL       LTDC_SetConfig
000044  2001              MOVS     r0,#1                 ;1070
000046  6821              LDR      r1,[r4,#0]            ;1070
000048  6248              STR      r0,[r1,#0x24]         ;1070
00004a  f88400a1          STRB     r0,[r4,#0xa1]         ;1073
00004e  bf00              NOP                            ;1076
000050  2000              MOVS     r0,#0                 ;1076
000052  f88400a0          STRB     r0,[r4,#0xa0]         ;1076
000056  bf00              NOP                            ;1076
000058  bf00              NOP                            ;1078
00005a  e7dc              B        |L28.22|
;;;1080   
                          ENDP


                          AREA ||i.HAL_LTDC_SetAddress_NoReload||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_SetAddress_NoReload PROC
;;;1489     */
;;;1490   HAL_StatusTypeDef HAL_LTDC_SetAddress_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1491   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;1492     LTDC_LayerCfgTypeDef *pLayerCfg;
;;;1493   
;;;1494     /* Process locked */
;;;1495     __HAL_LOCK(hltdc);
00000a  bf00              NOP      
00000c  f89400a0          LDRB     r0,[r4,#0xa0]
000010  2801              CMP      r0,#1
000012  d102              BNE      |L29.26|
000014  2002              MOVS     r0,#2
                  |L29.22|
;;;1496   
;;;1497     /* Change LTDC peripheral state */
;;;1498     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1499   
;;;1500     /* Check the parameters */
;;;1501     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1502   
;;;1503     /* Get layer configuration from handle structure */
;;;1504     pLayerCfg = &hltdc->LayerCfg[LayerIdx];
;;;1505   
;;;1506     /* Reconfigure the Address */
;;;1507     pLayerCfg->FBStartAdress = Address;
;;;1508   
;;;1509     /* Set LTDC parameters */
;;;1510     LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
;;;1511   
;;;1512     /* Do not Sets the Reload  */
;;;1513   
;;;1514     /* Change the LTDC state*/
;;;1515     hltdc->State = HAL_LTDC_STATE_READY;
;;;1516   
;;;1517     /* Process unlocked */
;;;1518     __HAL_UNLOCK(hltdc);
;;;1519   
;;;1520     return HAL_OK;
;;;1521   }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L29.26|
00001a  2001              MOVS     r0,#1                 ;1495
00001c  f88400a0          STRB     r0,[r4,#0xa0]         ;1495
000020  bf00              NOP                            ;1495
000022  2002              MOVS     r0,#2                 ;1498
000024  f88400a1          STRB     r0,[r4,#0xa1]         ;1498
000028  eb070087          ADD      r0,r7,r7,LSL #2       ;1504
00002c  eb0001c7          ADD      r1,r0,r7,LSL #3       ;1504
000030  f1040038          ADD      r0,r4,#0x38           ;1504
000034  eb000581          ADD      r5,r0,r1,LSL #2       ;1504
000038  626e              STR      r6,[r5,#0x24]         ;1507
00003a  463a              MOV      r2,r7                 ;1510
00003c  4629              MOV      r1,r5                 ;1510
00003e  4620              MOV      r0,r4                 ;1510
000040  f7fffffe          BL       LTDC_SetConfig
000044  2001              MOVS     r0,#1                 ;1515
000046  f88400a1          STRB     r0,[r4,#0xa1]         ;1515
00004a  bf00              NOP                            ;1518
00004c  2000              MOVS     r0,#0                 ;1518
00004e  f88400a0          STRB     r0,[r4,#0xa0]         ;1518
000052  bf00              NOP                            ;1518
000054  bf00              NOP                            ;1520
000056  e7de              B        |L29.22|
;;;1522   
                          ENDP


                          AREA ||i.HAL_LTDC_SetAlpha||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_SetAlpha PROC
;;;1002     */
;;;1003   HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1004   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;1005     LTDC_LayerCfgTypeDef *pLayerCfg;
;;;1006   
;;;1007     /* Process locked */
;;;1008     __HAL_LOCK(hltdc);
00000a  bf00              NOP      
00000c  f89400a0          LDRB     r0,[r4,#0xa0]
000010  2801              CMP      r0,#1
000012  d102              BNE      |L30.26|
000014  2002              MOVS     r0,#2
                  |L30.22|
;;;1009   
;;;1010     /* Change LTDC peripheral state */
;;;1011     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1012   
;;;1013     /* Check the parameters */
;;;1014     assert_param(IS_LTDC_ALPHA(Alpha));
;;;1015     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1016   
;;;1017     /* Get layer configuration from handle structure */
;;;1018     pLayerCfg = &hltdc->LayerCfg[LayerIdx];
;;;1019   
;;;1020     /* Reconfigure the Alpha value */
;;;1021     pLayerCfg->Alpha = Alpha;
;;;1022   
;;;1023     /* Set LTDC parameters */
;;;1024     LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
;;;1025   
;;;1026     /* Sets the Reload type */
;;;1027     hltdc->Instance->SRCR = LTDC_SRCR_IMR;
;;;1028   
;;;1029     /* Change the LTDC state*/
;;;1030     hltdc->State = HAL_LTDC_STATE_READY;
;;;1031   
;;;1032     /* Process unlocked */
;;;1033     __HAL_UNLOCK(hltdc);
;;;1034   
;;;1035     return HAL_OK;
;;;1036   }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L30.26|
00001a  2001              MOVS     r0,#1                 ;1008
00001c  f88400a0          STRB     r0,[r4,#0xa0]         ;1008
000020  bf00              NOP                            ;1008
000022  2002              MOVS     r0,#2                 ;1011
000024  f88400a1          STRB     r0,[r4,#0xa1]         ;1011
000028  eb070087          ADD      r0,r7,r7,LSL #2       ;1018
00002c  eb0001c7          ADD      r1,r0,r7,LSL #3       ;1018
000030  f1040038          ADD      r0,r4,#0x38           ;1018
000034  eb000581          ADD      r5,r0,r1,LSL #2       ;1018
000038  616e              STR      r6,[r5,#0x14]         ;1021
00003a  463a              MOV      r2,r7                 ;1024
00003c  4629              MOV      r1,r5                 ;1024
00003e  4620              MOV      r0,r4                 ;1024
000040  f7fffffe          BL       LTDC_SetConfig
000044  2001              MOVS     r0,#1                 ;1027
000046  6821              LDR      r1,[r4,#0]            ;1027
000048  6248              STR      r0,[r1,#0x24]         ;1027
00004a  f88400a1          STRB     r0,[r4,#0xa1]         ;1030
00004e  bf00              NOP                            ;1033
000050  2000              MOVS     r0,#0                 ;1033
000052  f88400a0          STRB     r0,[r4,#0xa0]         ;1033
000056  bf00              NOP                            ;1033
000058  bf00              NOP                            ;1035
00005a  e7dc              B        |L30.22|
;;;1037   /**
                          ENDP


                          AREA ||i.HAL_LTDC_SetAlpha_NoReload||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_SetAlpha_NoReload PROC
;;;1444     */
;;;1445   HAL_StatusTypeDef HAL_LTDC_SetAlpha_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1446   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;1447     LTDC_LayerCfgTypeDef *pLayerCfg;
;;;1448   
;;;1449     /* Process locked */
;;;1450     __HAL_LOCK(hltdc);
00000a  bf00              NOP      
00000c  f89400a0          LDRB     r0,[r4,#0xa0]
000010  2801              CMP      r0,#1
000012  d102              BNE      |L31.26|
000014  2002              MOVS     r0,#2
                  |L31.22|
;;;1451   
;;;1452     /* Change LTDC peripheral state */
;;;1453     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1454   
;;;1455     /* Check the parameters */
;;;1456     assert_param(IS_LTDC_ALPHA(Alpha));
;;;1457     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1458   
;;;1459     /* Get layer configuration from handle structure */
;;;1460     pLayerCfg = &hltdc->LayerCfg[LayerIdx];
;;;1461   
;;;1462     /* Reconfigure the Alpha value */
;;;1463     pLayerCfg->Alpha = Alpha;
;;;1464   
;;;1465     /* Set LTDC parameters */
;;;1466     LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
;;;1467   
;;;1468     /* Do not Sets the Reload  */
;;;1469   
;;;1470     /* Change the LTDC state*/
;;;1471     hltdc->State = HAL_LTDC_STATE_READY;
;;;1472   
;;;1473     /* Process unlocked */
;;;1474     __HAL_UNLOCK(hltdc);
;;;1475   
;;;1476     return HAL_OK;
;;;1477   }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L31.26|
00001a  2001              MOVS     r0,#1                 ;1450
00001c  f88400a0          STRB     r0,[r4,#0xa0]         ;1450
000020  bf00              NOP                            ;1450
000022  2002              MOVS     r0,#2                 ;1453
000024  f88400a1          STRB     r0,[r4,#0xa1]         ;1453
000028  eb070087          ADD      r0,r7,r7,LSL #2       ;1460
00002c  eb0001c7          ADD      r1,r0,r7,LSL #3       ;1460
000030  f1040038          ADD      r0,r4,#0x38           ;1460
000034  eb000581          ADD      r5,r0,r1,LSL #2       ;1460
000038  616e              STR      r6,[r5,#0x14]         ;1463
00003a  463a              MOV      r2,r7                 ;1466
00003c  4629              MOV      r1,r5                 ;1466
00003e  4620              MOV      r0,r4                 ;1466
000040  f7fffffe          BL       LTDC_SetConfig
000044  2001              MOVS     r0,#1                 ;1471
000046  f88400a1          STRB     r0,[r4,#0xa1]         ;1471
00004a  bf00              NOP                            ;1474
00004c  2000              MOVS     r0,#0                 ;1474
00004e  f88400a0          STRB     r0,[r4,#0xa0]         ;1474
000052  bf00              NOP                            ;1474
000054  bf00              NOP                            ;1476
000056  e7de              B        |L31.22|
;;;1478   
                          ENDP


                          AREA ||i.HAL_LTDC_SetPitch||, CODE, READONLY, ALIGN=2

                  HAL_LTDC_SetPitch PROC
;;;1093     */
;;;1094   HAL_StatusTypeDef HAL_LTDC_SetPitch(LTDC_HandleTypeDef *hltdc, uint32_t LinePitchInPixels, uint32_t LayerIdx)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1095   {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;1096     uint32_t tmp = 0;
000006  2500              MOVS     r5,#0
;;;1097     uint32_t pitchUpdate = 0;
000008  2600              MOVS     r6,#0
;;;1098     uint32_t pixelFormat = 0;
00000a  2100              MOVS     r1,#0
;;;1099     
;;;1100     /* Process locked */
;;;1101     __HAL_LOCK(hltdc);
00000c  bf00              NOP      
00000e  f89300a0          LDRB     r0,[r3,#0xa0]
000012  2801              CMP      r0,#1
000014  d101              BNE      |L32.26|
000016  2002              MOVS     r0,#2
                  |L32.24|
;;;1102     
;;;1103     /* Change LTDC peripheral state */
;;;1104     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1105     
;;;1106     /* Check the parameters */
;;;1107     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1108     
;;;1109     /* get LayerIdx used pixel format */
;;;1110     pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
;;;1111     
;;;1112     if(pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
;;;1113     {
;;;1114       tmp = 4;
;;;1115     }
;;;1116     else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
;;;1117     {
;;;1118       tmp = 3;
;;;1119     }
;;;1120     else if((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
;;;1121             (pixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
;;;1122             (pixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
;;;1123            (pixelFormat == LTDC_PIXEL_FORMAT_AL88))
;;;1124     {
;;;1125       tmp = 2;
;;;1126     }
;;;1127     else
;;;1128     {
;;;1129       tmp = 1;
;;;1130     }
;;;1131     
;;;1132     pitchUpdate = ((LinePitchInPixels * tmp) << 16);
;;;1133     
;;;1134     /* Clear previously set standard pitch */
;;;1135     LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
;;;1136     
;;;1137     /* Sets the Reload type as immediate update of LTDC pitch configured above */
;;;1138     LTDC->SRCR |= LTDC_SRCR_IMR;
;;;1139     
;;;1140     /* Set new line pitch value */
;;;1141     LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
;;;1142     
;;;1143     /* Sets the Reload type as immediate update of LTDC pitch configured above */
;;;1144     LTDC->SRCR |= LTDC_SRCR_IMR;
;;;1145     
;;;1146     /* Change the LTDC state*/
;;;1147     hltdc->State = HAL_LTDC_STATE_READY;
;;;1148     
;;;1149     /* Process unlocked */
;;;1150     __HAL_UNLOCK(hltdc);
;;;1151     
;;;1152     return HAL_OK;  
;;;1153   }
000018  bdf0              POP      {r4-r7,pc}
                  |L32.26|
00001a  2001              MOVS     r0,#1                 ;1101
00001c  f88300a0          STRB     r0,[r3,#0xa0]         ;1101
000020  bf00              NOP                            ;1101
000022  2002              MOVS     r0,#2                 ;1104
000024  f88300a1          STRB     r0,[r3,#0xa1]         ;1104
000028  eb020082          ADD      r0,r2,r2,LSL #2       ;1110
00002c  eb0007c2          ADD      r7,r0,r2,LSL #3       ;1110
000030  f1030038          ADD      r0,r3,#0x38           ;1110
000034  eb000087          ADD      r0,r0,r7,LSL #2       ;1110
000038  6901              LDR      r1,[r0,#0x10]         ;1110
00003a  b909              CBNZ     r1,|L32.64|
00003c  2504              MOVS     r5,#4                 ;1114
00003e  e00e              B        |L32.94|
                  |L32.64|
000040  2901              CMP      r1,#1                 ;1116
000042  d101              BNE      |L32.72|
000044  2503              MOVS     r5,#3                 ;1118
000046  e00a              B        |L32.94|
                  |L32.72|
000048  2904              CMP      r1,#4                 ;1120
00004a  d005              BEQ      |L32.88|
00004c  2902              CMP      r1,#2                 ;1121
00004e  d003              BEQ      |L32.88|
000050  2903              CMP      r1,#3                 ;1122
000052  d001              BEQ      |L32.88|
000054  2907              CMP      r1,#7                 ;1123
000056  d101              BNE      |L32.92|
                  |L32.88|
000058  2502              MOVS     r5,#2                 ;1125
00005a  e000              B        |L32.94|
                  |L32.92|
00005c  2501              MOVS     r5,#1                 ;1129
                  |L32.94|
00005e  fb04f005          MUL      r0,r4,r5              ;1132
000062  0406              LSLS     r6,r0,#16             ;1132
000064  6818              LDR      r0,[r3,#0]            ;1135
000066  3084              ADDS     r0,r0,#0x84           ;1135
000068  2780              MOVS     r7,#0x80              ;1135
00006a  fb070002          MLA      r0,r7,r2,r0           ;1135
00006e  6ac0              LDR      r0,[r0,#0x2c]         ;1135
000070  4f15              LDR      r7,|L32.200|
000072  4038              ANDS     r0,r0,r7              ;1135
000074  681f              LDR      r7,[r3,#0]            ;1135
000076  3784              ADDS     r7,r7,#0x84           ;1135
000078  f04f0c80          MOV      r12,#0x80             ;1135
00007c  fb0c7702          MLA      r7,r12,r2,r7          ;1135
000080  62f8              STR      r0,[r7,#0x2c]         ;1135
000082  4812              LDR      r0,|L32.204|
000084  6800              LDR      r0,[r0,#0]            ;1138
000086  f0400001          ORR      r0,r0,#1              ;1138
00008a  4f10              LDR      r7,|L32.204|
00008c  6038              STR      r0,[r7,#0]            ;1138
00008e  6818              LDR      r0,[r3,#0]            ;1141
000090  3084              ADDS     r0,r0,#0x84           ;1141
000092  2780              MOVS     r7,#0x80              ;1141
000094  fb070002          MLA      r0,r7,r2,r0           ;1141
000098  6ac0              LDR      r0,[r0,#0x2c]         ;1141
00009a  4330              ORRS     r0,r0,r6              ;1141
00009c  681f              LDR      r7,[r3,#0]            ;1141
00009e  3784              ADDS     r7,r7,#0x84           ;1141
0000a0  fb0c7702          MLA      r7,r12,r2,r7          ;1141
0000a4  62f8              STR      r0,[r7,#0x2c]         ;1141
0000a6  4809              LDR      r0,|L32.204|
0000a8  6800              LDR      r0,[r0,#0]            ;1144
0000aa  f0400001          ORR      r0,r0,#1              ;1144
0000ae  4f07              LDR      r7,|L32.204|
0000b0  6038              STR      r0,[r7,#0]            ;1144
0000b2  2001              MOVS     r0,#1                 ;1147
0000b4  f88300a1          STRB     r0,[r3,#0xa1]         ;1147
0000b8  bf00              NOP                            ;1150
0000ba  2000              MOVS     r0,#0                 ;1150
0000bc  f88300a0          STRB     r0,[r3,#0xa0]         ;1150
0000c0  bf00              NOP                            ;1150
0000c2  bf00              NOP                            ;1152
0000c4  e7a8              B        |L32.24|
;;;1154   
                          ENDP

0000c6  0000              DCW      0x0000
                  |L32.200|
                          DCD      0xe000ffff
                  |L32.204|
                          DCD      0x40016824

                          AREA ||i.HAL_LTDC_SetPitch_NoReload||, CODE, READONLY, ALIGN=2

                  HAL_LTDC_SetPitch_NoReload PROC
;;;1536     */
;;;1537   HAL_StatusTypeDef HAL_LTDC_SetPitch_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t LinePitchInPixels, uint32_t LayerIdx)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1538   {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;1539     uint32_t tmp = 0;
000006  2500              MOVS     r5,#0
;;;1540     uint32_t pitchUpdate = 0;
000008  2600              MOVS     r6,#0
;;;1541     uint32_t pixelFormat = 0;
00000a  2100              MOVS     r1,#0
;;;1542     
;;;1543     /* Process locked */
;;;1544     __HAL_LOCK(hltdc);
00000c  bf00              NOP      
00000e  f89300a0          LDRB     r0,[r3,#0xa0]
000012  2801              CMP      r0,#1
000014  d101              BNE      |L33.26|
000016  2002              MOVS     r0,#2
                  |L33.24|
;;;1545     
;;;1546     /* Change LTDC peripheral state */
;;;1547     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1548     
;;;1549     /* Check the parameters */
;;;1550     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1551     
;;;1552     /* get LayerIdx used pixel format */
;;;1553     pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
;;;1554     
;;;1555     if(pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
;;;1556     {
;;;1557       tmp = 4;
;;;1558     }
;;;1559     else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
;;;1560     {
;;;1561       tmp = 3;
;;;1562     }
;;;1563     else if((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
;;;1564             (pixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
;;;1565             (pixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
;;;1566            (pixelFormat == LTDC_PIXEL_FORMAT_AL88))
;;;1567     {
;;;1568       tmp = 2;
;;;1569     }
;;;1570     else
;;;1571     {
;;;1572       tmp = 1;
;;;1573     }
;;;1574     
;;;1575     pitchUpdate = ((LinePitchInPixels * tmp) << 16);
;;;1576     
;;;1577     /* Clear previously set standard pitch */
;;;1578     LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
;;;1579     
;;;1580     /* Set new line pitch value */
;;;1581     LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
;;;1582     
;;;1583     /* Do not Sets the Reload  */
;;;1584     
;;;1585     /* Change the LTDC state*/
;;;1586     hltdc->State = HAL_LTDC_STATE_READY;
;;;1587     
;;;1588     /* Process unlocked */
;;;1589     __HAL_UNLOCK(hltdc);
;;;1590     
;;;1591     return HAL_OK;  
;;;1592   }
000018  bdf0              POP      {r4-r7,pc}
                  |L33.26|
00001a  2001              MOVS     r0,#1                 ;1544
00001c  f88300a0          STRB     r0,[r3,#0xa0]         ;1544
000020  bf00              NOP                            ;1544
000022  2002              MOVS     r0,#2                 ;1547
000024  f88300a1          STRB     r0,[r3,#0xa1]         ;1547
000028  eb020082          ADD      r0,r2,r2,LSL #2       ;1553
00002c  eb0007c2          ADD      r7,r0,r2,LSL #3       ;1553
000030  f1030038          ADD      r0,r3,#0x38           ;1553
000034  eb000087          ADD      r0,r0,r7,LSL #2       ;1553
000038  6901              LDR      r1,[r0,#0x10]         ;1553
00003a  b909              CBNZ     r1,|L33.64|
00003c  2504              MOVS     r5,#4                 ;1557
00003e  e00e              B        |L33.94|
                  |L33.64|
000040  2901              CMP      r1,#1                 ;1559
000042  d101              BNE      |L33.72|
000044  2503              MOVS     r5,#3                 ;1561
000046  e00a              B        |L33.94|
                  |L33.72|
000048  2904              CMP      r1,#4                 ;1563
00004a  d005              BEQ      |L33.88|
00004c  2902              CMP      r1,#2                 ;1564
00004e  d003              BEQ      |L33.88|
000050  2903              CMP      r1,#3                 ;1565
000052  d001              BEQ      |L33.88|
000054  2907              CMP      r1,#7                 ;1566
000056  d101              BNE      |L33.92|
                  |L33.88|
000058  2502              MOVS     r5,#2                 ;1568
00005a  e000              B        |L33.94|
                  |L33.92|
00005c  2501              MOVS     r5,#1                 ;1572
                  |L33.94|
00005e  fb04f005          MUL      r0,r4,r5              ;1575
000062  0406              LSLS     r6,r0,#16             ;1575
000064  6818              LDR      r0,[r3,#0]            ;1578
000066  3084              ADDS     r0,r0,#0x84           ;1578
000068  2780              MOVS     r7,#0x80              ;1578
00006a  fb070002          MLA      r0,r7,r2,r0           ;1578
00006e  6ac0              LDR      r0,[r0,#0x2c]         ;1578
000070  4f0f              LDR      r7,|L33.176|
000072  4038              ANDS     r0,r0,r7              ;1578
000074  681f              LDR      r7,[r3,#0]            ;1578
000076  3784              ADDS     r7,r7,#0x84           ;1578
000078  f04f0c80          MOV      r12,#0x80             ;1578
00007c  fb0c7702          MLA      r7,r12,r2,r7          ;1578
000080  62f8              STR      r0,[r7,#0x2c]         ;1578
000082  6818              LDR      r0,[r3,#0]            ;1581
000084  3084              ADDS     r0,r0,#0x84           ;1581
000086  2780              MOVS     r7,#0x80              ;1581
000088  fb070002          MLA      r0,r7,r2,r0           ;1581
00008c  6ac0              LDR      r0,[r0,#0x2c]         ;1581
00008e  4330              ORRS     r0,r0,r6              ;1581
000090  681f              LDR      r7,[r3,#0]            ;1581
000092  3784              ADDS     r7,r7,#0x84           ;1581
000094  fb0c7702          MLA      r7,r12,r2,r7          ;1581
000098  62f8              STR      r0,[r7,#0x2c]         ;1581
00009a  2001              MOVS     r0,#1                 ;1586
00009c  f88300a1          STRB     r0,[r3,#0xa1]         ;1586
0000a0  bf00              NOP                            ;1589
0000a2  2000              MOVS     r0,#0                 ;1589
0000a4  f88300a0          STRB     r0,[r3,#0xa0]         ;1589
0000a8  bf00              NOP                            ;1589
0000aa  bf00              NOP                            ;1591
0000ac  e7b4              B        |L33.24|
;;;1593   
                          ENDP

0000ae  0000              DCW      0x0000
                  |L33.176|
                          DCD      0xe000ffff

                          AREA ||i.HAL_LTDC_SetPixelFormat||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_SetPixelFormat PROC
;;;957      */
;;;958    HAL_StatusTypeDef HAL_LTDC_SetPixelFormat(LTDC_HandleTypeDef *hltdc, uint32_t Pixelformat, uint32_t LayerIdx)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;959    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;960      LTDC_LayerCfgTypeDef *pLayerCfg;
;;;961    
;;;962      /* Process locked */
;;;963      __HAL_LOCK(hltdc);
00000a  bf00              NOP      
00000c  f89400a0          LDRB     r0,[r4,#0xa0]
000010  2801              CMP      r0,#1
000012  d102              BNE      |L34.26|
000014  2002              MOVS     r0,#2
                  |L34.22|
;;;964    
;;;965      /* Change LTDC peripheral state */
;;;966      hltdc->State = HAL_LTDC_STATE_BUSY;
;;;967    
;;;968      /* Check the parameters */
;;;969      assert_param(IS_LTDC_LAYER(LayerIdx));
;;;970      assert_param(IS_LTDC_PIXEL_FORMAT(Pixelformat));
;;;971    
;;;972      /* Get layer configuration from handle structure */
;;;973      pLayerCfg = &hltdc->LayerCfg[LayerIdx];  
;;;974    
;;;975      /* Reconfigure the pixel format */
;;;976      pLayerCfg->PixelFormat = Pixelformat;
;;;977    
;;;978      /* Set LTDC parameters */
;;;979      LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);   
;;;980    
;;;981      /* Sets the Reload type */
;;;982      hltdc->Instance->SRCR = LTDC_SRCR_IMR;
;;;983    
;;;984      /* Change the LTDC state*/
;;;985      hltdc->State = HAL_LTDC_STATE_READY;
;;;986    
;;;987      /* Process unlocked */
;;;988      __HAL_UNLOCK(hltdc);
;;;989    
;;;990      return HAL_OK;
;;;991    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L34.26|
00001a  2001              MOVS     r0,#1                 ;963
00001c  f88400a0          STRB     r0,[r4,#0xa0]         ;963
000020  bf00              NOP                            ;963
000022  2002              MOVS     r0,#2                 ;966
000024  f88400a1          STRB     r0,[r4,#0xa1]         ;966
000028  eb070087          ADD      r0,r7,r7,LSL #2       ;973
00002c  eb0001c7          ADD      r1,r0,r7,LSL #3       ;973
000030  f1040038          ADD      r0,r4,#0x38           ;973
000034  eb000581          ADD      r5,r0,r1,LSL #2       ;973
000038  612e              STR      r6,[r5,#0x10]         ;976
00003a  463a              MOV      r2,r7                 ;979
00003c  4629              MOV      r1,r5                 ;979
00003e  4620              MOV      r0,r4                 ;979
000040  f7fffffe          BL       LTDC_SetConfig
000044  2001              MOVS     r0,#1                 ;982
000046  6821              LDR      r1,[r4,#0]            ;982
000048  6248              STR      r0,[r1,#0x24]         ;982
00004a  f88400a1          STRB     r0,[r4,#0xa1]         ;985
00004e  bf00              NOP                            ;988
000050  2000              MOVS     r0,#0                 ;988
000052  f88400a0          STRB     r0,[r4,#0xa0]         ;988
000056  bf00              NOP                            ;988
000058  bf00              NOP                            ;990
00005a  e7dc              B        |L34.22|
;;;992    
                          ENDP


                          AREA ||i.HAL_LTDC_SetPixelFormat_NoReload||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_SetPixelFormat_NoReload PROC
;;;1399     */
;;;1400   HAL_StatusTypeDef HAL_LTDC_SetPixelFormat_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t Pixelformat, uint32_t LayerIdx)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1401   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;1402     LTDC_LayerCfgTypeDef *pLayerCfg;
;;;1403   
;;;1404     /* Process locked */
;;;1405     __HAL_LOCK(hltdc);
00000a  bf00              NOP      
00000c  f89400a0          LDRB     r0,[r4,#0xa0]
000010  2801              CMP      r0,#1
000012  d102              BNE      |L35.26|
000014  2002              MOVS     r0,#2
                  |L35.22|
;;;1406   
;;;1407     /* Change LTDC peripheral state */
;;;1408     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1409   
;;;1410     /* Check the parameters */
;;;1411     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1412     assert_param(IS_LTDC_PIXEL_FORMAT(Pixelformat));
;;;1413   
;;;1414     /* Get layer configuration from handle structure */
;;;1415     pLayerCfg = &hltdc->LayerCfg[LayerIdx];  
;;;1416   
;;;1417     /* Reconfigure the pixel format */
;;;1418     pLayerCfg->PixelFormat = Pixelformat;
;;;1419   
;;;1420     /* Set LTDC parameters */
;;;1421     LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);   
;;;1422   
;;;1423     /* Do not Sets the Reload  */
;;;1424   
;;;1425     /* Change the LTDC state*/
;;;1426     hltdc->State = HAL_LTDC_STATE_READY;
;;;1427   
;;;1428     /* Process unlocked */
;;;1429     __HAL_UNLOCK(hltdc);
;;;1430   
;;;1431     return HAL_OK;
;;;1432   }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L35.26|
00001a  2001              MOVS     r0,#1                 ;1405
00001c  f88400a0          STRB     r0,[r4,#0xa0]         ;1405
000020  bf00              NOP                            ;1405
000022  2002              MOVS     r0,#2                 ;1408
000024  f88400a1          STRB     r0,[r4,#0xa1]         ;1408
000028  eb070087          ADD      r0,r7,r7,LSL #2       ;1415
00002c  eb0001c7          ADD      r1,r0,r7,LSL #3       ;1415
000030  f1040038          ADD      r0,r4,#0x38           ;1415
000034  eb000581          ADD      r5,r0,r1,LSL #2       ;1415
000038  612e              STR      r6,[r5,#0x10]         ;1418
00003a  463a              MOV      r2,r7                 ;1421
00003c  4629              MOV      r1,r5                 ;1421
00003e  4620              MOV      r0,r4                 ;1421
000040  f7fffffe          BL       LTDC_SetConfig
000044  2001              MOVS     r0,#1                 ;1426
000046  f88400a1          STRB     r0,[r4,#0xa1]         ;1426
00004a  bf00              NOP                            ;1429
00004c  2000              MOVS     r0,#0                 ;1429
00004e  f88400a0          STRB     r0,[r4,#0xa0]         ;1429
000052  bf00              NOP                            ;1429
000054  bf00              NOP                            ;1431
000056  e7de              B        |L35.22|
;;;1433   
                          ENDP


                          AREA ||i.HAL_LTDC_SetWindowPosition||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_SetWindowPosition PROC
;;;904      */
;;;905    HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;906    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;907      LTDC_LayerCfgTypeDef *pLayerCfg;
;;;908      
;;;909      /* Process locked */
;;;910      __HAL_LOCK(hltdc);
00000c  bf00              NOP      
00000e  f89400a0          LDRB     r0,[r4,#0xa0]
000012  2801              CMP      r0,#1
000014  d102              BNE      |L36.28|
000016  2002              MOVS     r0,#2
                  |L36.24|
;;;911    
;;;912      /* Change LTDC peripheral state */
;;;913      hltdc->State = HAL_LTDC_STATE_BUSY;
;;;914    
;;;915      /* Get layer configuration from handle structure */
;;;916      pLayerCfg = &hltdc->LayerCfg[LayerIdx];
;;;917    
;;;918      /* Check the parameters */
;;;919      assert_param(IS_LTDC_LAYER(LayerIdx));
;;;920      assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
;;;921      assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
;;;922      assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
;;;923      assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
;;;924    
;;;925      /* update horizontal start/stop */
;;;926      pLayerCfg->WindowX0 = X0;
;;;927      pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
;;;928    
;;;929      /* update vertical start/stop */
;;;930      pLayerCfg->WindowY0 = Y0;
;;;931      pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
;;;932    
;;;933      /* Set LTDC parameters */
;;;934      LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
;;;935    
;;;936      /* Sets the Reload type */
;;;937      hltdc->Instance->SRCR = LTDC_SRCR_IMR;
;;;938    
;;;939      /* Change the LTDC state*/
;;;940      hltdc->State = HAL_LTDC_STATE_READY;
;;;941    
;;;942      /* Process unlocked */
;;;943      __HAL_UNLOCK(hltdc);
;;;944    
;;;945      return HAL_OK;
;;;946    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L36.28|
00001c  2001              MOVS     r0,#1                 ;910
00001e  f88400a0          STRB     r0,[r4,#0xa0]         ;910
000022  bf00              NOP                            ;910
000024  2002              MOVS     r0,#2                 ;913
000026  f88400a1          STRB     r0,[r4,#0xa1]         ;913
00002a  eb080088          ADD      r0,r8,r8,LSL #2       ;916
00002e  eb0001c8          ADD      r1,r0,r8,LSL #3       ;916
000032  f1040038          ADD      r0,r4,#0x38           ;916
000036  eb000581          ADD      r5,r0,r1,LSL #2       ;916
00003a  602e              STR      r6,[r5,#0]            ;926
00003c  6aa8              LDR      r0,[r5,#0x28]         ;927
00003e  4430              ADD      r0,r0,r6              ;927
000040  6068              STR      r0,[r5,#4]            ;927
000042  60af              STR      r7,[r5,#8]            ;930
000044  6ae8              LDR      r0,[r5,#0x2c]         ;931
000046  4438              ADD      r0,r0,r7              ;931
000048  60e8              STR      r0,[r5,#0xc]          ;931
00004a  4642              MOV      r2,r8                 ;934
00004c  4629              MOV      r1,r5                 ;934
00004e  4620              MOV      r0,r4                 ;934
000050  f7fffffe          BL       LTDC_SetConfig
000054  2001              MOVS     r0,#1                 ;937
000056  6821              LDR      r1,[r4,#0]            ;937
000058  6248              STR      r0,[r1,#0x24]         ;937
00005a  f88400a1          STRB     r0,[r4,#0xa1]         ;940
00005e  bf00              NOP                            ;943
000060  2000              MOVS     r0,#0                 ;943
000062  f88400a0          STRB     r0,[r4,#0xa0]         ;943
000066  bf00              NOP                            ;943
000068  bf00              NOP                            ;945
00006a  e7d5              B        |L36.24|
;;;947    
                          ENDP


                          AREA ||i.HAL_LTDC_SetWindowPosition_NoReload||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_SetWindowPosition_NoReload PROC
;;;1346     */
;;;1347   HAL_StatusTypeDef HAL_LTDC_SetWindowPosition_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1348   {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;1349     LTDC_LayerCfgTypeDef *pLayerCfg;
;;;1350     
;;;1351     /* Process locked */
;;;1352     __HAL_LOCK(hltdc);
00000c  bf00              NOP      
00000e  f89500a0          LDRB     r0,[r5,#0xa0]
000012  2801              CMP      r0,#1
000014  d102              BNE      |L37.28|
000016  2002              MOVS     r0,#2
                  |L37.24|
;;;1353   
;;;1354     /* Change LTDC peripheral state */
;;;1355     hltdc->State = HAL_LTDC_STATE_BUSY;
;;;1356   
;;;1357     /* Get layer configuration from handle structure */
;;;1358     pLayerCfg = &hltdc->LayerCfg[LayerIdx];
;;;1359   
;;;1360     /* Check the parameters */
;;;1361     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1362     assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
;;;1363     assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
;;;1364     assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
;;;1365     assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
;;;1366   
;;;1367     /* update horizontal start/stop */
;;;1368     pLayerCfg->WindowX0 = X0;
;;;1369     pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
;;;1370   
;;;1371     /* update vertical start/stop */
;;;1372     pLayerCfg->WindowY0 = Y0;
;;;1373     pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
;;;1374   
;;;1375     /* Set LTDC parameters */
;;;1376     LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
;;;1377   
;;;1378     /* Do not Sets the Reload  */
;;;1379   
;;;1380     /* Change the LTDC state*/
;;;1381     hltdc->State = HAL_LTDC_STATE_READY;
;;;1382   
;;;1383     /* Process unlocked */
;;;1384     __HAL_UNLOCK(hltdc);
;;;1385   
;;;1386     return HAL_OK;
;;;1387   }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L37.28|
00001c  2001              MOVS     r0,#1                 ;1352
00001e  f88500a0          STRB     r0,[r5,#0xa0]         ;1352
000022  bf00              NOP                            ;1352
000024  2002              MOVS     r0,#2                 ;1355
000026  f88500a1          STRB     r0,[r5,#0xa1]         ;1355
00002a  eb080088          ADD      r0,r8,r8,LSL #2       ;1358
00002e  eb0001c8          ADD      r1,r0,r8,LSL #3       ;1358
000032  f1050038          ADD      r0,r5,#0x38           ;1358
000036  eb000481          ADD      r4,r0,r1,LSL #2       ;1358
00003a  6026              STR      r6,[r4,#0]            ;1368
00003c  6aa0              LDR      r0,[r4,#0x28]         ;1369
00003e  4430              ADD      r0,r0,r6              ;1369
000040  6060              STR      r0,[r4,#4]            ;1369
000042  60a7              STR      r7,[r4,#8]            ;1372
000044  6ae0              LDR      r0,[r4,#0x2c]         ;1373
000046  4438              ADD      r0,r0,r7              ;1373
000048  60e0              STR      r0,[r4,#0xc]          ;1373
00004a  4642              MOV      r2,r8                 ;1376
00004c  4621              MOV      r1,r4                 ;1376
00004e  4628              MOV      r0,r5                 ;1376
000050  f7fffffe          BL       LTDC_SetConfig
000054  2001              MOVS     r0,#1                 ;1381
000056  f88500a1          STRB     r0,[r5,#0xa1]         ;1381
00005a  bf00              NOP                            ;1384
00005c  2000              MOVS     r0,#0                 ;1384
00005e  f88500a0          STRB     r0,[r5,#0xa0]         ;1384
000062  bf00              NOP                            ;1384
000064  bf00              NOP                            ;1386
000066  e7d7              B        |L37.24|
;;;1388   
                          ENDP


                          AREA ||i.HAL_LTDC_SetWindowSize||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_SetWindowSize PROC
;;;842      */
;;;843    HAL_StatusTypeDef HAL_LTDC_SetWindowSize(LTDC_HandleTypeDef *hltdc, uint32_t XSize, uint32_t YSize, uint32_t LayerIdx) 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;844    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;845      LTDC_LayerCfgTypeDef *pLayerCfg;
;;;846    
;;;847      /* Process locked */
;;;848      __HAL_LOCK(hltdc);
00000c  bf00              NOP      
00000e  f89500a0          LDRB     r0,[r5,#0xa0]
000012  2801              CMP      r0,#1
000014  d102              BNE      |L38.28|
000016  2002              MOVS     r0,#2
                  |L38.24|
;;;849    
;;;850      /* Change LTDC peripheral state */
;;;851      hltdc->State = HAL_LTDC_STATE_BUSY; 
;;;852    
;;;853      /* Get layer configuration from handle structure */
;;;854      pLayerCfg = &hltdc->LayerCfg[LayerIdx];
;;;855    
;;;856      /* Check the parameters (Layers parameters)*/
;;;857      assert_param(IS_LTDC_LAYER(LayerIdx));
;;;858      assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
;;;859      assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
;;;860      assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
;;;861      assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
;;;862      assert_param(IS_LTDC_CFBLL(XSize));
;;;863      assert_param(IS_LTDC_CFBLNBR(YSize));
;;;864    
;;;865      /* update horizontal start/stop */
;;;866      pLayerCfg->WindowX0 = 0;
;;;867      pLayerCfg->WindowX1 = XSize + pLayerCfg->WindowX0;
;;;868    
;;;869      /* update vertical start/stop */  
;;;870      pLayerCfg->WindowY0 = 0;
;;;871      pLayerCfg->WindowY1 = YSize + pLayerCfg->WindowY0;
;;;872    
;;;873      /* Reconfigures the color frame buffer pitch in byte */
;;;874      pLayerCfg->ImageWidth = XSize;
;;;875    
;;;876      /* Reconfigures the frame buffer line number */
;;;877      pLayerCfg->ImageHeight = YSize;
;;;878    
;;;879      /* Set LTDC parameters */
;;;880      LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
;;;881    
;;;882      /* Sets the Reload type */
;;;883      hltdc->Instance->SRCR = LTDC_SRCR_IMR;
;;;884    
;;;885      /* Change the LTDC state*/
;;;886      hltdc->State = HAL_LTDC_STATE_READY;
;;;887    
;;;888      /* Process unlocked */
;;;889      __HAL_UNLOCK(hltdc);
;;;890    
;;;891      return HAL_OK;
;;;892    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L38.28|
00001c  2001              MOVS     r0,#1                 ;848
00001e  f88500a0          STRB     r0,[r5,#0xa0]         ;848
000022  bf00              NOP                            ;848
000024  2002              MOVS     r0,#2                 ;851
000026  f88500a1          STRB     r0,[r5,#0xa1]         ;851
00002a  eb080088          ADD      r0,r8,r8,LSL #2       ;854
00002e  eb0001c8          ADD      r1,r0,r8,LSL #3       ;854
000032  f1050038          ADD      r0,r5,#0x38           ;854
000036  eb000481          ADD      r4,r0,r1,LSL #2       ;854
00003a  2000              MOVS     r0,#0                 ;866
00003c  6020              STR      r0,[r4,#0]            ;866
00003e  6820              LDR      r0,[r4,#0]            ;867
000040  4430              ADD      r0,r0,r6              ;867
000042  6060              STR      r0,[r4,#4]            ;867
000044  2000              MOVS     r0,#0                 ;870
000046  60a0              STR      r0,[r4,#8]            ;870
000048  68a0              LDR      r0,[r4,#8]            ;871
00004a  4438              ADD      r0,r0,r7              ;871
00004c  60e0              STR      r0,[r4,#0xc]          ;871
00004e  62a6              STR      r6,[r4,#0x28]         ;874
000050  62e7              STR      r7,[r4,#0x2c]         ;877
000052  4642              MOV      r2,r8                 ;880
000054  4621              MOV      r1,r4                 ;880
000056  4628              MOV      r0,r5                 ;880
000058  f7fffffe          BL       LTDC_SetConfig
00005c  2001              MOVS     r0,#1                 ;883
00005e  6829              LDR      r1,[r5,#0]            ;883
000060  6248              STR      r0,[r1,#0x24]         ;883
000062  f88500a1          STRB     r0,[r5,#0xa1]         ;886
000066  bf00              NOP                            ;889
000068  2000              MOVS     r0,#0                 ;889
00006a  f88500a0          STRB     r0,[r5,#0xa0]         ;889
00006e  bf00              NOP                            ;889
000070  bf00              NOP                            ;891
000072  e7d1              B        |L38.24|
;;;893    
                          ENDP


                          AREA ||i.HAL_LTDC_SetWindowSize_NoReload||, CODE, READONLY, ALIGN=1

                  HAL_LTDC_SetWindowSize_NoReload PROC
;;;1284     */
;;;1285   HAL_StatusTypeDef HAL_LTDC_SetWindowSize_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t XSize, uint32_t YSize, uint32_t LayerIdx) 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1286   {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;1287     LTDC_LayerCfgTypeDef *pLayerCfg;
;;;1288   
;;;1289     /* Process locked */
;;;1290     __HAL_LOCK(hltdc);
00000c  bf00              NOP      
00000e  f89500a0          LDRB     r0,[r5,#0xa0]
000012  2801              CMP      r0,#1
000014  d102              BNE      |L39.28|
000016  2002              MOVS     r0,#2
                  |L39.24|
;;;1291   
;;;1292     /* Change LTDC peripheral state */
;;;1293     hltdc->State = HAL_LTDC_STATE_BUSY; 
;;;1294   
;;;1295     /* Get layer configuration from handle structure */
;;;1296     pLayerCfg = &hltdc->LayerCfg[LayerIdx];
;;;1297   
;;;1298     /* Check the parameters (Layers parameters)*/
;;;1299     assert_param(IS_LTDC_LAYER(LayerIdx));
;;;1300     assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
;;;1301     assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
;;;1302     assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
;;;1303     assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
;;;1304     assert_param(IS_LTDC_CFBLL(XSize));
;;;1305     assert_param(IS_LTDC_CFBLNBR(YSize));
;;;1306   
;;;1307     /* update horizontal start/stop */
;;;1308     pLayerCfg->WindowX0 = 0;
;;;1309     pLayerCfg->WindowX1 = XSize + pLayerCfg->WindowX0;
;;;1310   
;;;1311     /* update vertical start/stop */  
;;;1312     pLayerCfg->WindowY0 = 0;
;;;1313     pLayerCfg->WindowY1 = YSize + pLayerCfg->WindowY0;
;;;1314   
;;;1315     /* Reconfigures the color frame buffer pitch in byte */
;;;1316     pLayerCfg->ImageWidth = XSize;
;;;1317   
;;;1318     /* Reconfigures the frame buffer line number */
;;;1319     pLayerCfg->ImageHeight = YSize;
;;;1320   
;;;1321     /* Set LTDC parameters */
;;;1322     LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
;;;1323   
;;;1324     /* Do not Sets the Reload  */
;;;1325   
;;;1326     /* Change the LTDC state*/
;;;1327     hltdc->State = HAL_LTDC_STATE_READY;
;;;1328   
;;;1329     /* Process unlocked */
;;;1330     __HAL_UNLOCK(hltdc);
;;;1331   
;;;1332     return HAL_OK;
;;;1333   }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L39.28|
00001c  2001              MOVS     r0,#1                 ;1290
00001e  f88500a0          STRB     r0,[r5,#0xa0]         ;1290
000022  bf00              NOP                            ;1290
000024  2002              MOVS     r0,#2                 ;1293
000026  f88500a1          STRB     r0,[r5,#0xa1]         ;1293
00002a  eb080088          ADD      r0,r8,r8,LSL #2       ;1296
00002e  eb0001c8          ADD      r1,r0,r8,LSL #3       ;1296
000032  f1050038          ADD      r0,r5,#0x38           ;1296
000036  eb000481          ADD      r4,r0,r1,LSL #2       ;1296
00003a  2000              MOVS     r0,#0                 ;1308
00003c  6020              STR      r0,[r4,#0]            ;1308
00003e  6820              LDR      r0,[r4,#0]            ;1309
000040  4430              ADD      r0,r0,r6              ;1309
000042  6060              STR      r0,[r4,#4]            ;1309
000044  2000              MOVS     r0,#0                 ;1312
000046  60a0              STR      r0,[r4,#8]            ;1312
000048  68a0              LDR      r0,[r4,#8]            ;1313
00004a  4438              ADD      r0,r0,r7              ;1313
00004c  60e0              STR      r0,[r4,#0xc]          ;1313
00004e  62a6              STR      r6,[r4,#0x28]         ;1316
000050  62e7              STR      r7,[r4,#0x2c]         ;1319
000052  4642              MOV      r2,r8                 ;1322
000054  4621              MOV      r1,r4                 ;1322
000056  4628              MOV      r0,r5                 ;1322
000058  f7fffffe          BL       LTDC_SetConfig
00005c  2001              MOVS     r0,#1                 ;1327
00005e  f88500a1          STRB     r0,[r5,#0xa1]         ;1327
000062  bf00              NOP                            ;1330
000064  2000              MOVS     r0,#0                 ;1330
000066  f88500a0          STRB     r0,[r5,#0xa0]         ;1330
00006a  bf00              NOP                            ;1330
00006c  bf00              NOP                            ;1332
00006e  e7d3              B        |L39.24|
;;;1334   
                          ENDP


                          AREA ||i.LTDC_SetConfig||, CODE, READONLY, ALIGN=1

                  LTDC_SetConfig PROC
;;;1828     */
;;;1829   static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1830   {
;;;1831     uint32_t tmp = 0;
000002  2300              MOVS     r3,#0
;;;1832     uint32_t tmp1 = 0;
000004  2400              MOVS     r4,#0
;;;1833     uint32_t tmp2 = 0;
000006  2500              MOVS     r5,#0
;;;1834   
;;;1835     /* Configures the horizontal start and stop position */
;;;1836     tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
000008  888e              LDRH     r6,[r1,#4]
00000a  6807              LDR      r7,[r0,#0]
00000c  68ff              LDR      r7,[r7,#0xc]
00000e  f3c7470b          UBFX     r7,r7,#16,#12
000012  443e              ADD      r6,r6,r7
000014  0433              LSLS     r3,r6,#16
;;;1837     LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
000016  6806              LDR      r6,[r0,#0]
000018  3684              ADDS     r6,r6,#0x84
00001a  2780              MOVS     r7,#0x80
00001c  fb076602          MLA      r6,r7,r2,r6
000020  6876              LDR      r6,[r6,#4]
000022  f4064770          AND      r7,r6,#0xf000
000026  6806              LDR      r6,[r0,#0]
000028  3684              ADDS     r6,r6,#0x84
00002a  f04f0c80          MOV      r12,#0x80
00002e  fb0c6602          MLA      r6,r12,r2,r6
000032  6077              STR      r7,[r6,#4]
;;;1838     LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
000034  680e              LDR      r6,[r1,#0]
000036  6807              LDR      r7,[r0,#0]
000038  68ff              LDR      r7,[r7,#0xc]
00003a  f3c7470b          UBFX     r7,r7,#16,#12
00003e  443e              ADD      r6,r6,r7
000040  1c76              ADDS     r6,r6,#1
000042  431e              ORRS     r6,r6,r3
000044  6807              LDR      r7,[r0,#0]
000046  3784              ADDS     r7,r7,#0x84
000048  fb0c7702          MLA      r7,r12,r2,r7
00004c  607e              STR      r6,[r7,#4]
;;;1839   
;;;1840     /* Configures the vertical start and stop position */
;;;1841     tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
00004e  898e              LDRH     r6,[r1,#0xc]
000050  6807              LDR      r7,[r0,#0]
000052  68ff              LDR      r7,[r7,#0xc]
000054  f3c7070a          UBFX     r7,r7,#0,#11
000058  443e              ADD      r6,r6,r7
00005a  0433              LSLS     r3,r6,#16
;;;1842     LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
00005c  6806              LDR      r6,[r0,#0]
00005e  3684              ADDS     r6,r6,#0x84
000060  2780              MOVS     r7,#0x80
000062  fb076602          MLA      r6,r7,r2,r6
000066  68b6              LDR      r6,[r6,#8]
000068  f4064770          AND      r7,r6,#0xf000
00006c  6806              LDR      r6,[r0,#0]
00006e  3684              ADDS     r6,r6,#0x84
000070  fb0c6602          MLA      r6,r12,r2,r6
000074  60b7              STR      r7,[r6,#8]
;;;1843     LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
000076  688e              LDR      r6,[r1,#8]
000078  6807              LDR      r7,[r0,#0]
00007a  68ff              LDR      r7,[r7,#0xc]
00007c  f3c7070a          UBFX     r7,r7,#0,#11
000080  443e              ADD      r6,r6,r7
000082  1c76              ADDS     r6,r6,#1
000084  431e              ORRS     r6,r6,r3
000086  6807              LDR      r7,[r0,#0]
000088  3784              ADDS     r7,r7,#0x84
00008a  fb0c7702          MLA      r7,r12,r2,r7
00008e  60be              STR      r6,[r7,#8]
;;;1844   
;;;1845     /* Specifies the pixel format */
;;;1846     LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
000090  6806              LDR      r6,[r0,#0]
000092  3684              ADDS     r6,r6,#0x84
000094  2780              MOVS     r7,#0x80
000096  fb076602          MLA      r6,r7,r2,r6
00009a  6936              LDR      r6,[r6,#0x10]
00009c  f0260707          BIC      r7,r6,#7
0000a0  6806              LDR      r6,[r0,#0]
0000a2  3684              ADDS     r6,r6,#0x84
0000a4  fb0c6602          MLA      r6,r12,r2,r6
0000a8  6137              STR      r7,[r6,#0x10]
;;;1847     LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
0000aa  690f              LDR      r7,[r1,#0x10]
0000ac  6806              LDR      r6,[r0,#0]
0000ae  3684              ADDS     r6,r6,#0x84
0000b0  fb0c6602          MLA      r6,r12,r2,r6
0000b4  6137              STR      r7,[r6,#0x10]
;;;1848   
;;;1849     /* Configures the default color values */
;;;1850     tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
0000b6  2631              MOVS     r6,#0x31
0000b8  5c76              LDRB     r6,[r6,r1]
0000ba  0233              LSLS     r3,r6,#8
;;;1851     tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
0000bc  2632              MOVS     r6,#0x32
0000be  5c76              LDRB     r6,[r6,r1]
0000c0  0434              LSLS     r4,r6,#16
;;;1852     tmp2 = (pLayerCfg->Alpha0 << 24);  
0000c2  7e0e              LDRB     r6,[r1,#0x18]
0000c4  0635              LSLS     r5,r6,#24
;;;1853     LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
0000c6  6806              LDR      r6,[r0,#0]
0000c8  3684              ADDS     r6,r6,#0x84
0000ca  2780              MOVS     r7,#0x80
0000cc  fb076602          MLA      r6,r7,r2,r6
0000d0  69b6              LDR      r6,[r6,#0x18]
0000d2  2700              MOVS     r7,#0
0000d4  6806              LDR      r6,[r0,#0]
0000d6  3684              ADDS     r6,r6,#0x84
0000d8  fb0c6602          MLA      r6,r12,r2,r6
0000dc  61b7              STR      r7,[r6,#0x18]
;;;1854     LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
0000de  f8916030          LDRB     r6,[r1,#0x30]
0000e2  431e              ORRS     r6,r6,r3
0000e4  4326              ORRS     r6,r6,r4
0000e6  432e              ORRS     r6,r6,r5
0000e8  6807              LDR      r7,[r0,#0]
0000ea  3784              ADDS     r7,r7,#0x84
0000ec  fb0c7702          MLA      r7,r12,r2,r7
0000f0  61be              STR      r6,[r7,#0x18]
;;;1855   
;;;1856     /* Specifies the constant alpha value */
;;;1857     LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
0000f2  6806              LDR      r6,[r0,#0]
0000f4  3684              ADDS     r6,r6,#0x84
0000f6  2780              MOVS     r7,#0x80
0000f8  fb076602          MLA      r6,r7,r2,r6
0000fc  6976              LDR      r6,[r6,#0x14]
0000fe  f02607ff          BIC      r7,r6,#0xff
000102  6806              LDR      r6,[r0,#0]
000104  3684              ADDS     r6,r6,#0x84
000106  fb0c6602          MLA      r6,r12,r2,r6
00010a  6177              STR      r7,[r6,#0x14]
;;;1858     LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
00010c  694f              LDR      r7,[r1,#0x14]
00010e  6806              LDR      r6,[r0,#0]
000110  3684              ADDS     r6,r6,#0x84
000112  fb0c6602          MLA      r6,r12,r2,r6
000116  6177              STR      r7,[r6,#0x14]
;;;1859   
;;;1860     /* Specifies the blending factors */
;;;1861     LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
000118  6806              LDR      r6,[r0,#0]
00011a  3684              ADDS     r6,r6,#0x84
00011c  2780              MOVS     r7,#0x80
00011e  fb076602          MLA      r6,r7,r2,r6
000122  69f7              LDR      r7,[r6,#0x1c]
000124  f2407607          MOV      r6,#0x707
000128  43b7              BICS     r7,r7,r6
00012a  6806              LDR      r6,[r0,#0]
00012c  3684              ADDS     r6,r6,#0x84
00012e  fb0c6602          MLA      r6,r12,r2,r6
000132  61f7              STR      r7,[r6,#0x1c]
;;;1862     LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
000134  e9d16707          LDRD     r6,r7,[r1,#0x1c]
000138  433e              ORRS     r6,r6,r7
00013a  6807              LDR      r7,[r0,#0]
00013c  3784              ADDS     r7,r7,#0x84
00013e  fb0c7702          MLA      r7,r12,r2,r7
000142  61fe              STR      r6,[r7,#0x1c]
;;;1863   
;;;1864     /* Configures the color frame buffer start address */
;;;1865     LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
000144  6806              LDR      r6,[r0,#0]
000146  3684              ADDS     r6,r6,#0x84
000148  2780              MOVS     r7,#0x80
00014a  fb076602          MLA      r6,r7,r2,r6
00014e  6ab6              LDR      r6,[r6,#0x28]
000150  2700              MOVS     r7,#0
000152  6806              LDR      r6,[r0,#0]
000154  3684              ADDS     r6,r6,#0x84
000156  fb0c6602          MLA      r6,r12,r2,r6
00015a  62b7              STR      r7,[r6,#0x28]
;;;1866     LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
00015c  6a4f              LDR      r7,[r1,#0x24]
00015e  6806              LDR      r6,[r0,#0]
000160  3684              ADDS     r6,r6,#0x84
000162  fb0c6602          MLA      r6,r12,r2,r6
000166  62b7              STR      r7,[r6,#0x28]
;;;1867   
;;;1868     if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
000168  690e              LDR      r6,[r1,#0x10]
00016a  b90e              CBNZ     r6,|L40.368|
;;;1869     {
;;;1870       tmp = 4;
00016c  2304              MOVS     r3,#4
00016e  e013              B        |L40.408|
                  |L40.368|
;;;1871     }
;;;1872     else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
000170  690e              LDR      r6,[r1,#0x10]
000172  2e01              CMP      r6,#1
000174  d101              BNE      |L40.378|
;;;1873     {
;;;1874       tmp = 3;
000176  2303              MOVS     r3,#3
000178  e00e              B        |L40.408|
                  |L40.378|
;;;1875     }
;;;1876     else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
00017a  690e              LDR      r6,[r1,#0x10]
00017c  2e04              CMP      r6,#4
00017e  d008              BEQ      |L40.402|
;;;1877       (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
000180  690e              LDR      r6,[r1,#0x10]
000182  2e02              CMP      r6,#2
000184  d005              BEQ      |L40.402|
;;;1878         (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
000186  690e              LDR      r6,[r1,#0x10]
000188  2e03              CMP      r6,#3
00018a  d002              BEQ      |L40.402|
;;;1879           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
00018c  690e              LDR      r6,[r1,#0x10]
00018e  2e07              CMP      r6,#7
000190  d101              BNE      |L40.406|
                  |L40.402|
;;;1880     {
;;;1881       tmp = 2;
000192  2302              MOVS     r3,#2
000194  e000              B        |L40.408|
                  |L40.406|
;;;1882     }
;;;1883     else
;;;1884     {
;;;1885       tmp = 1;
000196  2301              MOVS     r3,#1
                  |L40.408|
;;;1886     }
;;;1887   
;;;1888     /* Configures the color frame buffer pitch in byte */
;;;1889     LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
000198  6806              LDR      r6,[r0,#0]
00019a  3684              ADDS     r6,r6,#0x84
00019c  2780              MOVS     r7,#0x80
00019e  fb076602          MLA      r6,r7,r2,r6
0001a2  6af6              LDR      r6,[r6,#0x2c]
0001a4  f00627e0          AND      r7,r6,#0xe000e000
0001a8  6806              LDR      r6,[r0,#0]
0001aa  3684              ADDS     r6,r6,#0x84
0001ac  f04f0c80          MOV      r12,#0x80
0001b0  fb0c6602          MLA      r6,r12,r2,r6
0001b4  62f7              STR      r7,[r6,#0x2c]
;;;1890     LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
0001b6  e9d17600          LDRD     r7,r6,[r1,#0]
0001ba  1bf6              SUBS     r6,r6,r7
0001bc  435e              MULS     r6,r3,r6
0001be  1cf7              ADDS     r7,r6,#3
0001c0  8d0e              LDRH     r6,[r1,#0x28]
0001c2  435e              MULS     r6,r3,r6
0001c4  ea474706          ORR      r7,r7,r6,LSL #16
0001c8  6806              LDR      r6,[r0,#0]
0001ca  3684              ADDS     r6,r6,#0x84
0001cc  fb0c6602          MLA      r6,r12,r2,r6
0001d0  62f7              STR      r7,[r6,#0x2c]
;;;1891   
;;;1892     /* Configures the frame buffer line number */
;;;1893     LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
0001d2  6806              LDR      r6,[r0,#0]
0001d4  3684              ADDS     r6,r6,#0x84
0001d6  2780              MOVS     r7,#0x80
0001d8  fb076602          MLA      r6,r7,r2,r6
0001dc  6b36              LDR      r6,[r6,#0x30]
0001de  0af7              LSRS     r7,r6,#11
0001e0  02ff              LSLS     r7,r7,#11
0001e2  6806              LDR      r6,[r0,#0]
0001e4  3684              ADDS     r6,r6,#0x84
0001e6  fb0c6602          MLA      r6,r12,r2,r6
0001ea  6337              STR      r7,[r6,#0x30]
;;;1894     LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
0001ec  6acf              LDR      r7,[r1,#0x2c]
0001ee  6806              LDR      r6,[r0,#0]
0001f0  3684              ADDS     r6,r6,#0x84
0001f2  fb0c6602          MLA      r6,r12,r2,r6
0001f6  6337              STR      r7,[r6,#0x30]
;;;1895   
;;;1896     /* Enable LTDC_Layer by setting LEN bit */  
;;;1897     LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
0001f8  6806              LDR      r6,[r0,#0]
0001fa  3684              ADDS     r6,r6,#0x84
0001fc  01d7              LSLS     r7,r2,#7
0001fe  59f6              LDR      r6,[r6,r7]
000200  f0460701          ORR      r7,r6,#1
000204  6806              LDR      r6,[r0,#0]
000206  3684              ADDS     r6,r6,#0x84
000208  ea4f1cc2          LSL      r12,r2,#7
00020c  f846700c          STR      r7,[r6,r12]
;;;1898   }
000210  bdf0              POP      {r4-r7,pc}
;;;1899   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\HALLIB\\STM32F7xx_HAL_Driver\\Src\\stm32f7xx_hal_ltdc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f7xx_hal_ltdc_c_fa7241fd____REV16|
#line 388 "..\\CORE\\cmsis_armcc.h"
|__asm___20_stm32f7xx_hal_ltdc_c_fa7241fd____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f7xx_hal_ltdc_c_fa7241fd____REVSH|
#line 402
|__asm___20_stm32f7xx_hal_ltdc_c_fa7241fd____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f7xx_hal_ltdc_c_fa7241fd____RRX|
#line 587
|__asm___20_stm32f7xx_hal_ltdc_c_fa7241fd____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
