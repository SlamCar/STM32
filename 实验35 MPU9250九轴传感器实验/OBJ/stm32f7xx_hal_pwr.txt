; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\stm32f7xx_hal_pwr.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\stm32f7xx_hal_pwr.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\OBJ -I..\USER -I..\HALLIB\STM32F7xx_HAL_Driver\Inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\SDRAM -I..\HARDWARE\IIC -I..\HARDWARE\24CXX -I..\HARDWARE\MPU9250 -I..\HARDWARE\DHT11 -I..\HARDWARE\MPU -I..\USMART -I..\DMP\driver\eMPL -I..\DMP\driver\include -I..\DMP\driver\stm32L -I..\DMP\eMPL-hal -I..\DMP\mllite -I..\DMP\mpl -I..\UCOSIII -I..\UCOSIII\UCOS-BSP -I..\UCOSIII\UCOS-CONFIG -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\uC-CPU\ARM-Cortex-M4\RealView -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-CPU -I..\HARDWARE\MY_FUNCTION -I..\USER -I..\HARDWARE\CRC -I..\HARDWARE\DMA -I..\HARDWARE\HEART_BEAT -I..\HARDWARE\RECEIVE_ANALYZE -I..\HARDWARE\FEED_BACK -I..\HARDWARE\DATA -I"D:\1111111\32F4\Slam car\实验35 MPU9250九轴传感器实验\USER\RTE" -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0 -IF:\Keil_v5\ARM\CMSIS\Include -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__UVISION_VERSION=514 -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=..\obj\stm32f7xx_hal_pwr.crf ..\HALLIB\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_pwr.c]
                          THUMB

                          AREA ||i.HAL_PWR_ConfigPVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_ConfigPVD PROC
;;;277      */
;;;278    void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
000000  492a              LDR      r1,|L1.172|
;;;279    {
;;;280      /* Check the parameters */
;;;281      assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
;;;282      assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
;;;283      
;;;284      /* Set PLS[7:5] bits according to PVDLevel value */
;;;285      MODIFY_REG(PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
000002  6809              LDR      r1,[r1,#0]
000004  f02101e0          BIC      r1,r1,#0xe0
000008  6802              LDR      r2,[r0,#0]
00000a  4311              ORRS     r1,r1,r2
00000c  4a27              LDR      r2,|L1.172|
00000e  6011              STR      r1,[r2,#0]
;;;286      
;;;287      /* Clear any previous config. Keep it clear if no event or IT mode is selected */
;;;288      __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
000010  4927              LDR      r1,|L1.176|
000012  6809              LDR      r1,[r1,#0]
000014  f4213180          BIC      r1,r1,#0x10000
000018  4a25              LDR      r2,|L1.176|
00001a  6011              STR      r1,[r2,#0]
;;;289      __HAL_PWR_PVD_EXTI_DISABLE_IT();
00001c  1f11              SUBS     r1,r2,#4
00001e  6809              LDR      r1,[r1,#0]
000020  f4213180          BIC      r1,r1,#0x10000
000024  1f12              SUBS     r2,r2,#4
000026  6011              STR      r1,[r2,#0]
;;;290      __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
000028  4921              LDR      r1,|L1.176|
00002a  1d09              ADDS     r1,r1,#4
00002c  6809              LDR      r1,[r1,#0]
00002e  f4213180          BIC      r1,r1,#0x10000
000032  4a1f              LDR      r2,|L1.176|
000034  1d12              ADDS     r2,r2,#4
000036  6011              STR      r1,[r2,#0]
;;;291      __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
000038  1d11              ADDS     r1,r2,#4
00003a  6809              LDR      r1,[r1,#0]
00003c  f4213180          BIC      r1,r1,#0x10000
000040  1d12              ADDS     r2,r2,#4
000042  6011              STR      r1,[r2,#0]
;;;292    
;;;293      /* Configure interrupt mode */
;;;294      if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
000044  6841              LDR      r1,[r0,#4]
000046  f4013180          AND      r1,r1,#0x10000
00004a  f5b13f80          CMP      r1,#0x10000
00004e  d107              BNE      |L1.96|
;;;295      {
;;;296        __HAL_PWR_PVD_EXTI_ENABLE_IT();
000050  4917              LDR      r1,|L1.176|
000052  1f09              SUBS     r1,r1,#4
000054  6809              LDR      r1,[r1,#0]
000056  f4413180          ORR      r1,r1,#0x10000
00005a  4a15              LDR      r2,|L1.176|
00005c  1f12              SUBS     r2,r2,#4
00005e  6011              STR      r1,[r2,#0]
                  |L1.96|
;;;297      }
;;;298      
;;;299      /* Configure event mode */
;;;300      if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
000060  6841              LDR      r1,[r0,#4]
000062  f4013100          AND      r1,r1,#0x20000
000066  f5b13f00          CMP      r1,#0x20000
00006a  d105              BNE      |L1.120|
;;;301      {
;;;302        __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
00006c  4910              LDR      r1,|L1.176|
00006e  6809              LDR      r1,[r1,#0]
000070  f4413180          ORR      r1,r1,#0x10000
000074  4a0e              LDR      r2,|L1.176|
000076  6011              STR      r1,[r2,#0]
                  |L1.120|
;;;303      }
;;;304      
;;;305      /* Configure the edge */
;;;306      if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
000078  7901              LDRB     r1,[r0,#4]
00007a  f0010101          AND      r1,r1,#1
00007e  b139              CBZ      r1,|L1.144|
;;;307      {
;;;308        __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
000080  490b              LDR      r1,|L1.176|
000082  1d09              ADDS     r1,r1,#4
000084  6809              LDR      r1,[r1,#0]
000086  f4413180          ORR      r1,r1,#0x10000
00008a  4a09              LDR      r2,|L1.176|
00008c  1d12              ADDS     r2,r2,#4
00008e  6011              STR      r1,[r2,#0]
                  |L1.144|
;;;309      }
;;;310      
;;;311      if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
000090  7901              LDRB     r1,[r0,#4]
000092  f0010102          AND      r1,r1,#2
000096  2902              CMP      r1,#2
000098  d107              BNE      |L1.170|
;;;312      {
;;;313        __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
00009a  4905              LDR      r1,|L1.176|
00009c  3108              ADDS     r1,r1,#8
00009e  6809              LDR      r1,[r1,#0]
0000a0  f4413180          ORR      r1,r1,#0x10000
0000a4  4a02              LDR      r2,|L1.176|
0000a6  3208              ADDS     r2,r2,#8
0000a8  6011              STR      r1,[r2,#0]
                  |L1.170|
;;;314      }
;;;315    }
0000aa  4770              BX       lr
;;;316    
                          ENDP

                  |L1.172|
                          DCD      0x40007000
                  |L1.176|
                          DCD      0x40013c04

                          AREA ||i.HAL_PWR_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DeInit PROC
;;;117      */
;;;118    void HAL_PWR_DeInit(void)
000000  4805              LDR      r0,|L2.24|
;;;119    {
;;;120      __HAL_RCC_PWR_FORCE_RESET();
000002  6800              LDR      r0,[r0,#0]
000004  f0405080          ORR      r0,r0,#0x10000000
000008  4903              LDR      r1,|L2.24|
00000a  6008              STR      r0,[r1,#0]
;;;121      __HAL_RCC_PWR_RELEASE_RESET();
00000c  4608              MOV      r0,r1
00000e  6800              LDR      r0,[r0,#0]
000010  f0205080          BIC      r0,r0,#0x10000000
000014  6008              STR      r0,[r1,#0]
;;;122    }
000016  4770              BX       lr
;;;123    
                          ENDP

                  |L2.24|
                          DCD      0x40023820

                          AREA ||i.HAL_PWR_DisableBkUpAccess||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableBkUpAccess PROC
;;;143      */
;;;144    void HAL_PWR_DisableBkUpAccess(void)
000000  4803              LDR      r0,|L3.16|
;;;145    {
;;;146      /* Disable access to RTC and backup registers */
;;;147    	CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
000002  6800              LDR      r0,[r0,#0]
000004  f4207080          BIC      r0,r0,#0x100
000008  4901              LDR      r1,|L3.16|
00000a  6008              STR      r0,[r1,#0]
;;;148    }
00000c  4770              BX       lr
;;;149    
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_DisablePVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisablePVD PROC
;;;330      */
;;;331    void HAL_PWR_DisablePVD(void)
000000  4803              LDR      r0,|L4.16|
;;;332    {
;;;333      /* Disable the power voltage detector */
;;;334    	CLEAR_BIT(PWR->CR1, PWR_CR1_PVDE);
000002  6800              LDR      r0,[r0,#0]
000004  f0200010          BIC      r0,r0,#0x10
000008  4901              LDR      r1,|L4.16|
00000a  6008              STR      r0,[r1,#0]
;;;335    }
00000c  4770              BX       lr
;;;336    
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_DisableSEVOnPend||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableSEVOnPend PROC
;;;585      */
;;;586    void HAL_PWR_DisableSEVOnPend(void)
000000  4803              LDR      r0,|L5.16|
;;;587    {
;;;588      /* Clear SEVONPEND bit of Cortex System Control Register */
;;;589      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
000002  6800              LDR      r0,[r0,#0]
000004  f0200010          BIC      r0,r0,#0x10
000008  4901              LDR      r1,|L5.16|
00000a  6008              STR      r0,[r1,#0]
;;;590    }
00000c  4770              BX       lr
;;;591    
                          ENDP

00000e  0000              DCW      0x0000
                  |L5.16|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_DisableSleepOnExit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableSleepOnExit PROC
;;;561      */
;;;562    void HAL_PWR_DisableSleepOnExit(void)
000000  4803              LDR      r0,|L6.16|
;;;563    {
;;;564      /* Clear SLEEPONEXIT bit of Cortex System Control Register */
;;;565      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
000002  6800              LDR      r0,[r0,#0]
000004  f0200002          BIC      r0,r0,#2
000008  4901              LDR      r1,|L6.16|
00000a  6008              STR      r0,[r1,#0]
;;;566    }
00000c  4770              BX       lr
;;;567    
                          ENDP

00000e  0000              DCW      0x0000
                  |L6.16|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_DisableWakeUpPin||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableWakeUpPin PROC
;;;377      */
;;;378    void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
000000  4902              LDR      r1,|L7.12|
;;;379    {
;;;380      assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
;;;381    
;;;382      CLEAR_BIT(PWR->CSR2, WakeUpPinx);
000002  68c9              LDR      r1,[r1,#0xc]
000004  4381              BICS     r1,r1,r0
000006  4a01              LDR      r2,|L7.12|
000008  60d1              STR      r1,[r2,#0xc]
;;;383    }
00000a  4770              BX       lr
;;;384      
                          ENDP

                  |L7.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_EnableBkUpAccess||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableBkUpAccess PROC
;;;130      */
;;;131    void HAL_PWR_EnableBkUpAccess(void)
000000  4803              LDR      r0,|L8.16|
;;;132    {
;;;133      /* Enable access to RTC and backup registers */
;;;134      SET_BIT(PWR->CR1, PWR_CR1_DBP);
000002  6800              LDR      r0,[r0,#0]
000004  f4407080          ORR      r0,r0,#0x100
000008  4901              LDR      r1,|L8.16|
00000a  6008              STR      r0,[r1,#0]
;;;135    }
00000c  4770              BX       lr
;;;136    
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_EnablePVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnablePVD PROC
;;;320      */
;;;321    void HAL_PWR_EnablePVD(void)
000000  4803              LDR      r0,|L9.16|
;;;322    {
;;;323      /* Enable the power voltage detector */
;;;324    	SET_BIT(PWR->CR1, PWR_CR1_PVDE);
000002  6800              LDR      r0,[r0,#0]
000004  f0400010          ORR      r0,r0,#0x10
000008  4901              LDR      r1,|L9.16|
00000a  6008              STR      r0,[r1,#0]
;;;325    }
00000c  4770              BX       lr
;;;326    
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_EnableSEVOnPend||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableSEVOnPend PROC
;;;573      */
;;;574    void HAL_PWR_EnableSEVOnPend(void)
000000  4803              LDR      r0,|L10.16|
;;;575    {
;;;576      /* Set SEVONPEND bit of Cortex System Control Register */
;;;577      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
000002  6800              LDR      r0,[r0,#0]
000004  f0400010          ORR      r0,r0,#0x10
000008  4901              LDR      r1,|L10.16|
00000a  6008              STR      r0,[r1,#0]
;;;578    }
00000c  4770              BX       lr
;;;579    
                          ENDP

00000e  0000              DCW      0x0000
                  |L10.16|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnableSleepOnExit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableSleepOnExit PROC
;;;549      */
;;;550    void HAL_PWR_EnableSleepOnExit(void)
000000  4803              LDR      r0,|L11.16|
;;;551    {
;;;552      /* Set SLEEPONEXIT bit of Cortex System Control Register */
;;;553      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
000002  6800              LDR      r0,[r0,#0]
000004  f0400002          ORR      r0,r0,#2
000008  4901              LDR      r1,|L11.16|
00000a  6008              STR      r0,[r1,#0]
;;;554    }
00000c  4770              BX       lr
;;;555    
                          ENDP

00000e  0000              DCW      0x0000
                  |L11.16|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnableWakeUpPin||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableWakeUpPin PROC
;;;353      */
;;;354    void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
000000  4908              LDR      r1,|L12.36|
;;;355    {
;;;356      assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));
;;;357      
;;;358      /* Enable wake-up pin */
;;;359      SET_BIT(PWR->CSR2, (PWR_EWUP_MASK & WakeUpPinPolarity));
000002  68c9              LDR      r1,[r1,#0xc]
000004  f400527c          AND      r2,r0,#0x3f00
000008  4311              ORRS     r1,r1,r2
00000a  4a06              LDR      r2,|L12.36|
00000c  60d1              STR      r1,[r2,#0xc]
;;;360    	
;;;361      /* Specifies the Wake-Up pin polarity for the event detection
;;;362        (rising or falling edge) */
;;;363      MODIFY_REG(PWR->CR2, (PWR_EWUP_MASK & WakeUpPinPolarity), (WakeUpPinPolarity >> 0x06));
00000e  4611              MOV      r1,r2
000010  6889              LDR      r1,[r1,#8]
000012  f400527c          AND      r2,r0,#0x3f00
000016  4391              BICS     r1,r1,r2
000018  ea411190          ORR      r1,r1,r0,LSR #6
00001c  4a01              LDR      r2,|L12.36|
00001e  6091              STR      r1,[r2,#8]
;;;364    }
000020  4770              BX       lr
;;;365    
                          ENDP

000022  0000              DCW      0x0000
                  |L12.36|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_EnterSLEEPMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSLEEPMode PROC
;;;404      */
;;;405    void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
000000  4a06              LDR      r2,|L13.28|
;;;406    {
;;;407      /* Check the parameters */
;;;408      assert_param(IS_PWR_REGULATOR(Regulator));
;;;409      assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
;;;410    
;;;411      /* Clear SLEEPDEEP bit of Cortex System Control Register */
;;;412      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
000002  6812              LDR      r2,[r2,#0]
000004  f0220204          BIC      r2,r2,#4
000008  4b04              LDR      r3,|L13.28|
00000a  601a              STR      r2,[r3,#0]
;;;413    
;;;414      /* Select SLEEP mode entry -------------------------------------------------*/
;;;415      if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
00000c  2901              CMP      r1,#1
00000e  d101              BNE      |L13.20|
;;;416      {   
;;;417        /* Request Wait For Interrupt */
;;;418        __WFI();
000010  bf30              WFI      
000012  e002              B        |L13.26|
                  |L13.20|
;;;419      }
;;;420      else
;;;421      {
;;;422        /* Request Wait For Event */
;;;423        __SEV();
000014  bf40              SEV      
;;;424        __WFE();
000016  bf20              WFE      
;;;425        __WFE();
000018  bf20              WFE      
                  |L13.26|
;;;426      }
;;;427    }
00001a  4770              BX       lr
;;;428    
                          ENDP

                  |L13.28|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnterSTANDBYMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSTANDBYMode PROC
;;;496      */
;;;497    void HAL_PWR_EnterSTANDBYMode(void)
000000  4807              LDR      r0,|L14.32|
;;;498    {
;;;499      /* Select Standby mode */
;;;500      PWR->CR1 |= PWR_CR1_PDDS;
000002  6800              LDR      r0,[r0,#0]
000004  f0400002          ORR      r0,r0,#2
000008  4905              LDR      r1,|L14.32|
00000a  6008              STR      r0,[r1,#0]
;;;501      
;;;502      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;503      SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
00000c  4805              LDR      r0,|L14.36|
00000e  6800              LDR      r0,[r0,#0]
000010  f0400004          ORR      r0,r0,#4
000014  4903              LDR      r1,|L14.36|
000016  6008              STR      r0,[r1,#0]
;;;504      
;;;505      /* This option is used to ensure that store operations are completed */
;;;506    #if defined ( __CC_ARM)
;;;507      __force_stores();
000018  bf00              NOP      
00001a  bf00              NOP      
;;;508    #endif
;;;509      /* Request Wait For Interrupt */
;;;510      __WFI();
00001c  bf30              WFI      
;;;511    }
00001e  4770              BX       lr
;;;512    
                          ENDP

                  |L14.32|
                          DCD      0x40007000
                  |L14.36|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnterSTOPMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSTOPMode PROC
;;;447      */
;;;448    void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
000000  b510              PUSH     {r4,lr}
;;;449    {
000002  4602              MOV      r2,r0
;;;450      uint32_t tmpreg = 0;
000004  2000              MOVS     r0,#0
;;;451      
;;;452      /* Check the parameters */
;;;453      assert_param(IS_PWR_REGULATOR(Regulator));
;;;454      assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
;;;455      
;;;456      /* Select the regulator state in Stop mode ---------------------------------*/
;;;457      tmpreg = PWR->CR1;
000006  4b0d              LDR      r3,|L15.60|
000008  6818              LDR      r0,[r3,#0]
;;;458      /* Clear PDDS and LPDS bits */
;;;459      tmpreg &= (uint32_t)~(PWR_CR1_PDDS | PWR_CR1_LPDS);
00000a  f0200003          BIC      r0,r0,#3
;;;460      
;;;461      /* Set LPDS, MRLVDS and LPLVDS bits according to Regulator value */
;;;462      tmpreg |= Regulator;
00000e  4310              ORRS     r0,r0,r2
;;;463      
;;;464      /* Store the new value */
;;;465      PWR->CR1 = tmpreg;
000010  6018              STR      r0,[r3,#0]
;;;466      
;;;467      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;468      SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
000012  4b0b              LDR      r3,|L15.64|
000014  681b              LDR      r3,[r3,#0]
000016  f0430304          ORR      r3,r3,#4
00001a  4c09              LDR      r4,|L15.64|
00001c  6023              STR      r3,[r4,#0]
;;;469      
;;;470      /* Select Stop mode entry --------------------------------------------------*/
;;;471      if(STOPEntry == PWR_STOPENTRY_WFI)
00001e  2901              CMP      r1,#1
000020  d101              BNE      |L15.38|
;;;472      {   
;;;473        /* Request Wait For Interrupt */
;;;474        __WFI();
000022  bf30              WFI      
000024  e002              B        |L15.44|
                  |L15.38|
;;;475      }
;;;476      else
;;;477      {
;;;478        /* Request Wait For Event */
;;;479        __SEV();
000026  bf40              SEV      
;;;480        __WFE();
000028  bf20              WFE      
;;;481        __WFE();
00002a  bf20              WFE      
                  |L15.44|
;;;482      }
;;;483      /* Reset SLEEPDEEP bit of Cortex System Control Register */
;;;484      SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
00002c  4b04              LDR      r3,|L15.64|
00002e  681b              LDR      r3,[r3,#0]
000030  f0230304          BIC      r3,r3,#4
000034  4c02              LDR      r4,|L15.64|
000036  6023              STR      r3,[r4,#0]
;;;485    }
000038  bd10              POP      {r4,pc}
;;;486    
                          ENDP

00003a  0000              DCW      0x0000
                  |L15.60|
                          DCD      0x40007000
                  |L15.64|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_PVDCallback||, CODE, READONLY, ALIGN=1

                  HAL_PWR_PVDCallback PROC
;;;534      */
;;;535    __weak void HAL_PWR_PVDCallback(void)
000000  4770              BX       lr
;;;536    {
;;;537      /* NOTE : This function Should not be modified, when the callback is needed,
;;;538                the HAL_PWR_PVDCallback could be implemented in the user file
;;;539       */ 
;;;540    }
;;;541    
                          ENDP


                          AREA ||i.HAL_PWR_PVD_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_PWR_PVD_IRQHandler PROC
;;;517      */
;;;518    void HAL_PWR_PVD_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;519    {
;;;520      /* Check PWR Exti flag */
;;;521      if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
000002  4806              LDR      r0,|L17.28|
000004  6800              LDR      r0,[r0,#0]
000006  f4003080          AND      r0,r0,#0x10000
00000a  b128              CBZ      r0,|L17.24|
;;;522      {
;;;523        /* PWR PVD interrupt user callback */
;;;524        HAL_PWR_PVDCallback();
00000c  f7fffffe          BL       HAL_PWR_PVDCallback
;;;525        
;;;526        /* Clear PWR Exti pending bit */
;;;527        __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
000010  f44f3080          MOV      r0,#0x10000
000014  4901              LDR      r1,|L17.28|
000016  6008              STR      r0,[r1,#0]
                  |L17.24|
;;;528      }
;;;529    }
000018  bd10              POP      {r4,pc}
;;;530    
                          ENDP

00001a  0000              DCW      0x0000
                  |L17.28|
                          DCD      0x40013c14

;*** Start embedded assembler ***

#line 1 "..\\HALLIB\\STM32F7xx_HAL_Driver\\Src\\stm32f7xx_hal_pwr.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f7xx_hal_pwr_c_f2cfe8be____REV16|
#line 388 "..\\CORE\\cmsis_armcc.h"
|__asm___19_stm32f7xx_hal_pwr_c_f2cfe8be____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f7xx_hal_pwr_c_f2cfe8be____REVSH|
#line 402
|__asm___19_stm32f7xx_hal_pwr_c_f2cfe8be____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f7xx_hal_pwr_c_f2cfe8be____RRX|
#line 587
|__asm___19_stm32f7xx_hal_pwr_c_f2cfe8be____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
