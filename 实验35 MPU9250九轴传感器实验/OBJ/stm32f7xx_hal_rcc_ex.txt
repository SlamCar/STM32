; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\stm32f7xx_hal_rcc_ex.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\stm32f7xx_hal_rcc_ex.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\OBJ -I..\USER -I..\HALLIB\STM32F7xx_HAL_Driver\Inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\SDRAM -I..\HARDWARE\IIC -I..\HARDWARE\24CXX -I..\HARDWARE\MPU9250 -I..\HARDWARE\DHT11 -I..\HARDWARE\MPU -I..\USMART -I..\DMP\driver\eMPL -I..\DMP\driver\include -I..\DMP\driver\stm32L -I..\DMP\eMPL-hal -I..\DMP\mllite -I..\DMP\mpl -I..\UCOSIII -I..\UCOSIII\UCOS-BSP -I..\UCOSIII\UCOS-CONFIG -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\uC-CPU\ARM-Cortex-M4\RealView -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-CPU -I..\HARDWARE\MY_FUNCTION -I..\USER -I..\HARDWARE\CRC -I..\HARDWARE\DMA -I..\HARDWARE\HEART_BEAT -I..\HARDWARE\RECEIVE_ANALYZE -I..\HARDWARE\FEED_BACK -I..\HARDWARE\DATA -I"D:\1111111\32F4\Slam car\实验35 MPU9250九轴传感器实验\USER\RTE" -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0 -IF:\Keil_v5\ARM\CMSIS\Include -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__UVISION_VERSION=514 -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=..\obj\stm32f7xx_hal_rcc_ex.crf ..\HALLIB\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_rcc_ex.c]
                          THUMB

                          AREA ||i.HAL_RCCEx_GetPeriphCLKConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_GetPeriphCLKConfig PROC
;;;685      */
;;;686    void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
000000  2100              MOVS     r1,#0
;;;687    {
;;;688      uint32_t tempreg = 0;
;;;689      
;;;690      /* Set all possible values for the extended clock type parameter------------*/
;;;691    #if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
;;;692      PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
000002  4a94              LDR      r2,|L1.596|
000004  6002              STR      r2,[r0,#0]
;;;693                                            RCC_PERIPHCLK_SAI1     | RCC_PERIPHCLK_SAI2     |\
;;;694                                            RCC_PERIPHCLK_TIM      | RCC_PERIPHCLK_RTC      |\
;;;695                                            RCC_PERIPHCLK_CEC      | RCC_PERIPHCLK_I2C4     |\
;;;696                                            RCC_PERIPHCLK_I2C1     | RCC_PERIPHCLK_I2C2     |\
;;;697                                            RCC_PERIPHCLK_I2C3     | RCC_PERIPHCLK_USART1   |\
;;;698                                            RCC_PERIPHCLK_USART2   | RCC_PERIPHCLK_USART3   |\
;;;699                                            RCC_PERIPHCLK_UART4    | RCC_PERIPHCLK_UART5    |\
;;;700                                            RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
;;;701                                            RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
;;;702                                            RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
;;;703                                            RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
;;;704    #else  
;;;705      PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
;;;706                                            RCC_PERIPHCLK_SAI1     | RCC_PERIPHCLK_SAI2     |\
;;;707                                            RCC_PERIPHCLK_TIM      | RCC_PERIPHCLK_RTC      |\
;;;708                                            RCC_PERIPHCLK_CEC      | RCC_PERIPHCLK_I2C4     |\
;;;709                                            RCC_PERIPHCLK_I2C1     | RCC_PERIPHCLK_I2C2     |\
;;;710                                            RCC_PERIPHCLK_I2C3     | RCC_PERIPHCLK_USART1   |\
;;;711                                            RCC_PERIPHCLK_USART2   | RCC_PERIPHCLK_USART3   |\
;;;712                                            RCC_PERIPHCLK_UART4    | RCC_PERIPHCLK_UART5    |\
;;;713                                            RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
;;;714                                            RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
;;;715                                            RCC_PERIPHCLK_CLK48;
;;;716    #endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */ 
;;;717      
;;;718      /* Get the PLLI2S Clock configuration -----------------------------------------------*/
;;;719      PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
000006  4a94              LDR      r2,|L1.600|
000008  6812              LDR      r2,[r2,#0]
00000a  f64773c0          MOV      r3,#0x7fc0
00000e  401a              ANDS     r2,r2,r3
000010  fa93f3a3          RBIT     r3,r3
000014  fab3f383          CLZ      r3,r3
000018  40da              LSRS     r2,r2,r3
00001a  6042              STR      r2,[r0,#4]
;;;720      PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
00001c  4a8e              LDR      r2,|L1.600|
00001e  6812              LDR      r2,[r2,#0]
000020  f4023240          AND      r2,r2,#0x30000
000024  f44f3340          MOV      r3,#0x30000
000028  fa93f3a3          RBIT     r3,r3
00002c  fab3f383          CLZ      r3,r3
000030  40da              LSRS     r2,r2,r3
000032  6102              STR      r2,[r0,#0x10]
;;;721      PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
000034  4a88              LDR      r2,|L1.600|
000036  6812              LDR      r2,[r2,#0]
000038  f0026270          AND      r2,r2,#0xf000000
00003c  f04f6370          MOV      r3,#0xf000000
000040  fa93f3a3          RBIT     r3,r3
000044  fab3f383          CLZ      r3,r3
000048  40da              LSRS     r2,r2,r3
00004a  60c2              STR      r2,[r0,#0xc]
;;;722      PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
00004c  4a82              LDR      r2,|L1.600|
00004e  6812              LDR      r2,[r2,#0]
000050  f00242e0          AND      r2,r2,#0x70000000
000054  f04f43e0          MOV      r3,#0x70000000
000058  fa93f3a3          RBIT     r3,r3
00005c  fab3f383          CLZ      r3,r3
000060  40da              LSRS     r2,r2,r3
000062  6082              STR      r2,[r0,#8]
;;;723      
;;;724      /* Get the PLLSAI Clock configuration -----------------------------------------------*/
;;;725      PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIN));
000064  4a7c              LDR      r2,|L1.600|
000066  1d12              ADDS     r2,r2,#4
000068  6812              LDR      r2,[r2,#0]
00006a  f64773c0          MOV      r3,#0x7fc0
00006e  401a              ANDS     r2,r2,r3
000070  fa93f3a3          RBIT     r3,r3
000074  fab3f383          CLZ      r3,r3
000078  40da              LSRS     r2,r2,r3
00007a  6142              STR      r2,[r0,#0x14]
;;;726      PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
00007c  4a76              LDR      r2,|L1.600|
00007e  1d12              ADDS     r2,r2,#4
000080  6812              LDR      r2,[r2,#0]
000082  f4023240          AND      r2,r2,#0x30000
000086  f44f3340          MOV      r3,#0x30000
00008a  fa93f3a3          RBIT     r3,r3
00008e  fab3f383          CLZ      r3,r3
000092  40da              LSRS     r2,r2,r3
000094  6202              STR      r2,[r0,#0x20]
;;;727      PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ)); 
000096  4a70              LDR      r2,|L1.600|
000098  1d12              ADDS     r2,r2,#4
00009a  6812              LDR      r2,[r2,#0]
00009c  f0026270          AND      r2,r2,#0xf000000
0000a0  f04f6370          MOV      r3,#0xf000000
0000a4  fa93f3a3          RBIT     r3,r3
0000a8  fab3f383          CLZ      r3,r3
0000ac  40da              LSRS     r2,r2,r3
0000ae  6182              STR      r2,[r0,#0x18]
;;;728      PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR)); 
0000b0  4a69              LDR      r2,|L1.600|
0000b2  1d12              ADDS     r2,r2,#4
0000b4  6812              LDR      r2,[r2,#0]
0000b6  f00242e0          AND      r2,r2,#0x70000000
0000ba  f04f43e0          MOV      r3,#0x70000000
0000be  fa93f3a3          RBIT     r3,r3
0000c2  fab3f383          CLZ      r3,r3
0000c6  40da              LSRS     r2,r2,r3
0000c8  61c2              STR      r2,[r0,#0x1c]
;;;729      
;;;730      /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
;;;731      PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLI2SDIVQ));
0000ca  4a63              LDR      r2,|L1.600|
0000cc  3208              ADDS     r2,r2,#8
0000ce  6812              LDR      r2,[r2,#0]
0000d0  f002021f          AND      r2,r2,#0x1f
0000d4  231f              MOVS     r3,#0x1f
0000d6  fa93f3a3          RBIT     r3,r3
0000da  fab3f383          CLZ      r3,r3
0000de  40da              LSRS     r2,r2,r3
0000e0  f8402f24          STR      r2,[r0,#0x24]!
;;;732      PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVQ));
0000e4  4a5c              LDR      r2,|L1.600|
0000e6  3208              ADDS     r2,r2,#8
0000e8  6812              LDR      r2,[r2,#0]
0000ea  f40252f8          AND      r2,r2,#0x1f00
0000ee  f44f53f8          MOV      r3,#0x1f00
0000f2  fa93f3a3          RBIT     r3,r3
0000f6  fab3f383          CLZ      r3,r3
0000fa  40da              LSRS     r2,r2,r3
0000fc  6042              STR      r2,[r0,#4]
;;;733      PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVR));
0000fe  4a56              LDR      r2,|L1.600|
000100  3208              ADDS     r2,r2,#8
000102  6812              LDR      r2,[r2,#0]
000104  f4023240          AND      r2,r2,#0x30000
000108  f44f3340          MOV      r3,#0x30000
00010c  fa93f3a3          RBIT     r3,r3
000110  fab3f383          CLZ      r3,r3
000114  40da              LSRS     r2,r2,r3
000116  6082              STR      r2,[r0,#8]
;;;734    
;;;735      /* Get the SAI1 clock configuration ----------------------------------------------*/
;;;736      PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
000118  4a4f              LDR      r2,|L1.600|
00011a  3208              ADDS     r2,r2,#8
00011c  6812              LDR      r2,[r2,#0]
00011e  f4021240          AND      r2,r2,#0x300000
000122  6182              STR      r2,[r0,#0x18]
;;;737      
;;;738      /* Get the SAI2 clock configuration ----------------------------------------------*/
;;;739      PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
000124  4a4c              LDR      r2,|L1.600|
000126  3208              ADDS     r2,r2,#8
000128  6812              LDR      r2,[r2,#0]
00012a  f4020240          AND      r2,r2,#0xc00000
00012e  61c2              STR      r2,[r0,#0x1c]
;;;740      
;;;741      /* Get the I2S clock configuration ------------------------------------------*/
;;;742      PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
000130  4a49              LDR      r2,|L1.600|
000132  3a7c              SUBS     r2,r2,#0x7c
000134  6812              LDR      r2,[r2,#0]
000136  f4020200          AND      r2,r2,#0x800000
00013a  6102              STR      r2,[r0,#0x10]
;;;743      
;;;744      /* Get the I2C1 clock configuration ------------------------------------------*/
;;;745      PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
00013c  4a46              LDR      r2,|L1.600|
00013e  320c              ADDS     r2,r2,#0xc
000140  6812              LDR      r2,[r2,#0]
000142  f4023240          AND      r2,r2,#0x30000
000146  6402              STR      r2,[r0,#0x40]
;;;746      
;;;747      /* Get the I2C2 clock configuration ------------------------------------------*/
;;;748      PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
000148  4a43              LDR      r2,|L1.600|
00014a  320c              ADDS     r2,r2,#0xc
00014c  6812              LDR      r2,[r2,#0]
00014e  f4022240          AND      r2,r2,#0xc0000
000152  6442              STR      r2,[r0,#0x44]
;;;749      
;;;750      /* Get the I2C3 clock configuration ------------------------------------------*/
;;;751      PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
000154  4a40              LDR      r2,|L1.600|
000156  320c              ADDS     r2,r2,#0xc
000158  6812              LDR      r2,[r2,#0]
00015a  f4021240          AND      r2,r2,#0x300000
00015e  6482              STR      r2,[r0,#0x48]
;;;752      
;;;753      /* Get the I2C4 clock configuration ------------------------------------------*/
;;;754      PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
000160  4a3d              LDR      r2,|L1.600|
000162  320c              ADDS     r2,r2,#0xc
000164  6812              LDR      r2,[r2,#0]
000166  f4020240          AND      r2,r2,#0xc00000
00016a  64c2              STR      r2,[r0,#0x4c]
;;;755      
;;;756      /* Get the USART1 clock configuration ------------------------------------------*/
;;;757      PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
00016c  4a3a              LDR      r2,|L1.600|
00016e  320c              ADDS     r2,r2,#0xc
000170  6812              LDR      r2,[r2,#0]
000172  f0020203          AND      r2,r2,#3
000176  6202              STR      r2,[r0,#0x20]
;;;758      
;;;759      /* Get the USART2 clock configuration ------------------------------------------*/
;;;760      PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
000178  4a37              LDR      r2,|L1.600|
00017a  320c              ADDS     r2,r2,#0xc
00017c  6812              LDR      r2,[r2,#0]
00017e  f002020c          AND      r2,r2,#0xc
000182  6242              STR      r2,[r0,#0x24]
;;;761      
;;;762      /* Get the USART3 clock configuration ------------------------------------------*/
;;;763      PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
000184  4a34              LDR      r2,|L1.600|
000186  320c              ADDS     r2,r2,#0xc
000188  6812              LDR      r2,[r2,#0]
00018a  f0020230          AND      r2,r2,#0x30
00018e  6282              STR      r2,[r0,#0x28]
;;;764      
;;;765      /* Get the UART4 clock configuration ------------------------------------------*/
;;;766      PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
000190  4a31              LDR      r2,|L1.600|
000192  320c              ADDS     r2,r2,#0xc
000194  6812              LDR      r2,[r2,#0]
000196  f00202c0          AND      r2,r2,#0xc0
00019a  62c2              STR      r2,[r0,#0x2c]
;;;767      
;;;768      /* Get the UART5 clock configuration ------------------------------------------*/
;;;769      PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
00019c  4a2e              LDR      r2,|L1.600|
00019e  320c              ADDS     r2,r2,#0xc
0001a0  6812              LDR      r2,[r2,#0]
0001a2  f4027240          AND      r2,r2,#0x300
0001a6  6302              STR      r2,[r0,#0x30]
;;;770      
;;;771      /* Get the USART6 clock configuration ------------------------------------------*/
;;;772      PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
0001a8  4a2b              LDR      r2,|L1.600|
0001aa  320c              ADDS     r2,r2,#0xc
0001ac  6812              LDR      r2,[r2,#0]
0001ae  f4026240          AND      r2,r2,#0xc00
0001b2  6342              STR      r2,[r0,#0x34]
;;;773      
;;;774      /* Get the UART7 clock configuration ------------------------------------------*/
;;;775      PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
0001b4  4a28              LDR      r2,|L1.600|
0001b6  320c              ADDS     r2,r2,#0xc
0001b8  6812              LDR      r2,[r2,#0]
0001ba  f4025240          AND      r2,r2,#0x3000
0001be  6382              STR      r2,[r0,#0x38]
;;;776      
;;;777      /* Get the UART8 clock configuration ------------------------------------------*/
;;;778      PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
0001c0  4a25              LDR      r2,|L1.600|
0001c2  320c              ADDS     r2,r2,#0xc
0001c4  6812              LDR      r2,[r2,#0]
0001c6  f4024240          AND      r2,r2,#0xc000
0001ca  63c2              STR      r2,[r0,#0x3c]
;;;779      
;;;780      /* Get the LPTIM1 clock configuration ------------------------------------------*/
;;;781      PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
0001cc  4a22              LDR      r2,|L1.600|
0001ce  320c              ADDS     r2,r2,#0xc
0001d0  6812              LDR      r2,[r2,#0]
0001d2  f0027240          AND      r2,r2,#0x3000000
0001d6  6502              STR      r2,[r0,#0x50]
;;;782      
;;;783      /* Get the CEC clock configuration -----------------------------------------------*/
;;;784      PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
0001d8  4a1f              LDR      r2,|L1.600|
0001da  320c              ADDS     r2,r2,#0xc
0001dc  6812              LDR      r2,[r2,#0]
0001de  f0026280          AND      r2,r2,#0x4000000
0001e2  6542              STR      r2,[r0,#0x54]
;;;785      
;;;786      /* Get the CK48 clock configuration -----------------------------------------------*/
;;;787      PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
0001e4  4a1c              LDR      r2,|L1.600|
0001e6  320c              ADDS     r2,r2,#0xc
0001e8  6812              LDR      r2,[r2,#0]
0001ea  f0026200          AND      r2,r2,#0x8000000
0001ee  6582              STR      r2,[r0,#0x58]
;;;788    
;;;789      /* Get the SDMMC1 clock configuration -----------------------------------------------*/
;;;790      PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
0001f0  4a19              LDR      r2,|L1.600|
0001f2  320c              ADDS     r2,r2,#0xc
0001f4  6812              LDR      r2,[r2,#0]
0001f6  f0025280          AND      r2,r2,#0x10000000
0001fa  65c2              STR      r2,[r0,#0x5c]
;;;791      
;;;792    #if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
;;;793      /* Get the SDMMC2 clock configuration -----------------------------------------------*/
;;;794      PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
0001fc  4a16              LDR      r2,|L1.600|
0001fe  320c              ADDS     r2,r2,#0xc
000200  6812              LDR      r2,[r2,#0]
000202  f0025200          AND      r2,r2,#0x20000000
000206  6602              STR      r2,[r0,#0x60]
;;;795    	
;;;796      /* Get the DFSDM clock configuration -----------------------------------------------*/
;;;797      PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
000208  4a13              LDR      r2,|L1.600|
00020a  3208              ADDS     r2,r2,#8
00020c  6812              LDR      r2,[r2,#0]
00020e  f0027200          AND      r2,r2,#0x2000000
000212  6642              STR      r2,[r0,#0x64]
;;;798      
;;;799      /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
;;;800      PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();  
000214  4a10              LDR      r2,|L1.600|
000216  3208              ADDS     r2,r2,#8
000218  6812              LDR      r2,[r2,#0]
00021a  f0026280          AND      r2,r2,#0x4000000
00021e  6682              STR      r2,[r0,#0x68]
;;;801    #endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
;;;802      
;;;803      /* Get the RTC Clock configuration -----------------------------------------------*/
;;;804      tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
000220  4a0d              LDR      r2,|L1.600|
000222  3a7c              SUBS     r2,r2,#0x7c
000224  6812              LDR      r2,[r2,#0]
000226  f40211f8          AND      r1,r2,#0x1f0000
;;;805      PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
00022a  4a0b              LDR      r2,|L1.600|
00022c  3a14              SUBS     r2,r2,#0x14
00022e  6812              LDR      r2,[r2,#0]
000230  f4027240          AND      r2,r2,#0x300
000234  430a              ORRS     r2,r2,r1
000236  60c2              STR      r2,[r0,#0xc]
000238  3824              SUBS     r0,r0,#0x24
;;;806      
;;;807      /* Get the TIM Prescaler configuration --------------------------------------------*/
;;;808      if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
00023a  4a07              LDR      r2,|L1.600|
00023c  3208              ADDS     r2,r2,#8
00023e  6812              LDR      r2,[r2,#0]
000240  f0027280          AND      r2,r2,#0x1000000
000244  b912              CBNZ     r2,|L1.588|
;;;809      {
;;;810        PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
000246  2200              MOVS     r2,#0
000248  6382              STR      r2,[r0,#0x38]
00024a  e002              B        |L1.594|
                  |L1.588|
;;;811      }
;;;812      else
;;;813      {
;;;814        PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
00024c  f04f7280          MOV      r2,#0x1000000
000250  6382              STR      r2,[r0,#0x38]
                  |L1.594|
;;;815      }
;;;816    }
000252  4770              BX       lr
;;;817    
                          ENDP

                  |L1.596|
                          DCD      0x1cfffff1
                  |L1.600|
                          DCD      0x40023884

                          AREA ||i.HAL_RCCEx_GetPeriphCLKFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_GetPeriphCLKFreq PROC
;;;826      */
;;;827    uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
000000  b570              PUSH     {r4-r6,lr}
;;;828    {
000002  4604              MOV      r4,r0
;;;829      uint32_t tmpreg = 0;
000004  2100              MOVS     r1,#0
;;;830      /* This variable is used to store the SAI clock frequency (value in Hz) */
;;;831      uint32_t frequency = 0;
000006  2000              MOVS     r0,#0
;;;832      /* This variable is used to store the VCO Input (value in Hz) */
;;;833      uint32_t vcoinput = 0;
000008  2200              MOVS     r2,#0
;;;834      /* This variable is used to store the SAI clock source */
;;;835      uint32_t saiclocksource = 0;
00000a  2300              MOVS     r3,#0
;;;836      
;;;837      if (PeriphClk == RCC_PERIPHCLK_SAI1)
00000c  f5b42f00          CMP      r4,#0x80000
000010  d175              BNE      |L2.254|
;;;838      {
;;;839        saiclocksource = RCC->DCKCFGR1;   
000012  4d78              LDR      r5,|L2.500|
000014  682b              LDR      r3,[r5,#0]
;;;840        saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
000016  f4031340          AND      r3,r3,#0x300000
;;;841        switch (saiclocksource)
00001a  b14b              CBZ      r3,|L2.48|
00001c  f5b31f80          CMP      r3,#0x100000
000020  d032              BEQ      |L2.136|
000022  f5b31f00          CMP      r3,#0x200000
000026  d05b              BEQ      |L2.224|
000028  f5b31f40          CMP      r3,#0x300000
00002c  d165              BNE      |L2.250|
00002e  e059              B        |L2.228|
                  |L2.48|
;;;842        {
;;;843        case 0: /* PLLSAI is the clock source for SAI1 */ 
;;;844          {
;;;845            /* Configure the PLLSAI division factor */
;;;846            /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */ 
;;;847            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
000030  4d70              LDR      r5,|L2.500|
000032  3d88              SUBS     r5,r5,#0x88
000034  682d              LDR      r5,[r5,#0]
000036  f4050580          AND      r5,r5,#0x400000
00003a  b945              CBNZ     r5,|L2.78|
;;;848            {
;;;849              /* In Case the PLL Source is HSI (Internal Clock) */
;;;850              vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
00003c  4d6d              LDR      r5,|L2.500|
00003e  3d88              SUBS     r5,r5,#0x88
000040  682d              LDR      r5,[r5,#0]
000042  f005053f          AND      r5,r5,#0x3f
000046  4e6c              LDR      r6,|L2.504|
000048  fbb6f2f5          UDIV     r2,r6,r5
00004c  e007              B        |L2.94|
                  |L2.78|
;;;851            }
;;;852            else
;;;853            {
;;;854              /* In Case the PLL Source is HSE (External Clock) */
;;;855              vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
00004e  4d69              LDR      r5,|L2.500|
000050  3d88              SUBS     r5,r5,#0x88
000052  682d              LDR      r5,[r5,#0]
000054  f005053f          AND      r5,r5,#0x3f
000058  4e68              LDR      r6,|L2.508|
00005a  fbb6f2f5          UDIV     r2,r6,r5
                  |L2.94|
;;;856            }   
;;;857            /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
;;;858            /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
;;;859            tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
00005e  4d65              LDR      r5,|L2.500|
000060  1f2d              SUBS     r5,r5,#4
000062  682d              LDR      r5,[r5,#0]
000064  f3c56103          UBFX     r1,r5,#24,#4
;;;860            frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
000068  4d62              LDR      r5,|L2.500|
00006a  1f2d              SUBS     r5,r5,#4
00006c  682d              LDR      r5,[r5,#0]
00006e  f3c51588          UBFX     r5,r5,#6,#9
000072  4355              MULS     r5,r2,r5
000074  fbb5f0f1          UDIV     r0,r5,r1
;;;861            
;;;862            /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
;;;863            tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
000078  4d5e              LDR      r5,|L2.500|
00007a  682d              LDR      r5,[r5,#0]
00007c  f3c52504          UBFX     r5,r5,#8,#5
000080  1c69              ADDS     r1,r5,#1
;;;864            frequency = frequency/(tmpreg); 
000082  fbb0f0f1          UDIV     r0,r0,r1
;;;865            break;       
000086  e039              B        |L2.252|
                  |L2.136|
;;;866          }
;;;867        case RCC_DCKCFGR1_SAI1SEL_0: /* PLLI2S is the clock source for SAI1 */
;;;868          {  
;;;869            /* Configure the PLLI2S division factor */
;;;870            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */ 
;;;871            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
000088  4d5a              LDR      r5,|L2.500|
00008a  3d88              SUBS     r5,r5,#0x88
00008c  682d              LDR      r5,[r5,#0]
00008e  f4050580          AND      r5,r5,#0x400000
000092  b945              CBNZ     r5,|L2.166|
;;;872            {
;;;873              /* In Case the PLL Source is HSI (Internal Clock) */
;;;874              vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
000094  4d57              LDR      r5,|L2.500|
000096  3d88              SUBS     r5,r5,#0x88
000098  682d              LDR      r5,[r5,#0]
00009a  f005053f          AND      r5,r5,#0x3f
00009e  4e56              LDR      r6,|L2.504|
0000a0  fbb6f2f5          UDIV     r2,r6,r5
0000a4  e007              B        |L2.182|
                  |L2.166|
;;;875            }
;;;876            else
;;;877            {
;;;878              /* In Case the PLL Source is HSE (External Clock) */
;;;879              vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
0000a6  4d53              LDR      r5,|L2.500|
0000a8  3d88              SUBS     r5,r5,#0x88
0000aa  682d              LDR      r5,[r5,#0]
0000ac  f005053f          AND      r5,r5,#0x3f
0000b0  4e52              LDR      r6,|L2.508|
0000b2  fbb6f2f5          UDIV     r2,r6,r5
                  |L2.182|
;;;880            }
;;;881            
;;;882            /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
;;;883            /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
;;;884            tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
0000b6  4d4f              LDR      r5,|L2.500|
0000b8  3d08              SUBS     r5,r5,#8
0000ba  682d              LDR      r5,[r5,#0]
0000bc  f3c56103          UBFX     r1,r5,#24,#4
;;;885            frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
0000c0  4d4c              LDR      r5,|L2.500|
0000c2  3d08              SUBS     r5,r5,#8
0000c4  682d              LDR      r5,[r5,#0]
0000c6  f3c51588          UBFX     r5,r5,#6,#9
0000ca  4355              MULS     r5,r2,r5
0000cc  fbb5f0f1          UDIV     r0,r5,r1
;;;886            
;;;887            /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
;;;888            tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
0000d0  4d48              LDR      r5,|L2.500|
0000d2  682d              LDR      r5,[r5,#0]
0000d4  f005051f          AND      r5,r5,#0x1f
0000d8  1c69              ADDS     r1,r5,#1
;;;889            frequency = frequency/(tmpreg);
0000da  fbb0f0f1          UDIV     r0,r0,r1
;;;890            break;
0000de  e00d              B        |L2.252|
                  |L2.224|
;;;891          }
;;;892        case RCC_DCKCFGR1_SAI1SEL_1: /* External clock is the clock source for SAI1 */
;;;893          {
;;;894            frequency = EXTERNAL_CLOCK_VALUE;
0000e0  4847              LDR      r0,|L2.512|
;;;895            break;       
0000e2  e00b              B        |L2.252|
                  |L2.228|
;;;896          }
;;;897    #if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)      
;;;898        case RCC_DCKCFGR1_SAI1SEL: /* HSI or HSE is the clock source for SAI*/
;;;899          {
;;;900            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
0000e4  4d43              LDR      r5,|L2.500|
0000e6  3d88              SUBS     r5,r5,#0x88
0000e8  682d              LDR      r5,[r5,#0]
0000ea  f4050580          AND      r5,r5,#0x400000
0000ee  b915              CBNZ     r5,|L2.246|
;;;901            {
;;;902              /* In Case the main PLL Source is HSI */
;;;903              frequency = HSI_VALUE;
0000f0  4841              LDR      r0,|L2.504|
0000f2  e001              B        |L2.248|
0000f4  e003              B        |L2.254|
                  |L2.246|
;;;904            }
;;;905            else
;;;906            {
;;;907              /* In Case the main PLL Source is HSE */
;;;908              frequency = HSE_VALUE;
0000f6  4841              LDR      r0,|L2.508|
                  |L2.248|
;;;909            }
;;;910            break;       
0000f8  e000              B        |L2.252|
                  |L2.250|
;;;911          }
;;;912    #endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */      
;;;913        default :
;;;914          {
;;;915            break;
0000fa  bf00              NOP      
                  |L2.252|
0000fc  bf00              NOP                            ;865
                  |L2.254|
;;;916          }
;;;917        }
;;;918      }
;;;919      
;;;920      if (PeriphClk == RCC_PERIPHCLK_SAI2)
0000fe  f5b41f80          CMP      r4,#0x100000
000102  d175              BNE      |L2.496|
;;;921      {
;;;922        saiclocksource = RCC->DCKCFGR1;   
000104  4d3b              LDR      r5,|L2.500|
000106  682b              LDR      r3,[r5,#0]
;;;923        saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
000108  f4030340          AND      r3,r3,#0xc00000
;;;924        switch (saiclocksource)
00010c  b14b              CBZ      r3,|L2.290|
00010e  f5b30f80          CMP      r3,#0x400000
000112  d032              BEQ      |L2.378|
000114  f5b30f00          CMP      r3,#0x800000
000118  d05b              BEQ      |L2.466|
00011a  f5b30f40          CMP      r3,#0xc00000
00011e  d165              BNE      |L2.492|
000120  e059              B        |L2.470|
                  |L2.290|
;;;925        {
;;;926        case 0: /* PLLSAI is the clock source for SAI*/ 
;;;927          {
;;;928            /* Configure the PLLSAI division factor */
;;;929            /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */ 
;;;930            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
000122  4d34              LDR      r5,|L2.500|
000124  3d88              SUBS     r5,r5,#0x88
000126  682d              LDR      r5,[r5,#0]
000128  f4050580          AND      r5,r5,#0x400000
00012c  b945              CBNZ     r5,|L2.320|
;;;931            {
;;;932              /* In Case the PLL Source is HSI (Internal Clock) */
;;;933              vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
00012e  4d31              LDR      r5,|L2.500|
000130  3d88              SUBS     r5,r5,#0x88
000132  682d              LDR      r5,[r5,#0]
000134  f005053f          AND      r5,r5,#0x3f
000138  4e2f              LDR      r6,|L2.504|
00013a  fbb6f2f5          UDIV     r2,r6,r5
00013e  e007              B        |L2.336|
                  |L2.320|
;;;934            }
;;;935            else
;;;936            {
;;;937              /* In Case the PLL Source is HSE (External Clock) */
;;;938              vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
000140  4d2c              LDR      r5,|L2.500|
000142  3d88              SUBS     r5,r5,#0x88
000144  682d              LDR      r5,[r5,#0]
000146  f005053f          AND      r5,r5,#0x3f
00014a  4e2c              LDR      r6,|L2.508|
00014c  fbb6f2f5          UDIV     r2,r6,r5
                  |L2.336|
;;;939            }   
;;;940            /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
;;;941            /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
;;;942            tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
000150  4d28              LDR      r5,|L2.500|
000152  1f2d              SUBS     r5,r5,#4
000154  682d              LDR      r5,[r5,#0]
000156  f3c56103          UBFX     r1,r5,#24,#4
;;;943            frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
00015a  4d26              LDR      r5,|L2.500|
00015c  1f2d              SUBS     r5,r5,#4
00015e  682d              LDR      r5,[r5,#0]
000160  f3c51588          UBFX     r5,r5,#6,#9
000164  4355              MULS     r5,r2,r5
000166  fbb5f0f1          UDIV     r0,r5,r1
;;;944            
;;;945            /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
;;;946            tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
00016a  4d22              LDR      r5,|L2.500|
00016c  682d              LDR      r5,[r5,#0]
00016e  f3c52504          UBFX     r5,r5,#8,#5
000172  1c69              ADDS     r1,r5,#1
;;;947            frequency = frequency/(tmpreg); 
000174  fbb0f0f1          UDIV     r0,r0,r1
;;;948            break;       
000178  e039              B        |L2.494|
                  |L2.378|
;;;949          }
;;;950        case RCC_DCKCFGR1_SAI2SEL_0: /* PLLI2S is the clock source for SAI2 */
;;;951          {  
;;;952            /* Configure the PLLI2S division factor */
;;;953            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */ 
;;;954            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
00017a  4d1e              LDR      r5,|L2.500|
00017c  3d88              SUBS     r5,r5,#0x88
00017e  682d              LDR      r5,[r5,#0]
000180  f4050580          AND      r5,r5,#0x400000
000184  b945              CBNZ     r5,|L2.408|
;;;955            {
;;;956              /* In Case the PLL Source is HSI (Internal Clock) */
;;;957              vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
000186  4d1b              LDR      r5,|L2.500|
000188  3d88              SUBS     r5,r5,#0x88
00018a  682d              LDR      r5,[r5,#0]
00018c  f005053f          AND      r5,r5,#0x3f
000190  4e19              LDR      r6,|L2.504|
000192  fbb6f2f5          UDIV     r2,r6,r5
000196  e007              B        |L2.424|
                  |L2.408|
;;;958            }
;;;959            else
;;;960            {
;;;961              /* In Case the PLL Source is HSE (External Clock) */
;;;962              vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
000198  4d16              LDR      r5,|L2.500|
00019a  3d88              SUBS     r5,r5,#0x88
00019c  682d              LDR      r5,[r5,#0]
00019e  f005053f          AND      r5,r5,#0x3f
0001a2  4e16              LDR      r6,|L2.508|
0001a4  fbb6f2f5          UDIV     r2,r6,r5
                  |L2.424|
;;;963            }
;;;964            
;;;965            /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
;;;966            /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
;;;967            tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
0001a8  4d12              LDR      r5,|L2.500|
0001aa  3d08              SUBS     r5,r5,#8
0001ac  682d              LDR      r5,[r5,#0]
0001ae  f3c56103          UBFX     r1,r5,#24,#4
;;;968            frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
0001b2  4d10              LDR      r5,|L2.500|
0001b4  3d08              SUBS     r5,r5,#8
0001b6  682d              LDR      r5,[r5,#0]
0001b8  f3c51588          UBFX     r5,r5,#6,#9
0001bc  4355              MULS     r5,r2,r5
0001be  fbb5f0f1          UDIV     r0,r5,r1
;;;969            
;;;970            /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
;;;971            tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
0001c2  4d0c              LDR      r5,|L2.500|
0001c4  682d              LDR      r5,[r5,#0]
0001c6  f005051f          AND      r5,r5,#0x1f
0001ca  1c69              ADDS     r1,r5,#1
;;;972            frequency = frequency/(tmpreg);
0001cc  fbb0f0f1          UDIV     r0,r0,r1
;;;973            break;
0001d0  e00d              B        |L2.494|
                  |L2.466|
;;;974          }
;;;975        case RCC_DCKCFGR1_SAI2SEL_1: /* External clock is the clock source for SAI2 */
;;;976          {
;;;977            frequency = EXTERNAL_CLOCK_VALUE;
0001d2  480b              LDR      r0,|L2.512|
;;;978            break;       
0001d4  e00b              B        |L2.494|
                  |L2.470|
;;;979          }
;;;980    #if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
;;;981        case RCC_DCKCFGR1_SAI2SEL: /* HSI or HSE is the clock source for SAI2 */
;;;982          {
;;;983            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
0001d6  4d07              LDR      r5,|L2.500|
0001d8  3d88              SUBS     r5,r5,#0x88
0001da  682d              LDR      r5,[r5,#0]
0001dc  f4050580          AND      r5,r5,#0x400000
0001e0  b915              CBNZ     r5,|L2.488|
;;;984            {
;;;985              /* In Case the main PLL Source is HSI */
;;;986              frequency = HSI_VALUE;
0001e2  4805              LDR      r0,|L2.504|
0001e4  e001              B        |L2.490|
0001e6  e003              B        |L2.496|
                  |L2.488|
;;;987            }
;;;988            else
;;;989            {
;;;990              /* In Case the main PLL Source is HSE */
;;;991              frequency = HSE_VALUE;
0001e8  4804              LDR      r0,|L2.508|
                  |L2.490|
;;;992            }
;;;993            break;       
0001ea  e000              B        |L2.494|
                  |L2.492|
;;;994          }
;;;995    #endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */      
;;;996        default :
;;;997          {
;;;998            break;
0001ec  bf00              NOP      
                  |L2.494|
0001ee  bf00              NOP                            ;948
                  |L2.496|
;;;999          }
;;;1000       }
;;;1001     }
;;;1002     
;;;1003     return frequency;
;;;1004   }
0001f0  bd70              POP      {r4-r6,pc}
;;;1005   
                          ENDP

0001f2  0000              DCW      0x0000
                  |L2.500|
                          DCD      0x4002388c
                  |L2.504|
                          DCD      0x00f42400
                  |L2.508|
                          DCD      0x017d7840
                  |L2.512|
                          DCD      0x00bb8000

                          AREA ||i.HAL_RCCEx_PeriphCLKConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_PeriphCLKConfig PROC
;;;125      */
;;;126    HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;127    {
000004  4604              MOV      r4,r0
;;;128      uint32_t tickstart = 0;
000006  2600              MOVS     r6,#0
;;;129      uint32_t tmpreg0 = 0;
000008  2500              MOVS     r5,#0
;;;130      uint32_t tmpreg1 = 0;
00000a  2700              MOVS     r7,#0
;;;131      uint32_t plli2sused = 0;
00000c  46a8              MOV      r8,r5
;;;132      uint32_t pllsaiused = 0;
00000e  46a9              MOV      r9,r5
;;;133        
;;;134      /* Check the parameters */
;;;135      assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
;;;136      
;;;137      /*----------------------------------- I2S configuration ----------------------------------*/
;;;138      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
000010  7820              LDRB     r0,[r4,#0]
000012  f0000001          AND      r0,r0,#1
000016  b188              CBZ      r0,|L3.60|
;;;139      {
;;;140        /* Check the parameters */
;;;141        assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
;;;142        
;;;143        /* Configure I2S Clock source */
;;;144        __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
000018  bf00              NOP      
00001a  48fe              LDR      r0,|L3.1044|
00001c  6800              LDR      r0,[r0,#0]
00001e  f4200000          BIC      r0,r0,#0x800000
000022  49fc              LDR      r1,|L3.1044|
000024  6008              STR      r0,[r1,#0]
000026  4608              MOV      r0,r1
000028  6800              LDR      r0,[r0,#0]
00002a  6b61              LDR      r1,[r4,#0x34]
00002c  4308              ORRS     r0,r0,r1
00002e  49f9              LDR      r1,|L3.1044|
000030  6008              STR      r0,[r1,#0]
000032  bf00              NOP      
;;;145        
;;;146        /* Enable the PLLI2S when it's used as clock source for I2S */
;;;147        if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
000034  6b60              LDR      r0,[r4,#0x34]
000036  b908              CBNZ     r0,|L3.60|
;;;148        {
;;;149          plli2sused = 1; 
000038  f04f0801          MOV      r8,#1
                  |L3.60|
;;;150        }
;;;151      }
;;;152      
;;;153      /*------------------------------------ SAI1 configuration --------------------------------------*/
;;;154      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
00003c  6820              LDR      r0,[r4,#0]
00003e  f4002000          AND      r0,r0,#0x80000
000042  f5b02f00          CMP      r0,#0x80000
000046  d113              BNE      |L3.112|
;;;155      {
;;;156        /* Check the parameters */
;;;157        assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
;;;158        
;;;159        /* Configure SAI1 Clock source */
;;;160        __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
000048  48f2              LDR      r0,|L3.1044|
00004a  3084              ADDS     r0,r0,#0x84
00004c  6800              LDR      r0,[r0,#0]
00004e  f4201040          BIC      r0,r0,#0x300000
000052  6be1              LDR      r1,[r4,#0x3c]
000054  4308              ORRS     r0,r0,r1
000056  49ef              LDR      r1,|L3.1044|
000058  3184              ADDS     r1,r1,#0x84
00005a  6008              STR      r0,[r1,#0]
;;;161        /* Enable the PLLI2S when it's used as clock source for SAI */
;;;162        if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
00005c  6be0              LDR      r0,[r4,#0x3c]
00005e  f5b01f80          CMP      r0,#0x100000
000062  d101              BNE      |L3.104|
;;;163        {
;;;164          plli2sused = 1; 
000064  f04f0801          MOV      r8,#1
                  |L3.104|
;;;165        }
;;;166        /* Enable the PLLSAI when it's used as clock source for SAI */
;;;167        if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
000068  6be0              LDR      r0,[r4,#0x3c]
00006a  b908              CBNZ     r0,|L3.112|
;;;168        {
;;;169          pllsaiused = 1; 
00006c  f04f0901          MOV      r9,#1
                  |L3.112|
;;;170        }
;;;171      }
;;;172      
;;;173      /*------------------------------------ SAI2 configuration --------------------------------------*/
;;;174      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
000070  6820              LDR      r0,[r4,#0]
000072  f4001080          AND      r0,r0,#0x100000
000076  f5b01f80          CMP      r0,#0x100000
00007a  d113              BNE      |L3.164|
;;;175      {
;;;176        /* Check the parameters */
;;;177        assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
;;;178        
;;;179        /* Configure SAI2 Clock source */
;;;180        __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
00007c  48e5              LDR      r0,|L3.1044|
00007e  3084              ADDS     r0,r0,#0x84
000080  6800              LDR      r0,[r0,#0]
000082  f4200040          BIC      r0,r0,#0xc00000
000086  6c21              LDR      r1,[r4,#0x40]
000088  4308              ORRS     r0,r0,r1
00008a  49e2              LDR      r1,|L3.1044|
00008c  3184              ADDS     r1,r1,#0x84
00008e  6008              STR      r0,[r1,#0]
;;;181        
;;;182        /* Enable the PLLI2S when it's used as clock source for SAI */
;;;183        if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
000090  6c20              LDR      r0,[r4,#0x40]
000092  f5b00f80          CMP      r0,#0x400000
000096  d101              BNE      |L3.156|
;;;184        {
;;;185          plli2sused = 1; 
000098  f04f0801          MOV      r8,#1
                  |L3.156|
;;;186        }
;;;187        /* Enable the PLLSAI when it's used as clock source for SAI */
;;;188        if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
00009c  6c20              LDR      r0,[r4,#0x40]
00009e  b908              CBNZ     r0,|L3.164|
;;;189        {
;;;190          pllsaiused = 1; 
0000a0  f04f0901          MOV      r9,#1
                  |L3.164|
;;;191        }
;;;192      }
;;;193      
;;;194      /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
;;;195      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
0000a4  6820              LDR      r0,[r4,#0]
0000a6  f0007080          AND      r0,r0,#0x1000000
0000aa  f1b07f80          CMP      r0,#0x1000000
0000ae  d101              BNE      |L3.180|
;;;196      {    
;;;197          plli2sused = 1; 
0000b0  f04f0801          MOV      r8,#1
                  |L3.180|
;;;198      }  
;;;199      
;;;200      /*------------------------------------ RTC configuration --------------------------------------*/
;;;201      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
0000b4  7820              LDRB     r0,[r4,#0]
0000b6  f0000020          AND      r0,r0,#0x20
0000ba  2820              CMP      r0,#0x20
0000bc  d170              BNE      |L3.416|
;;;202      {
;;;203        /* Check for RTC Parameters used to output RTCCLK */
;;;204        assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
;;;205        
;;;206        /* Enable Power Clock*/
;;;207        __HAL_RCC_PWR_CLK_ENABLE();
0000be  bf00              NOP      
0000c0  48d4              LDR      r0,|L3.1044|
0000c2  3038              ADDS     r0,r0,#0x38
0000c4  6800              LDR      r0,[r0,#0]
0000c6  f0405080          ORR      r0,r0,#0x10000000
0000ca  49d2              LDR      r1,|L3.1044|
0000cc  3138              ADDS     r1,r1,#0x38
0000ce  6008              STR      r0,[r1,#0]
0000d0  4608              MOV      r0,r1
0000d2  6800              LDR      r0,[r0,#0]
0000d4  f0005080          AND      r0,r0,#0x10000000
0000d8  9000              STR      r0,[sp,#0]
0000da  bf00              NOP      
0000dc  bf00              NOP      
;;;208        
;;;209        /* Enable write access to Backup domain */
;;;210        PWR->CR1 |= PWR_CR1_DBP;
0000de  48ce              LDR      r0,|L3.1048|
0000e0  6800              LDR      r0,[r0,#0]
0000e2  f4407080          ORR      r0,r0,#0x100
0000e6  49cc              LDR      r1,|L3.1048|
0000e8  6008              STR      r0,[r1,#0]
;;;211        
;;;212        /* Get Start Tick*/
;;;213        tickstart = HAL_GetTick();
0000ea  f7fffffe          BL       HAL_GetTick
0000ee  4606              MOV      r6,r0
;;;214        
;;;215        /* Wait for Backup domain Write protection disable */
;;;216        while((PWR->CR1 & PWR_CR1_DBP) == RESET)
0000f0  e007              B        |L3.258|
                  |L3.242|
;;;217        {
;;;218          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
0000f2  f7fffffe          BL       HAL_GetTick
0000f6  1b80              SUBS     r0,r0,r6
0000f8  2864              CMP      r0,#0x64
0000fa  d902              BLS      |L3.258|
;;;219          {
;;;220            return HAL_TIMEOUT;
0000fc  2003              MOVS     r0,#3
                  |L3.254|
;;;221          }
;;;222        }
;;;223    
;;;224        /* Reset the Backup domain only if the RTC Clock source selection is modified */
;;;225        tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
;;;226    
;;;227        if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
;;;228        {
;;;229          /* Store the content of BDCR register before the reset of Backup Domain */
;;;230          tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
;;;231    
;;;232          /* RTC Clock selection can be changed only if the Backup Domain is reset */
;;;233          __HAL_RCC_BACKUPRESET_FORCE();
;;;234          __HAL_RCC_BACKUPRESET_RELEASE();
;;;235    
;;;236          /* Restore the Content of BDCR register */
;;;237          RCC->BDCR = tmpreg0;
;;;238    
;;;239          /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
;;;240          if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
;;;241          {
;;;242            /* Get Start Tick*/
;;;243            tickstart = HAL_GetTick();
;;;244            
;;;245            /* Wait till LSE is ready */  
;;;246            while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
;;;247            {
;;;248              if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;249              {
;;;250                return HAL_TIMEOUT;
;;;251              }
;;;252            }
;;;253          }
;;;254        }
;;;255        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
;;;256      }
;;;257    
;;;258      /*------------------------------------ TIM configuration --------------------------------------*/
;;;259      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
;;;260      {
;;;261        /* Check the parameters */
;;;262        assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
;;;263        
;;;264        /* Configure Timer Prescaler */
;;;265        __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
;;;266      }
;;;267      
;;;268      /*-------------------------------------- I2C1 Configuration -----------------------------------*/
;;;269      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
;;;270      {
;;;271        /* Check the parameters */
;;;272        assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
;;;273        
;;;274        /* Configure the I2C1 clock source */
;;;275        __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
;;;276      }
;;;277      
;;;278      /*-------------------------------------- I2C2 Configuration -----------------------------------*/
;;;279      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
;;;280      {
;;;281        /* Check the parameters */
;;;282        assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
;;;283        
;;;284        /* Configure the I2C2 clock source */
;;;285        __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
;;;286      }
;;;287      
;;;288      /*-------------------------------------- I2C3 Configuration -----------------------------------*/
;;;289      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
;;;290      {
;;;291        /* Check the parameters */
;;;292        assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
;;;293        
;;;294        /* Configure the I2C3 clock source */
;;;295        __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
;;;296      }
;;;297        
;;;298      /*-------------------------------------- I2C4 Configuration -----------------------------------*/
;;;299      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
;;;300      {
;;;301        /* Check the parameters */
;;;302        assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
;;;303        
;;;304        /* Configure the I2C4 clock source */
;;;305        __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
;;;306      }
;;;307    
;;;308      /*-------------------------------------- USART1 Configuration -----------------------------------*/
;;;309      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
;;;310      {
;;;311        /* Check the parameters */
;;;312        assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
;;;313        
;;;314        /* Configure the USART1 clock source */
;;;315        __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
;;;316      }
;;;317    
;;;318      /*-------------------------------------- USART2 Configuration -----------------------------------*/
;;;319      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
;;;320      {
;;;321        /* Check the parameters */
;;;322        assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
;;;323        
;;;324        /* Configure the USART2 clock source */
;;;325        __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
;;;326      }
;;;327    
;;;328      /*-------------------------------------- USART3 Configuration -----------------------------------*/
;;;329      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
;;;330      {
;;;331        /* Check the parameters */
;;;332        assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
;;;333        
;;;334        /* Configure the USART3 clock source */
;;;335        __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
;;;336      }
;;;337    
;;;338      /*-------------------------------------- UART4 Configuration -----------------------------------*/
;;;339      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
;;;340      {
;;;341        /* Check the parameters */
;;;342        assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
;;;343        
;;;344        /* Configure the UART4 clock source */
;;;345        __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
;;;346      }
;;;347    
;;;348      /*-------------------------------------- UART5 Configuration -----------------------------------*/
;;;349      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
;;;350      {
;;;351        /* Check the parameters */
;;;352        assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
;;;353        
;;;354        /* Configure the UART5 clock source */
;;;355        __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
;;;356      }
;;;357    
;;;358      /*-------------------------------------- USART6 Configuration -----------------------------------*/
;;;359      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
;;;360      {
;;;361        /* Check the parameters */
;;;362        assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
;;;363        
;;;364        /* Configure the USART6 clock source */
;;;365        __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
;;;366      }
;;;367    
;;;368      /*-------------------------------------- UART7 Configuration -----------------------------------*/
;;;369      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
;;;370      {
;;;371        /* Check the parameters */
;;;372        assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
;;;373        
;;;374        /* Configure the UART7 clock source */
;;;375        __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
;;;376      }
;;;377    
;;;378      /*-------------------------------------- UART8 Configuration -----------------------------------*/
;;;379      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
;;;380      {
;;;381        /* Check the parameters */
;;;382        assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
;;;383        
;;;384        /* Configure the UART8 clock source */
;;;385        __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
;;;386      }
;;;387      
;;;388      /*--------------------------------------- CEC Configuration -----------------------------------*/
;;;389      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
;;;390      {
;;;391        /* Check the parameters */
;;;392        assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
;;;393        
;;;394        /* Configure the CEC clock source */
;;;395        __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
;;;396      }
;;;397      
;;;398      /*-------------------------------------- CK48 Configuration -----------------------------------*/
;;;399      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
;;;400      {
;;;401        /* Check the parameters */
;;;402        assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
;;;403        
;;;404        /* Configure the CLK48 source */
;;;405        __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
;;;406    
;;;407        /* Enable the PLLSAI when it's used as clock source for CK48 */
;;;408        if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
;;;409        {
;;;410          pllsaiused = 1; 
;;;411        }
;;;412      }
;;;413    
;;;414      /*-------------------------------------- LTDC Configuration -----------------------------------*/
;;;415    #if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
;;;416      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
;;;417      {
;;;418        pllsaiused = 1; 
;;;419      }
;;;420    #endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
;;;421      
;;;422      /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
;;;423      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
;;;424      {
;;;425        /* Check the parameters */
;;;426        assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
;;;427        
;;;428        /* Configure the LTPIM1 clock source */
;;;429        __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
;;;430       }
;;;431      
;;;432      /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
;;;433      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
;;;434      {
;;;435        /* Check the parameters */
;;;436        assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
;;;437        
;;;438        /* Configure the SDMMC1 clock source */
;;;439        __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
;;;440      }
;;;441      
;;;442    #if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
;;;443      /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
;;;444      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
;;;445      {
;;;446        /* Check the parameters */
;;;447        assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
;;;448        
;;;449        /* Configure the SDMMC2 clock source */
;;;450        __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
;;;451      }
;;;452    	
;;;453      /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
;;;454      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
;;;455      {
;;;456        /* Check the parameters */
;;;457        assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
;;;458    
;;;459        /* Configure the DFSDM1 interface clock source */
;;;460        __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
;;;461      }
;;;462      
;;;463      /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
;;;464      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
;;;465      {
;;;466        /* Check the parameters */
;;;467        assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
;;;468    
;;;469        /* Configure the DFSDM interface clock source */
;;;470        __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
;;;471      }  
;;;472    #endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
;;;473      
;;;474      /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
;;;475      /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
;;;476      if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
;;;477      {
;;;478        /* Disable the PLLI2S */
;;;479        __HAL_RCC_PLLI2S_DISABLE();  
;;;480        
;;;481        /* Get Start Tick*/
;;;482        tickstart = HAL_GetTick();
;;;483        
;;;484        /* Wait till PLLI2S is disabled */
;;;485        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
;;;486        {
;;;487          if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
;;;488          {
;;;489            /* return in case of Timeout detected */         
;;;490            return HAL_TIMEOUT;
;;;491          }
;;;492        }
;;;493        
;;;494        /* check for common PLLI2S Parameters */
;;;495        assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
;;;496          
;;;497        /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
;;;498        if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
;;;499        {
;;;500          /* check for Parameters */
;;;501          assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
;;;502        
;;;503          /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
;;;504          tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
;;;505          tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
;;;506          /* Configure the PLLI2S division factors */
;;;507          /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
;;;508          /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
;;;509          __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
;;;510        }
;;;511            
;;;512        /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
;;;513        if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
;;;514           ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
;;;515        {
;;;516          /* Check for PLLI2S Parameters */
;;;517          assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
;;;518          /* Check for PLLI2S/DIVQ parameters */
;;;519          assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
;;;520                
;;;521          /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
;;;522          tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
;;;523          tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
;;;524          /* Configure the PLLI2S division factors */      
;;;525          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
;;;526          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
;;;527          /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
;;;528          __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
;;;529       
;;;530          /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
;;;531          __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
;;;532        }          
;;;533    
;;;534        /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
;;;535        if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
;;;536        {
;;;537          /* check for Parameters */
;;;538          assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
;;;539         
;;;540         /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
;;;541          tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
;;;542          tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
;;;543          /* Configure the PLLI2S division factors */
;;;544          /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
;;;545          /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
;;;546          __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
;;;547        }  
;;;548             
;;;549        /*----------------- In Case of PLLI2S is just selected  -----------------*/  
;;;550        if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
;;;551        {
;;;552          /* Check for Parameters */
;;;553          assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
;;;554          assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
;;;555          assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
;;;556    
;;;557          /* Configure the PLLI2S division factors */
;;;558          /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
;;;559          /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
;;;560          __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
;;;561        } 
;;;562        
;;;563        /* Enable the PLLI2S */
;;;564        __HAL_RCC_PLLI2S_ENABLE();
;;;565        
;;;566        /* Get Start Tick*/
;;;567        tickstart = HAL_GetTick();
;;;568    
;;;569        /* Wait till PLLI2S is ready */
;;;570        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
;;;571        {
;;;572          if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
;;;573          {
;;;574            /* return in case of Timeout detected */                
;;;575            return HAL_TIMEOUT;
;;;576          }
;;;577        }
;;;578      } 
;;;579      
;;;580      /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
;;;581      /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
;;;582      if(pllsaiused == 1)
;;;583      {
;;;584        /* Disable PLLSAI Clock */
;;;585        __HAL_RCC_PLLSAI_DISABLE(); 
;;;586        
;;;587        /* Get Start Tick*/
;;;588        tickstart = HAL_GetTick();
;;;589    
;;;590        /* Wait till PLLSAI is disabled */
;;;591        while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
;;;592        {
;;;593          if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
;;;594          { 
;;;595            /* return in case of Timeout detected */        
;;;596            return HAL_TIMEOUT;
;;;597          }
;;;598        } 
;;;599        
;;;600        /* Check the PLLSAI division factors */
;;;601        assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
;;;602        
;;;603        /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
;;;604        if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
;;;605           ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
;;;606        {
;;;607          /* check for PLLSAIQ Parameter */
;;;608          assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
;;;609          /* check for PLLSAI/DIVQ Parameter */
;;;610          assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
;;;611        
;;;612          /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
;;;613          tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
;;;614          tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
;;;615          /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
;;;616          /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
;;;617          /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
;;;618          __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
;;;619          
;;;620          /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
;;;621          __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
;;;622        }           
;;;623    
;;;624        /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
;;;625        /* In Case of PLLI2S is selected as source clock for CK48 */ 
;;;626        if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
;;;627        {
;;;628          /* check for Parameters */
;;;629          assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
;;;630          /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
;;;631          tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
;;;632          tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
;;;633          
;;;634          /* Configure the PLLSAI division factors */
;;;635          /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
;;;636          /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
;;;637          __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
;;;638        }        
;;;639    
;;;640    #if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
;;;641        /*---------------------------- LTDC configuration -------------------------------*/
;;;642        if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
;;;643        {
;;;644          assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
;;;645          assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
;;;646          
;;;647          /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
;;;648          tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
;;;649          tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
;;;650          
;;;651          /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
;;;652          /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
;;;653          /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
;;;654          __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
;;;655          
;;;656          /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
;;;657          __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
;;;658        }    
;;;659    #endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  
;;;660    
;;;661        /* Enable PLLSAI Clock */
;;;662        __HAL_RCC_PLLSAI_ENABLE();
;;;663        
;;;664        /* Get Start Tick*/
;;;665        tickstart = HAL_GetTick();
;;;666    
;;;667        /* Wait till PLLSAI is ready */
;;;668        while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
;;;669        {
;;;670          if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
;;;671          { 
;;;672            /* return in case of Timeout detected */        
;;;673            return HAL_TIMEOUT;
;;;674          }
;;;675        }
;;;676      }
;;;677      return HAL_OK;
;;;678    }
0000fe  e8bd83f8          POP      {r3-r9,pc}
                  |L3.258|
000102  48c5              LDR      r0,|L3.1048|
000104  6800              LDR      r0,[r0,#0]            ;216
000106  f4007080          AND      r0,r0,#0x100          ;216
00010a  2800              CMP      r0,#0                 ;216
00010c  d0f1              BEQ      |L3.242|
00010e  48c1              LDR      r0,|L3.1044|
000110  3068              ADDS     r0,r0,#0x68           ;225
000112  6800              LDR      r0,[r0,#0]            ;225
000114  f4007540          AND      r5,r0,#0x300          ;225
000118  b385              CBZ      r5,|L3.380|
00011a  8e20              LDRH     r0,[r4,#0x30]         ;227
00011c  f4007040          AND      r0,r0,#0x300          ;227
000120  42a8              CMP      r0,r5                 ;227
000122  d02b              BEQ      |L3.380|
000124  48bb              LDR      r0,|L3.1044|
000126  3068              ADDS     r0,r0,#0x68           ;230
000128  6800              LDR      r0,[r0,#0]            ;230
00012a  f4207540          BIC      r5,r0,#0x300          ;230
00012e  48b9              LDR      r0,|L3.1044|
000130  3068              ADDS     r0,r0,#0x68           ;233
000132  6800              LDR      r0,[r0,#0]            ;233
000134  f4403080          ORR      r0,r0,#0x10000        ;233
000138  49b6              LDR      r1,|L3.1044|
00013a  3168              ADDS     r1,r1,#0x68           ;233
00013c  6008              STR      r0,[r1,#0]            ;233
00013e  4608              MOV      r0,r1                 ;234
000140  6800              LDR      r0,[r0,#0]            ;234
000142  f4203080          BIC      r0,r0,#0x10000        ;234
000146  6008              STR      r0,[r1,#0]            ;234
000148  4608              MOV      r0,r1                 ;237
00014a  6005              STR      r5,[r0,#0]            ;237
00014c  6800              LDR      r0,[r0,#0]            ;240
00014e  f0000001          AND      r0,r0,#1              ;240
000152  b198              CBZ      r0,|L3.380|
000154  f7fffffe          BL       HAL_GetTick
000158  4606              MOV      r6,r0                 ;243
00015a  e008              B        |L3.366|
                  |L3.348|
00015c  f7fffffe          BL       HAL_GetTick
000160  1b80              SUBS     r0,r0,r6              ;248
000162  f2413188          MOV      r1,#0x1388            ;248
000166  4288              CMP      r0,r1                 ;248
000168  d901              BLS      |L3.366|
00016a  2003              MOVS     r0,#3                 ;250
00016c  e7c7              B        |L3.254|
                  |L3.366|
00016e  48a9              LDR      r0,|L3.1044|
000170  3068              ADDS     r0,r0,#0x68           ;246
000172  6800              LDR      r0,[r0,#0]            ;246
000174  f3c00040          UBFX     r0,r0,#1,#1           ;246
000178  2800              CMP      r0,#0                 ;246
00017a  d0ef              BEQ      |L3.348|
                  |L3.380|
00017c  bf00              NOP                            ;255
00017e  8e20              LDRH     r0,[r4,#0x30]         ;255
000180  f4007040          AND      r0,r0,#0x300          ;255
000184  f5b07f40          CMP      r0,#0x300             ;255
000188  d10b              BNE      |L3.418|
00018a  48a2              LDR      r0,|L3.1044|
00018c  6800              LDR      r0,[r0,#0]            ;255
00018e  f42010f8          BIC      r0,r0,#0x1f0000       ;255
000192  4aa2              LDR      r2,|L3.1052|
000194  6b21              LDR      r1,[r4,#0x30]         ;255
000196  4011              ANDS     r1,r1,r2              ;255
000198  4308              ORRS     r0,r0,r1              ;255
00019a  499e              LDR      r1,|L3.1044|
00019c  6008              STR      r0,[r1,#0]            ;255
00019e  e006              B        |L3.430|
                  |L3.416|
0001a0  e010              B        |L3.452|
                  |L3.418|
0001a2  489c              LDR      r0,|L3.1044|
0001a4  6800              LDR      r0,[r0,#0]            ;255
0001a6  f42010f8          BIC      r0,r0,#0x1f0000       ;255
0001aa  499a              LDR      r1,|L3.1044|
0001ac  6008              STR      r0,[r1,#0]            ;255
                  |L3.430|
0001ae  4899              LDR      r0,|L3.1044|
0001b0  3068              ADDS     r0,r0,#0x68           ;255
0001b2  6800              LDR      r0,[r0,#0]            ;255
0001b4  8e21              LDRH     r1,[r4,#0x30]         ;255
0001b6  f3c1010b          UBFX     r1,r1,#0,#12          ;255
0001ba  4308              ORRS     r0,r0,r1              ;255
0001bc  4995              LDR      r1,|L3.1044|
0001be  3168              ADDS     r1,r1,#0x68           ;255
0001c0  6008              STR      r0,[r1,#0]            ;255
0001c2  bf00              NOP                            ;255
                  |L3.452|
0001c4  7820              LDRB     r0,[r4,#0]            ;259
0001c6  f0000010          AND      r0,r0,#0x10           ;259
0001ca  2810              CMP      r0,#0x10              ;259
0001cc  d110              BNE      |L3.496|
0001ce  bf00              NOP                            ;265
0001d0  4890              LDR      r0,|L3.1044|
0001d2  3084              ADDS     r0,r0,#0x84           ;265
0001d4  6800              LDR      r0,[r0,#0]            ;265
0001d6  f0207080          BIC      r0,r0,#0x1000000      ;265
0001da  498e              LDR      r1,|L3.1044|
0001dc  3184              ADDS     r1,r1,#0x84           ;265
0001de  6008              STR      r0,[r1,#0]            ;265
0001e0  4608              MOV      r0,r1                 ;265
0001e2  6800              LDR      r0,[r0,#0]            ;265
0001e4  6ba1              LDR      r1,[r4,#0x38]         ;265
0001e6  4308              ORRS     r0,r0,r1              ;265
0001e8  498a              LDR      r1,|L3.1044|
0001ea  3184              ADDS     r1,r1,#0x84           ;265
0001ec  6008              STR      r0,[r1,#0]            ;265
0001ee  bf00              NOP                            ;265
                  |L3.496|
0001f0  8820              LDRH     r0,[r4,#0]            ;269
0001f2  f4004080          AND      r0,r0,#0x4000         ;269
0001f6  f5b04f80          CMP      r0,#0x4000            ;269
0001fa  d109              BNE      |L3.528|
0001fc  4885              LDR      r0,|L3.1044|
0001fe  3088              ADDS     r0,r0,#0x88           ;275
000200  6800              LDR      r0,[r0,#0]            ;275
000202  f4203040          BIC      r0,r0,#0x30000        ;275
000206  6e61              LDR      r1,[r4,#0x64]         ;275
000208  4308              ORRS     r0,r0,r1              ;275
00020a  4982              LDR      r1,|L3.1044|
00020c  3188              ADDS     r1,r1,#0x88           ;275
00020e  6008              STR      r0,[r1,#0]            ;275
                  |L3.528|
000210  8820              LDRH     r0,[r4,#0]            ;279
000212  f4004000          AND      r0,r0,#0x8000         ;279
000216  f5b04f00          CMP      r0,#0x8000            ;279
00021a  d109              BNE      |L3.560|
00021c  487d              LDR      r0,|L3.1044|
00021e  3088              ADDS     r0,r0,#0x88           ;285
000220  6800              LDR      r0,[r0,#0]            ;285
000222  f4202040          BIC      r0,r0,#0xc0000        ;285
000226  6ea1              LDR      r1,[r4,#0x68]         ;285
000228  4308              ORRS     r0,r0,r1              ;285
00022a  497a              LDR      r1,|L3.1044|
00022c  3188              ADDS     r1,r1,#0x88           ;285
00022e  6008              STR      r0,[r1,#0]            ;285
                  |L3.560|
000230  6820              LDR      r0,[r4,#0]            ;289
000232  f4003080          AND      r0,r0,#0x10000        ;289
000236  f5b03f80          CMP      r0,#0x10000           ;289
00023a  d109              BNE      |L3.592|
00023c  4875              LDR      r0,|L3.1044|
00023e  3088              ADDS     r0,r0,#0x88           ;295
000240  6800              LDR      r0,[r0,#0]            ;295
000242  f4201040          BIC      r0,r0,#0x300000       ;295
000246  6ee1              LDR      r1,[r4,#0x6c]         ;295
000248  4308              ORRS     r0,r0,r1              ;295
00024a  4972              LDR      r1,|L3.1044|
00024c  3188              ADDS     r1,r1,#0x88           ;295
00024e  6008              STR      r0,[r1,#0]            ;295
                  |L3.592|
000250  6820              LDR      r0,[r4,#0]            ;299
000252  f4003000          AND      r0,r0,#0x20000        ;299
000256  f5b03f00          CMP      r0,#0x20000           ;299
00025a  d109              BNE      |L3.624|
00025c  486d              LDR      r0,|L3.1044|
00025e  3088              ADDS     r0,r0,#0x88           ;305
000260  6800              LDR      r0,[r0,#0]            ;305
000262  f4200040          BIC      r0,r0,#0xc00000       ;305
000266  6f21              LDR      r1,[r4,#0x70]         ;305
000268  4308              ORRS     r0,r0,r1              ;305
00026a  496a              LDR      r1,|L3.1044|
00026c  3188              ADDS     r1,r1,#0x88           ;305
00026e  6008              STR      r0,[r1,#0]            ;305
                  |L3.624|
000270  7820              LDRB     r0,[r4,#0]            ;309
000272  f0000040          AND      r0,r0,#0x40           ;309
000276  2840              CMP      r0,#0x40              ;309
000278  d109              BNE      |L3.654|
00027a  4866              LDR      r0,|L3.1044|
00027c  3088              ADDS     r0,r0,#0x88           ;315
00027e  6800              LDR      r0,[r0,#0]            ;315
000280  f0200003          BIC      r0,r0,#3              ;315
000284  6c61              LDR      r1,[r4,#0x44]         ;315
000286  4308              ORRS     r0,r0,r1              ;315
000288  4962              LDR      r1,|L3.1044|
00028a  3188              ADDS     r1,r1,#0x88           ;315
00028c  6008              STR      r0,[r1,#0]            ;315
                  |L3.654|
00028e  7820              LDRB     r0,[r4,#0]            ;319
000290  f0000080          AND      r0,r0,#0x80           ;319
000294  2880              CMP      r0,#0x80              ;319
000296  d109              BNE      |L3.684|
000298  485e              LDR      r0,|L3.1044|
00029a  3088              ADDS     r0,r0,#0x88           ;325
00029c  6800              LDR      r0,[r0,#0]            ;325
00029e  f020000c          BIC      r0,r0,#0xc            ;325
0002a2  6ca1              LDR      r1,[r4,#0x48]         ;325
0002a4  4308              ORRS     r0,r0,r1              ;325
0002a6  495b              LDR      r1,|L3.1044|
0002a8  3188              ADDS     r1,r1,#0x88           ;325
0002aa  6008              STR      r0,[r1,#0]            ;325
                  |L3.684|
0002ac  8820              LDRH     r0,[r4,#0]            ;329
0002ae  f4007080          AND      r0,r0,#0x100          ;329
0002b2  f5b07f80          CMP      r0,#0x100             ;329
0002b6  d109              BNE      |L3.716|
0002b8  4856              LDR      r0,|L3.1044|
0002ba  3088              ADDS     r0,r0,#0x88           ;335
0002bc  6800              LDR      r0,[r0,#0]            ;335
0002be  f0200030          BIC      r0,r0,#0x30           ;335
0002c2  6ce1              LDR      r1,[r4,#0x4c]         ;335
0002c4  4308              ORRS     r0,r0,r1              ;335
0002c6  4953              LDR      r1,|L3.1044|
0002c8  3188              ADDS     r1,r1,#0x88           ;335
0002ca  6008              STR      r0,[r1,#0]            ;335
                  |L3.716|
0002cc  8820              LDRH     r0,[r4,#0]            ;339
0002ce  f4007000          AND      r0,r0,#0x200          ;339
0002d2  f5b07f00          CMP      r0,#0x200             ;339
0002d6  d109              BNE      |L3.748|
0002d8  484e              LDR      r0,|L3.1044|
0002da  3088              ADDS     r0,r0,#0x88           ;345
0002dc  6800              LDR      r0,[r0,#0]            ;345
0002de  f02000c0          BIC      r0,r0,#0xc0           ;345
0002e2  6d21              LDR      r1,[r4,#0x50]         ;345
0002e4  4308              ORRS     r0,r0,r1              ;345
0002e6  494b              LDR      r1,|L3.1044|
0002e8  3188              ADDS     r1,r1,#0x88           ;345
0002ea  6008              STR      r0,[r1,#0]            ;345
                  |L3.748|
0002ec  8820              LDRH     r0,[r4,#0]            ;349
0002ee  f4006080          AND      r0,r0,#0x400          ;349
0002f2  f5b06f80          CMP      r0,#0x400             ;349
0002f6  d109              BNE      |L3.780|
0002f8  4846              LDR      r0,|L3.1044|
0002fa  3088              ADDS     r0,r0,#0x88           ;355
0002fc  6800              LDR      r0,[r0,#0]            ;355
0002fe  f4207040          BIC      r0,r0,#0x300          ;355
000302  6d61              LDR      r1,[r4,#0x54]         ;355
000304  4308              ORRS     r0,r0,r1              ;355
000306  4943              LDR      r1,|L3.1044|
000308  3188              ADDS     r1,r1,#0x88           ;355
00030a  6008              STR      r0,[r1,#0]            ;355
                  |L3.780|
00030c  8820              LDRH     r0,[r4,#0]            ;359
00030e  f4006000          AND      r0,r0,#0x800          ;359
000312  f5b06f00          CMP      r0,#0x800             ;359
000316  d109              BNE      |L3.812|
000318  483e              LDR      r0,|L3.1044|
00031a  3088              ADDS     r0,r0,#0x88           ;365
00031c  6800              LDR      r0,[r0,#0]            ;365
00031e  f4206040          BIC      r0,r0,#0xc00          ;365
000322  6da1              LDR      r1,[r4,#0x58]         ;365
000324  4308              ORRS     r0,r0,r1              ;365
000326  493b              LDR      r1,|L3.1044|
000328  3188              ADDS     r1,r1,#0x88           ;365
00032a  6008              STR      r0,[r1,#0]            ;365
                  |L3.812|
00032c  8820              LDRH     r0,[r4,#0]            ;369
00032e  f4005080          AND      r0,r0,#0x1000         ;369
000332  f5b05f80          CMP      r0,#0x1000            ;369
000336  d109              BNE      |L3.844|
000338  4836              LDR      r0,|L3.1044|
00033a  3088              ADDS     r0,r0,#0x88           ;375
00033c  6800              LDR      r0,[r0,#0]            ;375
00033e  f4205040          BIC      r0,r0,#0x3000         ;375
000342  6de1              LDR      r1,[r4,#0x5c]         ;375
000344  4308              ORRS     r0,r0,r1              ;375
000346  4933              LDR      r1,|L3.1044|
000348  3188              ADDS     r1,r1,#0x88           ;375
00034a  6008              STR      r0,[r1,#0]            ;375
                  |L3.844|
00034c  8820              LDRH     r0,[r4,#0]            ;379
00034e  f4005000          AND      r0,r0,#0x2000         ;379
000352  f5b05f00          CMP      r0,#0x2000            ;379
000356  d109              BNE      |L3.876|
000358  482e              LDR      r0,|L3.1044|
00035a  3088              ADDS     r0,r0,#0x88           ;385
00035c  6800              LDR      r0,[r0,#0]            ;385
00035e  f4204040          BIC      r0,r0,#0xc000         ;385
000362  6e21              LDR      r1,[r4,#0x60]         ;385
000364  4308              ORRS     r0,r0,r1              ;385
000366  492b              LDR      r1,|L3.1044|
000368  3188              ADDS     r1,r1,#0x88           ;385
00036a  6008              STR      r0,[r1,#0]            ;385
                  |L3.876|
00036c  6820              LDR      r0,[r4,#0]            ;389
00036e  f4000080          AND      r0,r0,#0x400000       ;389
000372  f5b00f80          CMP      r0,#0x400000          ;389
000376  d109              BNE      |L3.908|
000378  4826              LDR      r0,|L3.1044|
00037a  3088              ADDS     r0,r0,#0x88           ;395
00037c  6800              LDR      r0,[r0,#0]            ;395
00037e  f0206080          BIC      r0,r0,#0x4000000      ;395
000382  6fa1              LDR      r1,[r4,#0x78]         ;395
000384  4308              ORRS     r0,r0,r1              ;395
000386  4923              LDR      r1,|L3.1044|
000388  3188              ADDS     r1,r1,#0x88           ;395
00038a  6008              STR      r0,[r1,#0]            ;395
                  |L3.908|
00038c  6820              LDR      r0,[r4,#0]            ;399
00038e  f4001000          AND      r0,r0,#0x200000       ;399
000392  f5b01f00          CMP      r0,#0x200000          ;399
000396  d10f              BNE      |L3.952|
000398  481e              LDR      r0,|L3.1044|
00039a  3088              ADDS     r0,r0,#0x88           ;405
00039c  6800              LDR      r0,[r0,#0]            ;405
00039e  f0206000          BIC      r0,r0,#0x8000000      ;405
0003a2  6fe1              LDR      r1,[r4,#0x7c]         ;405
0003a4  4308              ORRS     r0,r0,r1              ;405
0003a6  491b              LDR      r1,|L3.1044|
0003a8  3188              ADDS     r1,r1,#0x88           ;405
0003aa  6008              STR      r0,[r1,#0]            ;405
0003ac  6fe0              LDR      r0,[r4,#0x7c]         ;408
0003ae  f1b06f00          CMP      r0,#0x8000000         ;408
0003b2  d101              BNE      |L3.952|
0003b4  f04f0901          MOV      r9,#1                 ;410
                  |L3.952|
0003b8  7820              LDRB     r0,[r4,#0]            ;416
0003ba  f0000008          AND      r0,r0,#8              ;416
0003be  2808              CMP      r0,#8                 ;416
0003c0  d101              BNE      |L3.966|
0003c2  f04f0901          MOV      r9,#1                 ;418
                  |L3.966|
0003c6  6820              LDR      r0,[r4,#0]            ;423
0003c8  f4002080          AND      r0,r0,#0x40000        ;423
0003cc  f5b02f80          CMP      r0,#0x40000           ;423
0003d0  d109              BNE      |L3.998|
0003d2  4810              LDR      r0,|L3.1044|
0003d4  3088              ADDS     r0,r0,#0x88           ;429
0003d6  6800              LDR      r0,[r0,#0]            ;429
0003d8  f0207040          BIC      r0,r0,#0x3000000      ;429
0003dc  6f61              LDR      r1,[r4,#0x74]         ;429
0003de  4308              ORRS     r0,r0,r1              ;429
0003e0  490c              LDR      r1,|L3.1044|
0003e2  3188              ADDS     r1,r1,#0x88           ;429
0003e4  6008              STR      r0,[r1,#0]            ;429
                  |L3.998|
0003e6  6820              LDR      r0,[r4,#0]            ;433
0003e8  f4000000          AND      r0,r0,#0x800000       ;433
0003ec  f5b00f00          CMP      r0,#0x800000          ;433
0003f0  d10a              BNE      |L3.1032|
0003f2  4808              LDR      r0,|L3.1044|
0003f4  3088              ADDS     r0,r0,#0x88           ;439
0003f6  6800              LDR      r0,[r0,#0]            ;439
0003f8  f0205080          BIC      r0,r0,#0x10000000     ;439
0003fc  f8d41080          LDR      r1,[r4,#0x80]         ;439
000400  4308              ORRS     r0,r0,r1              ;439
000402  4904              LDR      r1,|L3.1044|
000404  3188              ADDS     r1,r1,#0x88           ;439
000406  6008              STR      r0,[r1,#0]            ;439
                  |L3.1032|
000408  6820              LDR      r0,[r4,#0]            ;444
00040a  f0006080          AND      r0,r0,#0x4000000      ;444
00040e  f1b06f80          CMP      r0,#0x4000000         ;444
000412  e005              B        |L3.1056|
                  |L3.1044|
                          DCD      0x40023808
                  |L3.1048|
                          DCD      0x40007000
                  |L3.1052|
                          DCD      0x0ffffcff
                  |L3.1056|
000420  d108              BNE      |L3.1076|
000422  48fe              LDR      r0,|L3.2076|
000424  6800              LDR      r0,[r0,#0]            ;450
000426  f0205000          BIC      r0,r0,#0x20000000     ;450
00042a  f8d41084          LDR      r1,[r4,#0x84]         ;450
00042e  4308              ORRS     r0,r0,r1              ;450
000430  49fa              LDR      r1,|L3.2076|
000432  6008              STR      r0,[r1,#0]            ;450
                  |L3.1076|
000434  6820              LDR      r0,[r4,#0]            ;454
000436  f0006000          AND      r0,r0,#0x8000000      ;454
00043a  f1b06f00          CMP      r0,#0x8000000         ;454
00043e  d10a              BNE      |L3.1110|
000440  48f6              LDR      r0,|L3.2076|
000442  1f00              SUBS     r0,r0,#4              ;460
000444  6800              LDR      r0,[r0,#0]            ;460
000446  f0207000          BIC      r0,r0,#0x2000000      ;460
00044a  f8d41088          LDR      r1,[r4,#0x88]         ;460
00044e  4308              ORRS     r0,r0,r1              ;460
000450  49f2              LDR      r1,|L3.2076|
000452  1f09              SUBS     r1,r1,#4              ;460
000454  6008              STR      r0,[r1,#0]            ;460
                  |L3.1110|
000456  6820              LDR      r0,[r4,#0]            ;464
000458  f0005080          AND      r0,r0,#0x10000000     ;464
00045c  f1b05f80          CMP      r0,#0x10000000        ;464
000460  d10a              BNE      |L3.1144|
000462  48ee              LDR      r0,|L3.2076|
000464  1f00              SUBS     r0,r0,#4              ;470
000466  6800              LDR      r0,[r0,#0]            ;470
000468  f0206080          BIC      r0,r0,#0x4000000      ;470
00046c  f8d4108c          LDR      r1,[r4,#0x8c]         ;470
000470  4308              ORRS     r0,r0,r1              ;470
000472  49ea              LDR      r1,|L3.2076|
000474  1f09              SUBS     r1,r1,#4              ;470
000476  6008              STR      r0,[r1,#0]            ;470
                  |L3.1144|
000478  f1b80f01          CMP      r8,#1                 ;476
00047c  d003              BEQ      |L3.1158|
00047e  6820              LDR      r0,[r4,#0]            ;476
000480  f1b07f00          CMP      r0,#0x2000000         ;476
000484  d17d              BNE      |L3.1410|
                  |L3.1158|
000486  48e5              LDR      r0,|L3.2076|
000488  3890              SUBS     r0,r0,#0x90           ;479
00048a  6800              LDR      r0,[r0,#0]            ;479
00048c  f0206080          BIC      r0,r0,#0x4000000      ;479
000490  49e2              LDR      r1,|L3.2076|
000492  3990              SUBS     r1,r1,#0x90           ;479
000494  6008              STR      r0,[r1,#0]            ;479
000496  f7fffffe          BL       HAL_GetTick
00049a  4606              MOV      r6,r0                 ;482
00049c  e006              B        |L3.1196|
                  |L3.1182|
00049e  f7fffffe          BL       HAL_GetTick
0004a2  1b80              SUBS     r0,r0,r6              ;487
0004a4  2864              CMP      r0,#0x64              ;487
0004a6  d901              BLS      |L3.1196|
0004a8  2003              MOVS     r0,#3                 ;490
                  |L3.1194|
0004aa  e628              B        |L3.254|
                  |L3.1196|
0004ac  48db              LDR      r0,|L3.2076|
0004ae  3890              SUBS     r0,r0,#0x90           ;485
0004b0  6800              LDR      r0,[r0,#0]            ;485
0004b2  f3c060c0          UBFX     r0,r0,#27,#1          ;485
0004b6  2800              CMP      r0,#0                 ;485
0004b8  d1f1              BNE      |L3.1182|
0004ba  7820              LDRB     r0,[r4,#0]            ;498
0004bc  f0000001          AND      r0,r0,#1              ;498
0004c0  b3f0              CBZ      r0,|L3.1344|
0004c2  6b60              LDR      r0,[r4,#0x34]         ;498
0004c4  bbe0              CBNZ     r0,|L3.1344|
0004c6  48d5              LDR      r0,|L3.2076|
0004c8  380c              SUBS     r0,r0,#0xc            ;504
0004ca  6800              LDR      r0,[r0,#0]            ;504
0004cc  f4003040          AND      r0,r0,#0x30000        ;504
0004d0  f44f3140          MOV      r1,#0x30000           ;504
0004d4  fa91f1a1          RBIT     r1,r1                 ;504
0004d8  fab1f181          CLZ      r1,r1                 ;504
0004dc  fa20f501          LSR      r5,r0,r1              ;504
0004e0  48ce              LDR      r0,|L3.2076|
0004e2  380c              SUBS     r0,r0,#0xc            ;505
0004e4  6800              LDR      r0,[r0,#0]            ;505
0004e6  f0006070          AND      r0,r0,#0xf000000      ;505
0004ea  f04f6170          MOV      r1,#0xf000000         ;505
0004ee  fa91f1a1          RBIT     r1,r1                 ;505
0004f2  fab1f181          CLZ      r1,r1                 ;505
0004f6  fa20f701          LSR      r7,r0,r1              ;505
0004fa  f64771c0          MOV      r1,#0x7fc0            ;509
0004fe  fa91f1a1          RBIT     r1,r1                 ;509
000502  fab1f181          CLZ      r1,r1                 ;509
000506  6860              LDR      r0,[r4,#4]            ;509
000508  4088              LSLS     r0,r0,r1              ;509
00050a  f44f3140          MOV      r1,#0x30000           ;509
00050e  fa91f1a1          RBIT     r1,r1                 ;509
000512  fab1f181          CLZ      r1,r1                 ;509
000516  fa05f101          LSL      r1,r5,r1              ;509
00051a  4308              ORRS     r0,r0,r1              ;509
00051c  f04f6170          MOV      r1,#0xf000000         ;509
000520  fa91f1a1          RBIT     r1,r1                 ;509
000524  fab1f181          CLZ      r1,r1                 ;509
000528  fa07f101          LSL      r1,r7,r1              ;509
00052c  4308              ORRS     r0,r0,r1              ;509
00052e  f04f42e0          MOV      r2,#0x70000000        ;509
000532  fa92f2a2          RBIT     r2,r2                 ;509
000536  fab2f282          CLZ      r2,r2                 ;509
00053a  68a1              LDR      r1,[r4,#8]            ;509
00053c  4091              LSLS     r1,r1,r2              ;509
00053e  e000              B        |L3.1346|
                  |L3.1344|
000540  e003              B        |L3.1354|
                  |L3.1346|
000542  4308              ORRS     r0,r0,r1              ;509
000544  49b5              LDR      r1,|L3.2076|
000546  390c              SUBS     r1,r1,#0xc            ;509
000548  6008              STR      r0,[r1,#0]            ;509
                  |L3.1354|
00054a  6820              LDR      r0,[r4,#0]            ;513
00054c  f4002000          AND      r0,r0,#0x80000        ;513
000550  f5b02f00          CMP      r0,#0x80000           ;513
000554  d103              BNE      |L3.1374|
000556  6be0              LDR      r0,[r4,#0x3c]         ;513
000558  f5b01f80          CMP      r0,#0x100000          ;513
00055c  d009              BEQ      |L3.1394|
                  |L3.1374|
00055e  6820              LDR      r0,[r4,#0]            ;514
000560  f4001080          AND      r0,r0,#0x100000       ;514
000564  f5b01f80          CMP      r0,#0x100000          ;514
000568  d150              BNE      |L3.1548|
00056a  6c20              LDR      r0,[r4,#0x40]         ;514
00056c  f5b00f80          CMP      r0,#0x400000          ;514
000570  d14c              BNE      |L3.1548|
                  |L3.1394|
000572  48aa              LDR      r0,|L3.2076|
000574  380c              SUBS     r0,r0,#0xc            ;522
000576  6800              LDR      r0,[r0,#0]            ;522
000578  f4003040          AND      r0,r0,#0x30000        ;522
00057c  f44f3140          MOV      r1,#0x30000           ;522
000580  e000              B        |L3.1412|
                  |L3.1410|
000582  e0cf              B        |L3.1828|
                  |L3.1412|
000584  fa91f1a1          RBIT     r1,r1                 ;522
000588  fab1f181          CLZ      r1,r1                 ;522
00058c  fa20f501          LSR      r5,r0,r1              ;522
000590  48a2              LDR      r0,|L3.2076|
000592  380c              SUBS     r0,r0,#0xc            ;523
000594  6800              LDR      r0,[r0,#0]            ;523
000596  f00040e0          AND      r0,r0,#0x70000000     ;523
00059a  f04f41e0          MOV      r1,#0x70000000        ;523
00059e  fa91f1a1          RBIT     r1,r1                 ;523
0005a2  fab1f181          CLZ      r1,r1                 ;523
0005a6  fa20f701          LSR      r7,r0,r1              ;523
0005aa  f64771c0          MOV      r1,#0x7fc0            ;528
0005ae  fa91f1a1          RBIT     r1,r1                 ;528
0005b2  fab1f181          CLZ      r1,r1                 ;528
0005b6  6860              LDR      r0,[r4,#4]            ;528
0005b8  4088              LSLS     r0,r0,r1              ;528
0005ba  f44f3140          MOV      r1,#0x30000           ;528
0005be  fa91f1a1          RBIT     r1,r1                 ;528
0005c2  fab1f181          CLZ      r1,r1                 ;528
0005c6  fa05f101          LSL      r1,r5,r1              ;528
0005ca  4308              ORRS     r0,r0,r1              ;528
0005cc  f04f6270          MOV      r2,#0xf000000         ;528
0005d0  fa92f2a2          RBIT     r2,r2                 ;528
0005d4  fab2f282          CLZ      r2,r2                 ;528
0005d8  68e1              LDR      r1,[r4,#0xc]          ;528
0005da  4091              LSLS     r1,r1,r2              ;528
0005dc  4308              ORRS     r0,r0,r1              ;528
0005de  f04f41e0          MOV      r1,#0x70000000        ;528
0005e2  fa91f1a1          RBIT     r1,r1                 ;528
0005e6  fab1f181          CLZ      r1,r1                 ;528
0005ea  fa07f101          LSL      r1,r7,r1              ;528
0005ee  4308              ORRS     r0,r0,r1              ;528
0005f0  498a              LDR      r1,|L3.2076|
0005f2  390c              SUBS     r1,r1,#0xc            ;528
0005f4  6008              STR      r0,[r1,#0]            ;528
0005f6  4889              LDR      r0,|L3.2076|
0005f8  1f00              SUBS     r0,r0,#4              ;531
0005fa  6800              LDR      r0,[r0,#0]            ;531
0005fc  f020001f          BIC      r0,r0,#0x1f           ;531
000600  6a61              LDR      r1,[r4,#0x24]         ;531
000602  1e49              SUBS     r1,r1,#1              ;531
000604  4308              ORRS     r0,r0,r1              ;531
000606  4985              LDR      r1,|L3.2076|
000608  1f09              SUBS     r1,r1,#4              ;531
00060a  6008              STR      r0,[r1,#0]            ;531
                  |L3.1548|
00060c  6820              LDR      r0,[r4,#0]            ;535
00060e  f0007080          AND      r0,r0,#0x1000000      ;535
000612  f1b07f80          CMP      r0,#0x1000000         ;535
000616  d13f              BNE      |L3.1688|
000618  4880              LDR      r0,|L3.2076|
00061a  380c              SUBS     r0,r0,#0xc            ;541
00061c  6800              LDR      r0,[r0,#0]            ;541
00061e  f0006070          AND      r0,r0,#0xf000000      ;541
000622  f04f6170          MOV      r1,#0xf000000         ;541
000626  fa91f1a1          RBIT     r1,r1                 ;541
00062a  fab1f181          CLZ      r1,r1                 ;541
00062e  fa20f501          LSR      r5,r0,r1              ;541
000632  487a              LDR      r0,|L3.2076|
000634  380c              SUBS     r0,r0,#0xc            ;542
000636  6800              LDR      r0,[r0,#0]            ;542
000638  f00040e0          AND      r0,r0,#0x70000000     ;542
00063c  f04f41e0          MOV      r1,#0x70000000        ;542
000640  fa91f1a1          RBIT     r1,r1                 ;542
000644  fab1f181          CLZ      r1,r1                 ;542
000648  fa20f701          LSR      r7,r0,r1              ;542
00064c  f64771c0          MOV      r1,#0x7fc0            ;546
000650  fa91f1a1          RBIT     r1,r1                 ;546
000654  fab1f181          CLZ      r1,r1                 ;546
000658  6860              LDR      r0,[r4,#4]            ;546
00065a  4088              LSLS     r0,r0,r1              ;546
00065c  f44f3240          MOV      r2,#0x30000           ;546
000660  fa92f2a2          RBIT     r2,r2                 ;546
000664  fab2f282          CLZ      r2,r2                 ;546
000668  6921              LDR      r1,[r4,#0x10]         ;546
00066a  4091              LSLS     r1,r1,r2              ;546
00066c  4308              ORRS     r0,r0,r1              ;546
00066e  f04f6170          MOV      r1,#0xf000000         ;546
000672  fa91f1a1          RBIT     r1,r1                 ;546
000676  fab1f181          CLZ      r1,r1                 ;546
00067a  fa05f101          LSL      r1,r5,r1              ;546
00067e  4308              ORRS     r0,r0,r1              ;546
000680  f04f41e0          MOV      r1,#0x70000000        ;546
000684  fa91f1a1          RBIT     r1,r1                 ;546
000688  fab1f181          CLZ      r1,r1                 ;546
00068c  fa07f101          LSL      r1,r7,r1              ;546
000690  4308              ORRS     r0,r0,r1              ;546
000692  4962              LDR      r1,|L3.2076|
000694  390c              SUBS     r1,r1,#0xc            ;546
000696  6008              STR      r0,[r1,#0]            ;546
                  |L3.1688|
000698  6820              LDR      r0,[r4,#0]            ;550
00069a  f0007000          AND      r0,r0,#0x2000000      ;550
00069e  f1b07f00          CMP      r0,#0x2000000         ;550
0006a2  d125              BNE      |L3.1776|
0006a4  f64771c0          MOV      r1,#0x7fc0            ;560
0006a8  fa91f1a1          RBIT     r1,r1                 ;560
0006ac  fab1f181          CLZ      r1,r1                 ;560
0006b0  6860              LDR      r0,[r4,#4]            ;560
0006b2  4088              LSLS     r0,r0,r1              ;560
0006b4  f44f3240          MOV      r2,#0x30000           ;560
0006b8  fa92f2a2          RBIT     r2,r2                 ;560
0006bc  fab2f282          CLZ      r2,r2                 ;560
0006c0  6921              LDR      r1,[r4,#0x10]         ;560
0006c2  4091              LSLS     r1,r1,r2              ;560
0006c4  4308              ORRS     r0,r0,r1              ;560
0006c6  f04f6270          MOV      r2,#0xf000000         ;560
0006ca  fa92f2a2          RBIT     r2,r2                 ;560
0006ce  fab2f282          CLZ      r2,r2                 ;560
0006d2  68e1              LDR      r1,[r4,#0xc]          ;560
0006d4  4091              LSLS     r1,r1,r2              ;560
0006d6  4308              ORRS     r0,r0,r1              ;560
0006d8  f04f42e0          MOV      r2,#0x70000000        ;560
0006dc  fa92f2a2          RBIT     r2,r2                 ;560
0006e0  fab2f282          CLZ      r2,r2                 ;560
0006e4  68a1              LDR      r1,[r4,#8]            ;560
0006e6  4091              LSLS     r1,r1,r2              ;560
0006e8  4308              ORRS     r0,r0,r1              ;560
0006ea  494c              LDR      r1,|L3.2076|
0006ec  390c              SUBS     r1,r1,#0xc            ;560
0006ee  6008              STR      r0,[r1,#0]            ;560
                  |L3.1776|
0006f0  484a              LDR      r0,|L3.2076|
0006f2  3890              SUBS     r0,r0,#0x90           ;564
0006f4  6800              LDR      r0,[r0,#0]            ;564
0006f6  f0406080          ORR      r0,r0,#0x4000000      ;564
0006fa  4948              LDR      r1,|L3.2076|
0006fc  3990              SUBS     r1,r1,#0x90           ;564
0006fe  6008              STR      r0,[r1,#0]            ;564
000700  f7fffffe          BL       HAL_GetTick
000704  4606              MOV      r6,r0                 ;567
000706  e006              B        |L3.1814|
                  |L3.1800|
000708  f7fffffe          BL       HAL_GetTick
00070c  1b80              SUBS     r0,r0,r6              ;572
00070e  2864              CMP      r0,#0x64              ;572
000710  d901              BLS      |L3.1814|
000712  2003              MOVS     r0,#3                 ;575
000714  e4f3              B        |L3.254|
                  |L3.1814|
000716  4841              LDR      r0,|L3.2076|
000718  3890              SUBS     r0,r0,#0x90           ;570
00071a  6800              LDR      r0,[r0,#0]            ;570
00071c  f3c060c0          UBFX     r0,r0,#27,#1          ;570
000720  2800              CMP      r0,#0                 ;570
000722  d0f1              BEQ      |L3.1800|
                  |L3.1828|
000724  f1b90f01          CMP      r9,#1                 ;582
000728  d169              BNE      |L3.2046|
00072a  483c              LDR      r0,|L3.2076|
00072c  3890              SUBS     r0,r0,#0x90           ;585
00072e  6800              LDR      r0,[r0,#0]            ;585
000730  f0205080          BIC      r0,r0,#0x10000000     ;585
000734  4939              LDR      r1,|L3.2076|
000736  3990              SUBS     r1,r1,#0x90           ;585
000738  6008              STR      r0,[r1,#0]            ;585
00073a  f7fffffe          BL       HAL_GetTick
00073e  4606              MOV      r6,r0                 ;588
000740  e006              B        |L3.1872|
                  |L3.1858|
000742  f7fffffe          BL       HAL_GetTick
000746  1b80              SUBS     r0,r0,r6              ;593
000748  2864              CMP      r0,#0x64              ;593
00074a  d901              BLS      |L3.1872|
00074c  2003              MOVS     r0,#3                 ;596
00074e  e4d6              B        |L3.254|
                  |L3.1872|
000750  4832              LDR      r0,|L3.2076|
000752  3890              SUBS     r0,r0,#0x90           ;591
000754  6800              LDR      r0,[r0,#0]            ;591
000756  f3c07040          UBFX     r0,r0,#29,#1          ;591
00075a  2800              CMP      r0,#0                 ;591
00075c  d1f1              BNE      |L3.1858|
00075e  6820              LDR      r0,[r4,#0]            ;604
000760  f4002000          AND      r0,r0,#0x80000        ;604
000764  f5b02f00          CMP      r0,#0x80000           ;604
000768  d101              BNE      |L3.1902|
00076a  6be0              LDR      r0,[r4,#0x3c]         ;604
00076c  b138              CBZ      r0,|L3.1918|
                  |L3.1902|
00076e  6820              LDR      r0,[r4,#0]            ;605
000770  f4001080          AND      r0,r0,#0x100000       ;605
000774  f5b01f80          CMP      r0,#0x100000          ;605
000778  d14f              BNE      |L3.2074|
00077a  6c20              LDR      r0,[r4,#0x40]         ;605
00077c  bbf0              CBNZ     r0,|L3.2044|
                  |L3.1918|
00077e  4827              LDR      r0,|L3.2076|
000780  3808              SUBS     r0,r0,#8              ;613
000782  6800              LDR      r0,[r0,#0]            ;613
000784  f4003040          AND      r0,r0,#0x30000        ;613
000788  f44f3140          MOV      r1,#0x30000           ;613
00078c  fa91f1a1          RBIT     r1,r1                 ;613
000790  fab1f181          CLZ      r1,r1                 ;613
000794  fa20f501          LSR      r5,r0,r1              ;613
000798  4820              LDR      r0,|L3.2076|
00079a  3808              SUBS     r0,r0,#8              ;614
00079c  6800              LDR      r0,[r0,#0]            ;614
00079e  f00040e0          AND      r0,r0,#0x70000000     ;614
0007a2  f04f41e0          MOV      r1,#0x70000000        ;614
0007a6  fa91f1a1          RBIT     r1,r1                 ;614
0007aa  fab1f181          CLZ      r1,r1                 ;614
0007ae  fa20f701          LSR      r7,r0,r1              ;614
0007b2  f64771c0          MOV      r1,#0x7fc0            ;618
0007b6  fa91f1a1          RBIT     r1,r1                 ;618
0007ba  fab1f181          CLZ      r1,r1                 ;618
0007be  6960              LDR      r0,[r4,#0x14]         ;618
0007c0  4088              LSLS     r0,r0,r1              ;618
0007c2  f44f3140          MOV      r1,#0x30000           ;618
0007c6  fa91f1a1          RBIT     r1,r1                 ;618
0007ca  fab1f181          CLZ      r1,r1                 ;618
0007ce  fa05f101          LSL      r1,r5,r1              ;618
0007d2  4308              ORRS     r0,r0,r1              ;618
0007d4  f04f6270          MOV      r2,#0xf000000         ;618
0007d8  fa92f2a2          RBIT     r2,r2                 ;618
0007dc  fab2f282          CLZ      r2,r2                 ;618
0007e0  69a1              LDR      r1,[r4,#0x18]         ;618
0007e2  4091              LSLS     r1,r1,r2              ;618
0007e4  4308              ORRS     r0,r0,r1              ;618
0007e6  f04f41e0          MOV      r1,#0x70000000        ;618
0007ea  fa91f1a1          RBIT     r1,r1                 ;618
0007ee  fab1f181          CLZ      r1,r1                 ;618
0007f2  fa07f101          LSL      r1,r7,r1              ;618
0007f6  4308              ORRS     r0,r0,r1              ;618
0007f8  4908              LDR      r1,|L3.2076|
0007fa  e001              B        |L3.2048|
                  |L3.2044|
0007fc  e00d              B        |L3.2074|
                  |L3.2046|
0007fe  e0bb              B        |L3.2424|
                  |L3.2048|
000800  3908              SUBS     r1,r1,#8              ;618
000802  6008              STR      r0,[r1,#0]            ;618
000804  1d08              ADDS     r0,r1,#4              ;621
000806  6800              LDR      r0,[r0,#0]            ;621
000808  f42051f8          BIC      r1,r0,#0x1f00         ;621
00080c  6aa0              LDR      r0,[r4,#0x28]         ;621
00080e  1e40              SUBS     r0,r0,#1              ;621
000810  ea412000          ORR      r0,r1,r0,LSL #8       ;621
000814  4901              LDR      r1,|L3.2076|
000816  1f09              SUBS     r1,r1,#4              ;621
000818  6008              STR      r0,[r1,#0]            ;621
                  |L3.2074|
00081a  e001              B        |L3.2080|
                  |L3.2076|
                          DCD      0x40023890
                  |L3.2080|
000820  6820              LDR      r0,[r4,#0]            ;626
000822  f4001000          AND      r0,r0,#0x200000       ;626
000826  f5b01f00          CMP      r0,#0x200000          ;626
00082a  d140              BNE      |L3.2222|
00082c  6fe0              LDR      r0,[r4,#0x7c]         ;626
00082e  f1b06f00          CMP      r0,#0x8000000         ;626
000832  d13c              BNE      |L3.2222|
000834  4851              LDR      r0,|L3.2428|
000836  6800              LDR      r0,[r0,#0]            ;631
000838  f0006070          AND      r0,r0,#0xf000000      ;631
00083c  f04f6170          MOV      r1,#0xf000000         ;631
000840  fa91f1a1          RBIT     r1,r1                 ;631
000844  fab1f181          CLZ      r1,r1                 ;631
000848  fa20f501          LSR      r5,r0,r1              ;631
00084c  484b              LDR      r0,|L3.2428|
00084e  6800              LDR      r0,[r0,#0]            ;632
000850  f00040e0          AND      r0,r0,#0x70000000     ;632
000854  f04f41e0          MOV      r1,#0x70000000        ;632
000858  fa91f1a1          RBIT     r1,r1                 ;632
00085c  fab1f181          CLZ      r1,r1                 ;632
000860  fa20f701          LSR      r7,r0,r1              ;632
000864  f64771c0          MOV      r1,#0x7fc0            ;637
000868  fa91f1a1          RBIT     r1,r1                 ;637
00086c  fab1f181          CLZ      r1,r1                 ;637
000870  6960              LDR      r0,[r4,#0x14]         ;637
000872  4088              LSLS     r0,r0,r1              ;637
000874  f44f3240          MOV      r2,#0x30000           ;637
000878  fa92f2a2          RBIT     r2,r2                 ;637
00087c  fab2f282          CLZ      r2,r2                 ;637
000880  6a21              LDR      r1,[r4,#0x20]         ;637
000882  4091              LSLS     r1,r1,r2              ;637
000884  4308              ORRS     r0,r0,r1              ;637
000886  f04f6170          MOV      r1,#0xf000000         ;637
00088a  fa91f1a1          RBIT     r1,r1                 ;637
00088e  fab1f181          CLZ      r1,r1                 ;637
000892  fa05f101          LSL      r1,r5,r1              ;637
000896  4308              ORRS     r0,r0,r1              ;637
000898  f04f41e0          MOV      r1,#0x70000000        ;637
00089c  fa91f1a1          RBIT     r1,r1                 ;637
0008a0  fab1f181          CLZ      r1,r1                 ;637
0008a4  fa07f101          LSL      r1,r7,r1              ;637
0008a8  4308              ORRS     r0,r0,r1              ;637
0008aa  4934              LDR      r1,|L3.2428|
0008ac  6008              STR      r0,[r1,#0]            ;637
                  |L3.2222|
0008ae  7820              LDRB     r0,[r4,#0]            ;642
0008b0  f0000008          AND      r0,r0,#8              ;642
0008b4  2808              CMP      r0,#8                 ;642
0008b6  d145              BNE      |L3.2372|
0008b8  4830              LDR      r0,|L3.2428|
0008ba  6800              LDR      r0,[r0,#0]            ;648
0008bc  f0006070          AND      r0,r0,#0xf000000      ;648
0008c0  f04f6170          MOV      r1,#0xf000000         ;648
0008c4  fa91f1a1          RBIT     r1,r1                 ;648
0008c8  fab1f181          CLZ      r1,r1                 ;648
0008cc  fa20f501          LSR      r5,r0,r1              ;648
0008d0  482a              LDR      r0,|L3.2428|
0008d2  6800              LDR      r0,[r0,#0]            ;649
0008d4  f4003040          AND      r0,r0,#0x30000        ;649
0008d8  f44f3140          MOV      r1,#0x30000           ;649
0008dc  fa91f1a1          RBIT     r1,r1                 ;649
0008e0  fab1f181          CLZ      r1,r1                 ;649
0008e4  fa20f701          LSR      r7,r0,r1              ;649
0008e8  f64771c0          MOV      r1,#0x7fc0            ;654
0008ec  fa91f1a1          RBIT     r1,r1                 ;654
0008f0  fab1f181          CLZ      r1,r1                 ;654
0008f4  6960              LDR      r0,[r4,#0x14]         ;654
0008f6  4088              LSLS     r0,r0,r1              ;654
0008f8  f44f3140          MOV      r1,#0x30000           ;654
0008fc  fa91f1a1          RBIT     r1,r1                 ;654
000900  fab1f181          CLZ      r1,r1                 ;654
000904  fa07f101          LSL      r1,r7,r1              ;654
000908  4308              ORRS     r0,r0,r1              ;654
00090a  f04f6170          MOV      r1,#0xf000000         ;654
00090e  fa91f1a1          RBIT     r1,r1                 ;654
000912  fab1f181          CLZ      r1,r1                 ;654
000916  fa05f101          LSL      r1,r5,r1              ;654
00091a  4308              ORRS     r0,r0,r1              ;654
00091c  f04f42e0          MOV      r2,#0x70000000        ;654
000920  fa92f2a2          RBIT     r2,r2                 ;654
000924  fab2f282          CLZ      r2,r2                 ;654
000928  69e1              LDR      r1,[r4,#0x1c]         ;654
00092a  4091              LSLS     r1,r1,r2              ;654
00092c  4308              ORRS     r0,r0,r1              ;654
00092e  4913              LDR      r1,|L3.2428|
000930  6008              STR      r0,[r1,#0]            ;654
000932  1d08              ADDS     r0,r1,#4              ;657
000934  6800              LDR      r0,[r0,#0]            ;657
000936  f4203040          BIC      r0,r0,#0x30000        ;657
00093a  6ae1              LDR      r1,[r4,#0x2c]         ;657
00093c  4308              ORRS     r0,r0,r1              ;657
00093e  490f              LDR      r1,|L3.2428|
000940  1d09              ADDS     r1,r1,#4              ;657
000942  6008              STR      r0,[r1,#0]            ;657
                  |L3.2372|
000944  480d              LDR      r0,|L3.2428|
000946  3888              SUBS     r0,r0,#0x88           ;662
000948  6800              LDR      r0,[r0,#0]            ;662
00094a  f0405080          ORR      r0,r0,#0x10000000     ;662
00094e  490b              LDR      r1,|L3.2428|
000950  3988              SUBS     r1,r1,#0x88           ;662
000952  6008              STR      r0,[r1,#0]            ;662
000954  f7fffffe          BL       HAL_GetTick
000958  4606              MOV      r6,r0                 ;665
00095a  e006              B        |L3.2410|
                  |L3.2396|
00095c  f7fffffe          BL       HAL_GetTick
000960  1b80              SUBS     r0,r0,r6              ;670
000962  2864              CMP      r0,#0x64              ;670
000964  d901              BLS      |L3.2410|
000966  2003              MOVS     r0,#3                 ;673
000968  e59f              B        |L3.1194|
                  |L3.2410|
00096a  4804              LDR      r0,|L3.2428|
00096c  3888              SUBS     r0,r0,#0x88           ;668
00096e  6800              LDR      r0,[r0,#0]            ;668
000970  f3c07040          UBFX     r0,r0,#29,#1          ;668
000974  2800              CMP      r0,#0                 ;668
000976  d0f1              BEQ      |L3.2396|
                  |L3.2424|
000978  2000              MOVS     r0,#0                 ;677
00097a  e596              B        |L3.1194|
;;;679    
                          ENDP

                  |L3.2428|
                          DCD      0x40023888

                          AREA ||i.HAL_RCC_OscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_OscConfig PROC
;;;1020     */
;;;1021   HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  b538              PUSH     {r3-r5,lr}
;;;1022   {
000002  4604              MOV      r4,r0
;;;1023     uint32_t tickstart = 0;  
000004  2500              MOVS     r5,#0
;;;1024    
;;;1025     /* Check the parameters */
;;;1026     assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
;;;1027     
;;;1028     /*------------------------------- HSE Configuration ------------------------*/ 
;;;1029     if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
000006  7820              LDRB     r0,[r4,#0]
000008  f0000001          AND      r0,r0,#1
00000c  2800              CMP      r0,#0
00000e  d071              BEQ      |L4.244|
;;;1030     {
;;;1031       /* Check the parameters */
;;;1032       assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
;;;1033       /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
;;;1034       if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
000010  48fe              LDR      r0,|L4.1036|
000012  6800              LDR      r0,[r0,#0]
000014  f000000c          AND      r0,r0,#0xc
000018  2804              CMP      r0,#4
00001a  d00d              BEQ      |L4.56|
;;;1035          || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
00001c  48fb              LDR      r0,|L4.1036|
00001e  6800              LDR      r0,[r0,#0]
000020  f000000c          AND      r0,r0,#0xc
000024  2808              CMP      r0,#8
000026  d113              BNE      |L4.80|
000028  48f8              LDR      r0,|L4.1036|
00002a  1f00              SUBS     r0,r0,#4
00002c  6800              LDR      r0,[r0,#0]
00002e  f4000080          AND      r0,r0,#0x400000
000032  f5b00f80          CMP      r0,#0x400000
000036  d10b              BNE      |L4.80|
                  |L4.56|
;;;1036       {
;;;1037   	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
000038  48f4              LDR      r0,|L4.1036|
00003a  3808              SUBS     r0,r0,#8
00003c  6800              LDR      r0,[r0,#0]
00003e  f3c04040          UBFX     r0,r0,#17,#1
000042  2800              CMP      r0,#0
000044  d069              BEQ      |L4.282|
000046  6860              LDR      r0,[r4,#4]
000048  2800              CMP      r0,#0
00004a  d166              BNE      |L4.282|
;;;1038         {
;;;1039           return HAL_ERROR;
00004c  2001              MOVS     r0,#1
                  |L4.78|
;;;1040         }
;;;1041       }
;;;1042       else
;;;1043       {
;;;1044         /* Set the new HSE configuration ---------------------------------------*/
;;;1045         __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
;;;1046         
;;;1047         /* Check the HSE State */
;;;1048         if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
;;;1049         {
;;;1050           /* Get Start Tick*/
;;;1051           tickstart = HAL_GetTick();
;;;1052           
;;;1053           /* Wait till HSE is ready */  
;;;1054           while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;1055           {
;;;1056             if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
;;;1057             {
;;;1058               return HAL_TIMEOUT;
;;;1059             }
;;;1060           }
;;;1061         }
;;;1062         else
;;;1063         {
;;;1064           /* Get Start Tick*/
;;;1065           tickstart = HAL_GetTick();
;;;1066           
;;;1067           /* Wait till HSE is bypassed or disabled */
;;;1068           while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
;;;1069           {
;;;1070              if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
;;;1071             {
;;;1072               return HAL_TIMEOUT;
;;;1073             }
;;;1074           }
;;;1075         }
;;;1076       }
;;;1077     }
;;;1078     /*----------------------------- HSI Configuration --------------------------*/ 
;;;1079     if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
;;;1080     {
;;;1081       /* Check the parameters */
;;;1082       assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
;;;1083       assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
;;;1084       
;;;1085       /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
;;;1086       if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
;;;1087          || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
;;;1088       {
;;;1089         /* When HSI is used as system clock it will not disabled */
;;;1090         if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
;;;1091         {
;;;1092           return HAL_ERROR;
;;;1093         }
;;;1094         /* Otherwise, just the calibration is allowed */
;;;1095         else
;;;1096         {
;;;1097           /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;1098           __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;1099         }
;;;1100       }
;;;1101       else
;;;1102       {
;;;1103         /* Check the HSI State */
;;;1104         if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
;;;1105         {
;;;1106           /* Enable the Internal High Speed oscillator (HSI). */
;;;1107           __HAL_RCC_HSI_ENABLE();
;;;1108   
;;;1109           /* Get Start Tick*/
;;;1110           tickstart = HAL_GetTick();
;;;1111   
;;;1112           /* Wait till HSI is ready */  
;;;1113           while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;1114           {
;;;1115             if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
;;;1116             {
;;;1117               return HAL_TIMEOUT;
;;;1118             }
;;;1119           }
;;;1120                   
;;;1121           /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;1122           __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;1123         }
;;;1124         else
;;;1125         {
;;;1126           /* Disable the Internal High Speed oscillator (HSI). */
;;;1127           __HAL_RCC_HSI_DISABLE();
;;;1128   
;;;1129           /* Get Start Tick*/
;;;1130           tickstart = HAL_GetTick();
;;;1131         
;;;1132           /* Wait till HSI is ready */  
;;;1133           while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
;;;1134           {
;;;1135             if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
;;;1136             {
;;;1137               return HAL_TIMEOUT;
;;;1138             } 
;;;1139           } 
;;;1140         }
;;;1141       }
;;;1142     }
;;;1143     /*------------------------------ LSI Configuration -------------------------*/
;;;1144     if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
;;;1145     {
;;;1146       /* Check the parameters */
;;;1147       assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
;;;1148   
;;;1149       /* Check the LSI State */
;;;1150       if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
;;;1151       {
;;;1152         /* Enable the Internal Low Speed oscillator (LSI). */
;;;1153         __HAL_RCC_LSI_ENABLE();
;;;1154         
;;;1155         /* Get Start Tick*/
;;;1156         tickstart = HAL_GetTick();
;;;1157         
;;;1158         /* Wait till LSI is ready */
;;;1159         while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
;;;1160         {
;;;1161           if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;1162           {
;;;1163             return HAL_TIMEOUT;
;;;1164           }
;;;1165         }
;;;1166       }
;;;1167       else
;;;1168       {
;;;1169         /* Disable the Internal Low Speed oscillator (LSI). */
;;;1170         __HAL_RCC_LSI_DISABLE();
;;;1171         
;;;1172         /* Get Start Tick*/
;;;1173         tickstart = HAL_GetTick();
;;;1174         
;;;1175         /* Wait till LSI is ready */  
;;;1176         while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
;;;1177         {
;;;1178           if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;1179           {
;;;1180             return HAL_TIMEOUT;
;;;1181           }
;;;1182         }
;;;1183       }
;;;1184     }
;;;1185     /*------------------------------ LSE Configuration -------------------------*/ 
;;;1186     if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
;;;1187     {
;;;1188       /* Check the parameters */
;;;1189       assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
;;;1190       
;;;1191       /* Enable Power Clock*/
;;;1192       __HAL_RCC_PWR_CLK_ENABLE();
;;;1193       
;;;1194       /* Enable write access to Backup domain */
;;;1195       PWR->CR1 |= PWR_CR1_DBP;
;;;1196       
;;;1197       /* Wait for Backup domain Write protection disable */
;;;1198       tickstart = HAL_GetTick();
;;;1199       
;;;1200       while((PWR->CR1 & PWR_CR1_DBP) == RESET)
;;;1201       {
;;;1202         if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
;;;1203         {
;;;1204           return HAL_TIMEOUT;
;;;1205         }      
;;;1206       }
;;;1207   
;;;1208       /* Set the new LSE configuration -----------------------------------------*/
;;;1209       __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
;;;1210       /* Check the LSE State */
;;;1211       if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
;;;1212       {
;;;1213         /* Get Start Tick*/
;;;1214         tickstart = HAL_GetTick();
;;;1215         
;;;1216         /* Wait till LSE is ready */  
;;;1217         while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
;;;1218         {
;;;1219           if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;1220           {
;;;1221             return HAL_TIMEOUT;
;;;1222           }       
;;;1223         }
;;;1224       }
;;;1225       else
;;;1226       {
;;;1227         /* Get Start Tick*/
;;;1228         tickstart = HAL_GetTick();
;;;1229         
;;;1230         /* Wait till LSE is ready */  
;;;1231         while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
;;;1232         {
;;;1233           if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;1234           {
;;;1235             return HAL_TIMEOUT;
;;;1236           }       
;;;1237         }
;;;1238       }
;;;1239     }
;;;1240     /*-------------------------------- PLL Configuration -----------------------*/
;;;1241     /* Check the parameters */
;;;1242     assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
;;;1243     if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
;;;1244     {
;;;1245       /* Check if the PLL is used as system clock or not */
;;;1246       if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
;;;1247       { 
;;;1248         if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
;;;1249         {
;;;1250           /* Check the parameters */
;;;1251           assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
;;;1252           assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
;;;1253           assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
;;;1254           assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
;;;1255           assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
;;;1256           assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
;;;1257           
;;;1258           /* Disable the main PLL. */
;;;1259           __HAL_RCC_PLL_DISABLE();
;;;1260           
;;;1261           /* Get Start Tick*/
;;;1262           tickstart = HAL_GetTick();
;;;1263           
;;;1264           /* Wait till PLL is ready */  
;;;1265           while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
;;;1266           {
;;;1267             if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;1268             {
;;;1269               return HAL_TIMEOUT;
;;;1270             }
;;;1271           }
;;;1272           
;;;1273           /* Configure the main PLL clock source, multiplication and division factors. */
;;;1274           __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
;;;1275                                RCC_OscInitStruct->PLL.PLLM,
;;;1276                                RCC_OscInitStruct->PLL.PLLN,
;;;1277                                RCC_OscInitStruct->PLL.PLLP,
;;;1278                                RCC_OscInitStruct->PLL.PLLQ,
;;;1279                                RCC_OscInitStruct->PLL.PLLR);
;;;1280           
;;;1281           /* Enable the main PLL. */
;;;1282           __HAL_RCC_PLL_ENABLE();
;;;1283   
;;;1284           /* Get Start Tick*/
;;;1285           tickstart = HAL_GetTick();
;;;1286           
;;;1287           /* Wait till PLL is ready */  
;;;1288           while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;1289           {
;;;1290             if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;1291             {
;;;1292               return HAL_TIMEOUT;
;;;1293             } 
;;;1294           }
;;;1295         }
;;;1296         else
;;;1297         {
;;;1298           /* Disable the main PLL. */
;;;1299           __HAL_RCC_PLL_DISABLE();
;;;1300    
;;;1301           /* Get Start Tick*/
;;;1302           tickstart = HAL_GetTick();
;;;1303           
;;;1304           /* Wait till PLL is ready */  
;;;1305           while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
;;;1306           {
;;;1307             if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;1308             {
;;;1309               return HAL_TIMEOUT;
;;;1310             }
;;;1311           }
;;;1312         }
;;;1313       }
;;;1314       else
;;;1315       {
;;;1316         return HAL_ERROR;
;;;1317       }
;;;1318     }
;;;1319     return HAL_OK;
;;;1320   }
00004e  bd38              POP      {r3-r5,pc}
                  |L4.80|
000050  bf00              NOP                            ;1045
000052  6860              LDR      r0,[r4,#4]            ;1045
000054  f5b03f80          CMP      r0,#0x10000           ;1045
000058  d108              BNE      |L4.108|
00005a  48ec              LDR      r0,|L4.1036|
00005c  3808              SUBS     r0,r0,#8              ;1045
00005e  6800              LDR      r0,[r0,#0]            ;1045
000060  f4403080          ORR      r0,r0,#0x10000        ;1045
000064  49e9              LDR      r1,|L4.1036|
000066  3908              SUBS     r1,r1,#8              ;1045
000068  6008              STR      r0,[r1,#0]            ;1045
00006a  e02e              B        |L4.202|
                  |L4.108|
00006c  6860              LDR      r0,[r4,#4]            ;1045
00006e  b968              CBNZ     r0,|L4.140|
000070  48e6              LDR      r0,|L4.1036|
000072  3808              SUBS     r0,r0,#8              ;1045
000074  6800              LDR      r0,[r0,#0]            ;1045
000076  f4203080          BIC      r0,r0,#0x10000        ;1045
00007a  49e4              LDR      r1,|L4.1036|
00007c  3908              SUBS     r1,r1,#8              ;1045
00007e  6008              STR      r0,[r1,#0]            ;1045
000080  4608              MOV      r0,r1                 ;1045
000082  6800              LDR      r0,[r0,#0]            ;1045
000084  f4202080          BIC      r0,r0,#0x40000        ;1045
000088  6008              STR      r0,[r1,#0]            ;1045
00008a  e01e              B        |L4.202|
                  |L4.140|
00008c  6860              LDR      r0,[r4,#4]            ;1045
00008e  f5b02fa0          CMP      r0,#0x50000           ;1045
000092  d10d              BNE      |L4.176|
000094  48dd              LDR      r0,|L4.1036|
000096  3808              SUBS     r0,r0,#8              ;1045
000098  6800              LDR      r0,[r0,#0]            ;1045
00009a  f4402080          ORR      r0,r0,#0x40000        ;1045
00009e  49db              LDR      r1,|L4.1036|
0000a0  3908              SUBS     r1,r1,#8              ;1045
0000a2  6008              STR      r0,[r1,#0]            ;1045
0000a4  4608              MOV      r0,r1                 ;1045
0000a6  6800              LDR      r0,[r0,#0]            ;1045
0000a8  f4403080          ORR      r0,r0,#0x10000        ;1045
0000ac  6008              STR      r0,[r1,#0]            ;1045
0000ae  e00c              B        |L4.202|
                  |L4.176|
0000b0  48d6              LDR      r0,|L4.1036|
0000b2  3808              SUBS     r0,r0,#8              ;1045
0000b4  6800              LDR      r0,[r0,#0]            ;1045
0000b6  f4203080          BIC      r0,r0,#0x10000        ;1045
0000ba  49d4              LDR      r1,|L4.1036|
0000bc  3908              SUBS     r1,r1,#8              ;1045
0000be  6008              STR      r0,[r1,#0]            ;1045
0000c0  4608              MOV      r0,r1                 ;1045
0000c2  6800              LDR      r0,[r0,#0]            ;1045
0000c4  f4202080          BIC      r0,r0,#0x40000        ;1045
0000c8  6008              STR      r0,[r1,#0]            ;1045
                  |L4.202|
0000ca  bf00              NOP                            ;1045
0000cc  6860              LDR      r0,[r4,#4]            ;1048
0000ce  b190              CBZ      r0,|L4.246|
0000d0  f7fffffe          BL       HAL_GetTick
0000d4  4605              MOV      r5,r0                 ;1051
0000d6  e006              B        |L4.230|
                  |L4.216|
0000d8  f7fffffe          BL       HAL_GetTick
0000dc  1b40              SUBS     r0,r0,r5              ;1056
0000de  2864              CMP      r0,#0x64              ;1056
0000e0  d901              BLS      |L4.230|
0000e2  2003              MOVS     r0,#3                 ;1058
0000e4  e7b3              B        |L4.78|
                  |L4.230|
0000e6  48c9              LDR      r0,|L4.1036|
0000e8  3808              SUBS     r0,r0,#8              ;1054
0000ea  6800              LDR      r0,[r0,#0]            ;1054
0000ec  f3c04040          UBFX     r0,r0,#17,#1          ;1054
0000f0  2800              CMP      r0,#0                 ;1054
0000f2  d0f1              BEQ      |L4.216|
                  |L4.244|
0000f4  e011              B        |L4.282|
                  |L4.246|
0000f6  f7fffffe          BL       HAL_GetTick
0000fa  4605              MOV      r5,r0                 ;1065
0000fc  e006              B        |L4.268|
                  |L4.254|
0000fe  f7fffffe          BL       HAL_GetTick
000102  1b40              SUBS     r0,r0,r5              ;1070
000104  2864              CMP      r0,#0x64              ;1070
000106  d901              BLS      |L4.268|
000108  2003              MOVS     r0,#3                 ;1072
00010a  e7a0              B        |L4.78|
                  |L4.268|
00010c  48bf              LDR      r0,|L4.1036|
00010e  3808              SUBS     r0,r0,#8              ;1068
000110  6800              LDR      r0,[r0,#0]            ;1068
000112  f3c04040          UBFX     r0,r0,#17,#1          ;1068
000116  2800              CMP      r0,#0                 ;1068
000118  d1f1              BNE      |L4.254|
                  |L4.282|
00011a  7820              LDRB     r0,[r4,#0]            ;1079
00011c  f0000002          AND      r0,r0,#2              ;1079
000120  2802              CMP      r0,#2                 ;1079
000122  d173              BNE      |L4.524|
000124  48b9              LDR      r0,|L4.1036|
000126  6800              LDR      r0,[r0,#0]            ;1086
000128  f000000c          AND      r0,r0,#0xc            ;1086
00012c  b158              CBZ      r0,|L4.326|
00012e  48b7              LDR      r0,|L4.1036|
000130  6800              LDR      r0,[r0,#0]            ;1087
000132  f000000c          AND      r0,r0,#0xc            ;1087
000136  2808              CMP      r0,#8                 ;1087
000138  d121              BNE      |L4.382|
00013a  48b4              LDR      r0,|L4.1036|
00013c  1f00              SUBS     r0,r0,#4              ;1087
00013e  6800              LDR      r0,[r0,#0]            ;1087
000140  f4000080          AND      r0,r0,#0x400000       ;1087
000144  b9d8              CBNZ     r0,|L4.382|
                  |L4.326|
000146  48b1              LDR      r0,|L4.1036|
000148  3808              SUBS     r0,r0,#8              ;1090
00014a  6800              LDR      r0,[r0,#0]            ;1090
00014c  f3c00040          UBFX     r0,r0,#1,#1           ;1090
000150  b120              CBZ      r0,|L4.348|
000152  68e0              LDR      r0,[r4,#0xc]          ;1090
000154  2801              CMP      r0,#1                 ;1090
000156  d001              BEQ      |L4.348|
000158  2001              MOVS     r0,#1                 ;1092
00015a  e778              B        |L4.78|
                  |L4.348|
00015c  48ab              LDR      r0,|L4.1036|
00015e  3808              SUBS     r0,r0,#8              ;1098
000160  6800              LDR      r0,[r0,#0]            ;1098
000162  f02000f8          BIC      r0,r0,#0xf8           ;1098
000166  22f8              MOVS     r2,#0xf8              ;1098
000168  fa92f2a2          RBIT     r2,r2                 ;1098
00016c  fab2f282          CLZ      r2,r2                 ;1098
000170  6921              LDR      r1,[r4,#0x10]         ;1098
000172  4091              LSLS     r1,r1,r2              ;1098
000174  4308              ORRS     r0,r0,r1              ;1098
000176  49a5              LDR      r1,|L4.1036|
000178  3908              SUBS     r1,r1,#8              ;1098
00017a  6008              STR      r0,[r1,#0]            ;1098
00017c  e046              B        |L4.524|
                  |L4.382|
00017e  68e0              LDR      r0,[r4,#0xc]          ;1104
000180  b350              CBZ      r0,|L4.472|
000182  48a2              LDR      r0,|L4.1036|
000184  3808              SUBS     r0,r0,#8              ;1107
000186  6800              LDR      r0,[r0,#0]            ;1107
000188  f0400001          ORR      r0,r0,#1              ;1107
00018c  499f              LDR      r1,|L4.1036|
00018e  3908              SUBS     r1,r1,#8              ;1107
000190  6008              STR      r0,[r1,#0]            ;1107
000192  f7fffffe          BL       HAL_GetTick
000196  4605              MOV      r5,r0                 ;1110
000198  e006              B        |L4.424|
                  |L4.410|
00019a  f7fffffe          BL       HAL_GetTick
00019e  1b40              SUBS     r0,r0,r5              ;1115
0001a0  2802              CMP      r0,#2                 ;1115
0001a2  d901              BLS      |L4.424|
0001a4  2003              MOVS     r0,#3                 ;1117
0001a6  e752              B        |L4.78|
                  |L4.424|
0001a8  4898              LDR      r0,|L4.1036|
0001aa  3808              SUBS     r0,r0,#8              ;1113
0001ac  6800              LDR      r0,[r0,#0]            ;1113
0001ae  f3c00040          UBFX     r0,r0,#1,#1           ;1113
0001b2  2800              CMP      r0,#0                 ;1113
0001b4  d0f1              BEQ      |L4.410|
0001b6  4895              LDR      r0,|L4.1036|
0001b8  3808              SUBS     r0,r0,#8              ;1122
0001ba  6800              LDR      r0,[r0,#0]            ;1122
0001bc  f02000f8          BIC      r0,r0,#0xf8           ;1122
0001c0  22f8              MOVS     r2,#0xf8              ;1122
0001c2  fa92f2a2          RBIT     r2,r2                 ;1122
0001c6  fab2f282          CLZ      r2,r2                 ;1122
0001ca  6921              LDR      r1,[r4,#0x10]         ;1122
0001cc  4091              LSLS     r1,r1,r2              ;1122
0001ce  4308              ORRS     r0,r0,r1              ;1122
0001d0  498e              LDR      r1,|L4.1036|
0001d2  3908              SUBS     r1,r1,#8              ;1122
0001d4  6008              STR      r0,[r1,#0]            ;1122
0001d6  e019              B        |L4.524|
                  |L4.472|
0001d8  488c              LDR      r0,|L4.1036|
0001da  3808              SUBS     r0,r0,#8              ;1127
0001dc  6800              LDR      r0,[r0,#0]            ;1127
0001de  f0200001          BIC      r0,r0,#1              ;1127
0001e2  498a              LDR      r1,|L4.1036|
0001e4  3908              SUBS     r1,r1,#8              ;1127
0001e6  6008              STR      r0,[r1,#0]            ;1127
0001e8  f7fffffe          BL       HAL_GetTick
0001ec  4605              MOV      r5,r0                 ;1130
0001ee  e006              B        |L4.510|
                  |L4.496|
0001f0  f7fffffe          BL       HAL_GetTick
0001f4  1b40              SUBS     r0,r0,r5              ;1135
0001f6  2802              CMP      r0,#2                 ;1135
0001f8  d901              BLS      |L4.510|
0001fa  2003              MOVS     r0,#3                 ;1137
0001fc  e727              B        |L4.78|
                  |L4.510|
0001fe  4883              LDR      r0,|L4.1036|
000200  3808              SUBS     r0,r0,#8              ;1133
000202  6800              LDR      r0,[r0,#0]            ;1133
000204  f3c00040          UBFX     r0,r0,#1,#1           ;1133
000208  2800              CMP      r0,#0                 ;1133
00020a  d1f1              BNE      |L4.496|
                  |L4.524|
00020c  7820              LDRB     r0,[r4,#0]            ;1144
00020e  f0000008          AND      r0,r0,#8              ;1144
000212  2808              CMP      r0,#8                 ;1144
000214  d136              BNE      |L4.644|
000216  6960              LDR      r0,[r4,#0x14]         ;1150
000218  b1d0              CBZ      r0,|L4.592|
00021a  487c              LDR      r0,|L4.1036|
00021c  306c              ADDS     r0,r0,#0x6c           ;1153
00021e  6800              LDR      r0,[r0,#0]            ;1153
000220  f0400001          ORR      r0,r0,#1              ;1153
000224  4979              LDR      r1,|L4.1036|
000226  316c              ADDS     r1,r1,#0x6c           ;1153
000228  6008              STR      r0,[r1,#0]            ;1153
00022a  f7fffffe          BL       HAL_GetTick
00022e  4605              MOV      r5,r0                 ;1156
000230  e006              B        |L4.576|
                  |L4.562|
000232  f7fffffe          BL       HAL_GetTick
000236  1b40              SUBS     r0,r0,r5              ;1161
000238  2802              CMP      r0,#2                 ;1161
00023a  d901              BLS      |L4.576|
00023c  2003              MOVS     r0,#3                 ;1163
00023e  e706              B        |L4.78|
                  |L4.576|
000240  4872              LDR      r0,|L4.1036|
000242  306c              ADDS     r0,r0,#0x6c           ;1159
000244  6800              LDR      r0,[r0,#0]            ;1159
000246  f3c00040          UBFX     r0,r0,#1,#1           ;1159
00024a  2800              CMP      r0,#0                 ;1159
00024c  d0f1              BEQ      |L4.562|
00024e  e019              B        |L4.644|
                  |L4.592|
000250  486e              LDR      r0,|L4.1036|
000252  306c              ADDS     r0,r0,#0x6c           ;1170
000254  6800              LDR      r0,[r0,#0]            ;1170
000256  f0200001          BIC      r0,r0,#1              ;1170
00025a  496c              LDR      r1,|L4.1036|
00025c  316c              ADDS     r1,r1,#0x6c           ;1170
00025e  6008              STR      r0,[r1,#0]            ;1170
000260  f7fffffe          BL       HAL_GetTick
000264  4605              MOV      r5,r0                 ;1173
000266  e006              B        |L4.630|
                  |L4.616|
000268  f7fffffe          BL       HAL_GetTick
00026c  1b40              SUBS     r0,r0,r5              ;1178
00026e  2802              CMP      r0,#2                 ;1178
000270  d901              BLS      |L4.630|
000272  2003              MOVS     r0,#3                 ;1180
000274  e6eb              B        |L4.78|
                  |L4.630|
000276  4865              LDR      r0,|L4.1036|
000278  306c              ADDS     r0,r0,#0x6c           ;1176
00027a  6800              LDR      r0,[r0,#0]            ;1176
00027c  f3c00040          UBFX     r0,r0,#1,#1           ;1176
000280  2800              CMP      r0,#0                 ;1176
000282  d1f1              BNE      |L4.616|
                  |L4.644|
000284  7820              LDRB     r0,[r4,#0]            ;1186
000286  f0000004          AND      r0,r0,#4              ;1186
00028a  2804              CMP      r0,#4                 ;1186
00028c  d171              BNE      |L4.882|
00028e  bf00              NOP                            ;1192
000290  485e              LDR      r0,|L4.1036|
000292  3038              ADDS     r0,r0,#0x38           ;1192
000294  6800              LDR      r0,[r0,#0]            ;1192
000296  f0405080          ORR      r0,r0,#0x10000000     ;1192
00029a  495c              LDR      r1,|L4.1036|
00029c  3138              ADDS     r1,r1,#0x38           ;1192
00029e  6008              STR      r0,[r1,#0]            ;1192
0002a0  4608              MOV      r0,r1                 ;1192
0002a2  6800              LDR      r0,[r0,#0]            ;1192
0002a4  f0005080          AND      r0,r0,#0x10000000     ;1192
0002a8  9000              STR      r0,[sp,#0]            ;1192
0002aa  bf00              NOP                            ;1192
0002ac  bf00              NOP                            ;1192
0002ae  4858              LDR      r0,|L4.1040|
0002b0  6800              LDR      r0,[r0,#0]            ;1195
0002b2  f4407080          ORR      r0,r0,#0x100          ;1195
0002b6  4956              LDR      r1,|L4.1040|
0002b8  6008              STR      r0,[r1,#0]            ;1195
0002ba  f7fffffe          BL       HAL_GetTick
0002be  4605              MOV      r5,r0                 ;1198
0002c0  e006              B        |L4.720|
                  |L4.706|
0002c2  f7fffffe          BL       HAL_GetTick
0002c6  1b40              SUBS     r0,r0,r5              ;1202
0002c8  2864              CMP      r0,#0x64              ;1202
0002ca  d901              BLS      |L4.720|
0002cc  2003              MOVS     r0,#3                 ;1204
0002ce  e6be              B        |L4.78|
                  |L4.720|
0002d0  484f              LDR      r0,|L4.1040|
0002d2  6800              LDR      r0,[r0,#0]            ;1200
0002d4  f4007080          AND      r0,r0,#0x100          ;1200
0002d8  2800              CMP      r0,#0                 ;1200
0002da  d0f2              BEQ      |L4.706|
0002dc  bf00              NOP                            ;1209
0002de  68a0              LDR      r0,[r4,#8]            ;1209
0002e0  2801              CMP      r0,#1                 ;1209
0002e2  d108              BNE      |L4.758|
0002e4  4849              LDR      r0,|L4.1036|
0002e6  3068              ADDS     r0,r0,#0x68           ;1209
0002e8  6800              LDR      r0,[r0,#0]            ;1209
0002ea  f0400001          ORR      r0,r0,#1              ;1209
0002ee  4947              LDR      r1,|L4.1036|
0002f0  3168              ADDS     r1,r1,#0x68           ;1209
0002f2  6008              STR      r0,[r1,#0]            ;1209
0002f4  e02d              B        |L4.850|
                  |L4.758|
0002f6  68a0              LDR      r0,[r4,#8]            ;1209
0002f8  b968              CBNZ     r0,|L4.790|
0002fa  4844              LDR      r0,|L4.1036|
0002fc  3068              ADDS     r0,r0,#0x68           ;1209
0002fe  6800              LDR      r0,[r0,#0]            ;1209
000300  f0200001          BIC      r0,r0,#1              ;1209
000304  4941              LDR      r1,|L4.1036|
000306  3168              ADDS     r1,r1,#0x68           ;1209
000308  6008              STR      r0,[r1,#0]            ;1209
00030a  4608              MOV      r0,r1                 ;1209
00030c  6800              LDR      r0,[r0,#0]            ;1209
00030e  f0200004          BIC      r0,r0,#4              ;1209
000312  6008              STR      r0,[r1,#0]            ;1209
000314  e01d              B        |L4.850|
                  |L4.790|
000316  68a0              LDR      r0,[r4,#8]            ;1209
000318  2805              CMP      r0,#5                 ;1209
00031a  d10d              BNE      |L4.824|
00031c  483b              LDR      r0,|L4.1036|
00031e  3068              ADDS     r0,r0,#0x68           ;1209
000320  6800              LDR      r0,[r0,#0]            ;1209
000322  f0400004          ORR      r0,r0,#4              ;1209
000326  4939              LDR      r1,|L4.1036|
000328  3168              ADDS     r1,r1,#0x68           ;1209
00032a  6008              STR      r0,[r1,#0]            ;1209
00032c  4608              MOV      r0,r1                 ;1209
00032e  6800              LDR      r0,[r0,#0]            ;1209
000330  f0400001          ORR      r0,r0,#1              ;1209
000334  6008              STR      r0,[r1,#0]            ;1209
000336  e00c              B        |L4.850|
                  |L4.824|
000338  4834              LDR      r0,|L4.1036|
00033a  3068              ADDS     r0,r0,#0x68           ;1209
00033c  6800              LDR      r0,[r0,#0]            ;1209
00033e  f0200001          BIC      r0,r0,#1              ;1209
000342  4932              LDR      r1,|L4.1036|
000344  3168              ADDS     r1,r1,#0x68           ;1209
000346  6008              STR      r0,[r1,#0]            ;1209
000348  4608              MOV      r0,r1                 ;1209
00034a  6800              LDR      r0,[r0,#0]            ;1209
00034c  f0200004          BIC      r0,r0,#4              ;1209
000350  6008              STR      r0,[r1,#0]            ;1209
                  |L4.850|
000352  bf00              NOP                            ;1209
000354  68a0              LDR      r0,[r4,#8]            ;1211
000356  b1a8              CBZ      r0,|L4.900|
000358  f7fffffe          BL       HAL_GetTick
00035c  4605              MOV      r5,r0                 ;1214
00035e  e009              B        |L4.884|
                  |L4.864|
000360  f7fffffe          BL       HAL_GetTick
000364  1b40              SUBS     r0,r0,r5              ;1219
000366  f2413188          MOV      r1,#0x1388            ;1219
00036a  4288              CMP      r0,r1                 ;1219
00036c  d902              BLS      |L4.884|
00036e  2003              MOVS     r0,#3                 ;1221
000370  e66d              B        |L4.78|
                  |L4.882|
000372  e01b              B        |L4.940|
                  |L4.884|
000374  4825              LDR      r0,|L4.1036|
000376  3068              ADDS     r0,r0,#0x68           ;1217
000378  6800              LDR      r0,[r0,#0]            ;1217
00037a  f3c00040          UBFX     r0,r0,#1,#1           ;1217
00037e  2800              CMP      r0,#0                 ;1217
000380  d0ee              BEQ      |L4.864|
000382  e013              B        |L4.940|
                  |L4.900|
000384  f7fffffe          BL       HAL_GetTick
000388  4605              MOV      r5,r0                 ;1228
00038a  e008              B        |L4.926|
                  |L4.908|
00038c  f7fffffe          BL       HAL_GetTick
000390  1b40              SUBS     r0,r0,r5              ;1233
000392  f2413188          MOV      r1,#0x1388            ;1233
000396  4288              CMP      r0,r1                 ;1233
000398  d901              BLS      |L4.926|
00039a  2003              MOVS     r0,#3                 ;1235
00039c  e657              B        |L4.78|
                  |L4.926|
00039e  481b              LDR      r0,|L4.1036|
0003a0  3068              ADDS     r0,r0,#0x68           ;1231
0003a2  6800              LDR      r0,[r0,#0]            ;1231
0003a4  f3c00040          UBFX     r0,r0,#1,#1           ;1231
0003a8  2800              CMP      r0,#0                 ;1231
0003aa  d1ef              BNE      |L4.908|
                  |L4.940|
0003ac  69a0              LDR      r0,[r4,#0x18]         ;1243
0003ae  b388              CBZ      r0,|L4.1044|
0003b0  4816              LDR      r0,|L4.1036|
0003b2  6800              LDR      r0,[r0,#0]            ;1246
0003b4  f000000c          AND      r0,r0,#0xc            ;1246
0003b8  2808              CMP      r0,#8                 ;1246
0003ba  d073              BEQ      |L4.1188|
0003bc  69a0              LDR      r0,[r4,#0x18]         ;1248
0003be  2802              CMP      r0,#2                 ;1248
0003c0  d164              BNE      |L4.1164|
0003c2  4812              LDR      r0,|L4.1036|
0003c4  3808              SUBS     r0,r0,#8              ;1259
0003c6  6800              LDR      r0,[r0,#0]            ;1259
0003c8  f0207080          BIC      r0,r0,#0x1000000      ;1259
0003cc  490f              LDR      r1,|L4.1036|
0003ce  3908              SUBS     r1,r1,#8              ;1259
0003d0  6008              STR      r0,[r1,#0]            ;1259
0003d2  f7fffffe          BL       HAL_GetTick
0003d6  4605              MOV      r5,r0                 ;1262
0003d8  e006              B        |L4.1000|
                  |L4.986|
0003da  f7fffffe          BL       HAL_GetTick
0003de  1b40              SUBS     r0,r0,r5              ;1267
0003e0  2802              CMP      r0,#2                 ;1267
0003e2  d901              BLS      |L4.1000|
0003e4  2003              MOVS     r0,#3                 ;1269
0003e6  e632              B        |L4.78|
                  |L4.1000|
0003e8  4808              LDR      r0,|L4.1036|
0003ea  3808              SUBS     r0,r0,#8              ;1265
0003ec  6800              LDR      r0,[r0,#0]            ;1265
0003ee  f3c06040          UBFX     r0,r0,#25,#1          ;1265
0003f2  2800              CMP      r0,#0                 ;1265
0003f4  d1f1              BNE      |L4.986|
0003f6  e9d40107          LDRD     r0,r1,[r4,#0x1c]      ;1274
0003fa  4308              ORRS     r0,r0,r1              ;1274
0003fc  f64772c0          MOV      r2,#0x7fc0            ;1274
000400  fa92f2a2          RBIT     r2,r2                 ;1274
000404  fab2f282          CLZ      r2,r2                 ;1274
000408  6a61              LDR      r1,[r4,#0x24]         ;1274
00040a  e004              B        |L4.1046|
                  |L4.1036|
                          DCD      0x40023808
                  |L4.1040|
                          DCD      0x40007000
                  |L4.1044|
000414  e058              B        |L4.1224|
                  |L4.1046|
000416  4091              LSLS     r1,r1,r2              ;1274
000418  4308              ORRS     r0,r0,r1              ;1274
00041a  2201              MOVS     r2,#1                 ;1274
00041c  6aa1              LDR      r1,[r4,#0x28]         ;1274
00041e  ebc20151          RSB      r1,r2,r1,LSR #1       ;1274
000422  f44f3240          MOV      r2,#0x30000           ;1274
000426  fa92f2a2          RBIT     r2,r2                 ;1274
00042a  fab2f282          CLZ      r2,r2                 ;1274
00042e  4091              LSLS     r1,r1,r2              ;1274
000430  4308              ORRS     r0,r0,r1              ;1274
000432  f04f6270          MOV      r2,#0xf000000         ;1274
000436  fa92f2a2          RBIT     r2,r2                 ;1274
00043a  fab2f282          CLZ      r2,r2                 ;1274
00043e  6ae1              LDR      r1,[r4,#0x2c]         ;1274
000440  4091              LSLS     r1,r1,r2              ;1274
000442  4308              ORRS     r0,r0,r1              ;1274
000444  f04f42e0          MOV      r2,#0x70000000        ;1274
000448  fa92f2a2          RBIT     r2,r2                 ;1274
00044c  fab2f282          CLZ      r2,r2                 ;1274
000450  6b21              LDR      r1,[r4,#0x30]         ;1274
000452  4091              LSLS     r1,r1,r2              ;1274
000454  4308              ORRS     r0,r0,r1              ;1274
000456  491d              LDR      r1,|L4.1228|
000458  6008              STR      r0,[r1,#0]            ;1274
00045a  1f08              SUBS     r0,r1,#4              ;1282
00045c  6800              LDR      r0,[r0,#0]            ;1282
00045e  f0407080          ORR      r0,r0,#0x1000000      ;1282
000462  1f09              SUBS     r1,r1,#4              ;1282
000464  6008              STR      r0,[r1,#0]            ;1282
000466  f7fffffe          BL       HAL_GetTick
00046a  4605              MOV      r5,r0                 ;1285
00046c  e006              B        |L4.1148|
                  |L4.1134|
00046e  f7fffffe          BL       HAL_GetTick
000472  1b40              SUBS     r0,r0,r5              ;1290
000474  2802              CMP      r0,#2                 ;1290
000476  d901              BLS      |L4.1148|
000478  2003              MOVS     r0,#3                 ;1292
00047a  e5e8              B        |L4.78|
                  |L4.1148|
00047c  4813              LDR      r0,|L4.1228|
00047e  1f00              SUBS     r0,r0,#4              ;1288
000480  6800              LDR      r0,[r0,#0]            ;1288
000482  f3c06040          UBFX     r0,r0,#25,#1          ;1288
000486  2800              CMP      r0,#0                 ;1288
000488  d0f1              BEQ      |L4.1134|
00048a  e01d              B        |L4.1224|
                  |L4.1164|
00048c  480f              LDR      r0,|L4.1228|
00048e  1f00              SUBS     r0,r0,#4              ;1299
000490  6800              LDR      r0,[r0,#0]            ;1299
000492  f0207080          BIC      r0,r0,#0x1000000      ;1299
000496  490d              LDR      r1,|L4.1228|
000498  1f09              SUBS     r1,r1,#4              ;1299
00049a  6008              STR      r0,[r1,#0]            ;1299
00049c  f7fffffe          BL       HAL_GetTick
0004a0  4605              MOV      r5,r0                 ;1302
0004a2  e007              B        |L4.1204|
                  |L4.1188|
0004a4  e00e              B        |L4.1220|
                  |L4.1190|
0004a6  f7fffffe          BL       HAL_GetTick
0004aa  1b40              SUBS     r0,r0,r5              ;1307
0004ac  2802              CMP      r0,#2                 ;1307
0004ae  d901              BLS      |L4.1204|
0004b0  2003              MOVS     r0,#3                 ;1309
0004b2  e5cc              B        |L4.78|
                  |L4.1204|
0004b4  4805              LDR      r0,|L4.1228|
0004b6  1f00              SUBS     r0,r0,#4              ;1305
0004b8  6800              LDR      r0,[r0,#0]            ;1305
0004ba  f3c06040          UBFX     r0,r0,#25,#1          ;1305
0004be  2800              CMP      r0,#0                 ;1305
0004c0  d1f1              BNE      |L4.1190|
0004c2  e001              B        |L4.1224|
                  |L4.1220|
0004c4  2001              MOVS     r0,#1                 ;1316
0004c6  e5c2              B        |L4.78|
                  |L4.1224|
0004c8  2000              MOVS     r0,#0                 ;1319
0004ca  e5c0              B        |L4.78|
;;;1321   #endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
                          ENDP

                  |L4.1228|
                          DCD      0x40023804

;*** Start embedded assembler ***

#line 1 "..\\HALLIB\\STM32F7xx_HAL_Driver\\Src\\stm32f7xx_hal_rcc_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f7xx_hal_rcc_ex_c_bed13b44____REV16|
#line 388 "..\\CORE\\cmsis_armcc.h"
|__asm___22_stm32f7xx_hal_rcc_ex_c_bed13b44____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f7xx_hal_rcc_ex_c_bed13b44____REVSH|
#line 402
|__asm___22_stm32f7xx_hal_rcc_ex_c_bed13b44____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f7xx_hal_rcc_ex_c_bed13b44____RRX|
#line 587
|__asm___22_stm32f7xx_hal_rcc_ex_c_bed13b44____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
