; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\stm32f7xx_hal_sram.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\stm32f7xx_hal_sram.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\OBJ -I..\USER -I..\HALLIB\STM32F7xx_HAL_Driver\Inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\SDRAM -I..\HARDWARE\IIC -I..\HARDWARE\24CXX -I..\HARDWARE\MPU9250 -I..\HARDWARE\DHT11 -I..\HARDWARE\MPU -I..\USMART -I..\DMP\driver\eMPL -I..\DMP\driver\include -I..\DMP\driver\stm32L -I..\DMP\eMPL-hal -I..\DMP\mllite -I..\DMP\mpl -I..\UCOSIII -I..\UCOSIII\UCOS-BSP -I..\UCOSIII\UCOS-CONFIG -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\uC-CPU\ARM-Cortex-M4\RealView -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-CPU -I..\HARDWARE\MY_FUNCTION -I..\USER -I..\HARDWARE\CRC -I..\HARDWARE\DMA -I..\HARDWARE\HEART_BEAT -I..\HARDWARE\RECEIVE_ANALYZE -I..\HARDWARE\FEED_BACK -I..\HARDWARE\DATA -I"D:\1111111\32F4\Slam car\实验35 MPU9250九轴传感器实验\USER\RTE" -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0 -IF:\Keil_v5\ARM\CMSIS\Include -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__UVISION_VERSION=514 -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=..\obj\stm32f7xx_hal_sram.crf ..\HALLIB\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_sram.c]
                          THUMB

                          AREA ||i.HAL_SRAM_DMA_XferCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SRAM_DMA_XferCpltCallback PROC
;;;229      */
;;;230    __weak void HAL_SRAM_DMA_XferCpltCallback(DMA_HandleTypeDef *hdma)
000000  4770              BX       lr
;;;231    {
;;;232      /* Prevent unused argument(s) compilation warning */
;;;233      UNUSED(hdma);
;;;234     
;;;235      /* NOTE : This function Should not be modified, when the callback is needed,
;;;236                the HAL_SRAM_DMA_XferCpltCallback could be implemented in the user file
;;;237       */ 
;;;238    }
;;;239    
                          ENDP


                          AREA ||i.HAL_SRAM_DMA_XferErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_SRAM_DMA_XferErrorCallback PROC
;;;245      */
;;;246    __weak void HAL_SRAM_DMA_XferErrorCallback(DMA_HandleTypeDef *hdma)
000000  4770              BX       lr
;;;247    {
;;;248      /* Prevent unused argument(s) compilation warning */
;;;249      UNUSED(hdma);
;;;250     
;;;251      /* NOTE : This function Should not be modified, when the callback is needed,
;;;252                the HAL_SRAM_DMA_XferErrorCallback could be implemented in the user file
;;;253       */ 
;;;254    }
;;;255    
                          ENDP


                          AREA ||i.HAL_SRAM_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_SRAM_DeInit PROC
;;;175      */
;;;176    HAL_StatusTypeDef  HAL_SRAM_DeInit(SRAM_HandleTypeDef *hsram)
000000  b510              PUSH     {r4,lr}
;;;177    { 
000002  4604              MOV      r4,r0
;;;178      /* De-Initialize the low level hardware (MSP) */
;;;179      HAL_SRAM_MspDeInit(hsram);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       HAL_SRAM_MspDeInit
;;;180       
;;;181      /* Configure the SRAM registers with their reset values */
;;;182      FMC_NORSRAM_DeInit(hsram->Instance, hsram->Extended, hsram->Init.NSBank);
00000a  e8940007          LDM      r4,{r0-r2}
00000e  f7fffffe          BL       FMC_NORSRAM_DeInit
;;;183    
;;;184      hsram->State = HAL_SRAM_STATE_RESET;
000012  2000              MOVS     r0,#0
000014  f8840045          STRB     r0,[r4,#0x45]
;;;185      
;;;186      /* Release Lock */
;;;187      __HAL_UNLOCK(hsram);
000018  bf00              NOP      
00001a  f8840044          STRB     r0,[r4,#0x44]
00001e  bf00              NOP      
;;;188    
;;;189      return HAL_OK;
;;;190    }
000020  bd10              POP      {r4,pc}
;;;191    
                          ENDP


                          AREA ||i.HAL_SRAM_GetState||, CODE, READONLY, ALIGN=1

                  HAL_SRAM_GetState PROC
;;;668      */
;;;669    HAL_SRAM_StateTypeDef HAL_SRAM_GetState(SRAM_HandleTypeDef *hsram)
000000  4601              MOV      r1,r0
;;;670    {
;;;671      return hsram->State;
000002  f8910045          LDRB     r0,[r1,#0x45]
;;;672    }
000006  4770              BX       lr
;;;673    
                          ENDP


                          AREA ||i.HAL_SRAM_Init||, CODE, READONLY, ALIGN=1

                  HAL_SRAM_Init PROC
;;;138      */
;;;139    HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
000000  b570              PUSH     {r4-r6,lr}
;;;140    { 
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;141      /* Check the SRAM handle parameter */
;;;142      if(hsram == NULL)
000008  b90c              CBNZ     r4,|L5.14|
;;;143      {
;;;144         return HAL_ERROR;
00000a  2001              MOVS     r0,#1
                  |L5.12|
;;;145      }
;;;146      
;;;147      if(hsram->State == HAL_SRAM_STATE_RESET)
;;;148      {  
;;;149        /* Allocate lock resource and initialize it */
;;;150        hsram->Lock = HAL_UNLOCKED;
;;;151        /* Initialize the low level hardware (MSP) */
;;;152        HAL_SRAM_MspInit(hsram);
;;;153      }
;;;154      
;;;155      /* Initialize SRAM control Interface */
;;;156      FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
;;;157    
;;;158      /* Initialize SRAM timing Interface */
;;;159      FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
;;;160    
;;;161      /* Initialize SRAM extended mode timing Interface */
;;;162      FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
;;;163      
;;;164      /* Enable the NORSRAM device */
;;;165      __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
;;;166      
;;;167      return HAL_OK;
;;;168    }
00000c  bd70              POP      {r4-r6,pc}
                  |L5.14|
00000e  f8940045          LDRB     r0,[r4,#0x45]         ;147
000012  b928              CBNZ     r0,|L5.32|
000014  2000              MOVS     r0,#0                 ;150
000016  f8840044          STRB     r0,[r4,#0x44]         ;150
00001a  4620              MOV      r0,r4                 ;152
00001c  f7fffffe          BL       HAL_SRAM_MspInit
                  |L5.32|
000020  f1040108          ADD      r1,r4,#8              ;156
000024  6820              LDR      r0,[r4,#0]            ;156
000026  f7fffffe          BL       FMC_NORSRAM_Init
00002a  4631              MOV      r1,r6                 ;159
00002c  68a2              LDR      r2,[r4,#8]            ;159
00002e  6820              LDR      r0,[r4,#0]            ;159
000030  f7fffffe          BL       FMC_NORSRAM_Timing_Init
000034  4629              MOV      r1,r5                 ;162
000036  6ae3              LDR      r3,[r4,#0x2c]         ;162
000038  e9d40201          LDRD     r0,r2,[r4,#4]         ;162
00003c  f7fffffe          BL       FMC_NORSRAM_Extended_Timing_Init
000040  68a1              LDR      r1,[r4,#8]            ;165
000042  6820              LDR      r0,[r4,#0]            ;165
000044  f8500021          LDR      r0,[r0,r1,LSL #2]     ;165
000048  f0400001          ORR      r0,r0,#1              ;165
00004c  68a2              LDR      r2,[r4,#8]            ;165
00004e  6821              LDR      r1,[r4,#0]            ;165
000050  f8410022          STR      r0,[r1,r2,LSL #2]     ;165
000054  2000              MOVS     r0,#0                 ;167
000056  e7d9              B        |L5.12|
;;;169    
                          ENDP


                          AREA ||i.HAL_SRAM_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_SRAM_MspDeInit PROC
;;;213      */
;;;214    __weak void HAL_SRAM_MspDeInit(SRAM_HandleTypeDef *hsram)
000000  4770              BX       lr
;;;215    {
;;;216      /* Prevent unused argument(s) compilation warning */
;;;217      UNUSED(hsram);
;;;218     
;;;219      /* NOTE : This function Should not be modified, when the callback is needed,
;;;220                the HAL_SRAM_MspDeInit could be implemented in the user file
;;;221       */ 
;;;222    }
;;;223    
                          ENDP


                          AREA ||i.HAL_SRAM_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_SRAM_MspInit PROC
;;;197      */
;;;198    __weak void HAL_SRAM_MspInit(SRAM_HandleTypeDef *hsram)
000000  4770              BX       lr
;;;199    {
;;;200      /* Prevent unused argument(s) compilation warning */
;;;201      UNUSED(hsram);
;;;202     
;;;203      /* NOTE : This function Should not be modified, when the callback is needed,
;;;204                the HAL_SRAM_MspInit could be implemented in the user file
;;;205       */ 
;;;206    }
;;;207    
                          ENDP


                          AREA ||i.HAL_SRAM_Read_16b||, CODE, READONLY, ALIGN=1

                  HAL_SRAM_Read_16b PROC
;;;360      */
;;;361    HAL_StatusTypeDef HAL_SRAM_Read_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pDstBuffer, uint32_t BufferSize)
000000  b530              PUSH     {r4,r5,lr}
;;;362    {
000002  4604              MOV      r4,r0
;;;363      __IO uint16_t * psramaddress = (uint16_t *)pAddress;
000004  460d              MOV      r5,r1
;;;364      
;;;365      /* Process Locked */
;;;366      __HAL_LOCK(hsram);
000006  bf00              NOP      
000008  f8940044          LDRB     r0,[r4,#0x44]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L8.20|
000010  2002              MOVS     r0,#2
                  |L8.18|
;;;367      
;;;368      /* Update the SRAM controller state */
;;;369      hsram->State = HAL_SRAM_STATE_BUSY;  
;;;370      
;;;371      /* Read data from memory */
;;;372      for(; BufferSize != 0; BufferSize--)
;;;373      {
;;;374        *pDstBuffer = *(__IO uint16_t *)psramaddress;
;;;375        pDstBuffer++;
;;;376        psramaddress++;
;;;377      }
;;;378      
;;;379      /* Update the SRAM controller state */
;;;380      hsram->State = HAL_SRAM_STATE_READY;    
;;;381    
;;;382      /* Process unlocked */
;;;383      __HAL_UNLOCK(hsram); 
;;;384        
;;;385      return HAL_OK;  
;;;386    }
000012  bd30              POP      {r4,r5,pc}
                  |L8.20|
000014  2001              MOVS     r0,#1                 ;366
000016  f8840044          STRB     r0,[r4,#0x44]         ;366
00001a  bf00              NOP                            ;366
00001c  2002              MOVS     r0,#2                 ;369
00001e  f8840045          STRB     r0,[r4,#0x45]         ;369
000022  e004              B        |L8.46|
                  |L8.36|
000024  8828              LDRH     r0,[r5,#0]            ;374
000026  8010              STRH     r0,[r2,#0]            ;374
000028  1c92              ADDS     r2,r2,#2              ;375
00002a  1cad              ADDS     r5,r5,#2              ;376
00002c  1e5b              SUBS     r3,r3,#1              ;372
                  |L8.46|
00002e  2b00              CMP      r3,#0                 ;372
000030  d1f8              BNE      |L8.36|
000032  2001              MOVS     r0,#1                 ;380
000034  f8840045          STRB     r0,[r4,#0x45]         ;380
000038  bf00              NOP                            ;383
00003a  2000              MOVS     r0,#0                 ;383
00003c  f8840044          STRB     r0,[r4,#0x44]         ;383
000040  bf00              NOP                            ;383
000042  bf00              NOP                            ;385
000044  e7e5              B        |L8.18|
;;;387    
                          ENDP


                          AREA ||i.HAL_SRAM_Read_32b||, CODE, READONLY, ALIGN=1

                  HAL_SRAM_Read_32b PROC
;;;438      */
;;;439    HAL_StatusTypeDef HAL_SRAM_Read_32b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
000000  b510              PUSH     {r4,lr}
;;;440    {
000002  4604              MOV      r4,r0
;;;441      /* Process Locked */
;;;442      __HAL_LOCK(hsram);
000004  bf00              NOP      
000006  f8940044          LDRB     r0,[r4,#0x44]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L9.18|
00000e  2002              MOVS     r0,#2
                  |L9.16|
;;;443      
;;;444      /* Update the SRAM controller state */
;;;445      hsram->State = HAL_SRAM_STATE_BUSY;  
;;;446      
;;;447      /* Read data from memory */
;;;448      for(; BufferSize != 0; BufferSize--)
;;;449      {
;;;450        *pDstBuffer = *(__IO uint32_t *)pAddress;
;;;451        pDstBuffer++;
;;;452        pAddress++;
;;;453      }
;;;454      
;;;455      /* Update the SRAM controller state */
;;;456      hsram->State = HAL_SRAM_STATE_READY;    
;;;457    
;;;458      /* Process unlocked */
;;;459      __HAL_UNLOCK(hsram); 
;;;460        
;;;461      return HAL_OK;  
;;;462    }
000010  bd10              POP      {r4,pc}
                  |L9.18|
000012  2001              MOVS     r0,#1                 ;442
000014  f8840044          STRB     r0,[r4,#0x44]         ;442
000018  bf00              NOP                            ;442
00001a  2002              MOVS     r0,#2                 ;445
00001c  f8840045          STRB     r0,[r4,#0x45]         ;445
000020  e004              B        |L9.44|
                  |L9.34|
000022  6808              LDR      r0,[r1,#0]            ;450
000024  6010              STR      r0,[r2,#0]            ;450
000026  1d12              ADDS     r2,r2,#4              ;451
000028  1d09              ADDS     r1,r1,#4              ;452
00002a  1e5b              SUBS     r3,r3,#1              ;448
                  |L9.44|
00002c  2b00              CMP      r3,#0                 ;448
00002e  d1f8              BNE      |L9.34|
000030  2001              MOVS     r0,#1                 ;456
000032  f8840045          STRB     r0,[r4,#0x45]         ;456
000036  bf00              NOP                            ;459
000038  2000              MOVS     r0,#0                 ;459
00003a  f8840044          STRB     r0,[r4,#0x44]         ;459
00003e  bf00              NOP                            ;459
000040  bf00              NOP                            ;461
000042  e7e5              B        |L9.16|
;;;463    
                          ENDP


                          AREA ||i.HAL_SRAM_Read_8b||, CODE, READONLY, ALIGN=1

                  HAL_SRAM_Read_8b PROC
;;;282      */
;;;283    HAL_StatusTypeDef HAL_SRAM_Read_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pDstBuffer, uint32_t BufferSize)
000000  b530              PUSH     {r4,r5,lr}
;;;284    {
000002  4604              MOV      r4,r0
;;;285      __IO uint8_t * psramaddress = (uint8_t *)pAddress;
000004  460d              MOV      r5,r1
;;;286      
;;;287      /* Process Locked */
;;;288      __HAL_LOCK(hsram);
000006  bf00              NOP      
000008  f8940044          LDRB     r0,[r4,#0x44]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L10.20|
000010  2002              MOVS     r0,#2
                  |L10.18|
;;;289      
;;;290      /* Update the SRAM controller state */
;;;291      hsram->State = HAL_SRAM_STATE_BUSY;  
;;;292      
;;;293      /* Read data from memory */
;;;294      for(; BufferSize != 0; BufferSize--)
;;;295      {
;;;296        *pDstBuffer = *(__IO uint8_t *)psramaddress;
;;;297        pDstBuffer++;
;;;298        psramaddress++;
;;;299      }
;;;300      
;;;301      /* Update the SRAM controller state */
;;;302      hsram->State = HAL_SRAM_STATE_READY;    
;;;303    
;;;304      /* Process unlocked */
;;;305      __HAL_UNLOCK(hsram); 
;;;306        
;;;307      return HAL_OK;   
;;;308    }
000012  bd30              POP      {r4,r5,pc}
                  |L10.20|
000014  2001              MOVS     r0,#1                 ;288
000016  f8840044          STRB     r0,[r4,#0x44]         ;288
00001a  bf00              NOP                            ;288
00001c  2002              MOVS     r0,#2                 ;291
00001e  f8840045          STRB     r0,[r4,#0x45]         ;291
000022  e004              B        |L10.46|
                  |L10.36|
000024  7828              LDRB     r0,[r5,#0]            ;296
000026  7010              STRB     r0,[r2,#0]            ;296
000028  1c52              ADDS     r2,r2,#1              ;297
00002a  1c6d              ADDS     r5,r5,#1              ;298
00002c  1e5b              SUBS     r3,r3,#1              ;294
                  |L10.46|
00002e  2b00              CMP      r3,#0                 ;294
000030  d1f8              BNE      |L10.36|
000032  2001              MOVS     r0,#1                 ;302
000034  f8840045          STRB     r0,[r4,#0x45]         ;302
000038  bf00              NOP                            ;305
00003a  2000              MOVS     r0,#0                 ;305
00003c  f8840044          STRB     r0,[r4,#0x44]         ;305
000040  bf00              NOP                            ;305
000042  bf00              NOP                            ;307
000044  e7e5              B        |L10.18|
;;;309    
                          ENDP


                          AREA ||i.HAL_SRAM_Read_DMA||, CODE, READONLY, ALIGN=2

                  HAL_SRAM_Read_DMA PROC
;;;512      */
;;;513    HAL_StatusTypeDef HAL_SRAM_Read_DMA(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;514    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;515      /* Process Locked */
;;;516      __HAL_LOCK(hsram);  
00000c  bf00              NOP      
00000e  f8940044          LDRB     r0,[r4,#0x44]
000012  2801              CMP      r0,#1
000014  d102              BNE      |L11.28|
000016  2002              MOVS     r0,#2
                  |L11.24|
;;;517      
;;;518      /* Update the SRAM controller state */
;;;519      hsram->State = HAL_SRAM_STATE_BUSY;   
;;;520      
;;;521      /* Configure DMA user callbacks */
;;;522      hsram->hdma->XferCpltCallback  = HAL_SRAM_DMA_XferCpltCallback;
;;;523      hsram->hdma->XferErrorCallback = HAL_SRAM_DMA_XferErrorCallback;
;;;524    
;;;525      /* Enable the DMA Stream */
;;;526      HAL_DMA_Start_IT(hsram->hdma, (uint32_t)pAddress, (uint32_t)pDstBuffer, (uint32_t)BufferSize);
;;;527      
;;;528      /* Update the SRAM controller state */
;;;529      hsram->State = HAL_SRAM_STATE_READY; 
;;;530      
;;;531      /* Process unlocked */
;;;532      __HAL_UNLOCK(hsram);  
;;;533      
;;;534      return HAL_OK; 
;;;535    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L11.28|
00001c  2001              MOVS     r0,#1                 ;516
00001e  f8840044          STRB     r0,[r4,#0x44]         ;516
000022  bf00              NOP                            ;516
000024  2002              MOVS     r0,#2                 ;519
000026  f8840045          STRB     r0,[r4,#0x45]         ;519
00002a  480b              LDR      r0,|L11.88|
00002c  6ca1              LDR      r1,[r4,#0x48]         ;522
00002e  63c8              STR      r0,[r1,#0x3c]         ;522
000030  480a              LDR      r0,|L11.92|
000032  6ca1              LDR      r1,[r4,#0x48]         ;523
000034  64c8              STR      r0,[r1,#0x4c]         ;523
000036  463b              MOV      r3,r7                 ;526
000038  4632              MOV      r2,r6                 ;526
00003a  4629              MOV      r1,r5                 ;526
00003c  6ca0              LDR      r0,[r4,#0x48]         ;526
00003e  f7fffffe          BL       HAL_DMA_Start_IT
000042  2001              MOVS     r0,#1                 ;529
000044  f8840045          STRB     r0,[r4,#0x45]         ;529
000048  bf00              NOP                            ;532
00004a  2000              MOVS     r0,#0                 ;532
00004c  f8840044          STRB     r0,[r4,#0x44]         ;532
000050  bf00              NOP                            ;532
000052  bf00              NOP                            ;534
000054  e7e0              B        |L11.24|
;;;536    
                          ENDP

000056  0000              DCW      0x0000
                  |L11.88|
                          DCD      HAL_SRAM_DMA_XferCpltCallback
                  |L11.92|
                          DCD      HAL_SRAM_DMA_XferErrorCallback

                          AREA ||i.HAL_SRAM_WriteOperation_Disable||, CODE, READONLY, ALIGN=1

                  HAL_SRAM_WriteOperation_Disable PROC
;;;623      */
;;;624    HAL_StatusTypeDef HAL_SRAM_WriteOperation_Disable(SRAM_HandleTypeDef *hsram)
000000  b510              PUSH     {r4,lr}
;;;625    {
000002  4604              MOV      r4,r0
;;;626      /* Process Locked */
;;;627      __HAL_LOCK(hsram);
000004  bf00              NOP      
000006  f8940044          LDRB     r0,[r4,#0x44]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L12.18|
00000e  2002              MOVS     r0,#2
                  |L12.16|
;;;628    
;;;629      /* Update the SRAM controller state */
;;;630      hsram->State = HAL_SRAM_STATE_BUSY;
;;;631        
;;;632      /* Disable write operation */
;;;633      FMC_NORSRAM_WriteOperation_Disable(hsram->Instance, hsram->Init.NSBank); 
;;;634      
;;;635      /* Update the SRAM controller state */
;;;636      hsram->State = HAL_SRAM_STATE_PROTECTED;
;;;637      
;;;638      /* Process unlocked */
;;;639      __HAL_UNLOCK(hsram); 
;;;640      
;;;641      return HAL_OK;  
;;;642    }
000010  bd10              POP      {r4,pc}
                  |L12.18|
000012  2001              MOVS     r0,#1                 ;627
000014  f8840044          STRB     r0,[r4,#0x44]         ;627
000018  bf00              NOP                            ;627
00001a  2002              MOVS     r0,#2                 ;630
00001c  f8840045          STRB     r0,[r4,#0x45]         ;630
000020  68a1              LDR      r1,[r4,#8]            ;633
000022  6820              LDR      r0,[r4,#0]            ;633
000024  f7fffffe          BL       FMC_NORSRAM_WriteOperation_Disable
000028  2004              MOVS     r0,#4                 ;636
00002a  f8840045          STRB     r0,[r4,#0x45]         ;636
00002e  bf00              NOP                            ;639
000030  2000              MOVS     r0,#0                 ;639
000032  f8840044          STRB     r0,[r4,#0x44]         ;639
000036  bf00              NOP                            ;639
000038  bf00              NOP                            ;641
00003a  e7e9              B        |L12.16|
;;;643    
                          ENDP


                          AREA ||i.HAL_SRAM_WriteOperation_Enable||, CODE, READONLY, ALIGN=1

                  HAL_SRAM_WriteOperation_Enable PROC
;;;600      */
;;;601    HAL_StatusTypeDef HAL_SRAM_WriteOperation_Enable(SRAM_HandleTypeDef *hsram)
000000  b510              PUSH     {r4,lr}
;;;602    {
000002  4604              MOV      r4,r0
;;;603      /* Process Locked */
;;;604      __HAL_LOCK(hsram);
000004  bf00              NOP      
000006  f8940044          LDRB     r0,[r4,#0x44]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L13.18|
00000e  2002              MOVS     r0,#2
                  |L13.16|
;;;605    
;;;606      /* Enable write operation */
;;;607      FMC_NORSRAM_WriteOperation_Enable(hsram->Instance, hsram->Init.NSBank); 
;;;608      
;;;609      /* Update the SRAM controller state */
;;;610      hsram->State = HAL_SRAM_STATE_READY;
;;;611      
;;;612      /* Process unlocked */
;;;613      __HAL_UNLOCK(hsram); 
;;;614      
;;;615      return HAL_OK;  
;;;616    }
000010  bd10              POP      {r4,pc}
                  |L13.18|
000012  2001              MOVS     r0,#1                 ;604
000014  f8840044          STRB     r0,[r4,#0x44]         ;604
000018  bf00              NOP                            ;604
00001a  68a1              LDR      r1,[r4,#8]            ;607
00001c  6820              LDR      r0,[r4,#0]            ;607
00001e  f7fffffe          BL       FMC_NORSRAM_WriteOperation_Enable
000022  2001              MOVS     r0,#1                 ;610
000024  f8840045          STRB     r0,[r4,#0x45]         ;610
000028  bf00              NOP                            ;613
00002a  2000              MOVS     r0,#0                 ;613
00002c  f8840044          STRB     r0,[r4,#0x44]         ;613
000030  bf00              NOP                            ;613
000032  bf00              NOP                            ;615
000034  e7ec              B        |L13.16|
;;;617    
                          ENDP


                          AREA ||i.HAL_SRAM_Write_16b||, CODE, READONLY, ALIGN=1

                  HAL_SRAM_Write_16b PROC
;;;396      */
;;;397    HAL_StatusTypeDef HAL_SRAM_Write_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pSrcBuffer, uint32_t BufferSize)
000000  b530              PUSH     {r4,r5,lr}
;;;398    {
000002  4604              MOV      r4,r0
;;;399      __IO uint16_t * psramaddress = (uint16_t *)pAddress; 
000004  460d              MOV      r5,r1
;;;400      
;;;401      /* Check the SRAM controller state */
;;;402      if(hsram->State == HAL_SRAM_STATE_PROTECTED)
000006  f8940045          LDRB     r0,[r4,#0x45]
00000a  2804              CMP      r0,#4
00000c  d101              BNE      |L14.18|
;;;403      {
;;;404        return  HAL_ERROR; 
00000e  2001              MOVS     r0,#1
                  |L14.16|
;;;405      }
;;;406      
;;;407      /* Process Locked */
;;;408      __HAL_LOCK(hsram);
;;;409      
;;;410      /* Update the SRAM controller state */
;;;411      hsram->State = HAL_SRAM_STATE_BUSY; 
;;;412    
;;;413      /* Write data to memory */
;;;414      for(; BufferSize != 0; BufferSize--)
;;;415      {
;;;416        *(__IO uint16_t *)psramaddress = *pSrcBuffer; 
;;;417        pSrcBuffer++;
;;;418        psramaddress++;    
;;;419      }    
;;;420    
;;;421      /* Update the SRAM controller state */
;;;422      hsram->State = HAL_SRAM_STATE_READY; 
;;;423      
;;;424      /* Process unlocked */
;;;425      __HAL_UNLOCK(hsram);
;;;426        
;;;427      return HAL_OK;  
;;;428    }
000010  bd30              POP      {r4,r5,pc}
                  |L14.18|
000012  bf00              NOP                            ;408
000014  f8940044          LDRB     r0,[r4,#0x44]         ;408
000018  2801              CMP      r0,#1                 ;408
00001a  d101              BNE      |L14.32|
00001c  2002              MOVS     r0,#2                 ;408
00001e  e7f7              B        |L14.16|
                  |L14.32|
000020  2001              MOVS     r0,#1                 ;408
000022  f8840044          STRB     r0,[r4,#0x44]         ;408
000026  bf00              NOP                            ;408
000028  2002              MOVS     r0,#2                 ;411
00002a  f8840045          STRB     r0,[r4,#0x45]         ;411
00002e  e004              B        |L14.58|
                  |L14.48|
000030  8810              LDRH     r0,[r2,#0]            ;416
000032  8028              STRH     r0,[r5,#0]            ;416
000034  1c92              ADDS     r2,r2,#2              ;417
000036  1cad              ADDS     r5,r5,#2              ;418
000038  1e5b              SUBS     r3,r3,#1              ;414
                  |L14.58|
00003a  2b00              CMP      r3,#0                 ;414
00003c  d1f8              BNE      |L14.48|
00003e  2001              MOVS     r0,#1                 ;422
000040  f8840045          STRB     r0,[r4,#0x45]         ;422
000044  bf00              NOP                            ;425
000046  2000              MOVS     r0,#0                 ;425
000048  f8840044          STRB     r0,[r4,#0x44]         ;425
00004c  bf00              NOP                            ;425
00004e  bf00              NOP                            ;427
000050  e7de              B        |L14.16|
;;;429    
                          ENDP


                          AREA ||i.HAL_SRAM_Write_32b||, CODE, READONLY, ALIGN=1

                  HAL_SRAM_Write_32b PROC
;;;472      */
;;;473    HAL_StatusTypeDef HAL_SRAM_Write_32b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
000000  b510              PUSH     {r4,lr}
;;;474    {
000002  4604              MOV      r4,r0
;;;475      /* Check the SRAM controller state */
;;;476      if(hsram->State == HAL_SRAM_STATE_PROTECTED)
000004  f8940045          LDRB     r0,[r4,#0x45]
000008  2804              CMP      r0,#4
00000a  d101              BNE      |L15.16|
;;;477      {
;;;478        return  HAL_ERROR; 
00000c  2001              MOVS     r0,#1
                  |L15.14|
;;;479      }
;;;480      
;;;481      /* Process Locked */
;;;482      __HAL_LOCK(hsram);
;;;483      
;;;484      /* Update the SRAM controller state */
;;;485      hsram->State = HAL_SRAM_STATE_BUSY; 
;;;486    
;;;487      /* Write data to memory */
;;;488      for(; BufferSize != 0; BufferSize--)
;;;489      {
;;;490        *(__IO uint32_t *)pAddress = *pSrcBuffer; 
;;;491        pSrcBuffer++;
;;;492        pAddress++;    
;;;493      }    
;;;494    
;;;495      /* Update the SRAM controller state */
;;;496      hsram->State = HAL_SRAM_STATE_READY; 
;;;497      
;;;498      /* Process unlocked */
;;;499      __HAL_UNLOCK(hsram);
;;;500        
;;;501      return HAL_OK;   
;;;502    }
00000e  bd10              POP      {r4,pc}
                  |L15.16|
000010  bf00              NOP                            ;482
000012  f8940044          LDRB     r0,[r4,#0x44]         ;482
000016  2801              CMP      r0,#1                 ;482
000018  d101              BNE      |L15.30|
00001a  2002              MOVS     r0,#2                 ;482
00001c  e7f7              B        |L15.14|
                  |L15.30|
00001e  2001              MOVS     r0,#1                 ;482
000020  f8840044          STRB     r0,[r4,#0x44]         ;482
000024  bf00              NOP                            ;482
000026  2002              MOVS     r0,#2                 ;485
000028  f8840045          STRB     r0,[r4,#0x45]         ;485
00002c  e004              B        |L15.56|
                  |L15.46|
00002e  6810              LDR      r0,[r2,#0]            ;490
000030  6008              STR      r0,[r1,#0]            ;490
000032  1d12              ADDS     r2,r2,#4              ;491
000034  1d09              ADDS     r1,r1,#4              ;492
000036  1e5b              SUBS     r3,r3,#1              ;488
                  |L15.56|
000038  2b00              CMP      r3,#0                 ;488
00003a  d1f8              BNE      |L15.46|
00003c  2001              MOVS     r0,#1                 ;496
00003e  f8840045          STRB     r0,[r4,#0x45]         ;496
000042  bf00              NOP                            ;499
000044  2000              MOVS     r0,#0                 ;499
000046  f8840044          STRB     r0,[r4,#0x44]         ;499
00004a  bf00              NOP                            ;499
00004c  bf00              NOP                            ;501
00004e  e7de              B        |L15.14|
;;;503    
                          ENDP


                          AREA ||i.HAL_SRAM_Write_8b||, CODE, READONLY, ALIGN=1

                  HAL_SRAM_Write_8b PROC
;;;318      */
;;;319    HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer, uint32_t BufferSize)
000000  b530              PUSH     {r4,r5,lr}
;;;320    {
000002  4604              MOV      r4,r0
;;;321      __IO uint8_t * psramaddress = (uint8_t *)pAddress;
000004  460d              MOV      r5,r1
;;;322      
;;;323      /* Check the SRAM controller state */
;;;324      if(hsram->State == HAL_SRAM_STATE_PROTECTED)
000006  f8940045          LDRB     r0,[r4,#0x45]
00000a  2804              CMP      r0,#4
00000c  d101              BNE      |L16.18|
;;;325      {
;;;326        return  HAL_ERROR; 
00000e  2001              MOVS     r0,#1
                  |L16.16|
;;;327      }
;;;328      
;;;329      /* Process Locked */
;;;330      __HAL_LOCK(hsram);
;;;331      
;;;332      /* Update the SRAM controller state */
;;;333      hsram->State = HAL_SRAM_STATE_BUSY; 
;;;334    
;;;335      /* Write data to memory */
;;;336      for(; BufferSize != 0; BufferSize--)
;;;337      {
;;;338        *(__IO uint8_t *)psramaddress = *pSrcBuffer; 
;;;339        pSrcBuffer++;
;;;340        psramaddress++;    
;;;341      }    
;;;342    
;;;343      /* Update the SRAM controller state */
;;;344      hsram->State = HAL_SRAM_STATE_READY; 
;;;345      
;;;346      /* Process unlocked */
;;;347      __HAL_UNLOCK(hsram);
;;;348        
;;;349      return HAL_OK;   
;;;350    }
000010  bd30              POP      {r4,r5,pc}
                  |L16.18|
000012  bf00              NOP                            ;330
000014  f8940044          LDRB     r0,[r4,#0x44]         ;330
000018  2801              CMP      r0,#1                 ;330
00001a  d101              BNE      |L16.32|
00001c  2002              MOVS     r0,#2                 ;330
00001e  e7f7              B        |L16.16|
                  |L16.32|
000020  2001              MOVS     r0,#1                 ;330
000022  f8840044          STRB     r0,[r4,#0x44]         ;330
000026  bf00              NOP                            ;330
000028  2002              MOVS     r0,#2                 ;333
00002a  f8840045          STRB     r0,[r4,#0x45]         ;333
00002e  e004              B        |L16.58|
                  |L16.48|
000030  7810              LDRB     r0,[r2,#0]            ;338
000032  7028              STRB     r0,[r5,#0]            ;338
000034  1c52              ADDS     r2,r2,#1              ;339
000036  1c6d              ADDS     r5,r5,#1              ;340
000038  1e5b              SUBS     r3,r3,#1              ;336
                  |L16.58|
00003a  2b00              CMP      r3,#0                 ;336
00003c  d1f8              BNE      |L16.48|
00003e  2001              MOVS     r0,#1                 ;344
000040  f8840045          STRB     r0,[r4,#0x45]         ;344
000044  bf00              NOP                            ;347
000046  2000              MOVS     r0,#0                 ;347
000048  f8840044          STRB     r0,[r4,#0x44]         ;347
00004c  bf00              NOP                            ;347
00004e  bf00              NOP                            ;349
000050  e7de              B        |L16.16|
;;;351    
                          ENDP


                          AREA ||i.HAL_SRAM_Write_DMA||, CODE, READONLY, ALIGN=2

                  HAL_SRAM_Write_DMA PROC
;;;545      */
;;;546    HAL_StatusTypeDef HAL_SRAM_Write_DMA(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;547    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;548      /* Check the SRAM controller state */
;;;549      if(hsram->State == HAL_SRAM_STATE_PROTECTED)
00000c  f8940045          LDRB     r0,[r4,#0x45]
000010  2804              CMP      r0,#4
000012  d102              BNE      |L17.26|
;;;550      {
;;;551        return  HAL_ERROR; 
000014  2001              MOVS     r0,#1
                  |L17.22|
;;;552      }
;;;553      
;;;554      /* Process Locked */
;;;555      __HAL_LOCK(hsram);
;;;556      
;;;557      /* Update the SRAM controller state */
;;;558      hsram->State = HAL_SRAM_STATE_BUSY; 
;;;559      
;;;560      /* Configure DMA user callbacks */
;;;561      hsram->hdma->XferCpltCallback  = HAL_SRAM_DMA_XferCpltCallback;
;;;562      hsram->hdma->XferErrorCallback = HAL_SRAM_DMA_XferErrorCallback;
;;;563    
;;;564      /* Enable the DMA Stream */
;;;565      HAL_DMA_Start_IT(hsram->hdma, (uint32_t)pSrcBuffer, (uint32_t)pAddress, (uint32_t)BufferSize);
;;;566      
;;;567      /* Update the SRAM controller state */
;;;568      hsram->State = HAL_SRAM_STATE_READY;  
;;;569      
;;;570      /* Process unlocked */
;;;571      __HAL_UNLOCK(hsram);  
;;;572      
;;;573      return HAL_OK;
;;;574    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L17.26|
00001a  bf00              NOP                            ;555
00001c  f8940044          LDRB     r0,[r4,#0x44]         ;555
000020  2801              CMP      r0,#1                 ;555
000022  d101              BNE      |L17.40|
000024  2002              MOVS     r0,#2                 ;555
000026  e7f6              B        |L17.22|
                  |L17.40|
000028  2001              MOVS     r0,#1                 ;555
00002a  f8840044          STRB     r0,[r4,#0x44]         ;555
00002e  bf00              NOP                            ;555
000030  2002              MOVS     r0,#2                 ;558
000032  f8840045          STRB     r0,[r4,#0x45]         ;558
000036  480b              LDR      r0,|L17.100|
000038  6ca1              LDR      r1,[r4,#0x48]         ;561
00003a  63c8              STR      r0,[r1,#0x3c]         ;561
00003c  480a              LDR      r0,|L17.104|
00003e  6ca1              LDR      r1,[r4,#0x48]         ;562
000040  64c8              STR      r0,[r1,#0x4c]         ;562
000042  463b              MOV      r3,r7                 ;565
000044  462a              MOV      r2,r5                 ;565
000046  4631              MOV      r1,r6                 ;565
000048  6ca0              LDR      r0,[r4,#0x48]         ;565
00004a  f7fffffe          BL       HAL_DMA_Start_IT
00004e  2001              MOVS     r0,#1                 ;568
000050  f8840045          STRB     r0,[r4,#0x45]         ;568
000054  bf00              NOP                            ;571
000056  2000              MOVS     r0,#0                 ;571
000058  f8840044          STRB     r0,[r4,#0x44]         ;571
00005c  bf00              NOP                            ;571
00005e  bf00              NOP                            ;573
000060  e7d9              B        |L17.22|
;;;575    
                          ENDP

000062  0000              DCW      0x0000
                  |L17.100|
                          DCD      HAL_SRAM_DMA_XferCpltCallback
                  |L17.104|
                          DCD      HAL_SRAM_DMA_XferErrorCallback

;*** Start embedded assembler ***

#line 1 "..\\HALLIB\\STM32F7xx_HAL_Driver\\Src\\stm32f7xx_hal_sram.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f7xx_hal_sram_c_27568b0d____REV16|
#line 388 "..\\CORE\\cmsis_armcc.h"
|__asm___20_stm32f7xx_hal_sram_c_27568b0d____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f7xx_hal_sram_c_27568b0d____REVSH|
#line 402
|__asm___20_stm32f7xx_hal_sram_c_27568b0d____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f7xx_hal_sram_c_27568b0d____RRX|
#line 587
|__asm___20_stm32f7xx_hal_sram_c_27568b0d____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
