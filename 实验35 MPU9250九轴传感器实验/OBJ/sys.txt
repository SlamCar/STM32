; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\sys.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\sys.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\OBJ -I..\USER -I..\HALLIB\STM32F7xx_HAL_Driver\Inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\SDRAM -I..\HARDWARE\IIC -I..\HARDWARE\24CXX -I..\HARDWARE\MPU9250 -I..\HARDWARE\DHT11 -I..\HARDWARE\MPU -I..\USMART -I..\DMP\driver\eMPL -I..\DMP\driver\include -I..\DMP\driver\stm32L -I..\DMP\eMPL-hal -I..\DMP\mllite -I..\DMP\mpl -I..\UCOSIII -I..\UCOSIII\UCOS-BSP -I..\UCOSIII\UCOS-CONFIG -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\uC-CPU\ARM-Cortex-M4\RealView -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-CPU -I..\HARDWARE\MY_FUNCTION -I..\USER -I..\HARDWARE\CRC -I..\HARDWARE\DMA -I..\HARDWARE\HEART_BEAT -I..\HARDWARE\RECEIVE_ANALYZE -I..\HARDWARE\FEED_BACK -I..\HARDWARE\DATA -I"D:\1111111\32F4\Slam car\实验35 MPU9250九轴传感器实验\USER\RTE" -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0 -IF:\Keil_v5\ARM\CMSIS\Include -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__UVISION_VERSION=514 -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=..\obj\sys.crf ..\SYSTEM\sys\sys.c]
                          THUMB

                          AREA ||i.Cache_Enable||, CODE, READONLY, ALIGN=2

                  Cache_Enable PROC
;;;18     //使能CPU的L1-Cache
;;;19     void Cache_Enable(void)
000000  b510              PUSH     {r4,lr}
;;;20     {
;;;21         SCB_EnableICache();//使能I-Cache
000002  bf00              NOP      
000004  bf00              NOP      
000006  bf00              NOP      
000008  bf00              NOP      
00000a  bf00              NOP      
00000c  f3bf8f4f          DSB      
000010  bf00              NOP      
000012  bf00              NOP      
000014  bf00              NOP      
000016  bf00              NOP      
000018  bf00              NOP      
00001a  bf00              NOP      
00001c  f3bf8f6f          ISB      
000020  bf00              NOP      
000022  bf00              NOP      
000024  bf00              NOP      
000026  2000              MOVS     r0,#0
000028  4911              LDR      r1,|L1.112|
00002a  6008              STR      r0,[r1,#0]
00002c  4811              LDR      r0,|L1.116|
00002e  6800              LDR      r0,[r0,#0]
000030  f4403000          ORR      r0,r0,#0x20000
000034  490f              LDR      r1,|L1.116|
000036  6008              STR      r0,[r1,#0]
000038  bf00              NOP      
00003a  bf00              NOP      
00003c  bf00              NOP      
00003e  f3bf8f4f          DSB      
000042  bf00              NOP      
000044  bf00              NOP      
000046  bf00              NOP      
000048  bf00              NOP      
00004a  bf00              NOP      
00004c  bf00              NOP      
00004e  f3bf8f6f          ISB      
000052  bf00              NOP      
000054  bf00              NOP      
000056  bf00              NOP      
000058  bf00              NOP      
;;;22         SCB_EnableDCache();//使能D-Cache  
00005a  f7fffffe          BL       SCB_EnableDCache
;;;23     	SCB->CACR|=1<<2;   //强制D-Cache透写,如不开启,实际使用中可能遇到各种问题	
00005e  4804              LDR      r0,|L1.112|
000060  304c              ADDS     r0,r0,#0x4c
000062  6800              LDR      r0,[r0,#0]
000064  f0400004          ORR      r0,r0,#4
000068  4901              LDR      r1,|L1.112|
00006a  314c              ADDS     r1,r1,#0x4c
00006c  6008              STR      r0,[r1,#0]
;;;24     }
00006e  bd10              POP      {r4,pc}
;;;25     //时钟设置函数
                          ENDP

                  |L1.112|
                          DCD      0xe000ef50
                  |L1.116|
                          DCD      0xe000ed14

                          AREA ||i.Get_DCahceSta||, CODE, READONLY, ALIGN=2

                  Get_DCahceSta PROC
;;;102    //返回值:0 关闭，1 打开
;;;103    u8 Get_DCahceSta(void)
000000  4902              LDR      r1,|L2.12|
;;;104    {
;;;105        u8 sta;
;;;106        sta=((SCB->CCR)>>16)&0X01;
000002  6809              LDR      r1,[r1,#0]
000004  f3c14000          UBFX     r0,r1,#16,#1
;;;107        return sta;
;;;108    }
000008  4770              BX       lr
;;;109    
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      0xe000ed14

                          AREA ||i.Get_ICahceSta||, CODE, READONLY, ALIGN=2

                  Get_ICahceSta PROC
;;;93     //返回值:0 关闭，1 打开
;;;94     u8 Get_ICahceSta(void)
000000  4902              LDR      r1,|L3.12|
;;;95     {
;;;96         u8 sta;
;;;97         sta=((SCB->CCR)>>17)&0X01;
000002  6809              LDR      r1,[r1,#0]
000004  f3c14040          UBFX     r0,r1,#17,#1
;;;98         return sta;
;;;99     }
000008  4770              BX       lr
;;;100    
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0xe000ed14

                          AREA ||i.SCB_EnableDCache||, CODE, READONLY, ALIGN=2

                  SCB_EnableDCache PROC
;;;2122     */
;;;2123   __STATIC_INLINE void SCB_EnableDCache (void)
000000  b510              PUSH     {r4,lr}
;;;2124   {
;;;2125     #if (__DCACHE_PRESENT == 1U)
;;;2126       uint32_t ccsidr;
;;;2127       uint32_t sets;
;;;2128       uint32_t ways;
;;;2129   
;;;2130       SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
000002  2300              MOVS     r3,#0
000004  4c23              LDR      r4,|L4.148|
000006  6023              STR      r3,[r4,#0]
;;;2131       __DSB();
000008  bf00              NOP      
00000a  bf00              NOP      
00000c  bf00              NOP      
00000e  f3bf8f4f          DSB      
000012  bf00              NOP      
000014  bf00              NOP      
000016  bf00              NOP      
;;;2132   
;;;2133       ccsidr = SCB->CCSIDR;
000018  1f23              SUBS     r3,r4,#4
00001a  6818              LDR      r0,[r3,#0]
;;;2134   
;;;2135                                               /* invalidate D-Cache */
;;;2136       sets = (uint32_t)(CCSIDR_SETS(ccsidr));
00001c  f3c0314e          UBFX     r1,r0,#13,#15
;;;2137       do {
000020  bf00              NOP      
                  |L4.34|
;;;2138         ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
000022  f3c002c9          UBFX     r2,r0,#3,#10
;;;2139         do {
000026  bf00              NOP      
                  |L4.40|
;;;2140           SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
000028  f64373e0          MOV      r3,#0x3fe0
00002c  ea031341          AND      r3,r3,r1,LSL #5
000030  f04f4440          MOV      r4,#0xc0000000
000034  ea047482          AND      r4,r4,r2,LSL #30
000038  4323              ORRS     r3,r3,r4
00003a  4c17              LDR      r4,|L4.152|
00003c  6023              STR      r3,[r4,#0]
;;;2141                         ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
;;;2142           #if defined ( __CC_ARM )
;;;2143             __schedule_barrier();
00003e  bf00              NOP      
000040  bf00              NOP      
;;;2144           #endif
;;;2145         } while (ways--);
000042  0013              MOVS     r3,r2
000044  f1a20201          SUB      r2,r2,#1
000048  d1ee              BNE      |L4.40|
;;;2146       } while(sets--);
00004a  000b              MOVS     r3,r1
00004c  f1a10101          SUB      r1,r1,#1
000050  d1e7              BNE      |L4.34|
;;;2147       __DSB();
000052  bf00              NOP      
000054  bf00              NOP      
000056  bf00              NOP      
000058  f3bf8f4f          DSB      
00005c  bf00              NOP      
00005e  bf00              NOP      
000060  bf00              NOP      
;;;2148   
;;;2149       SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
000062  4b0c              LDR      r3,|L4.148|
000064  3b70              SUBS     r3,r3,#0x70
000066  681b              LDR      r3,[r3,#0]
000068  f4433380          ORR      r3,r3,#0x10000
00006c  4c09              LDR      r4,|L4.148|
00006e  3c70              SUBS     r4,r4,#0x70
000070  6023              STR      r3,[r4,#0]
;;;2150   
;;;2151       __DSB();
000072  bf00              NOP      
000074  bf00              NOP      
000076  bf00              NOP      
000078  f3bf8f4f          DSB      
00007c  bf00              NOP      
00007e  bf00              NOP      
000080  bf00              NOP      
;;;2152       __ISB();
000082  bf00              NOP      
000084  bf00              NOP      
000086  bf00              NOP      
000088  f3bf8f6f          ISB      
00008c  bf00              NOP      
00008e  bf00              NOP      
000090  bf00              NOP      
;;;2153     #endif
;;;2154   }
000092  bd10              POP      {r4,pc}
;;;2155   
                          ENDP

                  |L4.148|
                          DCD      0xe000ed84
                  |L4.152|
                          DCD      0xe000ef60

                          AREA ||i.Stm32_Clock_Init||, CODE, READONLY, ALIGN=2

                  Stm32_Clock_Init PROC
;;;43     //返回值:0,成功;1,失败
;;;44     void Stm32_Clock_Init(u32 plln,u32 pllm,u32 pllp,u32 pllq)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;45     {
000004  b094              SUB      sp,sp,#0x50
000006  4605              MOV      r5,r0
000008  4688              MOV      r8,r1
00000a  4616              MOV      r6,r2
00000c  461f              MOV      r7,r3
;;;46         HAL_StatusTypeDef ret = HAL_OK;
00000e  2400              MOVS     r4,#0
;;;47         RCC_OscInitTypeDef RCC_OscInitStructure; 
;;;48         RCC_ClkInitTypeDef RCC_ClkInitStructure;
;;;49     	
;;;50         __HAL_RCC_PWR_CLK_ENABLE(); //使能PWR时钟
000010  bf00              NOP      
000012  4826              LDR      r0,|L5.172|
000014  6800              LDR      r0,[r0,#0]
000016  f0405080          ORR      r0,r0,#0x10000000
00001a  4924              LDR      r1,|L5.172|
00001c  6008              STR      r0,[r1,#0]
00001e  4608              MOV      r0,r1
000020  6800              LDR      r0,[r0,#0]
000022  f0005080          AND      r0,r0,#0x10000000
000026  9001              STR      r0,[sp,#4]
000028  bf00              NOP      
00002a  bf00              NOP      
;;;51      
;;;52         __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);//设置调压器输出电压级别，以便在器件未以最大频率工作
00002c  bf00              NOP      
00002e  4820              LDR      r0,|L5.176|
000030  6800              LDR      r0,[r0,#0]
000032  f4404040          ORR      r0,r0,#0xc000
000036  491e              LDR      r1,|L5.176|
000038  6008              STR      r0,[r1,#0]
00003a  4608              MOV      r0,r1
00003c  6800              LDR      r0,[r0,#0]
00003e  f4004040          AND      r0,r0,#0xc000
000042  9001              STR      r0,[sp,#4]
000044  bf00              NOP      
000046  bf00              NOP      
;;;53           
;;;54         RCC_OscInitStructure.OscillatorType=RCC_OSCILLATORTYPE_HSE;    //时钟源为HSE
000048  2001              MOVS     r0,#1
00004a  9007              STR      r0,[sp,#0x1c]
;;;55         RCC_OscInitStructure.HSEState=RCC_HSE_ON;                      //打开HSE
00004c  0400              LSLS     r0,r0,#16
00004e  9008              STR      r0,[sp,#0x20]
;;;56         RCC_OscInitStructure.PLL.PLLState=RCC_PLL_ON;				   //打开PLL
000050  2002              MOVS     r0,#2
000052  900d              STR      r0,[sp,#0x34]
;;;57         RCC_OscInitStructure.PLL.PLLSource=RCC_PLLSOURCE_HSE;          //PLL时钟源选择HSE
000054  0541              LSLS     r1,r0,#21
000056  910e              STR      r1,[sp,#0x38]
;;;58         RCC_OscInitStructure.PLL.PLLM=pllm;	//主PLL和音频PLL分频系数(PLL之前的分频)
000058  f8cd803c          STR      r8,[sp,#0x3c]
;;;59         RCC_OscInitStructure.PLL.PLLN=plln; //主PLL倍频系数(PLL倍频)
00005c  9510              STR      r5,[sp,#0x40]
;;;60         RCC_OscInitStructure.PLL.PLLP=pllp; //系统时钟的主PLL分频系数(PLL之后的分频)
00005e  9611              STR      r6,[sp,#0x44]
;;;61         RCC_OscInitStructure.PLL.PLLQ=pllq; //USB/SDIO/随机数产生器等的主PLL分频系数(PLL之后的分频)
000060  9712              STR      r7,[sp,#0x48]
;;;62         ret=HAL_RCC_OscConfig(&RCC_OscInitStructure);//初始化
000062  a807              ADD      r0,sp,#0x1c
000064  f7fffffe          BL       HAL_RCC_OscConfig
000068  4604              MOV      r4,r0
;;;63         if(ret!=HAL_OK) while(1);
00006a  b10c              CBZ      r4,|L5.112|
00006c  bf00              NOP      
                  |L5.110|
00006e  e7fe              B        |L5.110|
                  |L5.112|
;;;64         
;;;65         ret=HAL_PWREx_EnableOverDrive(); //开启Over-Driver功能
000070  f7fffffe          BL       HAL_PWREx_EnableOverDrive
000074  4604              MOV      r4,r0
;;;66         if(ret!=HAL_OK) while(1);
000076  b10c              CBZ      r4,|L5.124|
000078  bf00              NOP      
                  |L5.122|
00007a  e7fe              B        |L5.122|
                  |L5.124|
;;;67         
;;;68         //选中PLL作为系统时钟源并且配置HCLK,PCLK1和PCLK2
;;;69         RCC_ClkInitStructure.ClockType=(RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2);
00007c  200f              MOVS     r0,#0xf
00007e  9002              STR      r0,[sp,#8]
;;;70         RCC_ClkInitStructure.SYSCLKSource=RCC_SYSCLKSOURCE_PLLCLK;//设置系统时钟时钟源为PLL
000080  2002              MOVS     r0,#2
000082  9003              STR      r0,[sp,#0xc]
;;;71         RCC_ClkInitStructure.AHBCLKDivider=RCC_SYSCLK_DIV1;//AHB分频系数为1
000084  2000              MOVS     r0,#0
000086  9004              STR      r0,[sp,#0x10]
;;;72         RCC_ClkInitStructure.APB1CLKDivider=RCC_HCLK_DIV4;//APB1分频系数为4
000088  f44f50a0          MOV      r0,#0x1400
00008c  9005              STR      r0,[sp,#0x14]
;;;73         RCC_ClkInitStructure.APB2CLKDivider=RCC_HCLK_DIV2;//APB2分频系数为2
00008e  f44f5080          MOV      r0,#0x1000
000092  9006              STR      r0,[sp,#0x18]
;;;74         
;;;75         ret=HAL_RCC_ClockConfig(&RCC_ClkInitStructure,FLASH_LATENCY_7);//同时设置FLASH延时周期为7WS，也就是8个CPU周期。
000094  2107              MOVS     r1,#7
000096  a802              ADD      r0,sp,#8
000098  f7fffffe          BL       HAL_RCC_ClockConfig
00009c  4604              MOV      r4,r0
;;;76         if(ret!=HAL_OK) while(1);
00009e  b10c              CBZ      r4,|L5.164|
0000a0  bf00              NOP      
                  |L5.162|
0000a2  e7fe              B        |L5.162|
                  |L5.164|
;;;77     }
0000a4  b014              ADD      sp,sp,#0x50
0000a6  e8bd81f0          POP      {r4-r8,pc}
;;;78     
                          ENDP

0000aa  0000              DCW      0x0000
                  |L5.172|
                          DCD      0x40023840
                  |L5.176|
                          DCD      0x40007000

;*** Start embedded assembler ***

#line 1 "..\\SYSTEM\\sys\\sys.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_sys_c_78412d7e____REV16|
#line 388 "..\\CORE\\cmsis_armcc.h"
|__asm___5_sys_c_78412d7e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_sys_c_78412d7e____REVSH|
#line 402
|__asm___5_sys_c_78412d7e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_sys_c_78412d7e____RRX|
#line 587
|__asm___5_sys_c_78412d7e____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |WFI_SET|
#line 112 "..\\SYSTEM\\sys\\sys.c"
|WFI_SET| PROC
#line 113

 WFI
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |INTX_DISABLE|
#line 117
|INTX_DISABLE| PROC
#line 118

 CPSID I
 BX LR 
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |INTX_ENABLE|
#line 123
|INTX_ENABLE| PROC
#line 124

 CPSIE I
 BX LR 
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |MSR_MSP|
#line 130
|MSR_MSP| PROC
#line 131

 MSR MSP, r0  
 BX r14
	ENDP

;*** End   embedded assembler ***
