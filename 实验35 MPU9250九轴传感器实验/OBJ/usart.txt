; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\usart.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\usart.d --cpu=Cortex-M7.fp.dp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\OBJ -I..\USER -I..\HALLIB\STM32F7xx_HAL_Driver\Inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\SDRAM -I..\HARDWARE\IIC -I..\HARDWARE\24CXX -I..\HARDWARE\MPU9250 -I..\HARDWARE\DHT11 -I..\HARDWARE\MPU -I..\USMART -I..\DMP\driver\eMPL -I..\DMP\driver\include -I..\DMP\driver\stm32L -I..\DMP\eMPL-hal -I..\DMP\mllite -I..\DMP\mpl -I..\UCOSIII -I..\UCOSIII\UCOS-BSP -I..\UCOSIII\UCOS-CONFIG -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\uC-CPU\ARM-Cortex-M4\RealView -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-CPU -I..\HARDWARE\MY_FUNCTION -I..\USER -I..\HARDWARE\CRC -I..\HARDWARE\DMA -I..\HARDWARE\HEART_BEAT -I..\HARDWARE\RECEIVE_ANALYZE -I..\HARDWARE\FEED_BACK -I..\HARDWARE\DATA -I"D:\1111111\32F4\Slam car\实验35 MPU9250九轴传感器实验\USER\RTE" -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0 -IF:\Keil_v5\ARM\CMSIS\Include -IF:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__UVISION_VERSION=514 -DSTM32F767xx -DSTM32F767xx -DUSE_HAL_DRIVER -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=..\obj\usart.crf ..\SYSTEM\usart\usart.c]
                          THUMB

                          AREA ||i.HAL_UART_MspInit||, CODE, READONLY, ALIGN=2

                  HAL_UART_MspInit PROC
;;;80     
;;;81     void HAL_UART_MspInit(UART_HandleTypeDef *huart)
000000  b510              PUSH     {r4,lr}
;;;82     {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;83         //GPIO端口设置
;;;84     	GPIO_InitTypeDef GPIO_Initure;
;;;85     	
;;;86     	if(huart->Instance==USART1)//如果是串口1，进行串口1 MSP初始化
000006  4923              LDR      r1,|L1.148|
000008  6820              LDR      r0,[r4,#0]
00000a  4288              CMP      r0,r1
00000c  d140              BNE      |L1.144|
;;;87     	{
;;;88     		__HAL_RCC_GPIOA_CLK_ENABLE();			//使能GPIOA时钟
00000e  bf00              NOP      
000010  4821              LDR      r0,|L1.152|
000012  6800              LDR      r0,[r0,#0]
000014  f0400001          ORR      r0,r0,#1
000018  491f              LDR      r1,|L1.152|
00001a  6008              STR      r0,[r1,#0]
00001c  4608              MOV      r0,r1
00001e  6800              LDR      r0,[r0,#0]
000020  f0000001          AND      r0,r0,#1
000024  9000              STR      r0,[sp,#0]
000026  bf00              NOP      
000028  bf00              NOP      
;;;89     		__HAL_RCC_USART1_CLK_ENABLE();			//使能USART1时钟
00002a  bf00              NOP      
00002c  481a              LDR      r0,|L1.152|
00002e  3014              ADDS     r0,r0,#0x14
000030  6800              LDR      r0,[r0,#0]
000032  f0400010          ORR      r0,r0,#0x10
000036  4918              LDR      r1,|L1.152|
000038  3114              ADDS     r1,r1,#0x14
00003a  6008              STR      r0,[r1,#0]
00003c  4608              MOV      r0,r1
00003e  6800              LDR      r0,[r0,#0]
000040  f0000010          AND      r0,r0,#0x10
000044  9000              STR      r0,[sp,#0]
000046  bf00              NOP      
000048  bf00              NOP      
;;;90     	
;;;91     		GPIO_Initure.Pin=GPIO_PIN_9;			//PA9
00004a  1548              ASRS     r0,r1,#21
00004c  9001              STR      r0,[sp,#4]
;;;92     		GPIO_Initure.Mode=GPIO_MODE_AF_PP;		//复用推挽输出
00004e  2002              MOVS     r0,#2
000050  9002              STR      r0,[sp,#8]
;;;93     		GPIO_Initure.Pull=GPIO_PULLUP;			//上拉
000052  2001              MOVS     r0,#1
000054  9003              STR      r0,[sp,#0xc]
;;;94     		GPIO_Initure.Speed=GPIO_SPEED_FAST;		//高速
000056  2002              MOVS     r0,#2
000058  9004              STR      r0,[sp,#0x10]
;;;95     		GPIO_Initure.Alternate=GPIO_AF7_USART1;	//复用为USART1
00005a  2007              MOVS     r0,#7
00005c  9005              STR      r0,[sp,#0x14]
;;;96     		HAL_GPIO_Init(GPIOA,&GPIO_Initure);	   	//初始化PA9
00005e  a901              ADD      r1,sp,#4
000060  480e              LDR      r0,|L1.156|
000062  f7fffffe          BL       HAL_GPIO_Init
;;;97     
;;;98     		GPIO_Initure.Pin=GPIO_PIN_10;			//PA10
000066  f44f6080          MOV      r0,#0x400
00006a  9001              STR      r0,[sp,#4]
;;;99     		HAL_GPIO_Init(GPIOA,&GPIO_Initure);	   	//初始化PA10
00006c  a901              ADD      r1,sp,#4
00006e  480b              LDR      r0,|L1.156|
000070  f7fffffe          BL       HAL_GPIO_Init
;;;100    		
;;;101    #if EN_USART1_RX
;;;102    		__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);		//开启接收中断
000074  6820              LDR      r0,[r4,#0]
000076  6800              LDR      r0,[r0,#0]
000078  f0400020          ORR      r0,r0,#0x20
00007c  6821              LDR      r1,[r4,#0]
00007e  6008              STR      r0,[r1,#0]
;;;103    		HAL_NVIC_EnableIRQ(USART1_IRQn);				//使能USART1中断通道
000080  2025              MOVS     r0,#0x25
000082  f7fffffe          BL       HAL_NVIC_EnableIRQ
;;;104    		HAL_NVIC_SetPriority(USART1_IRQn,3,3);			//抢占优先级3，子优先级3
000086  2203              MOVS     r2,#3
000088  4611              MOV      r1,r2
00008a  2025              MOVS     r0,#0x25
00008c  f7fffffe          BL       HAL_NVIC_SetPriority
                  |L1.144|
;;;105    #endif	
;;;106    	}
;;;107    
;;;108    }
000090  b006              ADD      sp,sp,#0x18
000092  bd10              POP      {r4,pc}
;;;109    //串口1中断服务程序
                          ENDP

                  |L1.148|
                          DCD      0x40011000
                  |L1.152|
                          DCD      0x40023830
                  |L1.156|
                          DCD      0x40020000

                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;109    //串口1中断服务程序
;;;110    void USART1_IRQHandler(void)                	
000000  b508              PUSH     {r3,lr}
;;;111    { 
;;;112    	u8 Res;
;;;113    #if SYSTEM_SUPPORT_OS	 	//使用OS
;;;114    	OSIntEnter();    
000002  f7fffffe          BL       OSIntEnter
;;;115    #endif
;;;116    	if((__HAL_UART_GET_FLAG(&UART1_Handler,UART_FLAG_RXNE)!=RESET))  //接收中断(接收到的数据必须是0x0d 0x0a结尾)
000006  4825              LDR      r0,|L2.156|
000008  6800              LDR      r0,[r0,#0]  ; UART1_Handler
00000a  69c0              LDR      r0,[r0,#0x1c]
00000c  f3c01040          UBFX     r0,r0,#5,#1
000010  b348              CBZ      r0,|L2.102|
;;;117    	{
;;;118            HAL_UART_Receive(&UART1_Handler,&Res,1,1000); 
000012  f44f737a          MOV      r3,#0x3e8
000016  2201              MOVS     r2,#1
000018  4669              MOV      r1,sp
00001a  4820              LDR      r0,|L2.156|
00001c  f7fffffe          BL       HAL_UART_Receive
;;;119    		if((USART_RX_STA&0x8000)==0)//接收未完成
000020  481f              LDR      r0,|L2.160|
000022  8800              LDRH     r0,[r0,#0]  ; USART_RX_STA
000024  f4004000          AND      r0,r0,#0x8000
000028  b9e8              CBNZ     r0,|L2.102|
;;;120    		{
;;;121    			if(USART_RX_STA&0x4000)//接收到了0x0d
00002a  481d              LDR      r0,|L2.160|
00002c  8800              LDRH     r0,[r0,#0]  ; USART_RX_STA
00002e  f4004080          AND      r0,r0,#0x4000
000032  b170              CBZ      r0,|L2.82|
;;;122    			{
;;;123    				if(Res!=0x0a)USART_RX_STA=0;//接收错误,重新开始
000034  f89d0000          LDRB     r0,[sp,#0]
000038  280a              CMP      r0,#0xa
00003a  d003              BEQ      |L2.68|
00003c  2000              MOVS     r0,#0
00003e  4918              LDR      r1,|L2.160|
000040  8008              STRH     r0,[r1,#0]
000042  e024              B        |L2.142|
                  |L2.68|
;;;124    				else USART_RX_STA|=0x8000;	//接收完成了 
000044  4816              LDR      r0,|L2.160|
000046  8800              LDRH     r0,[r0,#0]  ; USART_RX_STA
000048  f4404000          ORR      r0,r0,#0x8000
00004c  4914              LDR      r1,|L2.160|
00004e  8008              STRH     r0,[r1,#0]
000050  e01d              B        |L2.142|
                  |L2.82|
;;;125    			}
;;;126    			else //还没收到0X0D
;;;127    			{	
;;;128    				if(Res==0x0d)USART_RX_STA|=0x4000;
000052  f89d0000          LDRB     r0,[sp,#0]
000056  280d              CMP      r0,#0xd
000058  d106              BNE      |L2.104|
00005a  4811              LDR      r0,|L2.160|
00005c  8800              LDRH     r0,[r0,#0]  ; USART_RX_STA
00005e  f4404080          ORR      r0,r0,#0x4000
000062  490f              LDR      r1,|L2.160|
000064  8008              STRH     r0,[r1,#0]
                  |L2.102|
000066  e012              B        |L2.142|
                  |L2.104|
;;;129    				else
;;;130    				{
;;;131    					USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;
000068  f89d0000          LDRB     r0,[sp,#0]
00006c  490c              LDR      r1,|L2.160|
00006e  8809              LDRH     r1,[r1,#0]  ; USART_RX_STA
000070  f3c1010d          UBFX     r1,r1,#0,#14
000074  4a0b              LDR      r2,|L2.164|
000076  5450              STRB     r0,[r2,r1]
;;;132    					USART_RX_STA++;
000078  4809              LDR      r0,|L2.160|
00007a  8800              LDRH     r0,[r0,#0]  ; USART_RX_STA
00007c  1c40              ADDS     r0,r0,#1
00007e  4908              LDR      r1,|L2.160|
000080  8008              STRH     r0,[r1,#0]
;;;133    					if(USART_RX_STA>(USART_REC_LEN-1))USART_RX_STA=0;//接收数据错误,重新开始接收	  
000082  4608              MOV      r0,r1
000084  8800              LDRH     r0,[r0,#0]  ; USART_RX_STA
000086  28c7              CMP      r0,#0xc7
000088  dd01              BLE      |L2.142|
00008a  2000              MOVS     r0,#0
00008c  8008              STRH     r0,[r1,#0]
                  |L2.142|
;;;134    				}		 
;;;135    			}
;;;136    		}   		 
;;;137    	}
;;;138    	HAL_UART_IRQHandler(&UART1_Handler);	
00008e  4803              LDR      r0,|L2.156|
000090  f7fffffe          BL       HAL_UART_IRQHandler
;;;139    #if SYSTEM_SUPPORT_OS	 	//使用OS
;;;140    	OSIntExit();  											 
000094  f7fffffe          BL       OSIntExit
;;;141    #endif
;;;142    } 
000098  bd08              POP      {r3,pc}
;;;143    #endif	
                          ENDP

00009a  0000              DCW      0x0000
                  |L2.156|
                          DCD      UART1_Handler
                  |L2.160|
                          DCD      USART_RX_STA
                  |L2.164|
                          DCD      USART_RX_BUF

                          AREA ||i._sys_exit||, CODE, READONLY, ALIGN=1

                  _sys_exit PROC
;;;32     //定义_sys_exit()以避免使用半主机模式    
;;;33     void _sys_exit(int x) 
000000  bf00              NOP      
;;;34     { 
;;;35     	x = x; 
;;;36     } 
000002  4770              BX       lr
;;;37     //重定义fputc函数 
                          ENDP


                          AREA ||i.fputc||, CODE, READONLY, ALIGN=2

                  fputc PROC
;;;37     //重定义fputc函数 
;;;38     int fputc(int ch, FILE *f)
000000  bf00              NOP      
                  |L4.2|
;;;39     { 	
;;;40     	while((USART1->ISR&0X40)==0);//循环发送,直到发送完毕   
000002  4a05              LDR      r2,|L4.24|
000004  69d2              LDR      r2,[r2,#0x1c]
000006  f0020240          AND      r2,r2,#0x40
00000a  2a00              CMP      r2,#0
00000c  d0f9              BEQ      |L4.2|
;;;41     	USART1->TDR=(u8)ch;      
00000e  b2c2              UXTB     r2,r0
000010  4b01              LDR      r3,|L4.24|
000012  629a              STR      r2,[r3,#0x28]
;;;42     	return ch;
;;;43     }
000014  4770              BX       lr
;;;44     #endif 
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      0x40011000

                          AREA ||i.uart_init||, CODE, READONLY, ALIGN=2

                  uart_init PROC
;;;60     //bound:波特率
;;;61     void uart_init(u32 bound)
000000  b510              PUSH     {r4,lr}
;;;62     {	
000002  4604              MOV      r4,r0
;;;63     	//UART 初始化设置
;;;64     	UART1_Handler.Instance=USART1;					    //USART1
000004  4807              LDR      r0,|L5.36|
000006  4908              LDR      r1,|L5.40|
000008  6008              STR      r0,[r1,#0]  ; UART1_Handler
;;;65     	UART1_Handler.Init.BaudRate=bound;				    //波特率
00000a  4608              MOV      r0,r1
00000c  6044              STR      r4,[r0,#4]  ; UART1_Handler
;;;66     	UART1_Handler.Init.WordLength=UART_WORDLENGTH_8B;   //字长为8位数据格式
00000e  2100              MOVS     r1,#0
000010  6081              STR      r1,[r0,#8]
;;;67     	UART1_Handler.Init.StopBits=UART_STOPBITS_1;	    //一个停止位
000012  60c1              STR      r1,[r0,#0xc]
;;;68     	UART1_Handler.Init.Parity=UART_PARITY_NONE;		    //无奇偶校验位
000014  6101              STR      r1,[r0,#0x10]
;;;69     	UART1_Handler.Init.HwFlowCtl=UART_HWCONTROL_NONE;   //无硬件流控
000016  6181              STR      r1,[r0,#0x18]
;;;70     	UART1_Handler.Init.Mode=UART_MODE_TX_RX;		    //收发模式
000018  210c              MOVS     r1,#0xc
00001a  6141              STR      r1,[r0,#0x14]
;;;71     	HAL_UART_Init(&UART1_Handler);					    //HAL_UART_Init()会使能UART1
00001c  f7fffffe          BL       HAL_UART_Init
;;;72     	
;;;73     	//HAL_UART_Receive_IT(&UART1_Handler, (u8 *)aRxBuffer, RXBUFFERSIZE);//该函数会开启接收中断：标志位UART_IT_RXNE，并且设置接收缓冲以及接收缓冲接收最大数据量
;;;74       
;;;75     }
000020  bd10              POP      {r4,pc}
;;;76     
                          ENDP

000022  0000              DCW      0x0000
                  |L5.36|
                          DCD      0x40011000
                  |L5.40|
                          DCD      UART1_Handler

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  USART_RX_BUF
                          %        200
                  UART1_Handler
                          %        112

                          AREA ||.data||, DATA, ALIGN=2

                  __stdout
                          DCD      0x00000000
                  USART_RX_STA
000004  0000              DCW      0x0000
                  aRxBuffer
000006  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\SYSTEM\\usart\\usart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_9275e5e5____REV16|
#line 388 "..\\CORE\\cmsis_armcc.h"
|__asm___7_usart_c_9275e5e5____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_9275e5e5____REVSH|
#line 402
|__asm___7_usart_c_9275e5e5____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_9275e5e5____RRX|
#line 587
|__asm___7_usart_c_9275e5e5____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
